generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                      String                   @id @default(uuid())
  name                    String
  domain                  String?                  @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now())
  approvals               Approval[]
  auditLogs               AuditLog[]
  branches                Branch[]
  dashboards              Dashboard[]
  departments             Department[]
  employees               Employee[]
  holidays                Holiday[]
  integrationLogs         IntegrationLog[]
  integrations            Integration[]
  leaveBalances           LeaveBalance[]
  leavePolicies           LeavePolicy[]
  leaveRequests           LeaveRequest[]
  leaveTypes              LeaveType[]
  payStubs                PayStub[]
  payrollItems            PayrollItem[]
  payrollPeriods          PayrollPeriod[]
  payrollSettings         PayrollSettings?
  payrolls                Payroll[]
  performanceFeedback     PerformanceFeedback[]
  performanceGoals        PerformanceGoal[]
  performanceRatings      PerformanceRating[]
  performanceReviewCycles PerformanceReviewCycle[]
  performanceReviews      PerformanceReview[]
  reportInstances         ReportInstance[]
  reportTemplates         ReportTemplate[]
  salaryAdvancePolicies   SalaryAdvancePolicy[]
  salaryAdvanceRepayments SalaryAdvanceRepayment[]
  salaryAdvanceRequests   SalaryAdvanceRequest[]
  securityAlerts          SecurityAlert[]
  securitySettings        SecuritySettings?
  taxBrackets             TaxBracket[]
  trainings               Training[]
  users                   User[]
  workflowStats           WorkflowStats[]
  workflowTemplates       WorkflowTemplate[]
  workflows               Workflow[]
  experimentalFeatures    ExperimentalFeature[]

  @@map("tenants")
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  passwordHash       String
  firstName          String
  lastName           String
  role               String        @default("EMPLOYEE")
  status             String        @default("ACTIVE")
  lastLogin          DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
  tenantId           String
  employeeId         String?       @unique
  auditLogs          AuditLog[]
  managedDepartments Department[]  @relation("Department_managerId")
  sessions           UserSession[]
  employee           Employee?     @relation(fields: [employeeId], references: [id])
  tenant             Tenant        @relation(fields: [tenantId], references: [id])

  @@index([email])
  @@index([tenantId])
  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("user_sessions")
}

model Department {
  id            String     @id @default(uuid())
  name          String
  description   String?
  managerId     String?
  employeeCount Int        @default(0)
  status        String     @default("ACTIVE")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  tenantId      String
  branches      Branch[]
  manager       User?      @relation("Department_managerId", fields: [managerId], references: [id])
  tenant        Tenant     @relation(fields: [tenantId], references: [id])
  employees     Employee[]

  @@unique([name, tenantId])
  @@index([tenantId])
  @@map("departments")
}

model Branch {
  id            String     @id @default(uuid())
  name          String
  location      String?
  address       String?
  managerId     String?
  departmentId  String
  employeeCount Int        @default(0)
  status        String     @default("ACTIVE")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  tenantId      String
  department    Department @relation(fields: [departmentId], references: [id])
  tenant        Tenant     @relation(fields: [tenantId], references: [id])
  employees     Employee[]

  @@unique([name, tenantId])
  @@index([departmentId])
  @@index([tenantId])
  @@map("branches")
}

model Employee {
  id                    String                 @id @default(uuid())
  employeeNumber        String                 @unique
  firstName             String
  lastName              String
  email                 String                 @unique
  phone                 String?
  address               String?
  position              String
  departmentId          String
  branchId              String?
  salary                Float?
  hireDate              DateTime
  terminationDate       DateTime?
  status                String                 @default("ACTIVE")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now())
  tenantId              String
  branch                Branch?                @relation(fields: [branchId], references: [id])
  department            Department             @relation(fields: [departmentId], references: [id])
  tenant                Tenant                 @relation(fields: [tenantId], references: [id])
  leaveBalances         LeaveBalance[]
  leaveRequests         LeaveRequest[]
  payStubs              PayStub[]
  payrolls              Payroll[]
  performanceGoals      PerformanceGoal[]
  performanceReviews    PerformanceReview[]
  salaryAdvanceRequests SalaryAdvanceRequest[]
  trainingEnrollments   TrainingEnrollment[]
  user                  User?

  @@index([departmentId])
  @@index([branchId])
  @@index([tenantId])
  @@map("employees")
}

model PayrollPeriod {
  id                      String                   @id @default(uuid())
  name                    String
  startDate               DateTime
  endDate                 DateTime
  payDate                 DateTime
  status                  String                   @default("DRAFT")
  description             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now())
  tenantId                String
  payStubs                PayStub[]
  tenant                  Tenant                   @relation(fields: [tenantId], references: [id])
  payrolls                Payroll[]
  salaryAdvanceRepayments SalaryAdvanceRepayment[]

  @@unique([name, tenantId])
  @@index([tenantId])
  @@index([startDate, endDate])
  @@map("payroll_periods")
}

model Payroll {
  id              String        @id @default(uuid())
  employeeId      String
  payrollPeriodId String
  basicSalary     Float
  grossSalary     Float
  totalDeductions Float
  netSalary       Float
  status          String        @default("DRAFT")
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  tenantId        String
  payStub         PayStub?
  payrollItems    PayrollItem[]
  employee        Employee      @relation(fields: [employeeId], references: [id])
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id])

  @@unique([employeeId, payrollPeriodId])
  @@index([employeeId])
  @@index([payrollPeriodId])
  @@index([tenantId])
  @@map("payrolls")
}

model PayrollItem {
  id          String   @id @default(uuid())
  payrollId   String
  type        String
  category    String
  name        String
  amount      Float
  isStatutory Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  tenantId    String
  payroll     Payroll  @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([payrollId])
  @@index([tenantId])
  @@index([type, category])
  @@map("payroll_items")
}

model TaxBracket {
  id            String   @id @default(uuid())
  name          String
  minAmount     Float
  maxAmount     Float?
  rate          Float
  fixedAmount   Float    @default(0)
  isActive      Boolean  @default(true)
  effectiveDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([effectiveDate])
  @@map("tax_brackets")
}

model PayStub {
  id              String        @id @default(uuid())
  employeeId      String
  payrollId       String        @unique
  payrollPeriodId String
  stubNumber      String        @unique
  generatedAt     DateTime      @default(now())
  pdfPath         String?
  status          String        @default("GENERATED")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  tenantId        String
  employee        Employee      @relation(fields: [employeeId], references: [id])
  payroll         Payroll       @relation(fields: [payrollId], references: [id])
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id])

  @@index([employeeId])
  @@index([payrollPeriodId])
  @@index([tenantId])
  @@map("pay_stubs")
}

model PayrollSettings {
  id                       String   @id @default(uuid())
  tenantId                 String   @unique
  companyName              String?
  kraPin                   String?
  nssfNumber               String?
  nhifNumber               String?
  companyAddress           String?
  companyCity              String?
  companyPostalCode        String?
  personalRelief           Float    @default(2400)
  overtimeMultiplier       Float    @default(1.5)
  workingDaysPerMonth      Int      @default(22)
  workingHoursPerDay       Int      @default(8)
  payFrequency             String   @default("monthly")
  payDay                   Int      @default(25)
  cutoffDay                Int      @default(24)
  requirePayrollApproval   Boolean  @default(true)
  approvalLevels           Int      @default(1)
  autoApproveThreshold     Float    @default(0)
  notifyEmployeesOnPayment Boolean  @default(true)
  sendPayslipsByEmail      Boolean  @default(true)
  bankName                 String?
  accountNumber            String?
  branchCode               String?
  swiftCode                String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now())
  tenant                   Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@map("payroll_settings")
}

model LeaveType {
  id            String         @id @default(uuid())
  name          String
  code          String
  description   String?
  color         String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  tenantId      String
  leaveBalances LeaveBalance[]
  leavePolicies LeavePolicy[]
  leaveRequests LeaveRequest[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id])

  @@unique([code, tenantId])
  @@index([tenantId])
  @@map("leave_types")
}

model LeavePolicy {
  id                   String    @id @default(uuid())
  leaveTypeId          String
  name                 String
  description          String?
  maxDaysPerYear       Int
  maxDaysPerRequest    Int?
  minDaysNotice        Int       @default(0)
  maxCarryForward      Int       @default(0)
  allowNegativeBalance Boolean   @default(false)
  requiresApproval     Boolean   @default(true)
  autoApprove          Boolean   @default(false)
  accrualRate          Float     @default(0)
  probationPeriodDays  Int       @default(0)
  isActive             Boolean   @default(true)
  effectiveDate        DateTime
  expiryDate           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  tenantId             String
  leaveType            LeaveType @relation(fields: [leaveTypeId], references: [id])
  tenant               Tenant    @relation(fields: [tenantId], references: [id])

  @@index([leaveTypeId])
  @@index([tenantId])
  @@index([effectiveDate])
  @@map("leave_policies")
}

model LeaveRequest {
  id              String    @id @default(uuid())
  employeeId      String
  leaveTypeId     String
  startDate       DateTime
  endDate         DateTime
  totalDays       Int
  reason          String?
  status          String    @default("PENDING")
  appliedAt       DateTime  @default(now())
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?
  cancelledAt     DateTime?
  cancelledBy     String?
  comments        String?
  attachments     String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  tenantId        String
  employee        Employee  @relation(fields: [employeeId], references: [id])
  leaveType       LeaveType @relation(fields: [leaveTypeId], references: [id])
  tenant          Tenant    @relation(fields: [tenantId], references: [id])

  @@index([employeeId])
  @@index([leaveTypeId])
  @@index([status])
  @@index([startDate, endDate])
  @@index([tenantId])
  @@map("leave_requests")
}

model LeaveBalance {
  id             String    @id @default(uuid())
  employeeId     String
  leaveTypeId    String
  year           Int
  allocated      Float
  used           Float     @default(0)
  pending        Float     @default(0)
  available      Float
  carriedForward Float     @default(0)
  accrued        Float     @default(0)
  lastUpdated    DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  tenantId       String
  employee       Employee  @relation(fields: [employeeId], references: [id])
  leaveType      LeaveType @relation(fields: [leaveTypeId], references: [id])
  tenant         Tenant    @relation(fields: [tenantId], references: [id])

  @@unique([employeeId, leaveTypeId, year])
  @@index([employeeId])
  @@index([leaveTypeId])
  @@index([year])
  @@index([tenantId])
  @@map("leave_balances")
}

model Holiday {
  id          String   @id @default(uuid())
  name        String
  date        DateTime
  type        String   @default("PUBLIC")
  description String?
  isRecurring Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([date])
  @@index([type])
  @@index([tenantId])
  @@map("holidays")
}

model PerformanceReviewCycle {
  id                 String              @id @default(uuid())
  name               String
  description        String?
  startDate          DateTime
  endDate            DateTime
  reviewDeadline     DateTime
  status             String              @default("DRAFT")
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  tenantId           String
  performanceGoals   PerformanceGoal[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  performanceReviews PerformanceReview[]

  @@unique([name, tenantId])
  @@index([tenantId])
  @@index([startDate, endDate])
  @@index([status])
  @@map("performance_review_cycles")
}

model PerformanceReview {
  id                      String                 @id @default(uuid())
  employeeId              String
  reviewCycleId           String
  reviewerId              String
  status                  String                 @default("DRAFT")
  selfAssessmentCompleted Boolean                @default(false)
  managerReviewCompleted  Boolean                @default(false)
  overallRating           Float?
  overallComments         String?
  strengths               String?
  areasForImprovement     String?
  developmentPlan         String?
  goals                   String?
  submittedAt             DateTime?
  completedAt             DateTime?
  approvedAt              DateTime?
  approvedBy              String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @default(now())
  tenantId                String
  performanceFeedback     PerformanceFeedback[]
  performanceRatings      PerformanceRating[]
  employee                Employee               @relation(fields: [employeeId], references: [id])
  reviewCycle             PerformanceReviewCycle @relation(fields: [reviewCycleId], references: [id])
  tenant                  Tenant                 @relation(fields: [tenantId], references: [id])

  @@unique([employeeId, reviewCycleId])
  @@index([employeeId])
  @@index([reviewCycleId])
  @@index([reviewerId])
  @@index([status])
  @@index([tenantId])
  @@map("performance_reviews")
}

model PerformanceGoal {
  id                  String                  @id @default(uuid())
  employeeId          String
  reviewCycleId       String?
  title               String
  description         String
  category            String                  @default("PERFORMANCE")
  priority            String                  @default("MEDIUM")
  targetDate          DateTime?
  status              String                  @default("ACTIVE")
  progress            Int                     @default(0)
  measurementCriteria String?
  achievedDate        DateTime?
  comments            String?
  createdBy           String
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @default(now())
  tenantId            String
  employee            Employee                @relation(fields: [employeeId], references: [id])
  reviewCycle         PerformanceReviewCycle? @relation(fields: [reviewCycleId], references: [id])
  tenant              Tenant                  @relation(fields: [tenantId], references: [id])

  @@index([employeeId])
  @@index([reviewCycleId])
  @@index([status])
  @@index([targetDate])
  @@index([tenantId])
  @@map("performance_goals")
}

model PerformanceRating {
  id                  String            @id @default(uuid())
  performanceReviewId String
  competency          String
  rating              Float
  maxRating           Float             @default(5)
  weight              Float             @default(1)
  comments            String?
  raterType           String            @default("MANAGER")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())
  tenantId            String
  performanceReview   PerformanceReview @relation(fields: [performanceReviewId], references: [id], onDelete: Cascade)
  tenant              Tenant            @relation(fields: [tenantId], references: [id])

  @@index([performanceReviewId])
  @@index([competency])
  @@index([raterType])
  @@index([tenantId])
  @@map("performance_ratings")
}

model PerformanceFeedback {
  id                  String            @id @default(uuid())
  performanceReviewId String
  feedbackType        String            @default("GENERAL")
  feedback            String
  isPrivate           Boolean           @default(false)
  providedBy          String
  providedAt          DateTime          @default(now())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())
  tenantId            String
  performanceReview   PerformanceReview @relation(fields: [performanceReviewId], references: [id], onDelete: Cascade)
  tenant              Tenant            @relation(fields: [tenantId], references: [id])

  @@index([performanceReviewId])
  @@index([feedbackType])
  @@index([providedBy])
  @@index([tenantId])
  @@map("performance_feedback")
}

model ReportTemplate {
  id              String           @id @default(uuid())
  name            String
  description     String?
  category        String
  type            String           @default("STANDARD")
  query           String
  parameters      Json?
  columns         Json
  filters         Json?
  groupBy         Json?
  sortBy          Json?
  chartConfig     Json?
  isActive        Boolean          @default(true)
  isPublic        Boolean          @default(false)
  createdBy       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  tenantId        String
  reportInstances ReportInstance[]
  tenant          Tenant           @relation(fields: [tenantId], references: [id])

  @@index([category])
  @@index([type])
  @@index([tenantId])
  @@index([isActive])
  @@map("report_templates")
}

model ReportInstance {
  id             String         @id @default(uuid())
  templateId     String
  name           String
  description    String?
  parameters     Json?
  filters        Json?
  status         String         @default("PENDING")
  data           Json?
  filePath       String?
  fileFormat     String         @default("JSON")
  fileSize       Int?
  recordCount    Int?
  generatedBy    String
  generatedAt    DateTime       @default(now())
  expiresAt      DateTime?
  isScheduled    Boolean        @default(false)
  scheduleConfig Json?
  error          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  tenantId       String
  template       ReportTemplate @relation(fields: [templateId], references: [id])
  tenant         Tenant         @relation(fields: [tenantId], references: [id])

  @@index([templateId])
  @@index([status])
  @@index([generatedBy])
  @@index([generatedAt])
  @@index([tenantId])
  @@index([isScheduled])
  @@map("report_instances")
}

model Dashboard {
  id              String   @id @default(uuid())
  name            String
  description     String?
  layout          Json
  widgets         Json
  filters         Json?
  refreshInterval Int?
  isDefault       Boolean  @default(false)
  isPublic        Boolean  @default(false)
  allowedRoles    String[]
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([createdBy])
  @@index([isDefault])
  @@index([isPublic])
  @@map("dashboards")
}

model SalaryAdvancePolicy {
  id                         String    @id @default(uuid())
  name                       String
  description                String?
  maxAdvancePercentage       Float     @default(25)
  maxAdvanceAmount           Float?
  minServiceMonths           Int       @default(3)
  maxAdvancesPerYear         Int       @default(2)
  interestRate               Float     @default(0)
  requiresApproval           Boolean   @default(true)
  autoApprove                Boolean   @default(false)
  isActive                   Boolean   @default(true)
  effectiveDate              DateTime
  expiryDate                 DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @default(now())
  tenantId                   String
  monthlyDeductionPercentage Float     @default(100)
  tenant                     Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([effectiveDate])
  @@index([isActive])
  @@map("salary_advance_policies")
}

model SalaryAdvanceRequest {
  id                 String                   @id @default(uuid())
  employeeId         String
  requestedAmount    Float
  approvedAmount     Float?
  reason             String
  status             String                   @default("PENDING")
  requestDate        DateTime                 @default(now())
  approvedAt         DateTime?
  approvedBy         String?
  rejectedAt         DateTime?
  rejectedBy         String?
  rejectionReason    String?
  disbursedAt        DateTime?
  disbursedBy        String?
  repaymentStartDate DateTime?
  repaymentEndDate   DateTime?
  monthlyDeduction   Float?
  totalRepaid        Float                    @default(0)
  outstandingBalance Float?
  interestRate       Float                    @default(0)
  totalInterest      Float                    @default(0)
  comments           String?
  attachments        String[]
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @default(now())
  tenantId           String
  repayments         SalaryAdvanceRepayment[]
  employee           Employee                 @relation(fields: [employeeId], references: [id])
  tenant             Tenant                   @relation(fields: [tenantId], references: [id])

  @@index([employeeId])
  @@index([status])
  @@index([requestDate])
  @@index([tenantId])
  @@map("salary_advance_requests")
}

model SalaryAdvanceRepayment {
  id                     String               @id @default(uuid())
  salaryAdvanceRequestId String
  payrollPeriodId        String?
  repaymentDate          DateTime
  principalAmount        Float
  interestAmount         Float                @default(0)
  totalAmount            Float
  paymentMethod          String               @default("SALARY_DEDUCTION")
  reference              String?
  notes                  String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now())
  tenantId               String
  payrollPeriod          PayrollPeriod?       @relation(fields: [payrollPeriodId], references: [id])
  salaryAdvanceRequest   SalaryAdvanceRequest @relation(fields: [salaryAdvanceRequestId], references: [id])
  tenant                 Tenant               @relation(fields: [tenantId], references: [id])

  @@index([salaryAdvanceRequestId])
  @@index([payrollPeriodId])
  @@index([repaymentDate])
  @@index([tenantId])
  @@map("salary_advance_repayments")
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String?
  userId    String?
  details   Json?
  createdAt DateTime @default(now())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([entity])
  @@map("audit_logs")
}

model SecurityAlert {
  id          String   @id @default(uuid())
  type        String
  title       String
  description String
  timestamp   DateTime @default(now())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@map("security_alerts")
}

model SecuritySettings {
  id               String  @id @default(uuid())
  tenantId         String  @unique
  twoFactorAuth    Boolean @default(false)
  passwordExpiry   Boolean @default(false)
  sessionTimeout   Boolean @default(false)
  ipWhitelist      Boolean @default(false)
  auditLogging     Boolean @default(false)
  encryptionAtRest Boolean @default(false)
  tenant           Tenant  @relation(fields: [tenantId], references: [id])

  @@map("security_settings")
}

model WorkflowTemplate {
  id           String   @id @default(uuid())
  name         String
  description  String
  category     String
  version      String
  isActive     Boolean
  steps        Json
  triggers     Json
  variables    Json
  createdBy    String
  createdDate  DateTime
  lastModified DateTime
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@map("workflow_templates")
}

model Training {
  id            String              @id @default(uuid())
  tenantId      String
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  status        String
  capacity      Int?
  instructor    String?
  venue         String?
  requirements  String[]
  certification Boolean             @default(false)
  cost          Decimal?
  category      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now())
  tenant        Tenant              @relation(fields: [tenantId], references: [id])
  enrollments   TrainingEnrollment[]

  @@index([tenantId])
  @@map("trainings")
}

model TrainingEnrollment {
  id                String    @id @default(uuid())
  trainingId        String
  employeeId        String
  enrollmentDate    DateTime  @default(now())
  completionDate    DateTime?
  status            String    @default("enrolled")
  progress          Int       @default(0)
  score             Int?
  certificateIssued Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  training          Training  @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  employee          Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([trainingId, employeeId])
  @@index([trainingId])
  @@index([employeeId])
  @@map("training_enrollments")
}

model Integration {
  id              String           @id @default(uuid())
  name            String
  tenantId        String
  config          Json?
  createdAt       DateTime         @default(now())
  lastSyncTime    DateTime?
  status          String           @default("INACTIVE")
  successRate     Float            @default(0)
  type            String
  updatedAt       DateTime         @default(now())
  integrationLogs IntegrationLog[]
  tenant          Tenant           @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([status])
  @@map("integrations")
}

model IntegrationLog {
  id            String      @id @default(uuid())
  integrationId String
  message       String
  createdAt     DateTime    @default(now())
  tenantId      String
  details       Json?
  event         String      @default("INFO")
  status        String      @default("SUCCESS")
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id])

  @@index([integrationId])
  @@index([tenantId])
  @@index([event])
  @@index([status])
  @@index([createdAt])
  @@map("integration_logs")
}

model Workflow {
  id            String          @id @default(uuid())
  name          String
  tenantId      String
  approvals     Approval[]
  workflowStats WorkflowStats[]
  tenant        Tenant          @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@map("workflows")
}

model WorkflowStats {
  id         String   @id @default(uuid())
  workflowId String
  stats      Json
  createdAt  DateTime @default(now())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([tenantId])
  @@map("workflow_stats")
}

model Approval {
  id         String   @id @default(uuid())
  workflowId String
  approverId String
  status     String   @default("PENDING")
  comments   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([approverId])
  @@index([tenantId])
  @@map("approvals")
}

model ExperimentalFeature {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  enabled     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId])
  @@index([key])
  @@map("experimental_features")
}