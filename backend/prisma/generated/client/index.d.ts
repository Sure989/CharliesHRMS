
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Branch
 * 
 */
export type Branch = $Result.DefaultSelection<Prisma.$BranchPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model PayrollPeriod
 * 
 */
export type PayrollPeriod = $Result.DefaultSelection<Prisma.$PayrollPeriodPayload>
/**
 * Model Payroll
 * 
 */
export type Payroll = $Result.DefaultSelection<Prisma.$PayrollPayload>
/**
 * Model PayrollItem
 * 
 */
export type PayrollItem = $Result.DefaultSelection<Prisma.$PayrollItemPayload>
/**
 * Model TaxBracket
 * 
 */
export type TaxBracket = $Result.DefaultSelection<Prisma.$TaxBracketPayload>
/**
 * Model PayStub
 * 
 */
export type PayStub = $Result.DefaultSelection<Prisma.$PayStubPayload>
/**
 * Model PayrollSettings
 * 
 */
export type PayrollSettings = $Result.DefaultSelection<Prisma.$PayrollSettingsPayload>
/**
 * Model LeaveType
 * 
 */
export type LeaveType = $Result.DefaultSelection<Prisma.$LeaveTypePayload>
/**
 * Model LeavePolicy
 * 
 */
export type LeavePolicy = $Result.DefaultSelection<Prisma.$LeavePolicyPayload>
/**
 * Model LeaveRequest
 * 
 */
export type LeaveRequest = $Result.DefaultSelection<Prisma.$LeaveRequestPayload>
/**
 * Model LeaveBalance
 * 
 */
export type LeaveBalance = $Result.DefaultSelection<Prisma.$LeaveBalancePayload>
/**
 * Model Holiday
 * 
 */
export type Holiday = $Result.DefaultSelection<Prisma.$HolidayPayload>
/**
 * Model PerformanceReviewCycle
 * 
 */
export type PerformanceReviewCycle = $Result.DefaultSelection<Prisma.$PerformanceReviewCyclePayload>
/**
 * Model PerformanceReview
 * 
 */
export type PerformanceReview = $Result.DefaultSelection<Prisma.$PerformanceReviewPayload>
/**
 * Model PerformanceGoal
 * 
 */
export type PerformanceGoal = $Result.DefaultSelection<Prisma.$PerformanceGoalPayload>
/**
 * Model PerformanceRating
 * 
 */
export type PerformanceRating = $Result.DefaultSelection<Prisma.$PerformanceRatingPayload>
/**
 * Model PerformanceFeedback
 * 
 */
export type PerformanceFeedback = $Result.DefaultSelection<Prisma.$PerformanceFeedbackPayload>
/**
 * Model ReportTemplate
 * 
 */
export type ReportTemplate = $Result.DefaultSelection<Prisma.$ReportTemplatePayload>
/**
 * Model ReportInstance
 * 
 */
export type ReportInstance = $Result.DefaultSelection<Prisma.$ReportInstancePayload>
/**
 * Model Dashboard
 * 
 */
export type Dashboard = $Result.DefaultSelection<Prisma.$DashboardPayload>
/**
 * Model SalaryAdvancePolicy
 * 
 */
export type SalaryAdvancePolicy = $Result.DefaultSelection<Prisma.$SalaryAdvancePolicyPayload>
/**
 * Model SalaryAdvanceRequest
 * 
 */
export type SalaryAdvanceRequest = $Result.DefaultSelection<Prisma.$SalaryAdvanceRequestPayload>
/**
 * Model SalaryAdvanceRepayment
 * 
 */
export type SalaryAdvanceRepayment = $Result.DefaultSelection<Prisma.$SalaryAdvanceRepaymentPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model SecurityAlert
 * 
 */
export type SecurityAlert = $Result.DefaultSelection<Prisma.$SecurityAlertPayload>
/**
 * Model SecuritySettings
 * 
 */
export type SecuritySettings = $Result.DefaultSelection<Prisma.$SecuritySettingsPayload>
/**
 * Model WorkflowTemplate
 * 
 */
export type WorkflowTemplate = $Result.DefaultSelection<Prisma.$WorkflowTemplatePayload>
/**
 * Model Training
 * 
 */
export type Training = $Result.DefaultSelection<Prisma.$TrainingPayload>
/**
 * Model TrainingEnrollment
 * 
 */
export type TrainingEnrollment = $Result.DefaultSelection<Prisma.$TrainingEnrollmentPayload>
/**
 * Model Integration
 * 
 */
export type Integration = $Result.DefaultSelection<Prisma.$IntegrationPayload>
/**
 * Model IntegrationLog
 * 
 */
export type IntegrationLog = $Result.DefaultSelection<Prisma.$IntegrationLogPayload>
/**
 * Model Workflow
 * 
 */
export type Workflow = $Result.DefaultSelection<Prisma.$WorkflowPayload>
/**
 * Model WorkflowStats
 * 
 */
export type WorkflowStats = $Result.DefaultSelection<Prisma.$WorkflowStatsPayload>
/**
 * Model Approval
 * 
 */
export type Approval = $Result.DefaultSelection<Prisma.$ApprovalPayload>
/**
 * Model ExperimentalFeature
 * 
 */
export type ExperimentalFeature = $Result.DefaultSelection<Prisma.$ExperimentalFeaturePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.branch`: Exposes CRUD operations for the **Branch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branch.findMany()
    * ```
    */
  get branch(): Prisma.BranchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payrollPeriod`: Exposes CRUD operations for the **PayrollPeriod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollPeriods
    * const payrollPeriods = await prisma.payrollPeriod.findMany()
    * ```
    */
  get payrollPeriod(): Prisma.PayrollPeriodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payroll`: Exposes CRUD operations for the **Payroll** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payrolls
    * const payrolls = await prisma.payroll.findMany()
    * ```
    */
  get payroll(): Prisma.PayrollDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payrollItem`: Exposes CRUD operations for the **PayrollItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollItems
    * const payrollItems = await prisma.payrollItem.findMany()
    * ```
    */
  get payrollItem(): Prisma.PayrollItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taxBracket`: Exposes CRUD operations for the **TaxBracket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaxBrackets
    * const taxBrackets = await prisma.taxBracket.findMany()
    * ```
    */
  get taxBracket(): Prisma.TaxBracketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payStub`: Exposes CRUD operations for the **PayStub** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayStubs
    * const payStubs = await prisma.payStub.findMany()
    * ```
    */
  get payStub(): Prisma.PayStubDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payrollSettings`: Exposes CRUD operations for the **PayrollSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollSettings
    * const payrollSettings = await prisma.payrollSettings.findMany()
    * ```
    */
  get payrollSettings(): Prisma.PayrollSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaveType`: Exposes CRUD operations for the **LeaveType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveTypes
    * const leaveTypes = await prisma.leaveType.findMany()
    * ```
    */
  get leaveType(): Prisma.LeaveTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leavePolicy`: Exposes CRUD operations for the **LeavePolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeavePolicies
    * const leavePolicies = await prisma.leavePolicy.findMany()
    * ```
    */
  get leavePolicy(): Prisma.LeavePolicyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaveRequest`: Exposes CRUD operations for the **LeaveRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveRequests
    * const leaveRequests = await prisma.leaveRequest.findMany()
    * ```
    */
  get leaveRequest(): Prisma.LeaveRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaveBalance`: Exposes CRUD operations for the **LeaveBalance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveBalances
    * const leaveBalances = await prisma.leaveBalance.findMany()
    * ```
    */
  get leaveBalance(): Prisma.LeaveBalanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.holiday`: Exposes CRUD operations for the **Holiday** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Holidays
    * const holidays = await prisma.holiday.findMany()
    * ```
    */
  get holiday(): Prisma.HolidayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.performanceReviewCycle`: Exposes CRUD operations for the **PerformanceReviewCycle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformanceReviewCycles
    * const performanceReviewCycles = await prisma.performanceReviewCycle.findMany()
    * ```
    */
  get performanceReviewCycle(): Prisma.PerformanceReviewCycleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.performanceReview`: Exposes CRUD operations for the **PerformanceReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformanceReviews
    * const performanceReviews = await prisma.performanceReview.findMany()
    * ```
    */
  get performanceReview(): Prisma.PerformanceReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.performanceGoal`: Exposes CRUD operations for the **PerformanceGoal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformanceGoals
    * const performanceGoals = await prisma.performanceGoal.findMany()
    * ```
    */
  get performanceGoal(): Prisma.PerformanceGoalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.performanceRating`: Exposes CRUD operations for the **PerformanceRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformanceRatings
    * const performanceRatings = await prisma.performanceRating.findMany()
    * ```
    */
  get performanceRating(): Prisma.PerformanceRatingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.performanceFeedback`: Exposes CRUD operations for the **PerformanceFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformanceFeedbacks
    * const performanceFeedbacks = await prisma.performanceFeedback.findMany()
    * ```
    */
  get performanceFeedback(): Prisma.PerformanceFeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportTemplate`: Exposes CRUD operations for the **ReportTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportTemplates
    * const reportTemplates = await prisma.reportTemplate.findMany()
    * ```
    */
  get reportTemplate(): Prisma.ReportTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportInstance`: Exposes CRUD operations for the **ReportInstance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportInstances
    * const reportInstances = await prisma.reportInstance.findMany()
    * ```
    */
  get reportInstance(): Prisma.ReportInstanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dashboard`: Exposes CRUD operations for the **Dashboard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dashboards
    * const dashboards = await prisma.dashboard.findMany()
    * ```
    */
  get dashboard(): Prisma.DashboardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.salaryAdvancePolicy`: Exposes CRUD operations for the **SalaryAdvancePolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalaryAdvancePolicies
    * const salaryAdvancePolicies = await prisma.salaryAdvancePolicy.findMany()
    * ```
    */
  get salaryAdvancePolicy(): Prisma.SalaryAdvancePolicyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.salaryAdvanceRequest`: Exposes CRUD operations for the **SalaryAdvanceRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalaryAdvanceRequests
    * const salaryAdvanceRequests = await prisma.salaryAdvanceRequest.findMany()
    * ```
    */
  get salaryAdvanceRequest(): Prisma.SalaryAdvanceRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.salaryAdvanceRepayment`: Exposes CRUD operations for the **SalaryAdvanceRepayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalaryAdvanceRepayments
    * const salaryAdvanceRepayments = await prisma.salaryAdvanceRepayment.findMany()
    * ```
    */
  get salaryAdvanceRepayment(): Prisma.SalaryAdvanceRepaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.securityAlert`: Exposes CRUD operations for the **SecurityAlert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SecurityAlerts
    * const securityAlerts = await prisma.securityAlert.findMany()
    * ```
    */
  get securityAlert(): Prisma.SecurityAlertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.securitySettings`: Exposes CRUD operations for the **SecuritySettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SecuritySettings
    * const securitySettings = await prisma.securitySettings.findMany()
    * ```
    */
  get securitySettings(): Prisma.SecuritySettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflowTemplate`: Exposes CRUD operations for the **WorkflowTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowTemplates
    * const workflowTemplates = await prisma.workflowTemplate.findMany()
    * ```
    */
  get workflowTemplate(): Prisma.WorkflowTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.training`: Exposes CRUD operations for the **Training** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trainings
    * const trainings = await prisma.training.findMany()
    * ```
    */
  get training(): Prisma.TrainingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trainingEnrollment`: Exposes CRUD operations for the **TrainingEnrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingEnrollments
    * const trainingEnrollments = await prisma.trainingEnrollment.findMany()
    * ```
    */
  get trainingEnrollment(): Prisma.TrainingEnrollmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.integration`: Exposes CRUD operations for the **Integration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integrations
    * const integrations = await prisma.integration.findMany()
    * ```
    */
  get integration(): Prisma.IntegrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.integrationLog`: Exposes CRUD operations for the **IntegrationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IntegrationLogs
    * const integrationLogs = await prisma.integrationLog.findMany()
    * ```
    */
  get integrationLog(): Prisma.IntegrationLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflow`: Exposes CRUD operations for the **Workflow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workflows
    * const workflows = await prisma.workflow.findMany()
    * ```
    */
  get workflow(): Prisma.WorkflowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflowStats`: Exposes CRUD operations for the **WorkflowStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowStats
    * const workflowStats = await prisma.workflowStats.findMany()
    * ```
    */
  get workflowStats(): Prisma.WorkflowStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.approval`: Exposes CRUD operations for the **Approval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Approvals
    * const approvals = await prisma.approval.findMany()
    * ```
    */
  get approval(): Prisma.ApprovalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.experimentalFeature`: Exposes CRUD operations for the **ExperimentalFeature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExperimentalFeatures
    * const experimentalFeatures = await prisma.experimentalFeature.findMany()
    * ```
    */
  get experimentalFeature(): Prisma.ExperimentalFeatureDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    Notification: 'Notification',
    User: 'User',
    UserSession: 'UserSession',
    Department: 'Department',
    Branch: 'Branch',
    Employee: 'Employee',
    PayrollPeriod: 'PayrollPeriod',
    Payroll: 'Payroll',
    PayrollItem: 'PayrollItem',
    TaxBracket: 'TaxBracket',
    PayStub: 'PayStub',
    PayrollSettings: 'PayrollSettings',
    LeaveType: 'LeaveType',
    LeavePolicy: 'LeavePolicy',
    LeaveRequest: 'LeaveRequest',
    LeaveBalance: 'LeaveBalance',
    Holiday: 'Holiday',
    PerformanceReviewCycle: 'PerformanceReviewCycle',
    PerformanceReview: 'PerformanceReview',
    PerformanceGoal: 'PerformanceGoal',
    PerformanceRating: 'PerformanceRating',
    PerformanceFeedback: 'PerformanceFeedback',
    ReportTemplate: 'ReportTemplate',
    ReportInstance: 'ReportInstance',
    Dashboard: 'Dashboard',
    SalaryAdvancePolicy: 'SalaryAdvancePolicy',
    SalaryAdvanceRequest: 'SalaryAdvanceRequest',
    SalaryAdvanceRepayment: 'SalaryAdvanceRepayment',
    AuditLog: 'AuditLog',
    SecurityAlert: 'SecurityAlert',
    SecuritySettings: 'SecuritySettings',
    WorkflowTemplate: 'WorkflowTemplate',
    Training: 'Training',
    TrainingEnrollment: 'TrainingEnrollment',
    Integration: 'Integration',
    IntegrationLog: 'IntegrationLog',
    Workflow: 'Workflow',
    WorkflowStats: 'WorkflowStats',
    Approval: 'Approval',
    ExperimentalFeature: 'ExperimentalFeature'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "tenant" | "notification" | "user" | "userSession" | "department" | "branch" | "employee" | "payrollPeriod" | "payroll" | "payrollItem" | "taxBracket" | "payStub" | "payrollSettings" | "leaveType" | "leavePolicy" | "leaveRequest" | "leaveBalance" | "holiday" | "performanceReviewCycle" | "performanceReview" | "performanceGoal" | "performanceRating" | "performanceFeedback" | "reportTemplate" | "reportInstance" | "dashboard" | "salaryAdvancePolicy" | "salaryAdvanceRequest" | "salaryAdvanceRepayment" | "auditLog" | "securityAlert" | "securitySettings" | "workflowTemplate" | "training" | "trainingEnrollment" | "integration" | "integrationLog" | "workflow" | "workflowStats" | "approval" | "experimentalFeature"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TenantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Branch: {
        payload: Prisma.$BranchPayload<ExtArgs>
        fields: Prisma.BranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findFirst: {
            args: Prisma.BranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findMany: {
            args: Prisma.BranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          create: {
            args: Prisma.BranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          createMany: {
            args: Prisma.BranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BranchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          delete: {
            args: Prisma.BranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          update: {
            args: Prisma.BranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          deleteMany: {
            args: Prisma.BranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BranchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          upsert: {
            args: Prisma.BranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          aggregate: {
            args: Prisma.BranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranch>
          }
          groupBy: {
            args: Prisma.BranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchCountArgs<ExtArgs>
            result: $Utils.Optional<BranchCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      PayrollPeriod: {
        payload: Prisma.$PayrollPeriodPayload<ExtArgs>
        fields: Prisma.PayrollPeriodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollPeriodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollPeriodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          findFirst: {
            args: Prisma.PayrollPeriodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollPeriodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          findMany: {
            args: Prisma.PayrollPeriodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>[]
          }
          create: {
            args: Prisma.PayrollPeriodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          createMany: {
            args: Prisma.PayrollPeriodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollPeriodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>[]
          }
          delete: {
            args: Prisma.PayrollPeriodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          update: {
            args: Prisma.PayrollPeriodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          deleteMany: {
            args: Prisma.PayrollPeriodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollPeriodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayrollPeriodUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>[]
          }
          upsert: {
            args: Prisma.PayrollPeriodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          aggregate: {
            args: Prisma.PayrollPeriodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollPeriod>
          }
          groupBy: {
            args: Prisma.PayrollPeriodGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollPeriodGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollPeriodCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollPeriodCountAggregateOutputType> | number
          }
        }
      }
      Payroll: {
        payload: Prisma.$PayrollPayload<ExtArgs>
        fields: Prisma.PayrollFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          findFirst: {
            args: Prisma.PayrollFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          findMany: {
            args: Prisma.PayrollFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>[]
          }
          create: {
            args: Prisma.PayrollCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          createMany: {
            args: Prisma.PayrollCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>[]
          }
          delete: {
            args: Prisma.PayrollDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          update: {
            args: Prisma.PayrollUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          deleteMany: {
            args: Prisma.PayrollDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayrollUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>[]
          }
          upsert: {
            args: Prisma.PayrollUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          aggregate: {
            args: Prisma.PayrollAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayroll>
          }
          groupBy: {
            args: Prisma.PayrollGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollCountAggregateOutputType> | number
          }
        }
      }
      PayrollItem: {
        payload: Prisma.$PayrollItemPayload<ExtArgs>
        fields: Prisma.PayrollItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>
          }
          findFirst: {
            args: Prisma.PayrollItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>
          }
          findMany: {
            args: Prisma.PayrollItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>[]
          }
          create: {
            args: Prisma.PayrollItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>
          }
          createMany: {
            args: Prisma.PayrollItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>[]
          }
          delete: {
            args: Prisma.PayrollItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>
          }
          update: {
            args: Prisma.PayrollItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>
          }
          deleteMany: {
            args: Prisma.PayrollItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayrollItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>[]
          }
          upsert: {
            args: Prisma.PayrollItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollItemPayload>
          }
          aggregate: {
            args: Prisma.PayrollItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollItem>
          }
          groupBy: {
            args: Prisma.PayrollItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollItemCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollItemCountAggregateOutputType> | number
          }
        }
      }
      TaxBracket: {
        payload: Prisma.$TaxBracketPayload<ExtArgs>
        fields: Prisma.TaxBracketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaxBracketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaxBracketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>
          }
          findFirst: {
            args: Prisma.TaxBracketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaxBracketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>
          }
          findMany: {
            args: Prisma.TaxBracketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>[]
          }
          create: {
            args: Prisma.TaxBracketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>
          }
          createMany: {
            args: Prisma.TaxBracketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaxBracketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>[]
          }
          delete: {
            args: Prisma.TaxBracketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>
          }
          update: {
            args: Prisma.TaxBracketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>
          }
          deleteMany: {
            args: Prisma.TaxBracketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaxBracketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaxBracketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>[]
          }
          upsert: {
            args: Prisma.TaxBracketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaxBracketPayload>
          }
          aggregate: {
            args: Prisma.TaxBracketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaxBracket>
          }
          groupBy: {
            args: Prisma.TaxBracketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaxBracketGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaxBracketCountArgs<ExtArgs>
            result: $Utils.Optional<TaxBracketCountAggregateOutputType> | number
          }
        }
      }
      PayStub: {
        payload: Prisma.$PayStubPayload<ExtArgs>
        fields: Prisma.PayStubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayStubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayStubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>
          }
          findFirst: {
            args: Prisma.PayStubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayStubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>
          }
          findMany: {
            args: Prisma.PayStubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>[]
          }
          create: {
            args: Prisma.PayStubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>
          }
          createMany: {
            args: Prisma.PayStubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayStubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>[]
          }
          delete: {
            args: Prisma.PayStubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>
          }
          update: {
            args: Prisma.PayStubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>
          }
          deleteMany: {
            args: Prisma.PayStubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayStubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayStubUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>[]
          }
          upsert: {
            args: Prisma.PayStubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayStubPayload>
          }
          aggregate: {
            args: Prisma.PayStubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayStub>
          }
          groupBy: {
            args: Prisma.PayStubGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayStubGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayStubCountArgs<ExtArgs>
            result: $Utils.Optional<PayStubCountAggregateOutputType> | number
          }
        }
      }
      PayrollSettings: {
        payload: Prisma.$PayrollSettingsPayload<ExtArgs>
        fields: Prisma.PayrollSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>
          }
          findFirst: {
            args: Prisma.PayrollSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>
          }
          findMany: {
            args: Prisma.PayrollSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>[]
          }
          create: {
            args: Prisma.PayrollSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>
          }
          createMany: {
            args: Prisma.PayrollSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>[]
          }
          delete: {
            args: Prisma.PayrollSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>
          }
          update: {
            args: Prisma.PayrollSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>
          }
          deleteMany: {
            args: Prisma.PayrollSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayrollSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>[]
          }
          upsert: {
            args: Prisma.PayrollSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollSettingsPayload>
          }
          aggregate: {
            args: Prisma.PayrollSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollSettings>
          }
          groupBy: {
            args: Prisma.PayrollSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollSettingsCountAggregateOutputType> | number
          }
        }
      }
      LeaveType: {
        payload: Prisma.$LeaveTypePayload<ExtArgs>
        fields: Prisma.LeaveTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>
          }
          findFirst: {
            args: Prisma.LeaveTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>
          }
          findMany: {
            args: Prisma.LeaveTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>[]
          }
          create: {
            args: Prisma.LeaveTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>
          }
          createMany: {
            args: Prisma.LeaveTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>[]
          }
          delete: {
            args: Prisma.LeaveTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>
          }
          update: {
            args: Prisma.LeaveTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>
          }
          deleteMany: {
            args: Prisma.LeaveTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaveTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>[]
          }
          upsert: {
            args: Prisma.LeaveTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveTypePayload>
          }
          aggregate: {
            args: Prisma.LeaveTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveType>
          }
          groupBy: {
            args: Prisma.LeaveTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveTypeCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveTypeCountAggregateOutputType> | number
          }
        }
      }
      LeavePolicy: {
        payload: Prisma.$LeavePolicyPayload<ExtArgs>
        fields: Prisma.LeavePolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeavePolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeavePolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>
          }
          findFirst: {
            args: Prisma.LeavePolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeavePolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>
          }
          findMany: {
            args: Prisma.LeavePolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>[]
          }
          create: {
            args: Prisma.LeavePolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>
          }
          createMany: {
            args: Prisma.LeavePolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeavePolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>[]
          }
          delete: {
            args: Prisma.LeavePolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>
          }
          update: {
            args: Prisma.LeavePolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>
          }
          deleteMany: {
            args: Prisma.LeavePolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeavePolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeavePolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>[]
          }
          upsert: {
            args: Prisma.LeavePolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePolicyPayload>
          }
          aggregate: {
            args: Prisma.LeavePolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeavePolicy>
          }
          groupBy: {
            args: Prisma.LeavePolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeavePolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeavePolicyCountArgs<ExtArgs>
            result: $Utils.Optional<LeavePolicyCountAggregateOutputType> | number
          }
        }
      }
      LeaveRequest: {
        payload: Prisma.$LeaveRequestPayload<ExtArgs>
        fields: Prisma.LeaveRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findFirst: {
            args: Prisma.LeaveRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findMany: {
            args: Prisma.LeaveRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          create: {
            args: Prisma.LeaveRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          createMany: {
            args: Prisma.LeaveRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          delete: {
            args: Prisma.LeaveRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          update: {
            args: Prisma.LeaveRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          deleteMany: {
            args: Prisma.LeaveRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaveRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          upsert: {
            args: Prisma.LeaveRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          aggregate: {
            args: Prisma.LeaveRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveRequest>
          }
          groupBy: {
            args: Prisma.LeaveRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveRequestCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestCountAggregateOutputType> | number
          }
        }
      }
      LeaveBalance: {
        payload: Prisma.$LeaveBalancePayload<ExtArgs>
        fields: Prisma.LeaveBalanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveBalanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveBalanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>
          }
          findFirst: {
            args: Prisma.LeaveBalanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveBalanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>
          }
          findMany: {
            args: Prisma.LeaveBalanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>[]
          }
          create: {
            args: Prisma.LeaveBalanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>
          }
          createMany: {
            args: Prisma.LeaveBalanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveBalanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>[]
          }
          delete: {
            args: Prisma.LeaveBalanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>
          }
          update: {
            args: Prisma.LeaveBalanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>
          }
          deleteMany: {
            args: Prisma.LeaveBalanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveBalanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaveBalanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>[]
          }
          upsert: {
            args: Prisma.LeaveBalanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveBalancePayload>
          }
          aggregate: {
            args: Prisma.LeaveBalanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveBalance>
          }
          groupBy: {
            args: Prisma.LeaveBalanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveBalanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveBalanceCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveBalanceCountAggregateOutputType> | number
          }
        }
      }
      Holiday: {
        payload: Prisma.$HolidayPayload<ExtArgs>
        fields: Prisma.HolidayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HolidayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HolidayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          findFirst: {
            args: Prisma.HolidayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HolidayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          findMany: {
            args: Prisma.HolidayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>[]
          }
          create: {
            args: Prisma.HolidayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          createMany: {
            args: Prisma.HolidayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HolidayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>[]
          }
          delete: {
            args: Prisma.HolidayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          update: {
            args: Prisma.HolidayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          deleteMany: {
            args: Prisma.HolidayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HolidayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HolidayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>[]
          }
          upsert: {
            args: Prisma.HolidayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          aggregate: {
            args: Prisma.HolidayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHoliday>
          }
          groupBy: {
            args: Prisma.HolidayGroupByArgs<ExtArgs>
            result: $Utils.Optional<HolidayGroupByOutputType>[]
          }
          count: {
            args: Prisma.HolidayCountArgs<ExtArgs>
            result: $Utils.Optional<HolidayCountAggregateOutputType> | number
          }
        }
      }
      PerformanceReviewCycle: {
        payload: Prisma.$PerformanceReviewCyclePayload<ExtArgs>
        fields: Prisma.PerformanceReviewCycleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformanceReviewCycleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformanceReviewCycleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>
          }
          findFirst: {
            args: Prisma.PerformanceReviewCycleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformanceReviewCycleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>
          }
          findMany: {
            args: Prisma.PerformanceReviewCycleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>[]
          }
          create: {
            args: Prisma.PerformanceReviewCycleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>
          }
          createMany: {
            args: Prisma.PerformanceReviewCycleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformanceReviewCycleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>[]
          }
          delete: {
            args: Prisma.PerformanceReviewCycleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>
          }
          update: {
            args: Prisma.PerformanceReviewCycleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>
          }
          deleteMany: {
            args: Prisma.PerformanceReviewCycleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformanceReviewCycleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PerformanceReviewCycleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>[]
          }
          upsert: {
            args: Prisma.PerformanceReviewCycleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewCyclePayload>
          }
          aggregate: {
            args: Prisma.PerformanceReviewCycleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformanceReviewCycle>
          }
          groupBy: {
            args: Prisma.PerformanceReviewCycleGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformanceReviewCycleGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformanceReviewCycleCountArgs<ExtArgs>
            result: $Utils.Optional<PerformanceReviewCycleCountAggregateOutputType> | number
          }
        }
      }
      PerformanceReview: {
        payload: Prisma.$PerformanceReviewPayload<ExtArgs>
        fields: Prisma.PerformanceReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformanceReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformanceReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          findFirst: {
            args: Prisma.PerformanceReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformanceReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          findMany: {
            args: Prisma.PerformanceReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>[]
          }
          create: {
            args: Prisma.PerformanceReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          createMany: {
            args: Prisma.PerformanceReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformanceReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>[]
          }
          delete: {
            args: Prisma.PerformanceReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          update: {
            args: Prisma.PerformanceReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          deleteMany: {
            args: Prisma.PerformanceReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformanceReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PerformanceReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>[]
          }
          upsert: {
            args: Prisma.PerformanceReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceReviewPayload>
          }
          aggregate: {
            args: Prisma.PerformanceReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformanceReview>
          }
          groupBy: {
            args: Prisma.PerformanceReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformanceReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformanceReviewCountArgs<ExtArgs>
            result: $Utils.Optional<PerformanceReviewCountAggregateOutputType> | number
          }
        }
      }
      PerformanceGoal: {
        payload: Prisma.$PerformanceGoalPayload<ExtArgs>
        fields: Prisma.PerformanceGoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformanceGoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformanceGoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>
          }
          findFirst: {
            args: Prisma.PerformanceGoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformanceGoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>
          }
          findMany: {
            args: Prisma.PerformanceGoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>[]
          }
          create: {
            args: Prisma.PerformanceGoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>
          }
          createMany: {
            args: Prisma.PerformanceGoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformanceGoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>[]
          }
          delete: {
            args: Prisma.PerformanceGoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>
          }
          update: {
            args: Prisma.PerformanceGoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>
          }
          deleteMany: {
            args: Prisma.PerformanceGoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformanceGoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PerformanceGoalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>[]
          }
          upsert: {
            args: Prisma.PerformanceGoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceGoalPayload>
          }
          aggregate: {
            args: Prisma.PerformanceGoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformanceGoal>
          }
          groupBy: {
            args: Prisma.PerformanceGoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformanceGoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformanceGoalCountArgs<ExtArgs>
            result: $Utils.Optional<PerformanceGoalCountAggregateOutputType> | number
          }
        }
      }
      PerformanceRating: {
        payload: Prisma.$PerformanceRatingPayload<ExtArgs>
        fields: Prisma.PerformanceRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformanceRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformanceRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>
          }
          findFirst: {
            args: Prisma.PerformanceRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformanceRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>
          }
          findMany: {
            args: Prisma.PerformanceRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>[]
          }
          create: {
            args: Prisma.PerformanceRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>
          }
          createMany: {
            args: Prisma.PerformanceRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformanceRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>[]
          }
          delete: {
            args: Prisma.PerformanceRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>
          }
          update: {
            args: Prisma.PerformanceRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>
          }
          deleteMany: {
            args: Prisma.PerformanceRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformanceRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PerformanceRatingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>[]
          }
          upsert: {
            args: Prisma.PerformanceRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceRatingPayload>
          }
          aggregate: {
            args: Prisma.PerformanceRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformanceRating>
          }
          groupBy: {
            args: Prisma.PerformanceRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformanceRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformanceRatingCountArgs<ExtArgs>
            result: $Utils.Optional<PerformanceRatingCountAggregateOutputType> | number
          }
        }
      }
      PerformanceFeedback: {
        payload: Prisma.$PerformanceFeedbackPayload<ExtArgs>
        fields: Prisma.PerformanceFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformanceFeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformanceFeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>
          }
          findFirst: {
            args: Prisma.PerformanceFeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformanceFeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>
          }
          findMany: {
            args: Prisma.PerformanceFeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>[]
          }
          create: {
            args: Prisma.PerformanceFeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>
          }
          createMany: {
            args: Prisma.PerformanceFeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformanceFeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>[]
          }
          delete: {
            args: Prisma.PerformanceFeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>
          }
          update: {
            args: Prisma.PerformanceFeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.PerformanceFeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformanceFeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PerformanceFeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>[]
          }
          upsert: {
            args: Prisma.PerformanceFeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceFeedbackPayload>
          }
          aggregate: {
            args: Prisma.PerformanceFeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformanceFeedback>
          }
          groupBy: {
            args: Prisma.PerformanceFeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformanceFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformanceFeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<PerformanceFeedbackCountAggregateOutputType> | number
          }
        }
      }
      ReportTemplate: {
        payload: Prisma.$ReportTemplatePayload<ExtArgs>
        fields: Prisma.ReportTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>
          }
          findFirst: {
            args: Prisma.ReportTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>
          }
          findMany: {
            args: Prisma.ReportTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>[]
          }
          create: {
            args: Prisma.ReportTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>
          }
          createMany: {
            args: Prisma.ReportTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>[]
          }
          delete: {
            args: Prisma.ReportTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>
          }
          update: {
            args: Prisma.ReportTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>
          }
          deleteMany: {
            args: Prisma.ReportTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>[]
          }
          upsert: {
            args: Prisma.ReportTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportTemplatePayload>
          }
          aggregate: {
            args: Prisma.ReportTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportTemplate>
          }
          groupBy: {
            args: Prisma.ReportTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<ReportTemplateCountAggregateOutputType> | number
          }
        }
      }
      ReportInstance: {
        payload: Prisma.$ReportInstancePayload<ExtArgs>
        fields: Prisma.ReportInstanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportInstanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportInstanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>
          }
          findFirst: {
            args: Prisma.ReportInstanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportInstanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>
          }
          findMany: {
            args: Prisma.ReportInstanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>[]
          }
          create: {
            args: Prisma.ReportInstanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>
          }
          createMany: {
            args: Prisma.ReportInstanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportInstanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>[]
          }
          delete: {
            args: Prisma.ReportInstanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>
          }
          update: {
            args: Prisma.ReportInstanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>
          }
          deleteMany: {
            args: Prisma.ReportInstanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportInstanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportInstanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>[]
          }
          upsert: {
            args: Prisma.ReportInstanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportInstancePayload>
          }
          aggregate: {
            args: Prisma.ReportInstanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportInstance>
          }
          groupBy: {
            args: Prisma.ReportInstanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportInstanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportInstanceCountArgs<ExtArgs>
            result: $Utils.Optional<ReportInstanceCountAggregateOutputType> | number
          }
        }
      }
      Dashboard: {
        payload: Prisma.$DashboardPayload<ExtArgs>
        fields: Prisma.DashboardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DashboardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DashboardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          findFirst: {
            args: Prisma.DashboardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DashboardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          findMany: {
            args: Prisma.DashboardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>[]
          }
          create: {
            args: Prisma.DashboardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          createMany: {
            args: Prisma.DashboardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DashboardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>[]
          }
          delete: {
            args: Prisma.DashboardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          update: {
            args: Prisma.DashboardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          deleteMany: {
            args: Prisma.DashboardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DashboardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DashboardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>[]
          }
          upsert: {
            args: Prisma.DashboardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          aggregate: {
            args: Prisma.DashboardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDashboard>
          }
          groupBy: {
            args: Prisma.DashboardGroupByArgs<ExtArgs>
            result: $Utils.Optional<DashboardGroupByOutputType>[]
          }
          count: {
            args: Prisma.DashboardCountArgs<ExtArgs>
            result: $Utils.Optional<DashboardCountAggregateOutputType> | number
          }
        }
      }
      SalaryAdvancePolicy: {
        payload: Prisma.$SalaryAdvancePolicyPayload<ExtArgs>
        fields: Prisma.SalaryAdvancePolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaryAdvancePolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaryAdvancePolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>
          }
          findFirst: {
            args: Prisma.SalaryAdvancePolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaryAdvancePolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>
          }
          findMany: {
            args: Prisma.SalaryAdvancePolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>[]
          }
          create: {
            args: Prisma.SalaryAdvancePolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>
          }
          createMany: {
            args: Prisma.SalaryAdvancePolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SalaryAdvancePolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>[]
          }
          delete: {
            args: Prisma.SalaryAdvancePolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>
          }
          update: {
            args: Prisma.SalaryAdvancePolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>
          }
          deleteMany: {
            args: Prisma.SalaryAdvancePolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalaryAdvancePolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SalaryAdvancePolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>[]
          }
          upsert: {
            args: Prisma.SalaryAdvancePolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvancePolicyPayload>
          }
          aggregate: {
            args: Prisma.SalaryAdvancePolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSalaryAdvancePolicy>
          }
          groupBy: {
            args: Prisma.SalaryAdvancePolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalaryAdvancePolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaryAdvancePolicyCountArgs<ExtArgs>
            result: $Utils.Optional<SalaryAdvancePolicyCountAggregateOutputType> | number
          }
        }
      }
      SalaryAdvanceRequest: {
        payload: Prisma.$SalaryAdvanceRequestPayload<ExtArgs>
        fields: Prisma.SalaryAdvanceRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaryAdvanceRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaryAdvanceRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>
          }
          findFirst: {
            args: Prisma.SalaryAdvanceRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaryAdvanceRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>
          }
          findMany: {
            args: Prisma.SalaryAdvanceRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>[]
          }
          create: {
            args: Prisma.SalaryAdvanceRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>
          }
          createMany: {
            args: Prisma.SalaryAdvanceRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SalaryAdvanceRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>[]
          }
          delete: {
            args: Prisma.SalaryAdvanceRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>
          }
          update: {
            args: Prisma.SalaryAdvanceRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>
          }
          deleteMany: {
            args: Prisma.SalaryAdvanceRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalaryAdvanceRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SalaryAdvanceRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>[]
          }
          upsert: {
            args: Prisma.SalaryAdvanceRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRequestPayload>
          }
          aggregate: {
            args: Prisma.SalaryAdvanceRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSalaryAdvanceRequest>
          }
          groupBy: {
            args: Prisma.SalaryAdvanceRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalaryAdvanceRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaryAdvanceRequestCountArgs<ExtArgs>
            result: $Utils.Optional<SalaryAdvanceRequestCountAggregateOutputType> | number
          }
        }
      }
      SalaryAdvanceRepayment: {
        payload: Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>
        fields: Prisma.SalaryAdvanceRepaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaryAdvanceRepaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaryAdvanceRepaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>
          }
          findFirst: {
            args: Prisma.SalaryAdvanceRepaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaryAdvanceRepaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>
          }
          findMany: {
            args: Prisma.SalaryAdvanceRepaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>[]
          }
          create: {
            args: Prisma.SalaryAdvanceRepaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>
          }
          createMany: {
            args: Prisma.SalaryAdvanceRepaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SalaryAdvanceRepaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>[]
          }
          delete: {
            args: Prisma.SalaryAdvanceRepaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>
          }
          update: {
            args: Prisma.SalaryAdvanceRepaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>
          }
          deleteMany: {
            args: Prisma.SalaryAdvanceRepaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalaryAdvanceRepaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SalaryAdvanceRepaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>[]
          }
          upsert: {
            args: Prisma.SalaryAdvanceRepaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryAdvanceRepaymentPayload>
          }
          aggregate: {
            args: Prisma.SalaryAdvanceRepaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSalaryAdvanceRepayment>
          }
          groupBy: {
            args: Prisma.SalaryAdvanceRepaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalaryAdvanceRepaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaryAdvanceRepaymentCountArgs<ExtArgs>
            result: $Utils.Optional<SalaryAdvanceRepaymentCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      SecurityAlert: {
        payload: Prisma.$SecurityAlertPayload<ExtArgs>
        fields: Prisma.SecurityAlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SecurityAlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SecurityAlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>
          }
          findFirst: {
            args: Prisma.SecurityAlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SecurityAlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>
          }
          findMany: {
            args: Prisma.SecurityAlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>[]
          }
          create: {
            args: Prisma.SecurityAlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>
          }
          createMany: {
            args: Prisma.SecurityAlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SecurityAlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>[]
          }
          delete: {
            args: Prisma.SecurityAlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>
          }
          update: {
            args: Prisma.SecurityAlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>
          }
          deleteMany: {
            args: Prisma.SecurityAlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SecurityAlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SecurityAlertUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>[]
          }
          upsert: {
            args: Prisma.SecurityAlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAlertPayload>
          }
          aggregate: {
            args: Prisma.SecurityAlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSecurityAlert>
          }
          groupBy: {
            args: Prisma.SecurityAlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<SecurityAlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.SecurityAlertCountArgs<ExtArgs>
            result: $Utils.Optional<SecurityAlertCountAggregateOutputType> | number
          }
        }
      }
      SecuritySettings: {
        payload: Prisma.$SecuritySettingsPayload<ExtArgs>
        fields: Prisma.SecuritySettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SecuritySettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SecuritySettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>
          }
          findFirst: {
            args: Prisma.SecuritySettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SecuritySettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>
          }
          findMany: {
            args: Prisma.SecuritySettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>[]
          }
          create: {
            args: Prisma.SecuritySettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>
          }
          createMany: {
            args: Prisma.SecuritySettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SecuritySettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>[]
          }
          delete: {
            args: Prisma.SecuritySettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>
          }
          update: {
            args: Prisma.SecuritySettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>
          }
          deleteMany: {
            args: Prisma.SecuritySettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SecuritySettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SecuritySettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>[]
          }
          upsert: {
            args: Prisma.SecuritySettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecuritySettingsPayload>
          }
          aggregate: {
            args: Prisma.SecuritySettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSecuritySettings>
          }
          groupBy: {
            args: Prisma.SecuritySettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SecuritySettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SecuritySettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SecuritySettingsCountAggregateOutputType> | number
          }
        }
      }
      WorkflowTemplate: {
        payload: Prisma.$WorkflowTemplatePayload<ExtArgs>
        fields: Prisma.WorkflowTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          findFirst: {
            args: Prisma.WorkflowTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          findMany: {
            args: Prisma.WorkflowTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          create: {
            args: Prisma.WorkflowTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          createMany: {
            args: Prisma.WorkflowTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          delete: {
            args: Prisma.WorkflowTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          update: {
            args: Prisma.WorkflowTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          deleteMany: {
            args: Prisma.WorkflowTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          upsert: {
            args: Prisma.WorkflowTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          aggregate: {
            args: Prisma.WorkflowTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowTemplate>
          }
          groupBy: {
            args: Prisma.WorkflowTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowTemplateCountAggregateOutputType> | number
          }
        }
      }
      Training: {
        payload: Prisma.$TrainingPayload<ExtArgs>
        fields: Prisma.TrainingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          findFirst: {
            args: Prisma.TrainingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          findMany: {
            args: Prisma.TrainingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          create: {
            args: Prisma.TrainingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          createMany: {
            args: Prisma.TrainingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrainingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          delete: {
            args: Prisma.TrainingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          update: {
            args: Prisma.TrainingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          deleteMany: {
            args: Prisma.TrainingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrainingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>[]
          }
          upsert: {
            args: Prisma.TrainingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingPayload>
          }
          aggregate: {
            args: Prisma.TrainingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTraining>
          }
          groupBy: {
            args: Prisma.TrainingGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrainingGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingCountArgs<ExtArgs>
            result: $Utils.Optional<TrainingCountAggregateOutputType> | number
          }
        }
      }
      TrainingEnrollment: {
        payload: Prisma.$TrainingEnrollmentPayload<ExtArgs>
        fields: Prisma.TrainingEnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingEnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingEnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>
          }
          findFirst: {
            args: Prisma.TrainingEnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingEnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>
          }
          findMany: {
            args: Prisma.TrainingEnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>[]
          }
          create: {
            args: Prisma.TrainingEnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>
          }
          createMany: {
            args: Prisma.TrainingEnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrainingEnrollmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>[]
          }
          delete: {
            args: Prisma.TrainingEnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>
          }
          update: {
            args: Prisma.TrainingEnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.TrainingEnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingEnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrainingEnrollmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>[]
          }
          upsert: {
            args: Prisma.TrainingEnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrainingEnrollmentPayload>
          }
          aggregate: {
            args: Prisma.TrainingEnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrainingEnrollment>
          }
          groupBy: {
            args: Prisma.TrainingEnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrainingEnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingEnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<TrainingEnrollmentCountAggregateOutputType> | number
          }
        }
      }
      Integration: {
        payload: Prisma.$IntegrationPayload<ExtArgs>
        fields: Prisma.IntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          findFirst: {
            args: Prisma.IntegrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          findMany: {
            args: Prisma.IntegrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          create: {
            args: Prisma.IntegrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          createMany: {
            args: Prisma.IntegrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          delete: {
            args: Prisma.IntegrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          update: {
            args: Prisma.IntegrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IntegrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          upsert: {
            args: Prisma.IntegrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          aggregate: {
            args: Prisma.IntegrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegration>
          }
          groupBy: {
            args: Prisma.IntegrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationCountAggregateOutputType> | number
          }
        }
      }
      IntegrationLog: {
        payload: Prisma.$IntegrationLogPayload<ExtArgs>
        fields: Prisma.IntegrationLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>
          }
          findFirst: {
            args: Prisma.IntegrationLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>
          }
          findMany: {
            args: Prisma.IntegrationLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>[]
          }
          create: {
            args: Prisma.IntegrationLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>
          }
          createMany: {
            args: Prisma.IntegrationLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>[]
          }
          delete: {
            args: Prisma.IntegrationLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>
          }
          update: {
            args: Prisma.IntegrationLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IntegrationLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>[]
          }
          upsert: {
            args: Prisma.IntegrationLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationLogPayload>
          }
          aggregate: {
            args: Prisma.IntegrationLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegrationLog>
          }
          groupBy: {
            args: Prisma.IntegrationLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationLogCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationLogCountAggregateOutputType> | number
          }
        }
      }
      Workflow: {
        payload: Prisma.$WorkflowPayload<ExtArgs>
        fields: Prisma.WorkflowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          findFirst: {
            args: Prisma.WorkflowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          findMany: {
            args: Prisma.WorkflowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>[]
          }
          create: {
            args: Prisma.WorkflowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          createMany: {
            args: Prisma.WorkflowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>[]
          }
          delete: {
            args: Prisma.WorkflowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          update: {
            args: Prisma.WorkflowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>[]
          }
          upsert: {
            args: Prisma.WorkflowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowPayload>
          }
          aggregate: {
            args: Prisma.WorkflowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflow>
          }
          groupBy: {
            args: Prisma.WorkflowGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowCountAggregateOutputType> | number
          }
        }
      }
      WorkflowStats: {
        payload: Prisma.$WorkflowStatsPayload<ExtArgs>
        fields: Prisma.WorkflowStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>
          }
          findFirst: {
            args: Prisma.WorkflowStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>
          }
          findMany: {
            args: Prisma.WorkflowStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>[]
          }
          create: {
            args: Prisma.WorkflowStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>
          }
          createMany: {
            args: Prisma.WorkflowStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>[]
          }
          delete: {
            args: Prisma.WorkflowStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>
          }
          update: {
            args: Prisma.WorkflowStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>[]
          }
          upsert: {
            args: Prisma.WorkflowStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStatsPayload>
          }
          aggregate: {
            args: Prisma.WorkflowStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowStats>
          }
          groupBy: {
            args: Prisma.WorkflowStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowStatsCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStatsCountAggregateOutputType> | number
          }
        }
      }
      Approval: {
        payload: Prisma.$ApprovalPayload<ExtArgs>
        fields: Prisma.ApprovalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprovalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprovalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findFirst: {
            args: Prisma.ApprovalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprovalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findMany: {
            args: Prisma.ApprovalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          create: {
            args: Prisma.ApprovalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          createMany: {
            args: Prisma.ApprovalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApprovalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          delete: {
            args: Prisma.ApprovalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          update: {
            args: Prisma.ApprovalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          deleteMany: {
            args: Prisma.ApprovalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApprovalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApprovalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          upsert: {
            args: Prisma.ApprovalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          aggregate: {
            args: Prisma.ApprovalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApproval>
          }
          groupBy: {
            args: Prisma.ApprovalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApprovalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApprovalCountArgs<ExtArgs>
            result: $Utils.Optional<ApprovalCountAggregateOutputType> | number
          }
        }
      }
      ExperimentalFeature: {
        payload: Prisma.$ExperimentalFeaturePayload<ExtArgs>
        fields: Prisma.ExperimentalFeatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperimentalFeatureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperimentalFeatureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>
          }
          findFirst: {
            args: Prisma.ExperimentalFeatureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperimentalFeatureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>
          }
          findMany: {
            args: Prisma.ExperimentalFeatureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>[]
          }
          create: {
            args: Prisma.ExperimentalFeatureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>
          }
          createMany: {
            args: Prisma.ExperimentalFeatureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExperimentalFeatureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>[]
          }
          delete: {
            args: Prisma.ExperimentalFeatureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>
          }
          update: {
            args: Prisma.ExperimentalFeatureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>
          }
          deleteMany: {
            args: Prisma.ExperimentalFeatureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExperimentalFeatureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExperimentalFeatureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>[]
          }
          upsert: {
            args: Prisma.ExperimentalFeatureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentalFeaturePayload>
          }
          aggregate: {
            args: Prisma.ExperimentalFeatureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExperimentalFeature>
          }
          groupBy: {
            args: Prisma.ExperimentalFeatureGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExperimentalFeatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperimentalFeatureCountArgs<ExtArgs>
            result: $Utils.Optional<ExperimentalFeatureCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    tenant?: TenantOmit
    notification?: NotificationOmit
    user?: UserOmit
    userSession?: UserSessionOmit
    department?: DepartmentOmit
    branch?: BranchOmit
    employee?: EmployeeOmit
    payrollPeriod?: PayrollPeriodOmit
    payroll?: PayrollOmit
    payrollItem?: PayrollItemOmit
    taxBracket?: TaxBracketOmit
    payStub?: PayStubOmit
    payrollSettings?: PayrollSettingsOmit
    leaveType?: LeaveTypeOmit
    leavePolicy?: LeavePolicyOmit
    leaveRequest?: LeaveRequestOmit
    leaveBalance?: LeaveBalanceOmit
    holiday?: HolidayOmit
    performanceReviewCycle?: PerformanceReviewCycleOmit
    performanceReview?: PerformanceReviewOmit
    performanceGoal?: PerformanceGoalOmit
    performanceRating?: PerformanceRatingOmit
    performanceFeedback?: PerformanceFeedbackOmit
    reportTemplate?: ReportTemplateOmit
    reportInstance?: ReportInstanceOmit
    dashboard?: DashboardOmit
    salaryAdvancePolicy?: SalaryAdvancePolicyOmit
    salaryAdvanceRequest?: SalaryAdvanceRequestOmit
    salaryAdvanceRepayment?: SalaryAdvanceRepaymentOmit
    auditLog?: AuditLogOmit
    securityAlert?: SecurityAlertOmit
    securitySettings?: SecuritySettingsOmit
    workflowTemplate?: WorkflowTemplateOmit
    training?: TrainingOmit
    trainingEnrollment?: TrainingEnrollmentOmit
    integration?: IntegrationOmit
    integrationLog?: IntegrationLogOmit
    workflow?: WorkflowOmit
    workflowStats?: WorkflowStatsOmit
    approval?: ApprovalOmit
    experimentalFeature?: ExperimentalFeatureOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    approvals: number
    notifications: number
    auditLogs: number
    branches: number
    dashboards: number
    departments: number
    employees: number
    experimentalFeatures: number
    holidays: number
    integrationLogs: number
    integrations: number
    leaveBalances: number
    leavePolicies: number
    leaveRequests: number
    leaveTypes: number
    payStubs: number
    payrollItems: number
    payrollPeriods: number
    payrolls: number
    performanceFeedback: number
    performanceGoals: number
    performanceRatings: number
    performanceReviewCycles: number
    performanceReviews: number
    reportInstances: number
    reportTemplates: number
    salaryAdvancePolicies: number
    salaryAdvanceRepayments: number
    salaryAdvanceRequests: number
    securityAlerts: number
    taxBrackets: number
    trainings: number
    users: number
    workflowStats: number
    workflowTemplates: number
    workflows: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvals?: boolean | TenantCountOutputTypeCountApprovalsArgs
    notifications?: boolean | TenantCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | TenantCountOutputTypeCountAuditLogsArgs
    branches?: boolean | TenantCountOutputTypeCountBranchesArgs
    dashboards?: boolean | TenantCountOutputTypeCountDashboardsArgs
    departments?: boolean | TenantCountOutputTypeCountDepartmentsArgs
    employees?: boolean | TenantCountOutputTypeCountEmployeesArgs
    experimentalFeatures?: boolean | TenantCountOutputTypeCountExperimentalFeaturesArgs
    holidays?: boolean | TenantCountOutputTypeCountHolidaysArgs
    integrationLogs?: boolean | TenantCountOutputTypeCountIntegrationLogsArgs
    integrations?: boolean | TenantCountOutputTypeCountIntegrationsArgs
    leaveBalances?: boolean | TenantCountOutputTypeCountLeaveBalancesArgs
    leavePolicies?: boolean | TenantCountOutputTypeCountLeavePoliciesArgs
    leaveRequests?: boolean | TenantCountOutputTypeCountLeaveRequestsArgs
    leaveTypes?: boolean | TenantCountOutputTypeCountLeaveTypesArgs
    payStubs?: boolean | TenantCountOutputTypeCountPayStubsArgs
    payrollItems?: boolean | TenantCountOutputTypeCountPayrollItemsArgs
    payrollPeriods?: boolean | TenantCountOutputTypeCountPayrollPeriodsArgs
    payrolls?: boolean | TenantCountOutputTypeCountPayrollsArgs
    performanceFeedback?: boolean | TenantCountOutputTypeCountPerformanceFeedbackArgs
    performanceGoals?: boolean | TenantCountOutputTypeCountPerformanceGoalsArgs
    performanceRatings?: boolean | TenantCountOutputTypeCountPerformanceRatingsArgs
    performanceReviewCycles?: boolean | TenantCountOutputTypeCountPerformanceReviewCyclesArgs
    performanceReviews?: boolean | TenantCountOutputTypeCountPerformanceReviewsArgs
    reportInstances?: boolean | TenantCountOutputTypeCountReportInstancesArgs
    reportTemplates?: boolean | TenantCountOutputTypeCountReportTemplatesArgs
    salaryAdvancePolicies?: boolean | TenantCountOutputTypeCountSalaryAdvancePoliciesArgs
    salaryAdvanceRepayments?: boolean | TenantCountOutputTypeCountSalaryAdvanceRepaymentsArgs
    salaryAdvanceRequests?: boolean | TenantCountOutputTypeCountSalaryAdvanceRequestsArgs
    securityAlerts?: boolean | TenantCountOutputTypeCountSecurityAlertsArgs
    taxBrackets?: boolean | TenantCountOutputTypeCountTaxBracketsArgs
    trainings?: boolean | TenantCountOutputTypeCountTrainingsArgs
    users?: boolean | TenantCountOutputTypeCountUsersArgs
    workflowStats?: boolean | TenantCountOutputTypeCountWorkflowStatsArgs
    workflowTemplates?: boolean | TenantCountOutputTypeCountWorkflowTemplatesArgs
    workflows?: boolean | TenantCountOutputTypeCountWorkflowsArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountDashboardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DashboardWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountExperimentalFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentalFeatureWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountHolidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolidayWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountIntegrationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationLogWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountLeaveBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveBalanceWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountLeavePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeavePolicyWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountLeaveTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveTypeWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPayStubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayStubWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPayrollItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollItemWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPayrollPeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollPeriodWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPayrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPerformanceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceFeedbackWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPerformanceGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceGoalWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPerformanceRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceRatingWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPerformanceReviewCyclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewCycleWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPerformanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountReportInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportInstanceWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountReportTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportTemplateWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountSalaryAdvancePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvancePolicyWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountSalaryAdvanceRepaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRepaymentWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountSalaryAdvanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRequestWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountSecurityAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityAlertWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountTaxBracketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaxBracketWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountTrainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountWorkflowStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStatsWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountWorkflowTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowTemplateWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountWorkflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    auditLogs: number
    managedDepartments: number
    sessions: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    managedDepartments?: boolean | UserCountOutputTypeCountManagedDepartmentsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManagedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    branches: number
    employees: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branches?: boolean | DepartmentCountOutputTypeCountBranchesArgs
    employees?: boolean | DepartmentCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountBranchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * Count Type BranchCountOutputType
   */

  export type BranchCountOutputType = {
    employees: number
    leaveRequests: number
    salaryAdvanceRequests: number
  }

  export type BranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | BranchCountOutputTypeCountEmployeesArgs
    leaveRequests?: boolean | BranchCountOutputTypeCountLeaveRequestsArgs
    salaryAdvanceRequests?: boolean | BranchCountOutputTypeCountSalaryAdvanceRequestsArgs
  }

  // Custom InputTypes
  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchCountOutputType
     */
    select?: BranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountSalaryAdvanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRequestWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    leaveBalances: number
    leaveRequests: number
    payStubs: number
    payrolls: number
    performanceGoals: number
    performanceReviews: number
    salaryAdvanceRequests: number
    trainingEnrollments: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveBalances?: boolean | EmployeeCountOutputTypeCountLeaveBalancesArgs
    leaveRequests?: boolean | EmployeeCountOutputTypeCountLeaveRequestsArgs
    payStubs?: boolean | EmployeeCountOutputTypeCountPayStubsArgs
    payrolls?: boolean | EmployeeCountOutputTypeCountPayrollsArgs
    performanceGoals?: boolean | EmployeeCountOutputTypeCountPerformanceGoalsArgs
    performanceReviews?: boolean | EmployeeCountOutputTypeCountPerformanceReviewsArgs
    salaryAdvanceRequests?: boolean | EmployeeCountOutputTypeCountSalaryAdvanceRequestsArgs
    trainingEnrollments?: boolean | EmployeeCountOutputTypeCountTrainingEnrollmentsArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountLeaveBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveBalanceWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPayStubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayStubWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPayrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPerformanceGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceGoalWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPerformanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountSalaryAdvanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRequestWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountTrainingEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingEnrollmentWhereInput
  }


  /**
   * Count Type PayrollPeriodCountOutputType
   */

  export type PayrollPeriodCountOutputType = {
    payStubs: number
    payrolls: number
    salaryAdvanceRepayments: number
  }

  export type PayrollPeriodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payStubs?: boolean | PayrollPeriodCountOutputTypeCountPayStubsArgs
    payrolls?: boolean | PayrollPeriodCountOutputTypeCountPayrollsArgs
    salaryAdvanceRepayments?: boolean | PayrollPeriodCountOutputTypeCountSalaryAdvanceRepaymentsArgs
  }

  // Custom InputTypes
  /**
   * PayrollPeriodCountOutputType without action
   */
  export type PayrollPeriodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriodCountOutputType
     */
    select?: PayrollPeriodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PayrollPeriodCountOutputType without action
   */
  export type PayrollPeriodCountOutputTypeCountPayStubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayStubWhereInput
  }

  /**
   * PayrollPeriodCountOutputType without action
   */
  export type PayrollPeriodCountOutputTypeCountPayrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollWhereInput
  }

  /**
   * PayrollPeriodCountOutputType without action
   */
  export type PayrollPeriodCountOutputTypeCountSalaryAdvanceRepaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRepaymentWhereInput
  }


  /**
   * Count Type PayrollCountOutputType
   */

  export type PayrollCountOutputType = {
    payrollItems: number
  }

  export type PayrollCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollItems?: boolean | PayrollCountOutputTypeCountPayrollItemsArgs
  }

  // Custom InputTypes
  /**
   * PayrollCountOutputType without action
   */
  export type PayrollCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollCountOutputType
     */
    select?: PayrollCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PayrollCountOutputType without action
   */
  export type PayrollCountOutputTypeCountPayrollItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollItemWhereInput
  }


  /**
   * Count Type LeaveTypeCountOutputType
   */

  export type LeaveTypeCountOutputType = {
    leaveBalances: number
    leavePolicies: number
    leaveRequests: number
  }

  export type LeaveTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveBalances?: boolean | LeaveTypeCountOutputTypeCountLeaveBalancesArgs
    leavePolicies?: boolean | LeaveTypeCountOutputTypeCountLeavePoliciesArgs
    leaveRequests?: boolean | LeaveTypeCountOutputTypeCountLeaveRequestsArgs
  }

  // Custom InputTypes
  /**
   * LeaveTypeCountOutputType without action
   */
  export type LeaveTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveTypeCountOutputType
     */
    select?: LeaveTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeaveTypeCountOutputType without action
   */
  export type LeaveTypeCountOutputTypeCountLeaveBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveBalanceWhereInput
  }

  /**
   * LeaveTypeCountOutputType without action
   */
  export type LeaveTypeCountOutputTypeCountLeavePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeavePolicyWhereInput
  }

  /**
   * LeaveTypeCountOutputType without action
   */
  export type LeaveTypeCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }


  /**
   * Count Type PerformanceReviewCycleCountOutputType
   */

  export type PerformanceReviewCycleCountOutputType = {
    performanceGoals: number
    performanceReviews: number
  }

  export type PerformanceReviewCycleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceGoals?: boolean | PerformanceReviewCycleCountOutputTypeCountPerformanceGoalsArgs
    performanceReviews?: boolean | PerformanceReviewCycleCountOutputTypeCountPerformanceReviewsArgs
  }

  // Custom InputTypes
  /**
   * PerformanceReviewCycleCountOutputType without action
   */
  export type PerformanceReviewCycleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycleCountOutputType
     */
    select?: PerformanceReviewCycleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PerformanceReviewCycleCountOutputType without action
   */
  export type PerformanceReviewCycleCountOutputTypeCountPerformanceGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceGoalWhereInput
  }

  /**
   * PerformanceReviewCycleCountOutputType without action
   */
  export type PerformanceReviewCycleCountOutputTypeCountPerformanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewWhereInput
  }


  /**
   * Count Type PerformanceReviewCountOutputType
   */

  export type PerformanceReviewCountOutputType = {
    performanceFeedback: number
    performanceRatings: number
  }

  export type PerformanceReviewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceFeedback?: boolean | PerformanceReviewCountOutputTypeCountPerformanceFeedbackArgs
    performanceRatings?: boolean | PerformanceReviewCountOutputTypeCountPerformanceRatingsArgs
  }

  // Custom InputTypes
  /**
   * PerformanceReviewCountOutputType without action
   */
  export type PerformanceReviewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCountOutputType
     */
    select?: PerformanceReviewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PerformanceReviewCountOutputType without action
   */
  export type PerformanceReviewCountOutputTypeCountPerformanceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceFeedbackWhereInput
  }

  /**
   * PerformanceReviewCountOutputType without action
   */
  export type PerformanceReviewCountOutputTypeCountPerformanceRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceRatingWhereInput
  }


  /**
   * Count Type ReportTemplateCountOutputType
   */

  export type ReportTemplateCountOutputType = {
    reportInstances: number
  }

  export type ReportTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportInstances?: boolean | ReportTemplateCountOutputTypeCountReportInstancesArgs
  }

  // Custom InputTypes
  /**
   * ReportTemplateCountOutputType without action
   */
  export type ReportTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplateCountOutputType
     */
    select?: ReportTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportTemplateCountOutputType without action
   */
  export type ReportTemplateCountOutputTypeCountReportInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportInstanceWhereInput
  }


  /**
   * Count Type SalaryAdvanceRequestCountOutputType
   */

  export type SalaryAdvanceRequestCountOutputType = {
    repayments: number
  }

  export type SalaryAdvanceRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repayments?: boolean | SalaryAdvanceRequestCountOutputTypeCountRepaymentsArgs
  }

  // Custom InputTypes
  /**
   * SalaryAdvanceRequestCountOutputType without action
   */
  export type SalaryAdvanceRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequestCountOutputType
     */
    select?: SalaryAdvanceRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SalaryAdvanceRequestCountOutputType without action
   */
  export type SalaryAdvanceRequestCountOutputTypeCountRepaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRepaymentWhereInput
  }


  /**
   * Count Type TrainingCountOutputType
   */

  export type TrainingCountOutputType = {
    enrollments: number
  }

  export type TrainingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | TrainingCountOutputTypeCountEnrollmentsArgs
  }

  // Custom InputTypes
  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingCountOutputType
     */
    select?: TrainingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrainingCountOutputType without action
   */
  export type TrainingCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingEnrollmentWhereInput
  }


  /**
   * Count Type IntegrationCountOutputType
   */

  export type IntegrationCountOutputType = {
    integrationLogs: number
  }

  export type IntegrationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrationLogs?: boolean | IntegrationCountOutputTypeCountIntegrationLogsArgs
  }

  // Custom InputTypes
  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationCountOutputType
     */
    select?: IntegrationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeCountIntegrationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationLogWhereInput
  }


  /**
   * Count Type WorkflowCountOutputType
   */

  export type WorkflowCountOutputType = {
    approvals: number
    workflowStats: number
  }

  export type WorkflowCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvals?: boolean | WorkflowCountOutputTypeCountApprovalsArgs
    workflowStats?: boolean | WorkflowCountOutputTypeCountWorkflowStatsArgs
  }

  // Custom InputTypes
  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowCountOutputType
     */
    select?: WorkflowCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }

  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeCountWorkflowStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStatsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    domain: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    domain: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    domain: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    domain?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    domain?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    domain?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string
    domain: string | null
    createdAt: Date
    updatedAt: Date
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvals?: boolean | Tenant$approvalsArgs<ExtArgs>
    notifications?: boolean | Tenant$notificationsArgs<ExtArgs>
    auditLogs?: boolean | Tenant$auditLogsArgs<ExtArgs>
    branches?: boolean | Tenant$branchesArgs<ExtArgs>
    dashboards?: boolean | Tenant$dashboardsArgs<ExtArgs>
    departments?: boolean | Tenant$departmentsArgs<ExtArgs>
    employees?: boolean | Tenant$employeesArgs<ExtArgs>
    experimentalFeatures?: boolean | Tenant$experimentalFeaturesArgs<ExtArgs>
    holidays?: boolean | Tenant$holidaysArgs<ExtArgs>
    integrationLogs?: boolean | Tenant$integrationLogsArgs<ExtArgs>
    integrations?: boolean | Tenant$integrationsArgs<ExtArgs>
    leaveBalances?: boolean | Tenant$leaveBalancesArgs<ExtArgs>
    leavePolicies?: boolean | Tenant$leavePoliciesArgs<ExtArgs>
    leaveRequests?: boolean | Tenant$leaveRequestsArgs<ExtArgs>
    leaveTypes?: boolean | Tenant$leaveTypesArgs<ExtArgs>
    payStubs?: boolean | Tenant$payStubsArgs<ExtArgs>
    payrollItems?: boolean | Tenant$payrollItemsArgs<ExtArgs>
    payrollPeriods?: boolean | Tenant$payrollPeriodsArgs<ExtArgs>
    payrollSettings?: boolean | Tenant$payrollSettingsArgs<ExtArgs>
    payrolls?: boolean | Tenant$payrollsArgs<ExtArgs>
    performanceFeedback?: boolean | Tenant$performanceFeedbackArgs<ExtArgs>
    performanceGoals?: boolean | Tenant$performanceGoalsArgs<ExtArgs>
    performanceRatings?: boolean | Tenant$performanceRatingsArgs<ExtArgs>
    performanceReviewCycles?: boolean | Tenant$performanceReviewCyclesArgs<ExtArgs>
    performanceReviews?: boolean | Tenant$performanceReviewsArgs<ExtArgs>
    reportInstances?: boolean | Tenant$reportInstancesArgs<ExtArgs>
    reportTemplates?: boolean | Tenant$reportTemplatesArgs<ExtArgs>
    salaryAdvancePolicies?: boolean | Tenant$salaryAdvancePoliciesArgs<ExtArgs>
    salaryAdvanceRepayments?: boolean | Tenant$salaryAdvanceRepaymentsArgs<ExtArgs>
    salaryAdvanceRequests?: boolean | Tenant$salaryAdvanceRequestsArgs<ExtArgs>
    securityAlerts?: boolean | Tenant$securityAlertsArgs<ExtArgs>
    securitySettings?: boolean | Tenant$securitySettingsArgs<ExtArgs>
    taxBrackets?: boolean | Tenant$taxBracketsArgs<ExtArgs>
    trainings?: boolean | Tenant$trainingsArgs<ExtArgs>
    users?: boolean | Tenant$usersArgs<ExtArgs>
    workflowStats?: boolean | Tenant$workflowStatsArgs<ExtArgs>
    workflowTemplates?: boolean | Tenant$workflowTemplatesArgs<ExtArgs>
    workflows?: boolean | Tenant$workflowsArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    domain?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "domain" | "createdAt" | "updatedAt", ExtArgs["result"]["tenant"]>
  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvals?: boolean | Tenant$approvalsArgs<ExtArgs>
    notifications?: boolean | Tenant$notificationsArgs<ExtArgs>
    auditLogs?: boolean | Tenant$auditLogsArgs<ExtArgs>
    branches?: boolean | Tenant$branchesArgs<ExtArgs>
    dashboards?: boolean | Tenant$dashboardsArgs<ExtArgs>
    departments?: boolean | Tenant$departmentsArgs<ExtArgs>
    employees?: boolean | Tenant$employeesArgs<ExtArgs>
    experimentalFeatures?: boolean | Tenant$experimentalFeaturesArgs<ExtArgs>
    holidays?: boolean | Tenant$holidaysArgs<ExtArgs>
    integrationLogs?: boolean | Tenant$integrationLogsArgs<ExtArgs>
    integrations?: boolean | Tenant$integrationsArgs<ExtArgs>
    leaveBalances?: boolean | Tenant$leaveBalancesArgs<ExtArgs>
    leavePolicies?: boolean | Tenant$leavePoliciesArgs<ExtArgs>
    leaveRequests?: boolean | Tenant$leaveRequestsArgs<ExtArgs>
    leaveTypes?: boolean | Tenant$leaveTypesArgs<ExtArgs>
    payStubs?: boolean | Tenant$payStubsArgs<ExtArgs>
    payrollItems?: boolean | Tenant$payrollItemsArgs<ExtArgs>
    payrollPeriods?: boolean | Tenant$payrollPeriodsArgs<ExtArgs>
    payrollSettings?: boolean | Tenant$payrollSettingsArgs<ExtArgs>
    payrolls?: boolean | Tenant$payrollsArgs<ExtArgs>
    performanceFeedback?: boolean | Tenant$performanceFeedbackArgs<ExtArgs>
    performanceGoals?: boolean | Tenant$performanceGoalsArgs<ExtArgs>
    performanceRatings?: boolean | Tenant$performanceRatingsArgs<ExtArgs>
    performanceReviewCycles?: boolean | Tenant$performanceReviewCyclesArgs<ExtArgs>
    performanceReviews?: boolean | Tenant$performanceReviewsArgs<ExtArgs>
    reportInstances?: boolean | Tenant$reportInstancesArgs<ExtArgs>
    reportTemplates?: boolean | Tenant$reportTemplatesArgs<ExtArgs>
    salaryAdvancePolicies?: boolean | Tenant$salaryAdvancePoliciesArgs<ExtArgs>
    salaryAdvanceRepayments?: boolean | Tenant$salaryAdvanceRepaymentsArgs<ExtArgs>
    salaryAdvanceRequests?: boolean | Tenant$salaryAdvanceRequestsArgs<ExtArgs>
    securityAlerts?: boolean | Tenant$securityAlertsArgs<ExtArgs>
    securitySettings?: boolean | Tenant$securitySettingsArgs<ExtArgs>
    taxBrackets?: boolean | Tenant$taxBracketsArgs<ExtArgs>
    trainings?: boolean | Tenant$trainingsArgs<ExtArgs>
    users?: boolean | Tenant$usersArgs<ExtArgs>
    workflowStats?: boolean | Tenant$workflowStatsArgs<ExtArgs>
    workflowTemplates?: boolean | Tenant$workflowTemplatesArgs<ExtArgs>
    workflows?: boolean | Tenant$workflowsArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TenantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      approvals: Prisma.$ApprovalPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      branches: Prisma.$BranchPayload<ExtArgs>[]
      dashboards: Prisma.$DashboardPayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      employees: Prisma.$EmployeePayload<ExtArgs>[]
      experimentalFeatures: Prisma.$ExperimentalFeaturePayload<ExtArgs>[]
      holidays: Prisma.$HolidayPayload<ExtArgs>[]
      integrationLogs: Prisma.$IntegrationLogPayload<ExtArgs>[]
      integrations: Prisma.$IntegrationPayload<ExtArgs>[]
      leaveBalances: Prisma.$LeaveBalancePayload<ExtArgs>[]
      leavePolicies: Prisma.$LeavePolicyPayload<ExtArgs>[]
      leaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      leaveTypes: Prisma.$LeaveTypePayload<ExtArgs>[]
      payStubs: Prisma.$PayStubPayload<ExtArgs>[]
      payrollItems: Prisma.$PayrollItemPayload<ExtArgs>[]
      payrollPeriods: Prisma.$PayrollPeriodPayload<ExtArgs>[]
      payrollSettings: Prisma.$PayrollSettingsPayload<ExtArgs> | null
      payrolls: Prisma.$PayrollPayload<ExtArgs>[]
      performanceFeedback: Prisma.$PerformanceFeedbackPayload<ExtArgs>[]
      performanceGoals: Prisma.$PerformanceGoalPayload<ExtArgs>[]
      performanceRatings: Prisma.$PerformanceRatingPayload<ExtArgs>[]
      performanceReviewCycles: Prisma.$PerformanceReviewCyclePayload<ExtArgs>[]
      performanceReviews: Prisma.$PerformanceReviewPayload<ExtArgs>[]
      reportInstances: Prisma.$ReportInstancePayload<ExtArgs>[]
      reportTemplates: Prisma.$ReportTemplatePayload<ExtArgs>[]
      salaryAdvancePolicies: Prisma.$SalaryAdvancePolicyPayload<ExtArgs>[]
      salaryAdvanceRepayments: Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>[]
      salaryAdvanceRequests: Prisma.$SalaryAdvanceRequestPayload<ExtArgs>[]
      securityAlerts: Prisma.$SecurityAlertPayload<ExtArgs>[]
      securitySettings: Prisma.$SecuritySettingsPayload<ExtArgs> | null
      taxBrackets: Prisma.$TaxBracketPayload<ExtArgs>[]
      trainings: Prisma.$TrainingPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      workflowStats: Prisma.$WorkflowStatsPayload<ExtArgs>[]
      workflowTemplates: Prisma.$WorkflowTemplatePayload<ExtArgs>[]
      workflows: Prisma.$WorkflowPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      domain: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants and returns the data updated in the database.
     * @param {TenantUpdateManyAndReturnArgs} args - Arguments to update many Tenants.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TenantUpdateManyAndReturnArgs>(args: SelectSubset<T, TenantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    approvals<T extends Tenant$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends Tenant$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Tenant$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    branches<T extends Tenant$branchesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$branchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dashboards<T extends Tenant$dashboardsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$dashboardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departments<T extends Tenant$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employees<T extends Tenant$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    experimentalFeatures<T extends Tenant$experimentalFeaturesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$experimentalFeaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    holidays<T extends Tenant$holidaysArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$holidaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    integrationLogs<T extends Tenant$integrationLogsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$integrationLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    integrations<T extends Tenant$integrationsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$integrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaveBalances<T extends Tenant$leaveBalancesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$leaveBalancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leavePolicies<T extends Tenant$leavePoliciesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$leavePoliciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaveRequests<T extends Tenant$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaveTypes<T extends Tenant$leaveTypesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$leaveTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payStubs<T extends Tenant$payStubsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$payStubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payrollItems<T extends Tenant$payrollItemsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$payrollItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payrollPeriods<T extends Tenant$payrollPeriodsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$payrollPeriodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payrollSettings<T extends Tenant$payrollSettingsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$payrollSettingsArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    payrolls<T extends Tenant$payrollsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$payrollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceFeedback<T extends Tenant$performanceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$performanceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceGoals<T extends Tenant$performanceGoalsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$performanceGoalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceRatings<T extends Tenant$performanceRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$performanceRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceReviewCycles<T extends Tenant$performanceReviewCyclesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$performanceReviewCyclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceReviews<T extends Tenant$performanceReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$performanceReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportInstances<T extends Tenant$reportInstancesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$reportInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportTemplates<T extends Tenant$reportTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$reportTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryAdvancePolicies<T extends Tenant$salaryAdvancePoliciesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$salaryAdvancePoliciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryAdvanceRepayments<T extends Tenant$salaryAdvanceRepaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$salaryAdvanceRepaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryAdvanceRequests<T extends Tenant$salaryAdvanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$salaryAdvanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    securityAlerts<T extends Tenant$securityAlertsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$securityAlertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    securitySettings<T extends Tenant$securitySettingsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$securitySettingsArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    taxBrackets<T extends Tenant$taxBracketsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$taxBracketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainings<T extends Tenant$trainingsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$trainingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Tenant$usersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowStats<T extends Tenant$workflowStatsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$workflowStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowTemplates<T extends Tenant$workflowTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$workflowTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflows<T extends Tenant$workflowsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$workflowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly domain: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant updateManyAndReturn
   */
  export type TenantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to delete.
     */
    limit?: number
  }

  /**
   * Tenant.approvals
   */
  export type Tenant$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Tenant.notifications
   */
  export type Tenant$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Tenant.auditLogs
   */
  export type Tenant$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Tenant.branches
   */
  export type Tenant$branchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    cursor?: BranchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Tenant.dashboards
   */
  export type Tenant$dashboardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    where?: DashboardWhereInput
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    cursor?: DashboardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * Tenant.departments
   */
  export type Tenant$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Tenant.employees
   */
  export type Tenant$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Tenant.experimentalFeatures
   */
  export type Tenant$experimentalFeaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    where?: ExperimentalFeatureWhereInput
    orderBy?: ExperimentalFeatureOrderByWithRelationInput | ExperimentalFeatureOrderByWithRelationInput[]
    cursor?: ExperimentalFeatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperimentalFeatureScalarFieldEnum | ExperimentalFeatureScalarFieldEnum[]
  }

  /**
   * Tenant.holidays
   */
  export type Tenant$holidaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    where?: HolidayWhereInput
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    cursor?: HolidayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HolidayScalarFieldEnum | HolidayScalarFieldEnum[]
  }

  /**
   * Tenant.integrationLogs
   */
  export type Tenant$integrationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    where?: IntegrationLogWhereInput
    orderBy?: IntegrationLogOrderByWithRelationInput | IntegrationLogOrderByWithRelationInput[]
    cursor?: IntegrationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationLogScalarFieldEnum | IntegrationLogScalarFieldEnum[]
  }

  /**
   * Tenant.integrations
   */
  export type Tenant$integrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    where?: IntegrationWhereInput
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    cursor?: IntegrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Tenant.leaveBalances
   */
  export type Tenant$leaveBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    where?: LeaveBalanceWhereInput
    orderBy?: LeaveBalanceOrderByWithRelationInput | LeaveBalanceOrderByWithRelationInput[]
    cursor?: LeaveBalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveBalanceScalarFieldEnum | LeaveBalanceScalarFieldEnum[]
  }

  /**
   * Tenant.leavePolicies
   */
  export type Tenant$leavePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    where?: LeavePolicyWhereInput
    orderBy?: LeavePolicyOrderByWithRelationInput | LeavePolicyOrderByWithRelationInput[]
    cursor?: LeavePolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeavePolicyScalarFieldEnum | LeavePolicyScalarFieldEnum[]
  }

  /**
   * Tenant.leaveRequests
   */
  export type Tenant$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * Tenant.leaveTypes
   */
  export type Tenant$leaveTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    where?: LeaveTypeWhereInput
    orderBy?: LeaveTypeOrderByWithRelationInput | LeaveTypeOrderByWithRelationInput[]
    cursor?: LeaveTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveTypeScalarFieldEnum | LeaveTypeScalarFieldEnum[]
  }

  /**
   * Tenant.payStubs
   */
  export type Tenant$payStubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    where?: PayStubWhereInput
    orderBy?: PayStubOrderByWithRelationInput | PayStubOrderByWithRelationInput[]
    cursor?: PayStubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayStubScalarFieldEnum | PayStubScalarFieldEnum[]
  }

  /**
   * Tenant.payrollItems
   */
  export type Tenant$payrollItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    where?: PayrollItemWhereInput
    orderBy?: PayrollItemOrderByWithRelationInput | PayrollItemOrderByWithRelationInput[]
    cursor?: PayrollItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollItemScalarFieldEnum | PayrollItemScalarFieldEnum[]
  }

  /**
   * Tenant.payrollPeriods
   */
  export type Tenant$payrollPeriodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    where?: PayrollPeriodWhereInput
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    cursor?: PayrollPeriodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollPeriodScalarFieldEnum | PayrollPeriodScalarFieldEnum[]
  }

  /**
   * Tenant.payrollSettings
   */
  export type Tenant$payrollSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    where?: PayrollSettingsWhereInput
  }

  /**
   * Tenant.payrolls
   */
  export type Tenant$payrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    where?: PayrollWhereInput
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    cursor?: PayrollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * Tenant.performanceFeedback
   */
  export type Tenant$performanceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    where?: PerformanceFeedbackWhereInput
    orderBy?: PerformanceFeedbackOrderByWithRelationInput | PerformanceFeedbackOrderByWithRelationInput[]
    cursor?: PerformanceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceFeedbackScalarFieldEnum | PerformanceFeedbackScalarFieldEnum[]
  }

  /**
   * Tenant.performanceGoals
   */
  export type Tenant$performanceGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    where?: PerformanceGoalWhereInput
    orderBy?: PerformanceGoalOrderByWithRelationInput | PerformanceGoalOrderByWithRelationInput[]
    cursor?: PerformanceGoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceGoalScalarFieldEnum | PerformanceGoalScalarFieldEnum[]
  }

  /**
   * Tenant.performanceRatings
   */
  export type Tenant$performanceRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    where?: PerformanceRatingWhereInput
    orderBy?: PerformanceRatingOrderByWithRelationInput | PerformanceRatingOrderByWithRelationInput[]
    cursor?: PerformanceRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceRatingScalarFieldEnum | PerformanceRatingScalarFieldEnum[]
  }

  /**
   * Tenant.performanceReviewCycles
   */
  export type Tenant$performanceReviewCyclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    where?: PerformanceReviewCycleWhereInput
    orderBy?: PerformanceReviewCycleOrderByWithRelationInput | PerformanceReviewCycleOrderByWithRelationInput[]
    cursor?: PerformanceReviewCycleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceReviewCycleScalarFieldEnum | PerformanceReviewCycleScalarFieldEnum[]
  }

  /**
   * Tenant.performanceReviews
   */
  export type Tenant$performanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    where?: PerformanceReviewWhereInput
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    cursor?: PerformanceReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * Tenant.reportInstances
   */
  export type Tenant$reportInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    where?: ReportInstanceWhereInput
    orderBy?: ReportInstanceOrderByWithRelationInput | ReportInstanceOrderByWithRelationInput[]
    cursor?: ReportInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportInstanceScalarFieldEnum | ReportInstanceScalarFieldEnum[]
  }

  /**
   * Tenant.reportTemplates
   */
  export type Tenant$reportTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    where?: ReportTemplateWhereInput
    orderBy?: ReportTemplateOrderByWithRelationInput | ReportTemplateOrderByWithRelationInput[]
    cursor?: ReportTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportTemplateScalarFieldEnum | ReportTemplateScalarFieldEnum[]
  }

  /**
   * Tenant.salaryAdvancePolicies
   */
  export type Tenant$salaryAdvancePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    where?: SalaryAdvancePolicyWhereInput
    orderBy?: SalaryAdvancePolicyOrderByWithRelationInput | SalaryAdvancePolicyOrderByWithRelationInput[]
    cursor?: SalaryAdvancePolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryAdvancePolicyScalarFieldEnum | SalaryAdvancePolicyScalarFieldEnum[]
  }

  /**
   * Tenant.salaryAdvanceRepayments
   */
  export type Tenant$salaryAdvanceRepaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    where?: SalaryAdvanceRepaymentWhereInput
    orderBy?: SalaryAdvanceRepaymentOrderByWithRelationInput | SalaryAdvanceRepaymentOrderByWithRelationInput[]
    cursor?: SalaryAdvanceRepaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryAdvanceRepaymentScalarFieldEnum | SalaryAdvanceRepaymentScalarFieldEnum[]
  }

  /**
   * Tenant.salaryAdvanceRequests
   */
  export type Tenant$salaryAdvanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    where?: SalaryAdvanceRequestWhereInput
    orderBy?: SalaryAdvanceRequestOrderByWithRelationInput | SalaryAdvanceRequestOrderByWithRelationInput[]
    cursor?: SalaryAdvanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryAdvanceRequestScalarFieldEnum | SalaryAdvanceRequestScalarFieldEnum[]
  }

  /**
   * Tenant.securityAlerts
   */
  export type Tenant$securityAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    where?: SecurityAlertWhereInput
    orderBy?: SecurityAlertOrderByWithRelationInput | SecurityAlertOrderByWithRelationInput[]
    cursor?: SecurityAlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SecurityAlertScalarFieldEnum | SecurityAlertScalarFieldEnum[]
  }

  /**
   * Tenant.securitySettings
   */
  export type Tenant$securitySettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    where?: SecuritySettingsWhereInput
  }

  /**
   * Tenant.taxBrackets
   */
  export type Tenant$taxBracketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    where?: TaxBracketWhereInput
    orderBy?: TaxBracketOrderByWithRelationInput | TaxBracketOrderByWithRelationInput[]
    cursor?: TaxBracketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaxBracketScalarFieldEnum | TaxBracketScalarFieldEnum[]
  }

  /**
   * Tenant.trainings
   */
  export type Tenant$trainingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    cursor?: TrainingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Tenant.users
   */
  export type Tenant$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tenant.workflowStats
   */
  export type Tenant$workflowStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    where?: WorkflowStatsWhereInput
    orderBy?: WorkflowStatsOrderByWithRelationInput | WorkflowStatsOrderByWithRelationInput[]
    cursor?: WorkflowStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowStatsScalarFieldEnum | WorkflowStatsScalarFieldEnum[]
  }

  /**
   * Tenant.workflowTemplates
   */
  export type Tenant$workflowTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    where?: WorkflowTemplateWhereInput
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    cursor?: WorkflowTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * Tenant.workflows
   */
  export type Tenant$workflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    where?: WorkflowWhereInput
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    cursor?: WorkflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    timestamp: Date | null
    read: boolean | null
    actionUrl: string | null
    actionLabel: string | null
    module: string | null
    tenantId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    timestamp: Date | null
    read: boolean | null
    actionUrl: string | null
    actionLabel: string | null
    module: string | null
    tenantId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    timestamp: number
    read: number
    actionUrl: number
    actionLabel: number
    module: number
    tenantId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    timestamp?: true
    read?: true
    actionUrl?: true
    actionLabel?: true
    module?: true
    tenantId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    timestamp?: true
    read?: true
    actionUrl?: true
    actionLabel?: true
    module?: true
    tenantId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    timestamp?: true
    read?: true
    actionUrl?: true
    actionLabel?: true
    module?: true
    tenantId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: string
    title: string
    message: string
    timestamp: Date
    read: boolean
    actionUrl: string | null
    actionLabel: string | null
    module: string | null
    tenantId: string
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    timestamp?: boolean
    read?: boolean
    actionUrl?: boolean
    actionLabel?: boolean
    module?: boolean
    tenantId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    timestamp?: boolean
    read?: boolean
    actionUrl?: boolean
    actionLabel?: boolean
    module?: boolean
    tenantId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    timestamp?: boolean
    read?: boolean
    actionUrl?: boolean
    actionLabel?: boolean
    module?: boolean
    tenantId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    timestamp?: boolean
    read?: boolean
    actionUrl?: boolean
    actionLabel?: boolean
    module?: boolean
    tenantId?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "title" | "message" | "timestamp" | "read" | "actionUrl" | "actionLabel" | "module" | "tenantId", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      title: string
      message: string
      timestamp: Date
      read: boolean
      actionUrl: string | null
      actionLabel: string | null
      module: string | null
      tenantId: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly timestamp: FieldRef<"Notification", 'DateTime'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly actionLabel: FieldRef<"Notification", 'String'>
    readonly module: FieldRef<"Notification", 'String'>
    readonly tenantId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    status: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    employeeId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    status: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    employeeId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    firstName: number
    lastName: number
    role: number
    status: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    tenantId: number
    employeeId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    status?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    employeeId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    status?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    employeeId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    status?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    employeeId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role: string
    status: string
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    employeeId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    status?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employeeId?: boolean
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    managedDepartments?: boolean | User$managedDepartmentsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    status?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employeeId?: boolean
    employee?: boolean | User$employeeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    status?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employeeId?: boolean
    employee?: boolean | User$employeeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    status?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employeeId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "firstName" | "lastName" | "role" | "status" | "lastLogin" | "createdAt" | "updatedAt" | "tenantId" | "employeeId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    managedDepartments?: boolean | User$managedDepartmentsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | User$employeeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | User$employeeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      managedDepartments: Prisma.$DepartmentPayload<ExtArgs>[]
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
      employee: Prisma.$EmployeePayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      firstName: string
      lastName: string
      role: string
      status: string
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
      employeeId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedDepartments<T extends User$managedDepartmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$managedDepartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employee<T extends User$employeeArgs<ExtArgs> = {}>(args?: Subset<T, User$employeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly tenantId: FieldRef<"User", 'String'>
    readonly employeeId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.managedDepartments
   */
  export type User$managedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.employee
   */
  export type User$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    createdAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "createdAt", ExtArgs["result"]["userSession"]>
  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly token: FieldRef<"UserSession", 'String'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    employeeCount: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    employeeCount: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    managerId: string | null
    employeeCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    managerId: string | null
    employeeCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    managerId: number
    employeeCount: number
    status: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    employeeCount?: true
  }

  export type DepartmentSumAggregateInputType = {
    employeeCount?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    managerId?: true
    employeeCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    managerId?: true
    employeeCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    managerId?: true
    employeeCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    managerId: string | null
    employeeCount: number
    status: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    managerId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    branches?: boolean | Department$branchesArgs<ExtArgs>
    manager?: boolean | Department$managerArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    employees?: boolean | Department$employeesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    managerId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    manager?: boolean | Department$managerArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    managerId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    manager?: boolean | Department$managerArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    managerId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "managerId" | "employeeCount" | "status" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branches?: boolean | Department$branchesArgs<ExtArgs>
    manager?: boolean | Department$managerArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    employees?: boolean | Department$employeesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Department$managerArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Department$managerArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      branches: Prisma.$BranchPayload<ExtArgs>[]
      manager: Prisma.$UserPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
      employees: Prisma.$EmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      managerId: string | null
      employeeCount: number
      status: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branches<T extends Department$branchesArgs<ExtArgs> = {}>(args?: Subset<T, Department$branchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    manager<T extends Department$managerArgs<ExtArgs> = {}>(args?: Subset<T, Department$managerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employees<T extends Department$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Department$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly managerId: FieldRef<"Department", 'String'>
    readonly employeeCount: FieldRef<"Department", 'Int'>
    readonly status: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
    readonly tenantId: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.branches
   */
  export type Department$branchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    cursor?: BranchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Department.manager
   */
  export type Department$managerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.employees
   */
  export type Department$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Branch
   */

  export type AggregateBranch = {
    _count: BranchCountAggregateOutputType | null
    _avg: BranchAvgAggregateOutputType | null
    _sum: BranchSumAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  export type BranchAvgAggregateOutputType = {
    employeeCount: number | null
  }

  export type BranchSumAggregateOutputType = {
    employeeCount: number | null
  }

  export type BranchMinAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    address: string | null
    managerId: string | null
    managerUserId: string | null
    departmentId: string | null
    employeeCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type BranchMaxAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    address: string | null
    managerId: string | null
    managerUserId: string | null
    departmentId: string | null
    employeeCount: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type BranchCountAggregateOutputType = {
    id: number
    name: number
    location: number
    address: number
    managerId: number
    managerUserId: number
    departmentId: number
    employeeCount: number
    status: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type BranchAvgAggregateInputType = {
    employeeCount?: true
  }

  export type BranchSumAggregateInputType = {
    employeeCount?: true
  }

  export type BranchMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    address?: true
    managerId?: true
    managerUserId?: true
    departmentId?: true
    employeeCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type BranchMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    address?: true
    managerId?: true
    managerUserId?: true
    departmentId?: true
    employeeCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type BranchCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    address?: true
    managerId?: true
    managerUserId?: true
    departmentId?: true
    employeeCount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type BranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branch to aggregate.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Branches
    **/
    _count?: true | BranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BranchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BranchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchMaxAggregateInputType
  }

  export type GetBranchAggregateType<T extends BranchAggregateArgs> = {
        [P in keyof T & keyof AggregateBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranch[P]>
      : GetScalarType<T[P], AggregateBranch[P]>
  }




  export type BranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithAggregationInput | BranchOrderByWithAggregationInput[]
    by: BranchScalarFieldEnum[] | BranchScalarFieldEnum
    having?: BranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchCountAggregateInputType | true
    _avg?: BranchAvgAggregateInputType
    _sum?: BranchSumAggregateInputType
    _min?: BranchMinAggregateInputType
    _max?: BranchMaxAggregateInputType
  }

  export type BranchGroupByOutputType = {
    id: string
    name: string
    location: string | null
    address: string | null
    managerId: string | null
    managerUserId: string | null
    departmentId: string
    employeeCount: number
    status: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: BranchCountAggregateOutputType | null
    _avg: BranchAvgAggregateOutputType | null
    _sum: BranchSumAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  type GetBranchGroupByPayload<T extends BranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchGroupByOutputType[P]>
            : GetScalarType<T[P], BranchGroupByOutputType[P]>
        }
      >
    >


  export type BranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    address?: boolean
    managerId?: boolean
    managerUserId?: boolean
    departmentId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    employees?: boolean | Branch$employeesArgs<ExtArgs>
    leaveRequests?: boolean | Branch$leaveRequestsArgs<ExtArgs>
    salaryAdvanceRequests?: boolean | Branch$salaryAdvanceRequestsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    address?: boolean
    managerId?: boolean
    managerUserId?: boolean
    departmentId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    address?: boolean
    managerId?: boolean
    managerUserId?: boolean
    departmentId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>

  export type BranchSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    address?: boolean
    managerId?: boolean
    managerUserId?: boolean
    departmentId?: boolean
    employeeCount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type BranchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "location" | "address" | "managerId" | "managerUserId" | "departmentId" | "employeeCount" | "status" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["branch"]>
  export type BranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    employees?: boolean | Branch$employeesArgs<ExtArgs>
    leaveRequests?: boolean | Branch$leaveRequestsArgs<ExtArgs>
    salaryAdvanceRequests?: boolean | Branch$salaryAdvanceRequestsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BranchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type BranchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $BranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Branch"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
      employees: Prisma.$EmployeePayload<ExtArgs>[]
      leaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      salaryAdvanceRequests: Prisma.$SalaryAdvanceRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      location: string | null
      address: string | null
      managerId: string | null
      managerUserId: string | null
      departmentId: string
      employeeCount: number
      status: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["branch"]>
    composites: {}
  }

  type BranchGetPayload<S extends boolean | null | undefined | BranchDefaultArgs> = $Result.GetResult<Prisma.$BranchPayload, S>

  type BranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BranchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BranchCountAggregateInputType | true
    }

  export interface BranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Branch'], meta: { name: 'Branch' } }
    /**
     * Find zero or one Branch that matches the filter.
     * @param {BranchFindUniqueArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchFindUniqueArgs>(args: SelectSubset<T, BranchFindUniqueArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Branch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BranchFindUniqueOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchFindFirstArgs>(args?: SelectSubset<T, BranchFindFirstArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branch.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const branchWithIdOnly = await prisma.branch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BranchFindManyArgs>(args?: SelectSubset<T, BranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Branch.
     * @param {BranchCreateArgs} args - Arguments to create a Branch.
     * @example
     * // Create one Branch
     * const Branch = await prisma.branch.create({
     *   data: {
     *     // ... data to create a Branch
     *   }
     * })
     * 
     */
    create<T extends BranchCreateArgs>(args: SelectSubset<T, BranchCreateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Branches.
     * @param {BranchCreateManyArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchCreateManyArgs>(args?: SelectSubset<T, BranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Branches and returns the data saved in the database.
     * @param {BranchCreateManyAndReturnArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Branches and only return the `id`
     * const branchWithIdOnly = await prisma.branch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BranchCreateManyAndReturnArgs>(args?: SelectSubset<T, BranchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Branch.
     * @param {BranchDeleteArgs} args - Arguments to delete one Branch.
     * @example
     * // Delete one Branch
     * const Branch = await prisma.branch.delete({
     *   where: {
     *     // ... filter to delete one Branch
     *   }
     * })
     * 
     */
    delete<T extends BranchDeleteArgs>(args: SelectSubset<T, BranchDeleteArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Branch.
     * @param {BranchUpdateArgs} args - Arguments to update one Branch.
     * @example
     * // Update one Branch
     * const branch = await prisma.branch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchUpdateArgs>(args: SelectSubset<T, BranchUpdateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Branches.
     * @param {BranchDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchDeleteManyArgs>(args?: SelectSubset<T, BranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchUpdateManyArgs>(args: SelectSubset<T, BranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches and returns the data updated in the database.
     * @param {BranchUpdateManyAndReturnArgs} args - Arguments to update many Branches.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Branches and only return the `id`
     * const branchWithIdOnly = await prisma.branch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BranchUpdateManyAndReturnArgs>(args: SelectSubset<T, BranchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Branch.
     * @param {BranchUpsertArgs} args - Arguments to update or create a Branch.
     * @example
     * // Update or create a Branch
     * const branch = await prisma.branch.upsert({
     *   create: {
     *     // ... data to create a Branch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branch we want to update
     *   }
     * })
     */
    upsert<T extends BranchUpsertArgs>(args: SelectSubset<T, BranchUpsertArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branch.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends BranchCountArgs>(
      args?: Subset<T, BranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchAggregateArgs>(args: Subset<T, BranchAggregateArgs>): Prisma.PrismaPromise<GetBranchAggregateType<T>>

    /**
     * Group by Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchGroupByArgs['orderBy'] }
        : { orderBy?: BranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Branch model
   */
  readonly fields: BranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Branch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employees<T extends Branch$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Branch$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaveRequests<T extends Branch$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Branch$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryAdvanceRequests<T extends Branch$salaryAdvanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Branch$salaryAdvanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Branch model
   */
  interface BranchFieldRefs {
    readonly id: FieldRef<"Branch", 'String'>
    readonly name: FieldRef<"Branch", 'String'>
    readonly location: FieldRef<"Branch", 'String'>
    readonly address: FieldRef<"Branch", 'String'>
    readonly managerId: FieldRef<"Branch", 'String'>
    readonly managerUserId: FieldRef<"Branch", 'String'>
    readonly departmentId: FieldRef<"Branch", 'String'>
    readonly employeeCount: FieldRef<"Branch", 'Int'>
    readonly status: FieldRef<"Branch", 'String'>
    readonly createdAt: FieldRef<"Branch", 'DateTime'>
    readonly updatedAt: FieldRef<"Branch", 'DateTime'>
    readonly tenantId: FieldRef<"Branch", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Branch findUnique
   */
  export type BranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findUniqueOrThrow
   */
  export type BranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findFirst
   */
  export type BranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findFirstOrThrow
   */
  export type BranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findMany
   */
  export type BranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branches to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch create
   */
  export type BranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to create a Branch.
     */
    data: XOR<BranchCreateInput, BranchUncheckedCreateInput>
  }

  /**
   * Branch createMany
   */
  export type BranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Branch createManyAndReturn
   */
  export type BranchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Branch update
   */
  export type BranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to update a Branch.
     */
    data: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
    /**
     * Choose, which Branch to update.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch updateMany
   */
  export type BranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
  }

  /**
   * Branch updateManyAndReturn
   */
  export type BranchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Branch upsert
   */
  export type BranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The filter to search for the Branch to update in case it exists.
     */
    where: BranchWhereUniqueInput
    /**
     * In case the Branch found by the `where` argument doesn't exist, create a new Branch with this data.
     */
    create: XOR<BranchCreateInput, BranchUncheckedCreateInput>
    /**
     * In case the Branch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
  }

  /**
   * Branch delete
   */
  export type BranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter which Branch to delete.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch deleteMany
   */
  export type BranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branches to delete
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to delete.
     */
    limit?: number
  }

  /**
   * Branch.employees
   */
  export type Branch$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Branch.leaveRequests
   */
  export type Branch$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * Branch.salaryAdvanceRequests
   */
  export type Branch$salaryAdvanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    where?: SalaryAdvanceRequestWhereInput
    orderBy?: SalaryAdvanceRequestOrderByWithRelationInput | SalaryAdvanceRequestOrderByWithRelationInput[]
    cursor?: SalaryAdvanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryAdvanceRequestScalarFieldEnum | SalaryAdvanceRequestScalarFieldEnum[]
  }

  /**
   * Branch without action
   */
  export type BranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    salary: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    salary: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    employeeNumber: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    address: string | null
    position: string | null
    departmentId: string | null
    branchId: string | null
    salary: number | null
    hireDate: Date | null
    terminationDate: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    employeeNumber: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    address: string | null
    position: string | null
    departmentId: string | null
    branchId: string | null
    salary: number | null
    hireDate: Date | null
    terminationDate: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    employeeNumber: number
    firstName: number
    lastName: number
    email: number
    phone: number
    address: number
    position: number
    departmentId: number
    branchId: number
    salary: number
    hireDate: number
    terminationDate: number
    status: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    salary?: true
  }

  export type EmployeeSumAggregateInputType = {
    salary?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    employeeNumber?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    address?: true
    position?: true
    departmentId?: true
    branchId?: true
    salary?: true
    hireDate?: true
    terminationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    employeeNumber?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    address?: true
    position?: true
    departmentId?: true
    branchId?: true
    salary?: true
    hireDate?: true
    terminationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    employeeNumber?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    address?: true
    position?: true
    departmentId?: true
    branchId?: true
    salary?: true
    hireDate?: true
    terminationDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone: string | null
    address: string | null
    position: string
    departmentId: string
    branchId: string | null
    salary: number | null
    hireDate: Date
    terminationDate: Date | null
    status: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    position?: boolean
    departmentId?: boolean
    branchId?: boolean
    salary?: boolean
    hireDate?: boolean
    terminationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    branch?: boolean | Employee$branchArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    leaveBalances?: boolean | Employee$leaveBalancesArgs<ExtArgs>
    leaveRequests?: boolean | Employee$leaveRequestsArgs<ExtArgs>
    payStubs?: boolean | Employee$payStubsArgs<ExtArgs>
    payrolls?: boolean | Employee$payrollsArgs<ExtArgs>
    performanceGoals?: boolean | Employee$performanceGoalsArgs<ExtArgs>
    performanceReviews?: boolean | Employee$performanceReviewsArgs<ExtArgs>
    salaryAdvanceRequests?: boolean | Employee$salaryAdvanceRequestsArgs<ExtArgs>
    trainingEnrollments?: boolean | Employee$trainingEnrollmentsArgs<ExtArgs>
    user?: boolean | Employee$userArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    position?: boolean
    departmentId?: boolean
    branchId?: boolean
    salary?: boolean
    hireDate?: boolean
    terminationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    branch?: boolean | Employee$branchArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    position?: boolean
    departmentId?: boolean
    branchId?: boolean
    salary?: boolean
    hireDate?: boolean
    terminationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    branch?: boolean | Employee$branchArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    employeeNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    position?: boolean
    departmentId?: boolean
    branchId?: boolean
    salary?: boolean
    hireDate?: boolean
    terminationDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeNumber" | "firstName" | "lastName" | "email" | "phone" | "address" | "position" | "departmentId" | "branchId" | "salary" | "hireDate" | "terminationDate" | "status" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | Employee$branchArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    leaveBalances?: boolean | Employee$leaveBalancesArgs<ExtArgs>
    leaveRequests?: boolean | Employee$leaveRequestsArgs<ExtArgs>
    payStubs?: boolean | Employee$payStubsArgs<ExtArgs>
    payrolls?: boolean | Employee$payrollsArgs<ExtArgs>
    performanceGoals?: boolean | Employee$performanceGoalsArgs<ExtArgs>
    performanceReviews?: boolean | Employee$performanceReviewsArgs<ExtArgs>
    salaryAdvanceRequests?: boolean | Employee$salaryAdvanceRequestsArgs<ExtArgs>
    trainingEnrollments?: boolean | Employee$trainingEnrollmentsArgs<ExtArgs>
    user?: boolean | Employee$userArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | Employee$branchArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | Employee$branchArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      branch: Prisma.$BranchPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
      leaveBalances: Prisma.$LeaveBalancePayload<ExtArgs>[]
      leaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      payStubs: Prisma.$PayStubPayload<ExtArgs>[]
      payrolls: Prisma.$PayrollPayload<ExtArgs>[]
      performanceGoals: Prisma.$PerformanceGoalPayload<ExtArgs>[]
      performanceReviews: Prisma.$PerformanceReviewPayload<ExtArgs>[]
      salaryAdvanceRequests: Prisma.$SalaryAdvanceRequestPayload<ExtArgs>[]
      trainingEnrollments: Prisma.$TrainingEnrollmentPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeNumber: string
      firstName: string
      lastName: string
      email: string
      phone: string | null
      address: string | null
      position: string
      departmentId: string
      branchId: string | null
      salary: number | null
      hireDate: Date
      terminationDate: Date | null
      status: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends Employee$branchArgs<ExtArgs> = {}>(args?: Subset<T, Employee$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    leaveBalances<T extends Employee$leaveBalancesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$leaveBalancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaveRequests<T extends Employee$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payStubs<T extends Employee$payStubsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$payStubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payrolls<T extends Employee$payrollsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$payrollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceGoals<T extends Employee$performanceGoalsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$performanceGoalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceReviews<T extends Employee$performanceReviewsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$performanceReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryAdvanceRequests<T extends Employee$salaryAdvanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$salaryAdvanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trainingEnrollments<T extends Employee$trainingEnrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$trainingEnrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends Employee$userArgs<ExtArgs> = {}>(args?: Subset<T, Employee$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly employeeNumber: FieldRef<"Employee", 'String'>
    readonly firstName: FieldRef<"Employee", 'String'>
    readonly lastName: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly phone: FieldRef<"Employee", 'String'>
    readonly address: FieldRef<"Employee", 'String'>
    readonly position: FieldRef<"Employee", 'String'>
    readonly departmentId: FieldRef<"Employee", 'String'>
    readonly branchId: FieldRef<"Employee", 'String'>
    readonly salary: FieldRef<"Employee", 'Float'>
    readonly hireDate: FieldRef<"Employee", 'DateTime'>
    readonly terminationDate: FieldRef<"Employee", 'DateTime'>
    readonly status: FieldRef<"Employee", 'String'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
    readonly tenantId: FieldRef<"Employee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.branch
   */
  export type Employee$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * Employee.leaveBalances
   */
  export type Employee$leaveBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    where?: LeaveBalanceWhereInput
    orderBy?: LeaveBalanceOrderByWithRelationInput | LeaveBalanceOrderByWithRelationInput[]
    cursor?: LeaveBalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveBalanceScalarFieldEnum | LeaveBalanceScalarFieldEnum[]
  }

  /**
   * Employee.leaveRequests
   */
  export type Employee$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * Employee.payStubs
   */
  export type Employee$payStubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    where?: PayStubWhereInput
    orderBy?: PayStubOrderByWithRelationInput | PayStubOrderByWithRelationInput[]
    cursor?: PayStubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayStubScalarFieldEnum | PayStubScalarFieldEnum[]
  }

  /**
   * Employee.payrolls
   */
  export type Employee$payrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    where?: PayrollWhereInput
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    cursor?: PayrollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * Employee.performanceGoals
   */
  export type Employee$performanceGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    where?: PerformanceGoalWhereInput
    orderBy?: PerformanceGoalOrderByWithRelationInput | PerformanceGoalOrderByWithRelationInput[]
    cursor?: PerformanceGoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceGoalScalarFieldEnum | PerformanceGoalScalarFieldEnum[]
  }

  /**
   * Employee.performanceReviews
   */
  export type Employee$performanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    where?: PerformanceReviewWhereInput
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    cursor?: PerformanceReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * Employee.salaryAdvanceRequests
   */
  export type Employee$salaryAdvanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    where?: SalaryAdvanceRequestWhereInput
    orderBy?: SalaryAdvanceRequestOrderByWithRelationInput | SalaryAdvanceRequestOrderByWithRelationInput[]
    cursor?: SalaryAdvanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryAdvanceRequestScalarFieldEnum | SalaryAdvanceRequestScalarFieldEnum[]
  }

  /**
   * Employee.trainingEnrollments
   */
  export type Employee$trainingEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    where?: TrainingEnrollmentWhereInput
    orderBy?: TrainingEnrollmentOrderByWithRelationInput | TrainingEnrollmentOrderByWithRelationInput[]
    cursor?: TrainingEnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingEnrollmentScalarFieldEnum | TrainingEnrollmentScalarFieldEnum[]
  }

  /**
   * Employee.user
   */
  export type Employee$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model PayrollPeriod
   */

  export type AggregatePayrollPeriod = {
    _count: PayrollPeriodCountAggregateOutputType | null
    _min: PayrollPeriodMinAggregateOutputType | null
    _max: PayrollPeriodMaxAggregateOutputType | null
  }

  export type PayrollPeriodMinAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    payDate: Date | null
    status: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayrollPeriodMaxAggregateOutputType = {
    id: string | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    payDate: Date | null
    status: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayrollPeriodCountAggregateOutputType = {
    id: number
    name: number
    startDate: number
    endDate: number
    payDate: number
    status: number
    description: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PayrollPeriodMinAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    payDate?: true
    status?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayrollPeriodMaxAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    payDate?: true
    status?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayrollPeriodCountAggregateInputType = {
    id?: true
    name?: true
    startDate?: true
    endDate?: true
    payDate?: true
    status?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PayrollPeriodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollPeriod to aggregate.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollPeriods
    **/
    _count?: true | PayrollPeriodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollPeriodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollPeriodMaxAggregateInputType
  }

  export type GetPayrollPeriodAggregateType<T extends PayrollPeriodAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollPeriod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollPeriod[P]>
      : GetScalarType<T[P], AggregatePayrollPeriod[P]>
  }




  export type PayrollPeriodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollPeriodWhereInput
    orderBy?: PayrollPeriodOrderByWithAggregationInput | PayrollPeriodOrderByWithAggregationInput[]
    by: PayrollPeriodScalarFieldEnum[] | PayrollPeriodScalarFieldEnum
    having?: PayrollPeriodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollPeriodCountAggregateInputType | true
    _min?: PayrollPeriodMinAggregateInputType
    _max?: PayrollPeriodMaxAggregateInputType
  }

  export type PayrollPeriodGroupByOutputType = {
    id: string
    name: string
    startDate: Date
    endDate: Date
    payDate: Date
    status: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PayrollPeriodCountAggregateOutputType | null
    _min: PayrollPeriodMinAggregateOutputType | null
    _max: PayrollPeriodMaxAggregateOutputType | null
  }

  type GetPayrollPeriodGroupByPayload<T extends PayrollPeriodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollPeriodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollPeriodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollPeriodGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollPeriodGroupByOutputType[P]>
        }
      >
    >


  export type PayrollPeriodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    payDate?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payStubs?: boolean | PayrollPeriod$payStubsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    payrolls?: boolean | PayrollPeriod$payrollsArgs<ExtArgs>
    salaryAdvanceRepayments?: boolean | PayrollPeriod$salaryAdvanceRepaymentsArgs<ExtArgs>
    _count?: boolean | PayrollPeriodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollPeriod"]>

  export type PayrollPeriodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    payDate?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollPeriod"]>

  export type PayrollPeriodSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    payDate?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollPeriod"]>

  export type PayrollPeriodSelectScalar = {
    id?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    payDate?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PayrollPeriodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "startDate" | "endDate" | "payDate" | "status" | "description" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["payrollPeriod"]>
  export type PayrollPeriodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payStubs?: boolean | PayrollPeriod$payStubsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    payrolls?: boolean | PayrollPeriod$payrollsArgs<ExtArgs>
    salaryAdvanceRepayments?: boolean | PayrollPeriod$salaryAdvanceRepaymentsArgs<ExtArgs>
    _count?: boolean | PayrollPeriodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PayrollPeriodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayrollPeriodIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PayrollPeriodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollPeriod"
    objects: {
      payStubs: Prisma.$PayStubPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
      payrolls: Prisma.$PayrollPayload<ExtArgs>[]
      salaryAdvanceRepayments: Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      startDate: Date
      endDate: Date
      payDate: Date
      status: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["payrollPeriod"]>
    composites: {}
  }

  type PayrollPeriodGetPayload<S extends boolean | null | undefined | PayrollPeriodDefaultArgs> = $Result.GetResult<Prisma.$PayrollPeriodPayload, S>

  type PayrollPeriodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayrollPeriodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayrollPeriodCountAggregateInputType | true
    }

  export interface PayrollPeriodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollPeriod'], meta: { name: 'PayrollPeriod' } }
    /**
     * Find zero or one PayrollPeriod that matches the filter.
     * @param {PayrollPeriodFindUniqueArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollPeriodFindUniqueArgs>(args: SelectSubset<T, PayrollPeriodFindUniqueArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayrollPeriod that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayrollPeriodFindUniqueOrThrowArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollPeriodFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollPeriodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollPeriod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodFindFirstArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollPeriodFindFirstArgs>(args?: SelectSubset<T, PayrollPeriodFindFirstArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollPeriod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodFindFirstOrThrowArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollPeriodFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollPeriodFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayrollPeriods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollPeriods
     * const payrollPeriods = await prisma.payrollPeriod.findMany()
     * 
     * // Get first 10 PayrollPeriods
     * const payrollPeriods = await prisma.payrollPeriod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollPeriodWithIdOnly = await prisma.payrollPeriod.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollPeriodFindManyArgs>(args?: SelectSubset<T, PayrollPeriodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayrollPeriod.
     * @param {PayrollPeriodCreateArgs} args - Arguments to create a PayrollPeriod.
     * @example
     * // Create one PayrollPeriod
     * const PayrollPeriod = await prisma.payrollPeriod.create({
     *   data: {
     *     // ... data to create a PayrollPeriod
     *   }
     * })
     * 
     */
    create<T extends PayrollPeriodCreateArgs>(args: SelectSubset<T, PayrollPeriodCreateArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayrollPeriods.
     * @param {PayrollPeriodCreateManyArgs} args - Arguments to create many PayrollPeriods.
     * @example
     * // Create many PayrollPeriods
     * const payrollPeriod = await prisma.payrollPeriod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollPeriodCreateManyArgs>(args?: SelectSubset<T, PayrollPeriodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollPeriods and returns the data saved in the database.
     * @param {PayrollPeriodCreateManyAndReturnArgs} args - Arguments to create many PayrollPeriods.
     * @example
     * // Create many PayrollPeriods
     * const payrollPeriod = await prisma.payrollPeriod.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollPeriods and only return the `id`
     * const payrollPeriodWithIdOnly = await prisma.payrollPeriod.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollPeriodCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollPeriodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayrollPeriod.
     * @param {PayrollPeriodDeleteArgs} args - Arguments to delete one PayrollPeriod.
     * @example
     * // Delete one PayrollPeriod
     * const PayrollPeriod = await prisma.payrollPeriod.delete({
     *   where: {
     *     // ... filter to delete one PayrollPeriod
     *   }
     * })
     * 
     */
    delete<T extends PayrollPeriodDeleteArgs>(args: SelectSubset<T, PayrollPeriodDeleteArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayrollPeriod.
     * @param {PayrollPeriodUpdateArgs} args - Arguments to update one PayrollPeriod.
     * @example
     * // Update one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollPeriodUpdateArgs>(args: SelectSubset<T, PayrollPeriodUpdateArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayrollPeriods.
     * @param {PayrollPeriodDeleteManyArgs} args - Arguments to filter PayrollPeriods to delete.
     * @example
     * // Delete a few PayrollPeriods
     * const { count } = await prisma.payrollPeriod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollPeriodDeleteManyArgs>(args?: SelectSubset<T, PayrollPeriodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollPeriods
     * const payrollPeriod = await prisma.payrollPeriod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollPeriodUpdateManyArgs>(args: SelectSubset<T, PayrollPeriodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollPeriods and returns the data updated in the database.
     * @param {PayrollPeriodUpdateManyAndReturnArgs} args - Arguments to update many PayrollPeriods.
     * @example
     * // Update many PayrollPeriods
     * const payrollPeriod = await prisma.payrollPeriod.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayrollPeriods and only return the `id`
     * const payrollPeriodWithIdOnly = await prisma.payrollPeriod.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayrollPeriodUpdateManyAndReturnArgs>(args: SelectSubset<T, PayrollPeriodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayrollPeriod.
     * @param {PayrollPeriodUpsertArgs} args - Arguments to update or create a PayrollPeriod.
     * @example
     * // Update or create a PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.upsert({
     *   create: {
     *     // ... data to create a PayrollPeriod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollPeriod we want to update
     *   }
     * })
     */
    upsert<T extends PayrollPeriodUpsertArgs>(args: SelectSubset<T, PayrollPeriodUpsertArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayrollPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodCountArgs} args - Arguments to filter PayrollPeriods to count.
     * @example
     * // Count the number of PayrollPeriods
     * const count = await prisma.payrollPeriod.count({
     *   where: {
     *     // ... the filter for the PayrollPeriods we want to count
     *   }
     * })
    **/
    count<T extends PayrollPeriodCountArgs>(
      args?: Subset<T, PayrollPeriodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollPeriodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollPeriodAggregateArgs>(args: Subset<T, PayrollPeriodAggregateArgs>): Prisma.PrismaPromise<GetPayrollPeriodAggregateType<T>>

    /**
     * Group by PayrollPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollPeriodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollPeriodGroupByArgs['orderBy'] }
        : { orderBy?: PayrollPeriodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollPeriodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollPeriodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollPeriod model
   */
  readonly fields: PayrollPeriodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollPeriod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollPeriodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payStubs<T extends PayrollPeriod$payStubsArgs<ExtArgs> = {}>(args?: Subset<T, PayrollPeriod$payStubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payrolls<T extends PayrollPeriod$payrollsArgs<ExtArgs> = {}>(args?: Subset<T, PayrollPeriod$payrollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryAdvanceRepayments<T extends PayrollPeriod$salaryAdvanceRepaymentsArgs<ExtArgs> = {}>(args?: Subset<T, PayrollPeriod$salaryAdvanceRepaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollPeriod model
   */
  interface PayrollPeriodFieldRefs {
    readonly id: FieldRef<"PayrollPeriod", 'String'>
    readonly name: FieldRef<"PayrollPeriod", 'String'>
    readonly startDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly endDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly payDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly status: FieldRef<"PayrollPeriod", 'String'>
    readonly description: FieldRef<"PayrollPeriod", 'String'>
    readonly createdAt: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly updatedAt: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly tenantId: FieldRef<"PayrollPeriod", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PayrollPeriod findUnique
   */
  export type PayrollPeriodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod findUniqueOrThrow
   */
  export type PayrollPeriodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod findFirst
   */
  export type PayrollPeriodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollPeriods.
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollPeriods.
     */
    distinct?: PayrollPeriodScalarFieldEnum | PayrollPeriodScalarFieldEnum[]
  }

  /**
   * PayrollPeriod findFirstOrThrow
   */
  export type PayrollPeriodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollPeriods.
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollPeriods.
     */
    distinct?: PayrollPeriodScalarFieldEnum | PayrollPeriodScalarFieldEnum[]
  }

  /**
   * PayrollPeriod findMany
   */
  export type PayrollPeriodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriods to fetch.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollPeriods.
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    distinct?: PayrollPeriodScalarFieldEnum | PayrollPeriodScalarFieldEnum[]
  }

  /**
   * PayrollPeriod create
   */
  export type PayrollPeriodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollPeriod.
     */
    data: XOR<PayrollPeriodCreateInput, PayrollPeriodUncheckedCreateInput>
  }

  /**
   * PayrollPeriod createMany
   */
  export type PayrollPeriodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollPeriods.
     */
    data: PayrollPeriodCreateManyInput | PayrollPeriodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollPeriod createManyAndReturn
   */
  export type PayrollPeriodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * The data used to create many PayrollPeriods.
     */
    data: PayrollPeriodCreateManyInput | PayrollPeriodCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollPeriod update
   */
  export type PayrollPeriodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollPeriod.
     */
    data: XOR<PayrollPeriodUpdateInput, PayrollPeriodUncheckedUpdateInput>
    /**
     * Choose, which PayrollPeriod to update.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod updateMany
   */
  export type PayrollPeriodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollPeriods.
     */
    data: XOR<PayrollPeriodUpdateManyMutationInput, PayrollPeriodUncheckedUpdateManyInput>
    /**
     * Filter which PayrollPeriods to update
     */
    where?: PayrollPeriodWhereInput
    /**
     * Limit how many PayrollPeriods to update.
     */
    limit?: number
  }

  /**
   * PayrollPeriod updateManyAndReturn
   */
  export type PayrollPeriodUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * The data used to update PayrollPeriods.
     */
    data: XOR<PayrollPeriodUpdateManyMutationInput, PayrollPeriodUncheckedUpdateManyInput>
    /**
     * Filter which PayrollPeriods to update
     */
    where?: PayrollPeriodWhereInput
    /**
     * Limit how many PayrollPeriods to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollPeriod upsert
   */
  export type PayrollPeriodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollPeriod to update in case it exists.
     */
    where: PayrollPeriodWhereUniqueInput
    /**
     * In case the PayrollPeriod found by the `where` argument doesn't exist, create a new PayrollPeriod with this data.
     */
    create: XOR<PayrollPeriodCreateInput, PayrollPeriodUncheckedCreateInput>
    /**
     * In case the PayrollPeriod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollPeriodUpdateInput, PayrollPeriodUncheckedUpdateInput>
  }

  /**
   * PayrollPeriod delete
   */
  export type PayrollPeriodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter which PayrollPeriod to delete.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod deleteMany
   */
  export type PayrollPeriodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollPeriods to delete
     */
    where?: PayrollPeriodWhereInput
    /**
     * Limit how many PayrollPeriods to delete.
     */
    limit?: number
  }

  /**
   * PayrollPeriod.payStubs
   */
  export type PayrollPeriod$payStubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    where?: PayStubWhereInput
    orderBy?: PayStubOrderByWithRelationInput | PayStubOrderByWithRelationInput[]
    cursor?: PayStubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayStubScalarFieldEnum | PayStubScalarFieldEnum[]
  }

  /**
   * PayrollPeriod.payrolls
   */
  export type PayrollPeriod$payrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    where?: PayrollWhereInput
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    cursor?: PayrollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * PayrollPeriod.salaryAdvanceRepayments
   */
  export type PayrollPeriod$salaryAdvanceRepaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    where?: SalaryAdvanceRepaymentWhereInput
    orderBy?: SalaryAdvanceRepaymentOrderByWithRelationInput | SalaryAdvanceRepaymentOrderByWithRelationInput[]
    cursor?: SalaryAdvanceRepaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryAdvanceRepaymentScalarFieldEnum | SalaryAdvanceRepaymentScalarFieldEnum[]
  }

  /**
   * PayrollPeriod without action
   */
  export type PayrollPeriodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
  }


  /**
   * Model Payroll
   */

  export type AggregatePayroll = {
    _count: PayrollCountAggregateOutputType | null
    _avg: PayrollAvgAggregateOutputType | null
    _sum: PayrollSumAggregateOutputType | null
    _min: PayrollMinAggregateOutputType | null
    _max: PayrollMaxAggregateOutputType | null
  }

  export type PayrollAvgAggregateOutputType = {
    basicSalary: number | null
    grossSalary: number | null
    totalDeductions: number | null
    netSalary: number | null
  }

  export type PayrollSumAggregateOutputType = {
    basicSalary: number | null
    grossSalary: number | null
    totalDeductions: number | null
    netSalary: number | null
  }

  export type PayrollMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    payrollPeriodId: string | null
    basicSalary: number | null
    grossSalary: number | null
    totalDeductions: number | null
    netSalary: number | null
    status: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayrollMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    payrollPeriodId: string | null
    basicSalary: number | null
    grossSalary: number | null
    totalDeductions: number | null
    netSalary: number | null
    status: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayrollCountAggregateOutputType = {
    id: number
    employeeId: number
    payrollPeriodId: number
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status: number
    processedAt: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PayrollAvgAggregateInputType = {
    basicSalary?: true
    grossSalary?: true
    totalDeductions?: true
    netSalary?: true
  }

  export type PayrollSumAggregateInputType = {
    basicSalary?: true
    grossSalary?: true
    totalDeductions?: true
    netSalary?: true
  }

  export type PayrollMinAggregateInputType = {
    id?: true
    employeeId?: true
    payrollPeriodId?: true
    basicSalary?: true
    grossSalary?: true
    totalDeductions?: true
    netSalary?: true
    status?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayrollMaxAggregateInputType = {
    id?: true
    employeeId?: true
    payrollPeriodId?: true
    basicSalary?: true
    grossSalary?: true
    totalDeductions?: true
    netSalary?: true
    status?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayrollCountAggregateInputType = {
    id?: true
    employeeId?: true
    payrollPeriodId?: true
    basicSalary?: true
    grossSalary?: true
    totalDeductions?: true
    netSalary?: true
    status?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PayrollAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payroll to aggregate.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payrolls
    **/
    _count?: true | PayrollCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollMaxAggregateInputType
  }

  export type GetPayrollAggregateType<T extends PayrollAggregateArgs> = {
        [P in keyof T & keyof AggregatePayroll]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayroll[P]>
      : GetScalarType<T[P], AggregatePayroll[P]>
  }




  export type PayrollGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollWhereInput
    orderBy?: PayrollOrderByWithAggregationInput | PayrollOrderByWithAggregationInput[]
    by: PayrollScalarFieldEnum[] | PayrollScalarFieldEnum
    having?: PayrollScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollCountAggregateInputType | true
    _avg?: PayrollAvgAggregateInputType
    _sum?: PayrollSumAggregateInputType
    _min?: PayrollMinAggregateInputType
    _max?: PayrollMaxAggregateInputType
  }

  export type PayrollGroupByOutputType = {
    id: string
    employeeId: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status: string
    processedAt: Date | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PayrollCountAggregateOutputType | null
    _avg: PayrollAvgAggregateOutputType | null
    _sum: PayrollSumAggregateOutputType | null
    _min: PayrollMinAggregateOutputType | null
    _max: PayrollMaxAggregateOutputType | null
  }

  type GetPayrollGroupByPayload<T extends PayrollGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollGroupByOutputType[P]>
        }
      >
    >


  export type PayrollSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollPeriodId?: boolean
    basicSalary?: boolean
    grossSalary?: boolean
    totalDeductions?: boolean
    netSalary?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payStub?: boolean | Payroll$payStubArgs<ExtArgs>
    payrollItems?: boolean | Payroll$payrollItemsArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | PayrollCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payroll"]>

  export type PayrollSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollPeriodId?: boolean
    basicSalary?: boolean
    grossSalary?: boolean
    totalDeductions?: boolean
    netSalary?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payroll"]>

  export type PayrollSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollPeriodId?: boolean
    basicSalary?: boolean
    grossSalary?: boolean
    totalDeductions?: boolean
    netSalary?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payroll"]>

  export type PayrollSelectScalar = {
    id?: boolean
    employeeId?: boolean
    payrollPeriodId?: boolean
    basicSalary?: boolean
    grossSalary?: boolean
    totalDeductions?: boolean
    netSalary?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PayrollOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "payrollPeriodId" | "basicSalary" | "grossSalary" | "totalDeductions" | "netSalary" | "status" | "processedAt" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["payroll"]>
  export type PayrollInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payStub?: boolean | Payroll$payStubArgs<ExtArgs>
    payrollItems?: boolean | Payroll$payrollItemsArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | PayrollCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PayrollIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayrollIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PayrollPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payroll"
    objects: {
      payStub: Prisma.$PayStubPayload<ExtArgs> | null
      payrollItems: Prisma.$PayrollItemPayload<ExtArgs>[]
      employee: Prisma.$EmployeePayload<ExtArgs>
      payrollPeriod: Prisma.$PayrollPeriodPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      payrollPeriodId: string
      basicSalary: number
      grossSalary: number
      totalDeductions: number
      netSalary: number
      status: string
      processedAt: Date | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["payroll"]>
    composites: {}
  }

  type PayrollGetPayload<S extends boolean | null | undefined | PayrollDefaultArgs> = $Result.GetResult<Prisma.$PayrollPayload, S>

  type PayrollCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayrollFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayrollCountAggregateInputType | true
    }

  export interface PayrollDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payroll'], meta: { name: 'Payroll' } }
    /**
     * Find zero or one Payroll that matches the filter.
     * @param {PayrollFindUniqueArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollFindUniqueArgs>(args: SelectSubset<T, PayrollFindUniqueArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payroll that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayrollFindUniqueOrThrowArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payroll that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollFindFirstArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollFindFirstArgs>(args?: SelectSubset<T, PayrollFindFirstArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payroll that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollFindFirstOrThrowArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payrolls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payrolls
     * const payrolls = await prisma.payroll.findMany()
     * 
     * // Get first 10 Payrolls
     * const payrolls = await prisma.payroll.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollWithIdOnly = await prisma.payroll.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollFindManyArgs>(args?: SelectSubset<T, PayrollFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payroll.
     * @param {PayrollCreateArgs} args - Arguments to create a Payroll.
     * @example
     * // Create one Payroll
     * const Payroll = await prisma.payroll.create({
     *   data: {
     *     // ... data to create a Payroll
     *   }
     * })
     * 
     */
    create<T extends PayrollCreateArgs>(args: SelectSubset<T, PayrollCreateArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payrolls.
     * @param {PayrollCreateManyArgs} args - Arguments to create many Payrolls.
     * @example
     * // Create many Payrolls
     * const payroll = await prisma.payroll.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollCreateManyArgs>(args?: SelectSubset<T, PayrollCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payrolls and returns the data saved in the database.
     * @param {PayrollCreateManyAndReturnArgs} args - Arguments to create many Payrolls.
     * @example
     * // Create many Payrolls
     * const payroll = await prisma.payroll.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payrolls and only return the `id`
     * const payrollWithIdOnly = await prisma.payroll.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payroll.
     * @param {PayrollDeleteArgs} args - Arguments to delete one Payroll.
     * @example
     * // Delete one Payroll
     * const Payroll = await prisma.payroll.delete({
     *   where: {
     *     // ... filter to delete one Payroll
     *   }
     * })
     * 
     */
    delete<T extends PayrollDeleteArgs>(args: SelectSubset<T, PayrollDeleteArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payroll.
     * @param {PayrollUpdateArgs} args - Arguments to update one Payroll.
     * @example
     * // Update one Payroll
     * const payroll = await prisma.payroll.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollUpdateArgs>(args: SelectSubset<T, PayrollUpdateArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payrolls.
     * @param {PayrollDeleteManyArgs} args - Arguments to filter Payrolls to delete.
     * @example
     * // Delete a few Payrolls
     * const { count } = await prisma.payroll.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollDeleteManyArgs>(args?: SelectSubset<T, PayrollDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payrolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payrolls
     * const payroll = await prisma.payroll.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollUpdateManyArgs>(args: SelectSubset<T, PayrollUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payrolls and returns the data updated in the database.
     * @param {PayrollUpdateManyAndReturnArgs} args - Arguments to update many Payrolls.
     * @example
     * // Update many Payrolls
     * const payroll = await prisma.payroll.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payrolls and only return the `id`
     * const payrollWithIdOnly = await prisma.payroll.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayrollUpdateManyAndReturnArgs>(args: SelectSubset<T, PayrollUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payroll.
     * @param {PayrollUpsertArgs} args - Arguments to update or create a Payroll.
     * @example
     * // Update or create a Payroll
     * const payroll = await prisma.payroll.upsert({
     *   create: {
     *     // ... data to create a Payroll
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payroll we want to update
     *   }
     * })
     */
    upsert<T extends PayrollUpsertArgs>(args: SelectSubset<T, PayrollUpsertArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payrolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollCountArgs} args - Arguments to filter Payrolls to count.
     * @example
     * // Count the number of Payrolls
     * const count = await prisma.payroll.count({
     *   where: {
     *     // ... the filter for the Payrolls we want to count
     *   }
     * })
    **/
    count<T extends PayrollCountArgs>(
      args?: Subset<T, PayrollCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payroll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollAggregateArgs>(args: Subset<T, PayrollAggregateArgs>): Prisma.PrismaPromise<GetPayrollAggregateType<T>>

    /**
     * Group by Payroll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollGroupByArgs['orderBy'] }
        : { orderBy?: PayrollGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payroll model
   */
  readonly fields: PayrollFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payroll.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payStub<T extends Payroll$payStubArgs<ExtArgs> = {}>(args?: Subset<T, Payroll$payStubArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    payrollItems<T extends Payroll$payrollItemsArgs<ExtArgs> = {}>(args?: Subset<T, Payroll$payrollItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payrollPeriod<T extends PayrollPeriodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayrollPeriodDefaultArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payroll model
   */
  interface PayrollFieldRefs {
    readonly id: FieldRef<"Payroll", 'String'>
    readonly employeeId: FieldRef<"Payroll", 'String'>
    readonly payrollPeriodId: FieldRef<"Payroll", 'String'>
    readonly basicSalary: FieldRef<"Payroll", 'Float'>
    readonly grossSalary: FieldRef<"Payroll", 'Float'>
    readonly totalDeductions: FieldRef<"Payroll", 'Float'>
    readonly netSalary: FieldRef<"Payroll", 'Float'>
    readonly status: FieldRef<"Payroll", 'String'>
    readonly processedAt: FieldRef<"Payroll", 'DateTime'>
    readonly createdAt: FieldRef<"Payroll", 'DateTime'>
    readonly updatedAt: FieldRef<"Payroll", 'DateTime'>
    readonly tenantId: FieldRef<"Payroll", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Payroll findUnique
   */
  export type PayrollFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where: PayrollWhereUniqueInput
  }

  /**
   * Payroll findUniqueOrThrow
   */
  export type PayrollFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where: PayrollWhereUniqueInput
  }

  /**
   * Payroll findFirst
   */
  export type PayrollFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payrolls.
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payrolls.
     */
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * Payroll findFirstOrThrow
   */
  export type PayrollFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payrolls.
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payrolls.
     */
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * Payroll findMany
   */
  export type PayrollFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payrolls to fetch.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payrolls.
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * Payroll create
   */
  export type PayrollCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * The data needed to create a Payroll.
     */
    data: XOR<PayrollCreateInput, PayrollUncheckedCreateInput>
  }

  /**
   * Payroll createMany
   */
  export type PayrollCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payrolls.
     */
    data: PayrollCreateManyInput | PayrollCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payroll createManyAndReturn
   */
  export type PayrollCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * The data used to create many Payrolls.
     */
    data: PayrollCreateManyInput | PayrollCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payroll update
   */
  export type PayrollUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * The data needed to update a Payroll.
     */
    data: XOR<PayrollUpdateInput, PayrollUncheckedUpdateInput>
    /**
     * Choose, which Payroll to update.
     */
    where: PayrollWhereUniqueInput
  }

  /**
   * Payroll updateMany
   */
  export type PayrollUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payrolls.
     */
    data: XOR<PayrollUpdateManyMutationInput, PayrollUncheckedUpdateManyInput>
    /**
     * Filter which Payrolls to update
     */
    where?: PayrollWhereInput
    /**
     * Limit how many Payrolls to update.
     */
    limit?: number
  }

  /**
   * Payroll updateManyAndReturn
   */
  export type PayrollUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * The data used to update Payrolls.
     */
    data: XOR<PayrollUpdateManyMutationInput, PayrollUncheckedUpdateManyInput>
    /**
     * Filter which Payrolls to update
     */
    where?: PayrollWhereInput
    /**
     * Limit how many Payrolls to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payroll upsert
   */
  export type PayrollUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * The filter to search for the Payroll to update in case it exists.
     */
    where: PayrollWhereUniqueInput
    /**
     * In case the Payroll found by the `where` argument doesn't exist, create a new Payroll with this data.
     */
    create: XOR<PayrollCreateInput, PayrollUncheckedCreateInput>
    /**
     * In case the Payroll was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollUpdateInput, PayrollUncheckedUpdateInput>
  }

  /**
   * Payroll delete
   */
  export type PayrollDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter which Payroll to delete.
     */
    where: PayrollWhereUniqueInput
  }

  /**
   * Payroll deleteMany
   */
  export type PayrollDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payrolls to delete
     */
    where?: PayrollWhereInput
    /**
     * Limit how many Payrolls to delete.
     */
    limit?: number
  }

  /**
   * Payroll.payStub
   */
  export type Payroll$payStubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    where?: PayStubWhereInput
  }

  /**
   * Payroll.payrollItems
   */
  export type Payroll$payrollItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    where?: PayrollItemWhereInput
    orderBy?: PayrollItemOrderByWithRelationInput | PayrollItemOrderByWithRelationInput[]
    cursor?: PayrollItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollItemScalarFieldEnum | PayrollItemScalarFieldEnum[]
  }

  /**
   * Payroll without action
   */
  export type PayrollDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payroll
     */
    omit?: PayrollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollInclude<ExtArgs> | null
  }


  /**
   * Model PayrollItem
   */

  export type AggregatePayrollItem = {
    _count: PayrollItemCountAggregateOutputType | null
    _avg: PayrollItemAvgAggregateOutputType | null
    _sum: PayrollItemSumAggregateOutputType | null
    _min: PayrollItemMinAggregateOutputType | null
    _max: PayrollItemMaxAggregateOutputType | null
  }

  export type PayrollItemAvgAggregateOutputType = {
    amount: number | null
  }

  export type PayrollItemSumAggregateOutputType = {
    amount: number | null
  }

  export type PayrollItemMinAggregateOutputType = {
    id: string | null
    payrollId: string | null
    type: string | null
    category: string | null
    name: string | null
    amount: number | null
    isStatutory: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayrollItemMaxAggregateOutputType = {
    id: string | null
    payrollId: string | null
    type: string | null
    category: string | null
    name: string | null
    amount: number | null
    isStatutory: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayrollItemCountAggregateOutputType = {
    id: number
    payrollId: number
    type: number
    category: number
    name: number
    amount: number
    isStatutory: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PayrollItemAvgAggregateInputType = {
    amount?: true
  }

  export type PayrollItemSumAggregateInputType = {
    amount?: true
  }

  export type PayrollItemMinAggregateInputType = {
    id?: true
    payrollId?: true
    type?: true
    category?: true
    name?: true
    amount?: true
    isStatutory?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayrollItemMaxAggregateInputType = {
    id?: true
    payrollId?: true
    type?: true
    category?: true
    name?: true
    amount?: true
    isStatutory?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayrollItemCountAggregateInputType = {
    id?: true
    payrollId?: true
    type?: true
    category?: true
    name?: true
    amount?: true
    isStatutory?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PayrollItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollItem to aggregate.
     */
    where?: PayrollItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollItems to fetch.
     */
    orderBy?: PayrollItemOrderByWithRelationInput | PayrollItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollItems
    **/
    _count?: true | PayrollItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollItemMaxAggregateInputType
  }

  export type GetPayrollItemAggregateType<T extends PayrollItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollItem[P]>
      : GetScalarType<T[P], AggregatePayrollItem[P]>
  }




  export type PayrollItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollItemWhereInput
    orderBy?: PayrollItemOrderByWithAggregationInput | PayrollItemOrderByWithAggregationInput[]
    by: PayrollItemScalarFieldEnum[] | PayrollItemScalarFieldEnum
    having?: PayrollItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollItemCountAggregateInputType | true
    _avg?: PayrollItemAvgAggregateInputType
    _sum?: PayrollItemSumAggregateInputType
    _min?: PayrollItemMinAggregateInputType
    _max?: PayrollItemMaxAggregateInputType
  }

  export type PayrollItemGroupByOutputType = {
    id: string
    payrollId: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory: boolean
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PayrollItemCountAggregateOutputType | null
    _avg: PayrollItemAvgAggregateOutputType | null
    _sum: PayrollItemSumAggregateOutputType | null
    _min: PayrollItemMinAggregateOutputType | null
    _max: PayrollItemMaxAggregateOutputType | null
  }

  type GetPayrollItemGroupByPayload<T extends PayrollItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollItemGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollItemGroupByOutputType[P]>
        }
      >
    >


  export type PayrollItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payrollId?: boolean
    type?: boolean
    category?: boolean
    name?: boolean
    amount?: boolean
    isStatutory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollItem"]>

  export type PayrollItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payrollId?: boolean
    type?: boolean
    category?: boolean
    name?: boolean
    amount?: boolean
    isStatutory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollItem"]>

  export type PayrollItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payrollId?: boolean
    type?: boolean
    category?: boolean
    name?: boolean
    amount?: boolean
    isStatutory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollItem"]>

  export type PayrollItemSelectScalar = {
    id?: boolean
    payrollId?: boolean
    type?: boolean
    category?: boolean
    name?: boolean
    amount?: boolean
    isStatutory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PayrollItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "payrollId" | "type" | "category" | "name" | "amount" | "isStatutory" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["payrollItem"]>
  export type PayrollItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayrollItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayrollItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PayrollItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollItem"
    objects: {
      payroll: Prisma.$PayrollPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      payrollId: string
      type: string
      category: string
      name: string
      amount: number
      isStatutory: boolean
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["payrollItem"]>
    composites: {}
  }

  type PayrollItemGetPayload<S extends boolean | null | undefined | PayrollItemDefaultArgs> = $Result.GetResult<Prisma.$PayrollItemPayload, S>

  type PayrollItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayrollItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayrollItemCountAggregateInputType | true
    }

  export interface PayrollItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollItem'], meta: { name: 'PayrollItem' } }
    /**
     * Find zero or one PayrollItem that matches the filter.
     * @param {PayrollItemFindUniqueArgs} args - Arguments to find a PayrollItem
     * @example
     * // Get one PayrollItem
     * const payrollItem = await prisma.payrollItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollItemFindUniqueArgs>(args: SelectSubset<T, PayrollItemFindUniqueArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayrollItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayrollItemFindUniqueOrThrowArgs} args - Arguments to find a PayrollItem
     * @example
     * // Get one PayrollItem
     * const payrollItem = await prisma.payrollItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollItemFindFirstArgs} args - Arguments to find a PayrollItem
     * @example
     * // Get one PayrollItem
     * const payrollItem = await prisma.payrollItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollItemFindFirstArgs>(args?: SelectSubset<T, PayrollItemFindFirstArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollItemFindFirstOrThrowArgs} args - Arguments to find a PayrollItem
     * @example
     * // Get one PayrollItem
     * const payrollItem = await prisma.payrollItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayrollItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollItems
     * const payrollItems = await prisma.payrollItem.findMany()
     * 
     * // Get first 10 PayrollItems
     * const payrollItems = await prisma.payrollItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollItemWithIdOnly = await prisma.payrollItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollItemFindManyArgs>(args?: SelectSubset<T, PayrollItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayrollItem.
     * @param {PayrollItemCreateArgs} args - Arguments to create a PayrollItem.
     * @example
     * // Create one PayrollItem
     * const PayrollItem = await prisma.payrollItem.create({
     *   data: {
     *     // ... data to create a PayrollItem
     *   }
     * })
     * 
     */
    create<T extends PayrollItemCreateArgs>(args: SelectSubset<T, PayrollItemCreateArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayrollItems.
     * @param {PayrollItemCreateManyArgs} args - Arguments to create many PayrollItems.
     * @example
     * // Create many PayrollItems
     * const payrollItem = await prisma.payrollItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollItemCreateManyArgs>(args?: SelectSubset<T, PayrollItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollItems and returns the data saved in the database.
     * @param {PayrollItemCreateManyAndReturnArgs} args - Arguments to create many PayrollItems.
     * @example
     * // Create many PayrollItems
     * const payrollItem = await prisma.payrollItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollItems and only return the `id`
     * const payrollItemWithIdOnly = await prisma.payrollItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayrollItem.
     * @param {PayrollItemDeleteArgs} args - Arguments to delete one PayrollItem.
     * @example
     * // Delete one PayrollItem
     * const PayrollItem = await prisma.payrollItem.delete({
     *   where: {
     *     // ... filter to delete one PayrollItem
     *   }
     * })
     * 
     */
    delete<T extends PayrollItemDeleteArgs>(args: SelectSubset<T, PayrollItemDeleteArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayrollItem.
     * @param {PayrollItemUpdateArgs} args - Arguments to update one PayrollItem.
     * @example
     * // Update one PayrollItem
     * const payrollItem = await prisma.payrollItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollItemUpdateArgs>(args: SelectSubset<T, PayrollItemUpdateArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayrollItems.
     * @param {PayrollItemDeleteManyArgs} args - Arguments to filter PayrollItems to delete.
     * @example
     * // Delete a few PayrollItems
     * const { count } = await prisma.payrollItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollItemDeleteManyArgs>(args?: SelectSubset<T, PayrollItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollItems
     * const payrollItem = await prisma.payrollItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollItemUpdateManyArgs>(args: SelectSubset<T, PayrollItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollItems and returns the data updated in the database.
     * @param {PayrollItemUpdateManyAndReturnArgs} args - Arguments to update many PayrollItems.
     * @example
     * // Update many PayrollItems
     * const payrollItem = await prisma.payrollItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayrollItems and only return the `id`
     * const payrollItemWithIdOnly = await prisma.payrollItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayrollItemUpdateManyAndReturnArgs>(args: SelectSubset<T, PayrollItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayrollItem.
     * @param {PayrollItemUpsertArgs} args - Arguments to update or create a PayrollItem.
     * @example
     * // Update or create a PayrollItem
     * const payrollItem = await prisma.payrollItem.upsert({
     *   create: {
     *     // ... data to create a PayrollItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollItem we want to update
     *   }
     * })
     */
    upsert<T extends PayrollItemUpsertArgs>(args: SelectSubset<T, PayrollItemUpsertArgs<ExtArgs>>): Prisma__PayrollItemClient<$Result.GetResult<Prisma.$PayrollItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayrollItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollItemCountArgs} args - Arguments to filter PayrollItems to count.
     * @example
     * // Count the number of PayrollItems
     * const count = await prisma.payrollItem.count({
     *   where: {
     *     // ... the filter for the PayrollItems we want to count
     *   }
     * })
    **/
    count<T extends PayrollItemCountArgs>(
      args?: Subset<T, PayrollItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollItemAggregateArgs>(args: Subset<T, PayrollItemAggregateArgs>): Prisma.PrismaPromise<GetPayrollItemAggregateType<T>>

    /**
     * Group by PayrollItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollItemGroupByArgs['orderBy'] }
        : { orderBy?: PayrollItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollItem model
   */
  readonly fields: PayrollItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payroll<T extends PayrollDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayrollDefaultArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollItem model
   */
  interface PayrollItemFieldRefs {
    readonly id: FieldRef<"PayrollItem", 'String'>
    readonly payrollId: FieldRef<"PayrollItem", 'String'>
    readonly type: FieldRef<"PayrollItem", 'String'>
    readonly category: FieldRef<"PayrollItem", 'String'>
    readonly name: FieldRef<"PayrollItem", 'String'>
    readonly amount: FieldRef<"PayrollItem", 'Float'>
    readonly isStatutory: FieldRef<"PayrollItem", 'Boolean'>
    readonly createdAt: FieldRef<"PayrollItem", 'DateTime'>
    readonly updatedAt: FieldRef<"PayrollItem", 'DateTime'>
    readonly tenantId: FieldRef<"PayrollItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PayrollItem findUnique
   */
  export type PayrollItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * Filter, which PayrollItem to fetch.
     */
    where: PayrollItemWhereUniqueInput
  }

  /**
   * PayrollItem findUniqueOrThrow
   */
  export type PayrollItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * Filter, which PayrollItem to fetch.
     */
    where: PayrollItemWhereUniqueInput
  }

  /**
   * PayrollItem findFirst
   */
  export type PayrollItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * Filter, which PayrollItem to fetch.
     */
    where?: PayrollItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollItems to fetch.
     */
    orderBy?: PayrollItemOrderByWithRelationInput | PayrollItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollItems.
     */
    cursor?: PayrollItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollItems.
     */
    distinct?: PayrollItemScalarFieldEnum | PayrollItemScalarFieldEnum[]
  }

  /**
   * PayrollItem findFirstOrThrow
   */
  export type PayrollItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * Filter, which PayrollItem to fetch.
     */
    where?: PayrollItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollItems to fetch.
     */
    orderBy?: PayrollItemOrderByWithRelationInput | PayrollItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollItems.
     */
    cursor?: PayrollItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollItems.
     */
    distinct?: PayrollItemScalarFieldEnum | PayrollItemScalarFieldEnum[]
  }

  /**
   * PayrollItem findMany
   */
  export type PayrollItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * Filter, which PayrollItems to fetch.
     */
    where?: PayrollItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollItems to fetch.
     */
    orderBy?: PayrollItemOrderByWithRelationInput | PayrollItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollItems.
     */
    cursor?: PayrollItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollItems.
     */
    skip?: number
    distinct?: PayrollItemScalarFieldEnum | PayrollItemScalarFieldEnum[]
  }

  /**
   * PayrollItem create
   */
  export type PayrollItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollItem.
     */
    data: XOR<PayrollItemCreateInput, PayrollItemUncheckedCreateInput>
  }

  /**
   * PayrollItem createMany
   */
  export type PayrollItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollItems.
     */
    data: PayrollItemCreateManyInput | PayrollItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollItem createManyAndReturn
   */
  export type PayrollItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * The data used to create many PayrollItems.
     */
    data: PayrollItemCreateManyInput | PayrollItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollItem update
   */
  export type PayrollItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollItem.
     */
    data: XOR<PayrollItemUpdateInput, PayrollItemUncheckedUpdateInput>
    /**
     * Choose, which PayrollItem to update.
     */
    where: PayrollItemWhereUniqueInput
  }

  /**
   * PayrollItem updateMany
   */
  export type PayrollItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollItems.
     */
    data: XOR<PayrollItemUpdateManyMutationInput, PayrollItemUncheckedUpdateManyInput>
    /**
     * Filter which PayrollItems to update
     */
    where?: PayrollItemWhereInput
    /**
     * Limit how many PayrollItems to update.
     */
    limit?: number
  }

  /**
   * PayrollItem updateManyAndReturn
   */
  export type PayrollItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * The data used to update PayrollItems.
     */
    data: XOR<PayrollItemUpdateManyMutationInput, PayrollItemUncheckedUpdateManyInput>
    /**
     * Filter which PayrollItems to update
     */
    where?: PayrollItemWhereInput
    /**
     * Limit how many PayrollItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollItem upsert
   */
  export type PayrollItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollItem to update in case it exists.
     */
    where: PayrollItemWhereUniqueInput
    /**
     * In case the PayrollItem found by the `where` argument doesn't exist, create a new PayrollItem with this data.
     */
    create: XOR<PayrollItemCreateInput, PayrollItemUncheckedCreateInput>
    /**
     * In case the PayrollItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollItemUpdateInput, PayrollItemUncheckedUpdateInput>
  }

  /**
   * PayrollItem delete
   */
  export type PayrollItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
    /**
     * Filter which PayrollItem to delete.
     */
    where: PayrollItemWhereUniqueInput
  }

  /**
   * PayrollItem deleteMany
   */
  export type PayrollItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollItems to delete
     */
    where?: PayrollItemWhereInput
    /**
     * Limit how many PayrollItems to delete.
     */
    limit?: number
  }

  /**
   * PayrollItem without action
   */
  export type PayrollItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollItem
     */
    select?: PayrollItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollItem
     */
    omit?: PayrollItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollItemInclude<ExtArgs> | null
  }


  /**
   * Model TaxBracket
   */

  export type AggregateTaxBracket = {
    _count: TaxBracketCountAggregateOutputType | null
    _avg: TaxBracketAvgAggregateOutputType | null
    _sum: TaxBracketSumAggregateOutputType | null
    _min: TaxBracketMinAggregateOutputType | null
    _max: TaxBracketMaxAggregateOutputType | null
  }

  export type TaxBracketAvgAggregateOutputType = {
    minAmount: number | null
    maxAmount: number | null
    rate: number | null
    fixedAmount: number | null
  }

  export type TaxBracketSumAggregateOutputType = {
    minAmount: number | null
    maxAmount: number | null
    rate: number | null
    fixedAmount: number | null
  }

  export type TaxBracketMinAggregateOutputType = {
    id: string | null
    name: string | null
    minAmount: number | null
    maxAmount: number | null
    rate: number | null
    fixedAmount: number | null
    isActive: boolean | null
    effectiveDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type TaxBracketMaxAggregateOutputType = {
    id: string | null
    name: string | null
    minAmount: number | null
    maxAmount: number | null
    rate: number | null
    fixedAmount: number | null
    isActive: boolean | null
    effectiveDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type TaxBracketCountAggregateOutputType = {
    id: number
    name: number
    minAmount: number
    maxAmount: number
    rate: number
    fixedAmount: number
    isActive: number
    effectiveDate: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type TaxBracketAvgAggregateInputType = {
    minAmount?: true
    maxAmount?: true
    rate?: true
    fixedAmount?: true
  }

  export type TaxBracketSumAggregateInputType = {
    minAmount?: true
    maxAmount?: true
    rate?: true
    fixedAmount?: true
  }

  export type TaxBracketMinAggregateInputType = {
    id?: true
    name?: true
    minAmount?: true
    maxAmount?: true
    rate?: true
    fixedAmount?: true
    isActive?: true
    effectiveDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type TaxBracketMaxAggregateInputType = {
    id?: true
    name?: true
    minAmount?: true
    maxAmount?: true
    rate?: true
    fixedAmount?: true
    isActive?: true
    effectiveDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type TaxBracketCountAggregateInputType = {
    id?: true
    name?: true
    minAmount?: true
    maxAmount?: true
    rate?: true
    fixedAmount?: true
    isActive?: true
    effectiveDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type TaxBracketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaxBracket to aggregate.
     */
    where?: TaxBracketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaxBrackets to fetch.
     */
    orderBy?: TaxBracketOrderByWithRelationInput | TaxBracketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaxBracketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaxBrackets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaxBrackets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaxBrackets
    **/
    _count?: true | TaxBracketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaxBracketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaxBracketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaxBracketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaxBracketMaxAggregateInputType
  }

  export type GetTaxBracketAggregateType<T extends TaxBracketAggregateArgs> = {
        [P in keyof T & keyof AggregateTaxBracket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaxBracket[P]>
      : GetScalarType<T[P], AggregateTaxBracket[P]>
  }




  export type TaxBracketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaxBracketWhereInput
    orderBy?: TaxBracketOrderByWithAggregationInput | TaxBracketOrderByWithAggregationInput[]
    by: TaxBracketScalarFieldEnum[] | TaxBracketScalarFieldEnum
    having?: TaxBracketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaxBracketCountAggregateInputType | true
    _avg?: TaxBracketAvgAggregateInputType
    _sum?: TaxBracketSumAggregateInputType
    _min?: TaxBracketMinAggregateInputType
    _max?: TaxBracketMaxAggregateInputType
  }

  export type TaxBracketGroupByOutputType = {
    id: string
    name: string
    minAmount: number
    maxAmount: number | null
    rate: number
    fixedAmount: number
    isActive: boolean
    effectiveDate: Date
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: TaxBracketCountAggregateOutputType | null
    _avg: TaxBracketAvgAggregateOutputType | null
    _sum: TaxBracketSumAggregateOutputType | null
    _min: TaxBracketMinAggregateOutputType | null
    _max: TaxBracketMaxAggregateOutputType | null
  }

  type GetTaxBracketGroupByPayload<T extends TaxBracketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaxBracketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaxBracketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaxBracketGroupByOutputType[P]>
            : GetScalarType<T[P], TaxBracketGroupByOutputType[P]>
        }
      >
    >


  export type TaxBracketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    rate?: boolean
    fixedAmount?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taxBracket"]>

  export type TaxBracketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    rate?: boolean
    fixedAmount?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taxBracket"]>

  export type TaxBracketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    rate?: boolean
    fixedAmount?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taxBracket"]>

  export type TaxBracketSelectScalar = {
    id?: boolean
    name?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    rate?: boolean
    fixedAmount?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type TaxBracketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "minAmount" | "maxAmount" | "rate" | "fixedAmount" | "isActive" | "effectiveDate" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["taxBracket"]>
  export type TaxBracketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TaxBracketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TaxBracketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TaxBracketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaxBracket"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      minAmount: number
      maxAmount: number | null
      rate: number
      fixedAmount: number
      isActive: boolean
      effectiveDate: Date
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["taxBracket"]>
    composites: {}
  }

  type TaxBracketGetPayload<S extends boolean | null | undefined | TaxBracketDefaultArgs> = $Result.GetResult<Prisma.$TaxBracketPayload, S>

  type TaxBracketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaxBracketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaxBracketCountAggregateInputType | true
    }

  export interface TaxBracketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaxBracket'], meta: { name: 'TaxBracket' } }
    /**
     * Find zero or one TaxBracket that matches the filter.
     * @param {TaxBracketFindUniqueArgs} args - Arguments to find a TaxBracket
     * @example
     * // Get one TaxBracket
     * const taxBracket = await prisma.taxBracket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaxBracketFindUniqueArgs>(args: SelectSubset<T, TaxBracketFindUniqueArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TaxBracket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaxBracketFindUniqueOrThrowArgs} args - Arguments to find a TaxBracket
     * @example
     * // Get one TaxBracket
     * const taxBracket = await prisma.taxBracket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaxBracketFindUniqueOrThrowArgs>(args: SelectSubset<T, TaxBracketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaxBracket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxBracketFindFirstArgs} args - Arguments to find a TaxBracket
     * @example
     * // Get one TaxBracket
     * const taxBracket = await prisma.taxBracket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaxBracketFindFirstArgs>(args?: SelectSubset<T, TaxBracketFindFirstArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TaxBracket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxBracketFindFirstOrThrowArgs} args - Arguments to find a TaxBracket
     * @example
     * // Get one TaxBracket
     * const taxBracket = await prisma.taxBracket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaxBracketFindFirstOrThrowArgs>(args?: SelectSubset<T, TaxBracketFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TaxBrackets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxBracketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaxBrackets
     * const taxBrackets = await prisma.taxBracket.findMany()
     * 
     * // Get first 10 TaxBrackets
     * const taxBrackets = await prisma.taxBracket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taxBracketWithIdOnly = await prisma.taxBracket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaxBracketFindManyArgs>(args?: SelectSubset<T, TaxBracketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TaxBracket.
     * @param {TaxBracketCreateArgs} args - Arguments to create a TaxBracket.
     * @example
     * // Create one TaxBracket
     * const TaxBracket = await prisma.taxBracket.create({
     *   data: {
     *     // ... data to create a TaxBracket
     *   }
     * })
     * 
     */
    create<T extends TaxBracketCreateArgs>(args: SelectSubset<T, TaxBracketCreateArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TaxBrackets.
     * @param {TaxBracketCreateManyArgs} args - Arguments to create many TaxBrackets.
     * @example
     * // Create many TaxBrackets
     * const taxBracket = await prisma.taxBracket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaxBracketCreateManyArgs>(args?: SelectSubset<T, TaxBracketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaxBrackets and returns the data saved in the database.
     * @param {TaxBracketCreateManyAndReturnArgs} args - Arguments to create many TaxBrackets.
     * @example
     * // Create many TaxBrackets
     * const taxBracket = await prisma.taxBracket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaxBrackets and only return the `id`
     * const taxBracketWithIdOnly = await prisma.taxBracket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaxBracketCreateManyAndReturnArgs>(args?: SelectSubset<T, TaxBracketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TaxBracket.
     * @param {TaxBracketDeleteArgs} args - Arguments to delete one TaxBracket.
     * @example
     * // Delete one TaxBracket
     * const TaxBracket = await prisma.taxBracket.delete({
     *   where: {
     *     // ... filter to delete one TaxBracket
     *   }
     * })
     * 
     */
    delete<T extends TaxBracketDeleteArgs>(args: SelectSubset<T, TaxBracketDeleteArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TaxBracket.
     * @param {TaxBracketUpdateArgs} args - Arguments to update one TaxBracket.
     * @example
     * // Update one TaxBracket
     * const taxBracket = await prisma.taxBracket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaxBracketUpdateArgs>(args: SelectSubset<T, TaxBracketUpdateArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TaxBrackets.
     * @param {TaxBracketDeleteManyArgs} args - Arguments to filter TaxBrackets to delete.
     * @example
     * // Delete a few TaxBrackets
     * const { count } = await prisma.taxBracket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaxBracketDeleteManyArgs>(args?: SelectSubset<T, TaxBracketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaxBrackets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxBracketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaxBrackets
     * const taxBracket = await prisma.taxBracket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaxBracketUpdateManyArgs>(args: SelectSubset<T, TaxBracketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaxBrackets and returns the data updated in the database.
     * @param {TaxBracketUpdateManyAndReturnArgs} args - Arguments to update many TaxBrackets.
     * @example
     * // Update many TaxBrackets
     * const taxBracket = await prisma.taxBracket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaxBrackets and only return the `id`
     * const taxBracketWithIdOnly = await prisma.taxBracket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaxBracketUpdateManyAndReturnArgs>(args: SelectSubset<T, TaxBracketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TaxBracket.
     * @param {TaxBracketUpsertArgs} args - Arguments to update or create a TaxBracket.
     * @example
     * // Update or create a TaxBracket
     * const taxBracket = await prisma.taxBracket.upsert({
     *   create: {
     *     // ... data to create a TaxBracket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaxBracket we want to update
     *   }
     * })
     */
    upsert<T extends TaxBracketUpsertArgs>(args: SelectSubset<T, TaxBracketUpsertArgs<ExtArgs>>): Prisma__TaxBracketClient<$Result.GetResult<Prisma.$TaxBracketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TaxBrackets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxBracketCountArgs} args - Arguments to filter TaxBrackets to count.
     * @example
     * // Count the number of TaxBrackets
     * const count = await prisma.taxBracket.count({
     *   where: {
     *     // ... the filter for the TaxBrackets we want to count
     *   }
     * })
    **/
    count<T extends TaxBracketCountArgs>(
      args?: Subset<T, TaxBracketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaxBracketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaxBracket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxBracketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaxBracketAggregateArgs>(args: Subset<T, TaxBracketAggregateArgs>): Prisma.PrismaPromise<GetTaxBracketAggregateType<T>>

    /**
     * Group by TaxBracket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxBracketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaxBracketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaxBracketGroupByArgs['orderBy'] }
        : { orderBy?: TaxBracketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaxBracketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaxBracketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaxBracket model
   */
  readonly fields: TaxBracketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaxBracket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaxBracketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaxBracket model
   */
  interface TaxBracketFieldRefs {
    readonly id: FieldRef<"TaxBracket", 'String'>
    readonly name: FieldRef<"TaxBracket", 'String'>
    readonly minAmount: FieldRef<"TaxBracket", 'Float'>
    readonly maxAmount: FieldRef<"TaxBracket", 'Float'>
    readonly rate: FieldRef<"TaxBracket", 'Float'>
    readonly fixedAmount: FieldRef<"TaxBracket", 'Float'>
    readonly isActive: FieldRef<"TaxBracket", 'Boolean'>
    readonly effectiveDate: FieldRef<"TaxBracket", 'DateTime'>
    readonly createdAt: FieldRef<"TaxBracket", 'DateTime'>
    readonly updatedAt: FieldRef<"TaxBracket", 'DateTime'>
    readonly tenantId: FieldRef<"TaxBracket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TaxBracket findUnique
   */
  export type TaxBracketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * Filter, which TaxBracket to fetch.
     */
    where: TaxBracketWhereUniqueInput
  }

  /**
   * TaxBracket findUniqueOrThrow
   */
  export type TaxBracketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * Filter, which TaxBracket to fetch.
     */
    where: TaxBracketWhereUniqueInput
  }

  /**
   * TaxBracket findFirst
   */
  export type TaxBracketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * Filter, which TaxBracket to fetch.
     */
    where?: TaxBracketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaxBrackets to fetch.
     */
    orderBy?: TaxBracketOrderByWithRelationInput | TaxBracketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaxBrackets.
     */
    cursor?: TaxBracketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaxBrackets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaxBrackets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaxBrackets.
     */
    distinct?: TaxBracketScalarFieldEnum | TaxBracketScalarFieldEnum[]
  }

  /**
   * TaxBracket findFirstOrThrow
   */
  export type TaxBracketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * Filter, which TaxBracket to fetch.
     */
    where?: TaxBracketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaxBrackets to fetch.
     */
    orderBy?: TaxBracketOrderByWithRelationInput | TaxBracketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaxBrackets.
     */
    cursor?: TaxBracketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaxBrackets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaxBrackets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaxBrackets.
     */
    distinct?: TaxBracketScalarFieldEnum | TaxBracketScalarFieldEnum[]
  }

  /**
   * TaxBracket findMany
   */
  export type TaxBracketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * Filter, which TaxBrackets to fetch.
     */
    where?: TaxBracketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaxBrackets to fetch.
     */
    orderBy?: TaxBracketOrderByWithRelationInput | TaxBracketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaxBrackets.
     */
    cursor?: TaxBracketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaxBrackets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaxBrackets.
     */
    skip?: number
    distinct?: TaxBracketScalarFieldEnum | TaxBracketScalarFieldEnum[]
  }

  /**
   * TaxBracket create
   */
  export type TaxBracketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * The data needed to create a TaxBracket.
     */
    data: XOR<TaxBracketCreateInput, TaxBracketUncheckedCreateInput>
  }

  /**
   * TaxBracket createMany
   */
  export type TaxBracketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaxBrackets.
     */
    data: TaxBracketCreateManyInput | TaxBracketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaxBracket createManyAndReturn
   */
  export type TaxBracketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * The data used to create many TaxBrackets.
     */
    data: TaxBracketCreateManyInput | TaxBracketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaxBracket update
   */
  export type TaxBracketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * The data needed to update a TaxBracket.
     */
    data: XOR<TaxBracketUpdateInput, TaxBracketUncheckedUpdateInput>
    /**
     * Choose, which TaxBracket to update.
     */
    where: TaxBracketWhereUniqueInput
  }

  /**
   * TaxBracket updateMany
   */
  export type TaxBracketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaxBrackets.
     */
    data: XOR<TaxBracketUpdateManyMutationInput, TaxBracketUncheckedUpdateManyInput>
    /**
     * Filter which TaxBrackets to update
     */
    where?: TaxBracketWhereInput
    /**
     * Limit how many TaxBrackets to update.
     */
    limit?: number
  }

  /**
   * TaxBracket updateManyAndReturn
   */
  export type TaxBracketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * The data used to update TaxBrackets.
     */
    data: XOR<TaxBracketUpdateManyMutationInput, TaxBracketUncheckedUpdateManyInput>
    /**
     * Filter which TaxBrackets to update
     */
    where?: TaxBracketWhereInput
    /**
     * Limit how many TaxBrackets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaxBracket upsert
   */
  export type TaxBracketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * The filter to search for the TaxBracket to update in case it exists.
     */
    where: TaxBracketWhereUniqueInput
    /**
     * In case the TaxBracket found by the `where` argument doesn't exist, create a new TaxBracket with this data.
     */
    create: XOR<TaxBracketCreateInput, TaxBracketUncheckedCreateInput>
    /**
     * In case the TaxBracket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaxBracketUpdateInput, TaxBracketUncheckedUpdateInput>
  }

  /**
   * TaxBracket delete
   */
  export type TaxBracketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
    /**
     * Filter which TaxBracket to delete.
     */
    where: TaxBracketWhereUniqueInput
  }

  /**
   * TaxBracket deleteMany
   */
  export type TaxBracketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaxBrackets to delete
     */
    where?: TaxBracketWhereInput
    /**
     * Limit how many TaxBrackets to delete.
     */
    limit?: number
  }

  /**
   * TaxBracket without action
   */
  export type TaxBracketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaxBracket
     */
    select?: TaxBracketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaxBracket
     */
    omit?: TaxBracketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaxBracketInclude<ExtArgs> | null
  }


  /**
   * Model PayStub
   */

  export type AggregatePayStub = {
    _count: PayStubCountAggregateOutputType | null
    _min: PayStubMinAggregateOutputType | null
    _max: PayStubMaxAggregateOutputType | null
  }

  export type PayStubMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    payrollId: string | null
    payrollPeriodId: string | null
    stubNumber: string | null
    generatedAt: Date | null
    pdfPath: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayStubMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    payrollId: string | null
    payrollPeriodId: string | null
    stubNumber: string | null
    generatedAt: Date | null
    pdfPath: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PayStubCountAggregateOutputType = {
    id: number
    employeeId: number
    payrollId: number
    payrollPeriodId: number
    stubNumber: number
    generatedAt: number
    pdfPath: number
    status: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PayStubMinAggregateInputType = {
    id?: true
    employeeId?: true
    payrollId?: true
    payrollPeriodId?: true
    stubNumber?: true
    generatedAt?: true
    pdfPath?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayStubMaxAggregateInputType = {
    id?: true
    employeeId?: true
    payrollId?: true
    payrollPeriodId?: true
    stubNumber?: true
    generatedAt?: true
    pdfPath?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PayStubCountAggregateInputType = {
    id?: true
    employeeId?: true
    payrollId?: true
    payrollPeriodId?: true
    stubNumber?: true
    generatedAt?: true
    pdfPath?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PayStubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayStub to aggregate.
     */
    where?: PayStubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayStubs to fetch.
     */
    orderBy?: PayStubOrderByWithRelationInput | PayStubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayStubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayStubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayStubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayStubs
    **/
    _count?: true | PayStubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayStubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayStubMaxAggregateInputType
  }

  export type GetPayStubAggregateType<T extends PayStubAggregateArgs> = {
        [P in keyof T & keyof AggregatePayStub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayStub[P]>
      : GetScalarType<T[P], AggregatePayStub[P]>
  }




  export type PayStubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayStubWhereInput
    orderBy?: PayStubOrderByWithAggregationInput | PayStubOrderByWithAggregationInput[]
    by: PayStubScalarFieldEnum[] | PayStubScalarFieldEnum
    having?: PayStubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayStubCountAggregateInputType | true
    _min?: PayStubMinAggregateInputType
    _max?: PayStubMaxAggregateInputType
  }

  export type PayStubGroupByOutputType = {
    id: string
    employeeId: string
    payrollId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt: Date
    pdfPath: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PayStubCountAggregateOutputType | null
    _min: PayStubMinAggregateOutputType | null
    _max: PayStubMaxAggregateOutputType | null
  }

  type GetPayStubGroupByPayload<T extends PayStubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayStubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayStubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayStubGroupByOutputType[P]>
            : GetScalarType<T[P], PayStubGroupByOutputType[P]>
        }
      >
    >


  export type PayStubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollId?: boolean
    payrollPeriodId?: boolean
    stubNumber?: boolean
    generatedAt?: boolean
    pdfPath?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payStub"]>

  export type PayStubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollId?: boolean
    payrollPeriodId?: boolean
    stubNumber?: boolean
    generatedAt?: boolean
    pdfPath?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payStub"]>

  export type PayStubSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollId?: boolean
    payrollPeriodId?: boolean
    stubNumber?: boolean
    generatedAt?: boolean
    pdfPath?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payStub"]>

  export type PayStubSelectScalar = {
    id?: boolean
    employeeId?: boolean
    payrollId?: boolean
    payrollPeriodId?: boolean
    stubNumber?: boolean
    generatedAt?: boolean
    pdfPath?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PayStubOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "payrollId" | "payrollPeriodId" | "stubNumber" | "generatedAt" | "pdfPath" | "status" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["payStub"]>
  export type PayStubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayStubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayStubIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PayStubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayStub"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      payroll: Prisma.$PayrollPayload<ExtArgs>
      payrollPeriod: Prisma.$PayrollPeriodPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      payrollId: string
      payrollPeriodId: string
      stubNumber: string
      generatedAt: Date
      pdfPath: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["payStub"]>
    composites: {}
  }

  type PayStubGetPayload<S extends boolean | null | undefined | PayStubDefaultArgs> = $Result.GetResult<Prisma.$PayStubPayload, S>

  type PayStubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayStubFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayStubCountAggregateInputType | true
    }

  export interface PayStubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayStub'], meta: { name: 'PayStub' } }
    /**
     * Find zero or one PayStub that matches the filter.
     * @param {PayStubFindUniqueArgs} args - Arguments to find a PayStub
     * @example
     * // Get one PayStub
     * const payStub = await prisma.payStub.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayStubFindUniqueArgs>(args: SelectSubset<T, PayStubFindUniqueArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayStub that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayStubFindUniqueOrThrowArgs} args - Arguments to find a PayStub
     * @example
     * // Get one PayStub
     * const payStub = await prisma.payStub.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayStubFindUniqueOrThrowArgs>(args: SelectSubset<T, PayStubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayStub that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayStubFindFirstArgs} args - Arguments to find a PayStub
     * @example
     * // Get one PayStub
     * const payStub = await prisma.payStub.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayStubFindFirstArgs>(args?: SelectSubset<T, PayStubFindFirstArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayStub that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayStubFindFirstOrThrowArgs} args - Arguments to find a PayStub
     * @example
     * // Get one PayStub
     * const payStub = await prisma.payStub.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayStubFindFirstOrThrowArgs>(args?: SelectSubset<T, PayStubFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayStubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayStubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayStubs
     * const payStubs = await prisma.payStub.findMany()
     * 
     * // Get first 10 PayStubs
     * const payStubs = await prisma.payStub.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payStubWithIdOnly = await prisma.payStub.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayStubFindManyArgs>(args?: SelectSubset<T, PayStubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayStub.
     * @param {PayStubCreateArgs} args - Arguments to create a PayStub.
     * @example
     * // Create one PayStub
     * const PayStub = await prisma.payStub.create({
     *   data: {
     *     // ... data to create a PayStub
     *   }
     * })
     * 
     */
    create<T extends PayStubCreateArgs>(args: SelectSubset<T, PayStubCreateArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayStubs.
     * @param {PayStubCreateManyArgs} args - Arguments to create many PayStubs.
     * @example
     * // Create many PayStubs
     * const payStub = await prisma.payStub.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayStubCreateManyArgs>(args?: SelectSubset<T, PayStubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayStubs and returns the data saved in the database.
     * @param {PayStubCreateManyAndReturnArgs} args - Arguments to create many PayStubs.
     * @example
     * // Create many PayStubs
     * const payStub = await prisma.payStub.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayStubs and only return the `id`
     * const payStubWithIdOnly = await prisma.payStub.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayStubCreateManyAndReturnArgs>(args?: SelectSubset<T, PayStubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayStub.
     * @param {PayStubDeleteArgs} args - Arguments to delete one PayStub.
     * @example
     * // Delete one PayStub
     * const PayStub = await prisma.payStub.delete({
     *   where: {
     *     // ... filter to delete one PayStub
     *   }
     * })
     * 
     */
    delete<T extends PayStubDeleteArgs>(args: SelectSubset<T, PayStubDeleteArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayStub.
     * @param {PayStubUpdateArgs} args - Arguments to update one PayStub.
     * @example
     * // Update one PayStub
     * const payStub = await prisma.payStub.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayStubUpdateArgs>(args: SelectSubset<T, PayStubUpdateArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayStubs.
     * @param {PayStubDeleteManyArgs} args - Arguments to filter PayStubs to delete.
     * @example
     * // Delete a few PayStubs
     * const { count } = await prisma.payStub.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayStubDeleteManyArgs>(args?: SelectSubset<T, PayStubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayStubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayStubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayStubs
     * const payStub = await prisma.payStub.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayStubUpdateManyArgs>(args: SelectSubset<T, PayStubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayStubs and returns the data updated in the database.
     * @param {PayStubUpdateManyAndReturnArgs} args - Arguments to update many PayStubs.
     * @example
     * // Update many PayStubs
     * const payStub = await prisma.payStub.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayStubs and only return the `id`
     * const payStubWithIdOnly = await prisma.payStub.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayStubUpdateManyAndReturnArgs>(args: SelectSubset<T, PayStubUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayStub.
     * @param {PayStubUpsertArgs} args - Arguments to update or create a PayStub.
     * @example
     * // Update or create a PayStub
     * const payStub = await prisma.payStub.upsert({
     *   create: {
     *     // ... data to create a PayStub
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayStub we want to update
     *   }
     * })
     */
    upsert<T extends PayStubUpsertArgs>(args: SelectSubset<T, PayStubUpsertArgs<ExtArgs>>): Prisma__PayStubClient<$Result.GetResult<Prisma.$PayStubPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayStubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayStubCountArgs} args - Arguments to filter PayStubs to count.
     * @example
     * // Count the number of PayStubs
     * const count = await prisma.payStub.count({
     *   where: {
     *     // ... the filter for the PayStubs we want to count
     *   }
     * })
    **/
    count<T extends PayStubCountArgs>(
      args?: Subset<T, PayStubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayStubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayStub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayStubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayStubAggregateArgs>(args: Subset<T, PayStubAggregateArgs>): Prisma.PrismaPromise<GetPayStubAggregateType<T>>

    /**
     * Group by PayStub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayStubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayStubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayStubGroupByArgs['orderBy'] }
        : { orderBy?: PayStubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayStubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayStubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayStub model
   */
  readonly fields: PayStubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayStub.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayStubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payroll<T extends PayrollDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayrollDefaultArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payrollPeriod<T extends PayrollPeriodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayrollPeriodDefaultArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayStub model
   */
  interface PayStubFieldRefs {
    readonly id: FieldRef<"PayStub", 'String'>
    readonly employeeId: FieldRef<"PayStub", 'String'>
    readonly payrollId: FieldRef<"PayStub", 'String'>
    readonly payrollPeriodId: FieldRef<"PayStub", 'String'>
    readonly stubNumber: FieldRef<"PayStub", 'String'>
    readonly generatedAt: FieldRef<"PayStub", 'DateTime'>
    readonly pdfPath: FieldRef<"PayStub", 'String'>
    readonly status: FieldRef<"PayStub", 'String'>
    readonly createdAt: FieldRef<"PayStub", 'DateTime'>
    readonly updatedAt: FieldRef<"PayStub", 'DateTime'>
    readonly tenantId: FieldRef<"PayStub", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PayStub findUnique
   */
  export type PayStubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * Filter, which PayStub to fetch.
     */
    where: PayStubWhereUniqueInput
  }

  /**
   * PayStub findUniqueOrThrow
   */
  export type PayStubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * Filter, which PayStub to fetch.
     */
    where: PayStubWhereUniqueInput
  }

  /**
   * PayStub findFirst
   */
  export type PayStubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * Filter, which PayStub to fetch.
     */
    where?: PayStubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayStubs to fetch.
     */
    orderBy?: PayStubOrderByWithRelationInput | PayStubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayStubs.
     */
    cursor?: PayStubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayStubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayStubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayStubs.
     */
    distinct?: PayStubScalarFieldEnum | PayStubScalarFieldEnum[]
  }

  /**
   * PayStub findFirstOrThrow
   */
  export type PayStubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * Filter, which PayStub to fetch.
     */
    where?: PayStubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayStubs to fetch.
     */
    orderBy?: PayStubOrderByWithRelationInput | PayStubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayStubs.
     */
    cursor?: PayStubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayStubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayStubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayStubs.
     */
    distinct?: PayStubScalarFieldEnum | PayStubScalarFieldEnum[]
  }

  /**
   * PayStub findMany
   */
  export type PayStubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * Filter, which PayStubs to fetch.
     */
    where?: PayStubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayStubs to fetch.
     */
    orderBy?: PayStubOrderByWithRelationInput | PayStubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayStubs.
     */
    cursor?: PayStubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayStubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayStubs.
     */
    skip?: number
    distinct?: PayStubScalarFieldEnum | PayStubScalarFieldEnum[]
  }

  /**
   * PayStub create
   */
  export type PayStubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * The data needed to create a PayStub.
     */
    data: XOR<PayStubCreateInput, PayStubUncheckedCreateInput>
  }

  /**
   * PayStub createMany
   */
  export type PayStubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayStubs.
     */
    data: PayStubCreateManyInput | PayStubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayStub createManyAndReturn
   */
  export type PayStubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * The data used to create many PayStubs.
     */
    data: PayStubCreateManyInput | PayStubCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayStub update
   */
  export type PayStubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * The data needed to update a PayStub.
     */
    data: XOR<PayStubUpdateInput, PayStubUncheckedUpdateInput>
    /**
     * Choose, which PayStub to update.
     */
    where: PayStubWhereUniqueInput
  }

  /**
   * PayStub updateMany
   */
  export type PayStubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayStubs.
     */
    data: XOR<PayStubUpdateManyMutationInput, PayStubUncheckedUpdateManyInput>
    /**
     * Filter which PayStubs to update
     */
    where?: PayStubWhereInput
    /**
     * Limit how many PayStubs to update.
     */
    limit?: number
  }

  /**
   * PayStub updateManyAndReturn
   */
  export type PayStubUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * The data used to update PayStubs.
     */
    data: XOR<PayStubUpdateManyMutationInput, PayStubUncheckedUpdateManyInput>
    /**
     * Filter which PayStubs to update
     */
    where?: PayStubWhereInput
    /**
     * Limit how many PayStubs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayStub upsert
   */
  export type PayStubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * The filter to search for the PayStub to update in case it exists.
     */
    where: PayStubWhereUniqueInput
    /**
     * In case the PayStub found by the `where` argument doesn't exist, create a new PayStub with this data.
     */
    create: XOR<PayStubCreateInput, PayStubUncheckedCreateInput>
    /**
     * In case the PayStub was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayStubUpdateInput, PayStubUncheckedUpdateInput>
  }

  /**
   * PayStub delete
   */
  export type PayStubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
    /**
     * Filter which PayStub to delete.
     */
    where: PayStubWhereUniqueInput
  }

  /**
   * PayStub deleteMany
   */
  export type PayStubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayStubs to delete
     */
    where?: PayStubWhereInput
    /**
     * Limit how many PayStubs to delete.
     */
    limit?: number
  }

  /**
   * PayStub without action
   */
  export type PayStubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayStub
     */
    select?: PayStubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayStub
     */
    omit?: PayStubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayStubInclude<ExtArgs> | null
  }


  /**
   * Model PayrollSettings
   */

  export type AggregatePayrollSettings = {
    _count: PayrollSettingsCountAggregateOutputType | null
    _avg: PayrollSettingsAvgAggregateOutputType | null
    _sum: PayrollSettingsSumAggregateOutputType | null
    _min: PayrollSettingsMinAggregateOutputType | null
    _max: PayrollSettingsMaxAggregateOutputType | null
  }

  export type PayrollSettingsAvgAggregateOutputType = {
    personalRelief: number | null
    overtimeMultiplier: number | null
    workingDaysPerMonth: number | null
    workingHoursPerDay: number | null
    payDay: number | null
    cutoffDay: number | null
    approvalLevels: number | null
    autoApproveThreshold: number | null
  }

  export type PayrollSettingsSumAggregateOutputType = {
    personalRelief: number | null
    overtimeMultiplier: number | null
    workingDaysPerMonth: number | null
    workingHoursPerDay: number | null
    payDay: number | null
    cutoffDay: number | null
    approvalLevels: number | null
    autoApproveThreshold: number | null
  }

  export type PayrollSettingsMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    companyName: string | null
    kraPin: string | null
    nssfNumber: string | null
    nhifNumber: string | null
    companyAddress: string | null
    companyCity: string | null
    companyPostalCode: string | null
    personalRelief: number | null
    overtimeMultiplier: number | null
    workingDaysPerMonth: number | null
    workingHoursPerDay: number | null
    payFrequency: string | null
    payDay: number | null
    cutoffDay: number | null
    requirePayrollApproval: boolean | null
    approvalLevels: number | null
    autoApproveThreshold: number | null
    notifyEmployeesOnPayment: boolean | null
    sendPayslipsByEmail: boolean | null
    bankName: string | null
    accountNumber: string | null
    branchCode: string | null
    swiftCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PayrollSettingsMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    companyName: string | null
    kraPin: string | null
    nssfNumber: string | null
    nhifNumber: string | null
    companyAddress: string | null
    companyCity: string | null
    companyPostalCode: string | null
    personalRelief: number | null
    overtimeMultiplier: number | null
    workingDaysPerMonth: number | null
    workingHoursPerDay: number | null
    payFrequency: string | null
    payDay: number | null
    cutoffDay: number | null
    requirePayrollApproval: boolean | null
    approvalLevels: number | null
    autoApproveThreshold: number | null
    notifyEmployeesOnPayment: boolean | null
    sendPayslipsByEmail: boolean | null
    bankName: string | null
    accountNumber: string | null
    branchCode: string | null
    swiftCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PayrollSettingsCountAggregateOutputType = {
    id: number
    tenantId: number
    companyName: number
    kraPin: number
    nssfNumber: number
    nhifNumber: number
    companyAddress: number
    companyCity: number
    companyPostalCode: number
    personalRelief: number
    overtimeMultiplier: number
    workingDaysPerMonth: number
    workingHoursPerDay: number
    payFrequency: number
    payDay: number
    cutoffDay: number
    requirePayrollApproval: number
    approvalLevels: number
    autoApproveThreshold: number
    notifyEmployeesOnPayment: number
    sendPayslipsByEmail: number
    bankName: number
    accountNumber: number
    branchCode: number
    swiftCode: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PayrollSettingsAvgAggregateInputType = {
    personalRelief?: true
    overtimeMultiplier?: true
    workingDaysPerMonth?: true
    workingHoursPerDay?: true
    payDay?: true
    cutoffDay?: true
    approvalLevels?: true
    autoApproveThreshold?: true
  }

  export type PayrollSettingsSumAggregateInputType = {
    personalRelief?: true
    overtimeMultiplier?: true
    workingDaysPerMonth?: true
    workingHoursPerDay?: true
    payDay?: true
    cutoffDay?: true
    approvalLevels?: true
    autoApproveThreshold?: true
  }

  export type PayrollSettingsMinAggregateInputType = {
    id?: true
    tenantId?: true
    companyName?: true
    kraPin?: true
    nssfNumber?: true
    nhifNumber?: true
    companyAddress?: true
    companyCity?: true
    companyPostalCode?: true
    personalRelief?: true
    overtimeMultiplier?: true
    workingDaysPerMonth?: true
    workingHoursPerDay?: true
    payFrequency?: true
    payDay?: true
    cutoffDay?: true
    requirePayrollApproval?: true
    approvalLevels?: true
    autoApproveThreshold?: true
    notifyEmployeesOnPayment?: true
    sendPayslipsByEmail?: true
    bankName?: true
    accountNumber?: true
    branchCode?: true
    swiftCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PayrollSettingsMaxAggregateInputType = {
    id?: true
    tenantId?: true
    companyName?: true
    kraPin?: true
    nssfNumber?: true
    nhifNumber?: true
    companyAddress?: true
    companyCity?: true
    companyPostalCode?: true
    personalRelief?: true
    overtimeMultiplier?: true
    workingDaysPerMonth?: true
    workingHoursPerDay?: true
    payFrequency?: true
    payDay?: true
    cutoffDay?: true
    requirePayrollApproval?: true
    approvalLevels?: true
    autoApproveThreshold?: true
    notifyEmployeesOnPayment?: true
    sendPayslipsByEmail?: true
    bankName?: true
    accountNumber?: true
    branchCode?: true
    swiftCode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PayrollSettingsCountAggregateInputType = {
    id?: true
    tenantId?: true
    companyName?: true
    kraPin?: true
    nssfNumber?: true
    nhifNumber?: true
    companyAddress?: true
    companyCity?: true
    companyPostalCode?: true
    personalRelief?: true
    overtimeMultiplier?: true
    workingDaysPerMonth?: true
    workingHoursPerDay?: true
    payFrequency?: true
    payDay?: true
    cutoffDay?: true
    requirePayrollApproval?: true
    approvalLevels?: true
    autoApproveThreshold?: true
    notifyEmployeesOnPayment?: true
    sendPayslipsByEmail?: true
    bankName?: true
    accountNumber?: true
    branchCode?: true
    swiftCode?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PayrollSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollSettings to aggregate.
     */
    where?: PayrollSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollSettings to fetch.
     */
    orderBy?: PayrollSettingsOrderByWithRelationInput | PayrollSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollSettings
    **/
    _count?: true | PayrollSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollSettingsMaxAggregateInputType
  }

  export type GetPayrollSettingsAggregateType<T extends PayrollSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollSettings[P]>
      : GetScalarType<T[P], AggregatePayrollSettings[P]>
  }




  export type PayrollSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollSettingsWhereInput
    orderBy?: PayrollSettingsOrderByWithAggregationInput | PayrollSettingsOrderByWithAggregationInput[]
    by: PayrollSettingsScalarFieldEnum[] | PayrollSettingsScalarFieldEnum
    having?: PayrollSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollSettingsCountAggregateInputType | true
    _avg?: PayrollSettingsAvgAggregateInputType
    _sum?: PayrollSettingsSumAggregateInputType
    _min?: PayrollSettingsMinAggregateInputType
    _max?: PayrollSettingsMaxAggregateInputType
  }

  export type PayrollSettingsGroupByOutputType = {
    id: string
    tenantId: string
    companyName: string | null
    kraPin: string | null
    nssfNumber: string | null
    nhifNumber: string | null
    companyAddress: string | null
    companyCity: string | null
    companyPostalCode: string | null
    personalRelief: number
    overtimeMultiplier: number
    workingDaysPerMonth: number
    workingHoursPerDay: number
    payFrequency: string
    payDay: number
    cutoffDay: number
    requirePayrollApproval: boolean
    approvalLevels: number
    autoApproveThreshold: number
    notifyEmployeesOnPayment: boolean
    sendPayslipsByEmail: boolean
    bankName: string | null
    accountNumber: string | null
    branchCode: string | null
    swiftCode: string | null
    createdAt: Date
    updatedAt: Date
    _count: PayrollSettingsCountAggregateOutputType | null
    _avg: PayrollSettingsAvgAggregateOutputType | null
    _sum: PayrollSettingsSumAggregateOutputType | null
    _min: PayrollSettingsMinAggregateOutputType | null
    _max: PayrollSettingsMaxAggregateOutputType | null
  }

  type GetPayrollSettingsGroupByPayload<T extends PayrollSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollSettingsGroupByOutputType[P]>
        }
      >
    >


  export type PayrollSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    companyName?: boolean
    kraPin?: boolean
    nssfNumber?: boolean
    nhifNumber?: boolean
    companyAddress?: boolean
    companyCity?: boolean
    companyPostalCode?: boolean
    personalRelief?: boolean
    overtimeMultiplier?: boolean
    workingDaysPerMonth?: boolean
    workingHoursPerDay?: boolean
    payFrequency?: boolean
    payDay?: boolean
    cutoffDay?: boolean
    requirePayrollApproval?: boolean
    approvalLevels?: boolean
    autoApproveThreshold?: boolean
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: boolean
    accountNumber?: boolean
    branchCode?: boolean
    swiftCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollSettings"]>

  export type PayrollSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    companyName?: boolean
    kraPin?: boolean
    nssfNumber?: boolean
    nhifNumber?: boolean
    companyAddress?: boolean
    companyCity?: boolean
    companyPostalCode?: boolean
    personalRelief?: boolean
    overtimeMultiplier?: boolean
    workingDaysPerMonth?: boolean
    workingHoursPerDay?: boolean
    payFrequency?: boolean
    payDay?: boolean
    cutoffDay?: boolean
    requirePayrollApproval?: boolean
    approvalLevels?: boolean
    autoApproveThreshold?: boolean
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: boolean
    accountNumber?: boolean
    branchCode?: boolean
    swiftCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollSettings"]>

  export type PayrollSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    companyName?: boolean
    kraPin?: boolean
    nssfNumber?: boolean
    nhifNumber?: boolean
    companyAddress?: boolean
    companyCity?: boolean
    companyPostalCode?: boolean
    personalRelief?: boolean
    overtimeMultiplier?: boolean
    workingDaysPerMonth?: boolean
    workingHoursPerDay?: boolean
    payFrequency?: boolean
    payDay?: boolean
    cutoffDay?: boolean
    requirePayrollApproval?: boolean
    approvalLevels?: boolean
    autoApproveThreshold?: boolean
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: boolean
    accountNumber?: boolean
    branchCode?: boolean
    swiftCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollSettings"]>

  export type PayrollSettingsSelectScalar = {
    id?: boolean
    tenantId?: boolean
    companyName?: boolean
    kraPin?: boolean
    nssfNumber?: boolean
    nhifNumber?: boolean
    companyAddress?: boolean
    companyCity?: boolean
    companyPostalCode?: boolean
    personalRelief?: boolean
    overtimeMultiplier?: boolean
    workingDaysPerMonth?: boolean
    workingHoursPerDay?: boolean
    payFrequency?: boolean
    payDay?: boolean
    cutoffDay?: boolean
    requirePayrollApproval?: boolean
    approvalLevels?: boolean
    autoApproveThreshold?: boolean
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: boolean
    accountNumber?: boolean
    branchCode?: boolean
    swiftCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PayrollSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "companyName" | "kraPin" | "nssfNumber" | "nhifNumber" | "companyAddress" | "companyCity" | "companyPostalCode" | "personalRelief" | "overtimeMultiplier" | "workingDaysPerMonth" | "workingHoursPerDay" | "payFrequency" | "payDay" | "cutoffDay" | "requirePayrollApproval" | "approvalLevels" | "autoApproveThreshold" | "notifyEmployeesOnPayment" | "sendPayslipsByEmail" | "bankName" | "accountNumber" | "branchCode" | "swiftCode" | "createdAt" | "updatedAt", ExtArgs["result"]["payrollSettings"]>
  export type PayrollSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayrollSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PayrollSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PayrollSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollSettings"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      companyName: string | null
      kraPin: string | null
      nssfNumber: string | null
      nhifNumber: string | null
      companyAddress: string | null
      companyCity: string | null
      companyPostalCode: string | null
      personalRelief: number
      overtimeMultiplier: number
      workingDaysPerMonth: number
      workingHoursPerDay: number
      payFrequency: string
      payDay: number
      cutoffDay: number
      requirePayrollApproval: boolean
      approvalLevels: number
      autoApproveThreshold: number
      notifyEmployeesOnPayment: boolean
      sendPayslipsByEmail: boolean
      bankName: string | null
      accountNumber: string | null
      branchCode: string | null
      swiftCode: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payrollSettings"]>
    composites: {}
  }

  type PayrollSettingsGetPayload<S extends boolean | null | undefined | PayrollSettingsDefaultArgs> = $Result.GetResult<Prisma.$PayrollSettingsPayload, S>

  type PayrollSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayrollSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayrollSettingsCountAggregateInputType | true
    }

  export interface PayrollSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollSettings'], meta: { name: 'PayrollSettings' } }
    /**
     * Find zero or one PayrollSettings that matches the filter.
     * @param {PayrollSettingsFindUniqueArgs} args - Arguments to find a PayrollSettings
     * @example
     * // Get one PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollSettingsFindUniqueArgs>(args: SelectSubset<T, PayrollSettingsFindUniqueArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayrollSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayrollSettingsFindUniqueOrThrowArgs} args - Arguments to find a PayrollSettings
     * @example
     * // Get one PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollSettingsFindFirstArgs} args - Arguments to find a PayrollSettings
     * @example
     * // Get one PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollSettingsFindFirstArgs>(args?: SelectSubset<T, PayrollSettingsFindFirstArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayrollSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollSettingsFindFirstOrThrowArgs} args - Arguments to find a PayrollSettings
     * @example
     * // Get one PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayrollSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.findMany()
     * 
     * // Get first 10 PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollSettingsWithIdOnly = await prisma.payrollSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollSettingsFindManyArgs>(args?: SelectSubset<T, PayrollSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayrollSettings.
     * @param {PayrollSettingsCreateArgs} args - Arguments to create a PayrollSettings.
     * @example
     * // Create one PayrollSettings
     * const PayrollSettings = await prisma.payrollSettings.create({
     *   data: {
     *     // ... data to create a PayrollSettings
     *   }
     * })
     * 
     */
    create<T extends PayrollSettingsCreateArgs>(args: SelectSubset<T, PayrollSettingsCreateArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayrollSettings.
     * @param {PayrollSettingsCreateManyArgs} args - Arguments to create many PayrollSettings.
     * @example
     * // Create many PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollSettingsCreateManyArgs>(args?: SelectSubset<T, PayrollSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollSettings and returns the data saved in the database.
     * @param {PayrollSettingsCreateManyAndReturnArgs} args - Arguments to create many PayrollSettings.
     * @example
     * // Create many PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollSettings and only return the `id`
     * const payrollSettingsWithIdOnly = await prisma.payrollSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayrollSettings.
     * @param {PayrollSettingsDeleteArgs} args - Arguments to delete one PayrollSettings.
     * @example
     * // Delete one PayrollSettings
     * const PayrollSettings = await prisma.payrollSettings.delete({
     *   where: {
     *     // ... filter to delete one PayrollSettings
     *   }
     * })
     * 
     */
    delete<T extends PayrollSettingsDeleteArgs>(args: SelectSubset<T, PayrollSettingsDeleteArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayrollSettings.
     * @param {PayrollSettingsUpdateArgs} args - Arguments to update one PayrollSettings.
     * @example
     * // Update one PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollSettingsUpdateArgs>(args: SelectSubset<T, PayrollSettingsUpdateArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayrollSettings.
     * @param {PayrollSettingsDeleteManyArgs} args - Arguments to filter PayrollSettings to delete.
     * @example
     * // Delete a few PayrollSettings
     * const { count } = await prisma.payrollSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollSettingsDeleteManyArgs>(args?: SelectSubset<T, PayrollSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollSettingsUpdateManyArgs>(args: SelectSubset<T, PayrollSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollSettings and returns the data updated in the database.
     * @param {PayrollSettingsUpdateManyAndReturnArgs} args - Arguments to update many PayrollSettings.
     * @example
     * // Update many PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayrollSettings and only return the `id`
     * const payrollSettingsWithIdOnly = await prisma.payrollSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayrollSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, PayrollSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayrollSettings.
     * @param {PayrollSettingsUpsertArgs} args - Arguments to update or create a PayrollSettings.
     * @example
     * // Update or create a PayrollSettings
     * const payrollSettings = await prisma.payrollSettings.upsert({
     *   create: {
     *     // ... data to create a PayrollSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollSettings we want to update
     *   }
     * })
     */
    upsert<T extends PayrollSettingsUpsertArgs>(args: SelectSubset<T, PayrollSettingsUpsertArgs<ExtArgs>>): Prisma__PayrollSettingsClient<$Result.GetResult<Prisma.$PayrollSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayrollSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollSettingsCountArgs} args - Arguments to filter PayrollSettings to count.
     * @example
     * // Count the number of PayrollSettings
     * const count = await prisma.payrollSettings.count({
     *   where: {
     *     // ... the filter for the PayrollSettings we want to count
     *   }
     * })
    **/
    count<T extends PayrollSettingsCountArgs>(
      args?: Subset<T, PayrollSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollSettingsAggregateArgs>(args: Subset<T, PayrollSettingsAggregateArgs>): Prisma.PrismaPromise<GetPayrollSettingsAggregateType<T>>

    /**
     * Group by PayrollSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollSettingsGroupByArgs['orderBy'] }
        : { orderBy?: PayrollSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollSettings model
   */
  readonly fields: PayrollSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollSettings model
   */
  interface PayrollSettingsFieldRefs {
    readonly id: FieldRef<"PayrollSettings", 'String'>
    readonly tenantId: FieldRef<"PayrollSettings", 'String'>
    readonly companyName: FieldRef<"PayrollSettings", 'String'>
    readonly kraPin: FieldRef<"PayrollSettings", 'String'>
    readonly nssfNumber: FieldRef<"PayrollSettings", 'String'>
    readonly nhifNumber: FieldRef<"PayrollSettings", 'String'>
    readonly companyAddress: FieldRef<"PayrollSettings", 'String'>
    readonly companyCity: FieldRef<"PayrollSettings", 'String'>
    readonly companyPostalCode: FieldRef<"PayrollSettings", 'String'>
    readonly personalRelief: FieldRef<"PayrollSettings", 'Float'>
    readonly overtimeMultiplier: FieldRef<"PayrollSettings", 'Float'>
    readonly workingDaysPerMonth: FieldRef<"PayrollSettings", 'Int'>
    readonly workingHoursPerDay: FieldRef<"PayrollSettings", 'Int'>
    readonly payFrequency: FieldRef<"PayrollSettings", 'String'>
    readonly payDay: FieldRef<"PayrollSettings", 'Int'>
    readonly cutoffDay: FieldRef<"PayrollSettings", 'Int'>
    readonly requirePayrollApproval: FieldRef<"PayrollSettings", 'Boolean'>
    readonly approvalLevels: FieldRef<"PayrollSettings", 'Int'>
    readonly autoApproveThreshold: FieldRef<"PayrollSettings", 'Float'>
    readonly notifyEmployeesOnPayment: FieldRef<"PayrollSettings", 'Boolean'>
    readonly sendPayslipsByEmail: FieldRef<"PayrollSettings", 'Boolean'>
    readonly bankName: FieldRef<"PayrollSettings", 'String'>
    readonly accountNumber: FieldRef<"PayrollSettings", 'String'>
    readonly branchCode: FieldRef<"PayrollSettings", 'String'>
    readonly swiftCode: FieldRef<"PayrollSettings", 'String'>
    readonly createdAt: FieldRef<"PayrollSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"PayrollSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PayrollSettings findUnique
   */
  export type PayrollSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * Filter, which PayrollSettings to fetch.
     */
    where: PayrollSettingsWhereUniqueInput
  }

  /**
   * PayrollSettings findUniqueOrThrow
   */
  export type PayrollSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * Filter, which PayrollSettings to fetch.
     */
    where: PayrollSettingsWhereUniqueInput
  }

  /**
   * PayrollSettings findFirst
   */
  export type PayrollSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * Filter, which PayrollSettings to fetch.
     */
    where?: PayrollSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollSettings to fetch.
     */
    orderBy?: PayrollSettingsOrderByWithRelationInput | PayrollSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollSettings.
     */
    cursor?: PayrollSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollSettings.
     */
    distinct?: PayrollSettingsScalarFieldEnum | PayrollSettingsScalarFieldEnum[]
  }

  /**
   * PayrollSettings findFirstOrThrow
   */
  export type PayrollSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * Filter, which PayrollSettings to fetch.
     */
    where?: PayrollSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollSettings to fetch.
     */
    orderBy?: PayrollSettingsOrderByWithRelationInput | PayrollSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollSettings.
     */
    cursor?: PayrollSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollSettings.
     */
    distinct?: PayrollSettingsScalarFieldEnum | PayrollSettingsScalarFieldEnum[]
  }

  /**
   * PayrollSettings findMany
   */
  export type PayrollSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * Filter, which PayrollSettings to fetch.
     */
    where?: PayrollSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollSettings to fetch.
     */
    orderBy?: PayrollSettingsOrderByWithRelationInput | PayrollSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollSettings.
     */
    cursor?: PayrollSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollSettings.
     */
    skip?: number
    distinct?: PayrollSettingsScalarFieldEnum | PayrollSettingsScalarFieldEnum[]
  }

  /**
   * PayrollSettings create
   */
  export type PayrollSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollSettings.
     */
    data: XOR<PayrollSettingsCreateInput, PayrollSettingsUncheckedCreateInput>
  }

  /**
   * PayrollSettings createMany
   */
  export type PayrollSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollSettings.
     */
    data: PayrollSettingsCreateManyInput | PayrollSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollSettings createManyAndReturn
   */
  export type PayrollSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many PayrollSettings.
     */
    data: PayrollSettingsCreateManyInput | PayrollSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollSettings update
   */
  export type PayrollSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollSettings.
     */
    data: XOR<PayrollSettingsUpdateInput, PayrollSettingsUncheckedUpdateInput>
    /**
     * Choose, which PayrollSettings to update.
     */
    where: PayrollSettingsWhereUniqueInput
  }

  /**
   * PayrollSettings updateMany
   */
  export type PayrollSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollSettings.
     */
    data: XOR<PayrollSettingsUpdateManyMutationInput, PayrollSettingsUncheckedUpdateManyInput>
    /**
     * Filter which PayrollSettings to update
     */
    where?: PayrollSettingsWhereInput
    /**
     * Limit how many PayrollSettings to update.
     */
    limit?: number
  }

  /**
   * PayrollSettings updateManyAndReturn
   */
  export type PayrollSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * The data used to update PayrollSettings.
     */
    data: XOR<PayrollSettingsUpdateManyMutationInput, PayrollSettingsUncheckedUpdateManyInput>
    /**
     * Filter which PayrollSettings to update
     */
    where?: PayrollSettingsWhereInput
    /**
     * Limit how many PayrollSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayrollSettings upsert
   */
  export type PayrollSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollSettings to update in case it exists.
     */
    where: PayrollSettingsWhereUniqueInput
    /**
     * In case the PayrollSettings found by the `where` argument doesn't exist, create a new PayrollSettings with this data.
     */
    create: XOR<PayrollSettingsCreateInput, PayrollSettingsUncheckedCreateInput>
    /**
     * In case the PayrollSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollSettingsUpdateInput, PayrollSettingsUncheckedUpdateInput>
  }

  /**
   * PayrollSettings delete
   */
  export type PayrollSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
    /**
     * Filter which PayrollSettings to delete.
     */
    where: PayrollSettingsWhereUniqueInput
  }

  /**
   * PayrollSettings deleteMany
   */
  export type PayrollSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollSettings to delete
     */
    where?: PayrollSettingsWhereInput
    /**
     * Limit how many PayrollSettings to delete.
     */
    limit?: number
  }

  /**
   * PayrollSettings without action
   */
  export type PayrollSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollSettings
     */
    select?: PayrollSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollSettings
     */
    omit?: PayrollSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollSettingsInclude<ExtArgs> | null
  }


  /**
   * Model LeaveType
   */

  export type AggregateLeaveType = {
    _count: LeaveTypeCountAggregateOutputType | null
    _min: LeaveTypeMinAggregateOutputType | null
    _max: LeaveTypeMaxAggregateOutputType | null
  }

  export type LeaveTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeaveTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeaveTypeCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    color: number
    isActive: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type LeaveTypeMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeaveTypeMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeaveTypeCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type LeaveTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveType to aggregate.
     */
    where?: LeaveTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveTypes to fetch.
     */
    orderBy?: LeaveTypeOrderByWithRelationInput | LeaveTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveTypes
    **/
    _count?: true | LeaveTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveTypeMaxAggregateInputType
  }

  export type GetLeaveTypeAggregateType<T extends LeaveTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveType[P]>
      : GetScalarType<T[P], AggregateLeaveType[P]>
  }




  export type LeaveTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveTypeWhereInput
    orderBy?: LeaveTypeOrderByWithAggregationInput | LeaveTypeOrderByWithAggregationInput[]
    by: LeaveTypeScalarFieldEnum[] | LeaveTypeScalarFieldEnum
    having?: LeaveTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveTypeCountAggregateInputType | true
    _min?: LeaveTypeMinAggregateInputType
    _max?: LeaveTypeMaxAggregateInputType
  }

  export type LeaveTypeGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    color: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: LeaveTypeCountAggregateOutputType | null
    _min: LeaveTypeMinAggregateOutputType | null
    _max: LeaveTypeMaxAggregateOutputType | null
  }

  type GetLeaveTypeGroupByPayload<T extends LeaveTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveTypeGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveTypeGroupByOutputType[P]>
        }
      >
    >


  export type LeaveTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    leaveBalances?: boolean | LeaveType$leaveBalancesArgs<ExtArgs>
    leavePolicies?: boolean | LeaveType$leavePoliciesArgs<ExtArgs>
    leaveRequests?: boolean | LeaveType$leaveRequestsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | LeaveTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveType"]>

  export type LeaveTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveType"]>

  export type LeaveTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveType"]>

  export type LeaveTypeSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type LeaveTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "color" | "isActive" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["leaveType"]>
  export type LeaveTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveBalances?: boolean | LeaveType$leaveBalancesArgs<ExtArgs>
    leavePolicies?: boolean | LeaveType$leavePoliciesArgs<ExtArgs>
    leaveRequests?: boolean | LeaveType$leaveRequestsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | LeaveTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeaveTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type LeaveTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $LeaveTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveType"
    objects: {
      leaveBalances: Prisma.$LeaveBalancePayload<ExtArgs>[]
      leavePolicies: Prisma.$LeavePolicyPayload<ExtArgs>[]
      leaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      color: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["leaveType"]>
    composites: {}
  }

  type LeaveTypeGetPayload<S extends boolean | null | undefined | LeaveTypeDefaultArgs> = $Result.GetResult<Prisma.$LeaveTypePayload, S>

  type LeaveTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaveTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaveTypeCountAggregateInputType | true
    }

  export interface LeaveTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveType'], meta: { name: 'LeaveType' } }
    /**
     * Find zero or one LeaveType that matches the filter.
     * @param {LeaveTypeFindUniqueArgs} args - Arguments to find a LeaveType
     * @example
     * // Get one LeaveType
     * const leaveType = await prisma.leaveType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveTypeFindUniqueArgs>(args: SelectSubset<T, LeaveTypeFindUniqueArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaveType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaveTypeFindUniqueOrThrowArgs} args - Arguments to find a LeaveType
     * @example
     * // Get one LeaveType
     * const leaveType = await prisma.leaveType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveTypeFindFirstArgs} args - Arguments to find a LeaveType
     * @example
     * // Get one LeaveType
     * const leaveType = await prisma.leaveType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveTypeFindFirstArgs>(args?: SelectSubset<T, LeaveTypeFindFirstArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveTypeFindFirstOrThrowArgs} args - Arguments to find a LeaveType
     * @example
     * // Get one LeaveType
     * const leaveType = await prisma.leaveType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaveTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveTypes
     * const leaveTypes = await prisma.leaveType.findMany()
     * 
     * // Get first 10 LeaveTypes
     * const leaveTypes = await prisma.leaveType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveTypeWithIdOnly = await prisma.leaveType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveTypeFindManyArgs>(args?: SelectSubset<T, LeaveTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaveType.
     * @param {LeaveTypeCreateArgs} args - Arguments to create a LeaveType.
     * @example
     * // Create one LeaveType
     * const LeaveType = await prisma.leaveType.create({
     *   data: {
     *     // ... data to create a LeaveType
     *   }
     * })
     * 
     */
    create<T extends LeaveTypeCreateArgs>(args: SelectSubset<T, LeaveTypeCreateArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaveTypes.
     * @param {LeaveTypeCreateManyArgs} args - Arguments to create many LeaveTypes.
     * @example
     * // Create many LeaveTypes
     * const leaveType = await prisma.leaveType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveTypeCreateManyArgs>(args?: SelectSubset<T, LeaveTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveTypes and returns the data saved in the database.
     * @param {LeaveTypeCreateManyAndReturnArgs} args - Arguments to create many LeaveTypes.
     * @example
     * // Create many LeaveTypes
     * const leaveType = await prisma.leaveType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveTypes and only return the `id`
     * const leaveTypeWithIdOnly = await prisma.leaveType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeaveType.
     * @param {LeaveTypeDeleteArgs} args - Arguments to delete one LeaveType.
     * @example
     * // Delete one LeaveType
     * const LeaveType = await prisma.leaveType.delete({
     *   where: {
     *     // ... filter to delete one LeaveType
     *   }
     * })
     * 
     */
    delete<T extends LeaveTypeDeleteArgs>(args: SelectSubset<T, LeaveTypeDeleteArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaveType.
     * @param {LeaveTypeUpdateArgs} args - Arguments to update one LeaveType.
     * @example
     * // Update one LeaveType
     * const leaveType = await prisma.leaveType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveTypeUpdateArgs>(args: SelectSubset<T, LeaveTypeUpdateArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaveTypes.
     * @param {LeaveTypeDeleteManyArgs} args - Arguments to filter LeaveTypes to delete.
     * @example
     * // Delete a few LeaveTypes
     * const { count } = await prisma.leaveType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveTypeDeleteManyArgs>(args?: SelectSubset<T, LeaveTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveTypes
     * const leaveType = await prisma.leaveType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveTypeUpdateManyArgs>(args: SelectSubset<T, LeaveTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveTypes and returns the data updated in the database.
     * @param {LeaveTypeUpdateManyAndReturnArgs} args - Arguments to update many LeaveTypes.
     * @example
     * // Update many LeaveTypes
     * const leaveType = await prisma.leaveType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeaveTypes and only return the `id`
     * const leaveTypeWithIdOnly = await prisma.leaveType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaveTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaveTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeaveType.
     * @param {LeaveTypeUpsertArgs} args - Arguments to update or create a LeaveType.
     * @example
     * // Update or create a LeaveType
     * const leaveType = await prisma.leaveType.upsert({
     *   create: {
     *     // ... data to create a LeaveType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveType we want to update
     *   }
     * })
     */
    upsert<T extends LeaveTypeUpsertArgs>(args: SelectSubset<T, LeaveTypeUpsertArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaveTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveTypeCountArgs} args - Arguments to filter LeaveTypes to count.
     * @example
     * // Count the number of LeaveTypes
     * const count = await prisma.leaveType.count({
     *   where: {
     *     // ... the filter for the LeaveTypes we want to count
     *   }
     * })
    **/
    count<T extends LeaveTypeCountArgs>(
      args?: Subset<T, LeaveTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveTypeAggregateArgs>(args: Subset<T, LeaveTypeAggregateArgs>): Prisma.PrismaPromise<GetLeaveTypeAggregateType<T>>

    /**
     * Group by LeaveType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveTypeGroupByArgs['orderBy'] }
        : { orderBy?: LeaveTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveType model
   */
  readonly fields: LeaveTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leaveBalances<T extends LeaveType$leaveBalancesArgs<ExtArgs> = {}>(args?: Subset<T, LeaveType$leaveBalancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leavePolicies<T extends LeaveType$leavePoliciesArgs<ExtArgs> = {}>(args?: Subset<T, LeaveType$leavePoliciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leaveRequests<T extends LeaveType$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, LeaveType$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveType model
   */
  interface LeaveTypeFieldRefs {
    readonly id: FieldRef<"LeaveType", 'String'>
    readonly name: FieldRef<"LeaveType", 'String'>
    readonly code: FieldRef<"LeaveType", 'String'>
    readonly description: FieldRef<"LeaveType", 'String'>
    readonly color: FieldRef<"LeaveType", 'String'>
    readonly isActive: FieldRef<"LeaveType", 'Boolean'>
    readonly createdAt: FieldRef<"LeaveType", 'DateTime'>
    readonly updatedAt: FieldRef<"LeaveType", 'DateTime'>
    readonly tenantId: FieldRef<"LeaveType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeaveType findUnique
   */
  export type LeaveTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * Filter, which LeaveType to fetch.
     */
    where: LeaveTypeWhereUniqueInput
  }

  /**
   * LeaveType findUniqueOrThrow
   */
  export type LeaveTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * Filter, which LeaveType to fetch.
     */
    where: LeaveTypeWhereUniqueInput
  }

  /**
   * LeaveType findFirst
   */
  export type LeaveTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * Filter, which LeaveType to fetch.
     */
    where?: LeaveTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveTypes to fetch.
     */
    orderBy?: LeaveTypeOrderByWithRelationInput | LeaveTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveTypes.
     */
    cursor?: LeaveTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveTypes.
     */
    distinct?: LeaveTypeScalarFieldEnum | LeaveTypeScalarFieldEnum[]
  }

  /**
   * LeaveType findFirstOrThrow
   */
  export type LeaveTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * Filter, which LeaveType to fetch.
     */
    where?: LeaveTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveTypes to fetch.
     */
    orderBy?: LeaveTypeOrderByWithRelationInput | LeaveTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveTypes.
     */
    cursor?: LeaveTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveTypes.
     */
    distinct?: LeaveTypeScalarFieldEnum | LeaveTypeScalarFieldEnum[]
  }

  /**
   * LeaveType findMany
   */
  export type LeaveTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * Filter, which LeaveTypes to fetch.
     */
    where?: LeaveTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveTypes to fetch.
     */
    orderBy?: LeaveTypeOrderByWithRelationInput | LeaveTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveTypes.
     */
    cursor?: LeaveTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveTypes.
     */
    skip?: number
    distinct?: LeaveTypeScalarFieldEnum | LeaveTypeScalarFieldEnum[]
  }

  /**
   * LeaveType create
   */
  export type LeaveTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveType.
     */
    data: XOR<LeaveTypeCreateInput, LeaveTypeUncheckedCreateInput>
  }

  /**
   * LeaveType createMany
   */
  export type LeaveTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveTypes.
     */
    data: LeaveTypeCreateManyInput | LeaveTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveType createManyAndReturn
   */
  export type LeaveTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * The data used to create many LeaveTypes.
     */
    data: LeaveTypeCreateManyInput | LeaveTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveType update
   */
  export type LeaveTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveType.
     */
    data: XOR<LeaveTypeUpdateInput, LeaveTypeUncheckedUpdateInput>
    /**
     * Choose, which LeaveType to update.
     */
    where: LeaveTypeWhereUniqueInput
  }

  /**
   * LeaveType updateMany
   */
  export type LeaveTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveTypes.
     */
    data: XOR<LeaveTypeUpdateManyMutationInput, LeaveTypeUncheckedUpdateManyInput>
    /**
     * Filter which LeaveTypes to update
     */
    where?: LeaveTypeWhereInput
    /**
     * Limit how many LeaveTypes to update.
     */
    limit?: number
  }

  /**
   * LeaveType updateManyAndReturn
   */
  export type LeaveTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * The data used to update LeaveTypes.
     */
    data: XOR<LeaveTypeUpdateManyMutationInput, LeaveTypeUncheckedUpdateManyInput>
    /**
     * Filter which LeaveTypes to update
     */
    where?: LeaveTypeWhereInput
    /**
     * Limit how many LeaveTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveType upsert
   */
  export type LeaveTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveType to update in case it exists.
     */
    where: LeaveTypeWhereUniqueInput
    /**
     * In case the LeaveType found by the `where` argument doesn't exist, create a new LeaveType with this data.
     */
    create: XOR<LeaveTypeCreateInput, LeaveTypeUncheckedCreateInput>
    /**
     * In case the LeaveType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveTypeUpdateInput, LeaveTypeUncheckedUpdateInput>
  }

  /**
   * LeaveType delete
   */
  export type LeaveTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
    /**
     * Filter which LeaveType to delete.
     */
    where: LeaveTypeWhereUniqueInput
  }

  /**
   * LeaveType deleteMany
   */
  export type LeaveTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveTypes to delete
     */
    where?: LeaveTypeWhereInput
    /**
     * Limit how many LeaveTypes to delete.
     */
    limit?: number
  }

  /**
   * LeaveType.leaveBalances
   */
  export type LeaveType$leaveBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    where?: LeaveBalanceWhereInput
    orderBy?: LeaveBalanceOrderByWithRelationInput | LeaveBalanceOrderByWithRelationInput[]
    cursor?: LeaveBalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveBalanceScalarFieldEnum | LeaveBalanceScalarFieldEnum[]
  }

  /**
   * LeaveType.leavePolicies
   */
  export type LeaveType$leavePoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    where?: LeavePolicyWhereInput
    orderBy?: LeavePolicyOrderByWithRelationInput | LeavePolicyOrderByWithRelationInput[]
    cursor?: LeavePolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeavePolicyScalarFieldEnum | LeavePolicyScalarFieldEnum[]
  }

  /**
   * LeaveType.leaveRequests
   */
  export type LeaveType$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveType without action
   */
  export type LeaveTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveType
     */
    select?: LeaveTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveType
     */
    omit?: LeaveTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveTypeInclude<ExtArgs> | null
  }


  /**
   * Model LeavePolicy
   */

  export type AggregateLeavePolicy = {
    _count: LeavePolicyCountAggregateOutputType | null
    _avg: LeavePolicyAvgAggregateOutputType | null
    _sum: LeavePolicySumAggregateOutputType | null
    _min: LeavePolicyMinAggregateOutputType | null
    _max: LeavePolicyMaxAggregateOutputType | null
  }

  export type LeavePolicyAvgAggregateOutputType = {
    maxDaysPerYear: number | null
    maxDaysPerRequest: number | null
    minDaysNotice: number | null
    maxCarryForward: number | null
    accrualRate: number | null
    probationPeriodDays: number | null
  }

  export type LeavePolicySumAggregateOutputType = {
    maxDaysPerYear: number | null
    maxDaysPerRequest: number | null
    minDaysNotice: number | null
    maxCarryForward: number | null
    accrualRate: number | null
    probationPeriodDays: number | null
  }

  export type LeavePolicyMinAggregateOutputType = {
    id: string | null
    leaveTypeId: string | null
    name: string | null
    description: string | null
    maxDaysPerYear: number | null
    maxDaysPerRequest: number | null
    minDaysNotice: number | null
    maxCarryForward: number | null
    allowNegativeBalance: boolean | null
    requiresApproval: boolean | null
    autoApprove: boolean | null
    accrualRate: number | null
    probationPeriodDays: number | null
    isActive: boolean | null
    effectiveDate: Date | null
    expiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeavePolicyMaxAggregateOutputType = {
    id: string | null
    leaveTypeId: string | null
    name: string | null
    description: string | null
    maxDaysPerYear: number | null
    maxDaysPerRequest: number | null
    minDaysNotice: number | null
    maxCarryForward: number | null
    allowNegativeBalance: boolean | null
    requiresApproval: boolean | null
    autoApprove: boolean | null
    accrualRate: number | null
    probationPeriodDays: number | null
    isActive: boolean | null
    effectiveDate: Date | null
    expiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeavePolicyCountAggregateOutputType = {
    id: number
    leaveTypeId: number
    name: number
    description: number
    maxDaysPerYear: number
    maxDaysPerRequest: number
    minDaysNotice: number
    maxCarryForward: number
    allowNegativeBalance: number
    requiresApproval: number
    autoApprove: number
    accrualRate: number
    probationPeriodDays: number
    isActive: number
    effectiveDate: number
    expiryDate: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type LeavePolicyAvgAggregateInputType = {
    maxDaysPerYear?: true
    maxDaysPerRequest?: true
    minDaysNotice?: true
    maxCarryForward?: true
    accrualRate?: true
    probationPeriodDays?: true
  }

  export type LeavePolicySumAggregateInputType = {
    maxDaysPerYear?: true
    maxDaysPerRequest?: true
    minDaysNotice?: true
    maxCarryForward?: true
    accrualRate?: true
    probationPeriodDays?: true
  }

  export type LeavePolicyMinAggregateInputType = {
    id?: true
    leaveTypeId?: true
    name?: true
    description?: true
    maxDaysPerYear?: true
    maxDaysPerRequest?: true
    minDaysNotice?: true
    maxCarryForward?: true
    allowNegativeBalance?: true
    requiresApproval?: true
    autoApprove?: true
    accrualRate?: true
    probationPeriodDays?: true
    isActive?: true
    effectiveDate?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeavePolicyMaxAggregateInputType = {
    id?: true
    leaveTypeId?: true
    name?: true
    description?: true
    maxDaysPerYear?: true
    maxDaysPerRequest?: true
    minDaysNotice?: true
    maxCarryForward?: true
    allowNegativeBalance?: true
    requiresApproval?: true
    autoApprove?: true
    accrualRate?: true
    probationPeriodDays?: true
    isActive?: true
    effectiveDate?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeavePolicyCountAggregateInputType = {
    id?: true
    leaveTypeId?: true
    name?: true
    description?: true
    maxDaysPerYear?: true
    maxDaysPerRequest?: true
    minDaysNotice?: true
    maxCarryForward?: true
    allowNegativeBalance?: true
    requiresApproval?: true
    autoApprove?: true
    accrualRate?: true
    probationPeriodDays?: true
    isActive?: true
    effectiveDate?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type LeavePolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeavePolicy to aggregate.
     */
    where?: LeavePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePolicies to fetch.
     */
    orderBy?: LeavePolicyOrderByWithRelationInput | LeavePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeavePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeavePolicies
    **/
    _count?: true | LeavePolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeavePolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeavePolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeavePolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeavePolicyMaxAggregateInputType
  }

  export type GetLeavePolicyAggregateType<T extends LeavePolicyAggregateArgs> = {
        [P in keyof T & keyof AggregateLeavePolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeavePolicy[P]>
      : GetScalarType<T[P], AggregateLeavePolicy[P]>
  }




  export type LeavePolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeavePolicyWhereInput
    orderBy?: LeavePolicyOrderByWithAggregationInput | LeavePolicyOrderByWithAggregationInput[]
    by: LeavePolicyScalarFieldEnum[] | LeavePolicyScalarFieldEnum
    having?: LeavePolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeavePolicyCountAggregateInputType | true
    _avg?: LeavePolicyAvgAggregateInputType
    _sum?: LeavePolicySumAggregateInputType
    _min?: LeavePolicyMinAggregateInputType
    _max?: LeavePolicyMaxAggregateInputType
  }

  export type LeavePolicyGroupByOutputType = {
    id: string
    leaveTypeId: string
    name: string
    description: string | null
    maxDaysPerYear: number
    maxDaysPerRequest: number | null
    minDaysNotice: number
    maxCarryForward: number
    allowNegativeBalance: boolean
    requiresApproval: boolean
    autoApprove: boolean
    accrualRate: number
    probationPeriodDays: number
    isActive: boolean
    effectiveDate: Date
    expiryDate: Date | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: LeavePolicyCountAggregateOutputType | null
    _avg: LeavePolicyAvgAggregateOutputType | null
    _sum: LeavePolicySumAggregateOutputType | null
    _min: LeavePolicyMinAggregateOutputType | null
    _max: LeavePolicyMaxAggregateOutputType | null
  }

  type GetLeavePolicyGroupByPayload<T extends LeavePolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeavePolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeavePolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeavePolicyGroupByOutputType[P]>
            : GetScalarType<T[P], LeavePolicyGroupByOutputType[P]>
        }
      >
    >


  export type LeavePolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveTypeId?: boolean
    name?: boolean
    description?: boolean
    maxDaysPerYear?: boolean
    maxDaysPerRequest?: boolean
    minDaysNotice?: boolean
    maxCarryForward?: boolean
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: boolean
    probationPeriodDays?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leavePolicy"]>

  export type LeavePolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveTypeId?: boolean
    name?: boolean
    description?: boolean
    maxDaysPerYear?: boolean
    maxDaysPerRequest?: boolean
    minDaysNotice?: boolean
    maxCarryForward?: boolean
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: boolean
    probationPeriodDays?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leavePolicy"]>

  export type LeavePolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveTypeId?: boolean
    name?: boolean
    description?: boolean
    maxDaysPerYear?: boolean
    maxDaysPerRequest?: boolean
    minDaysNotice?: boolean
    maxCarryForward?: boolean
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: boolean
    probationPeriodDays?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leavePolicy"]>

  export type LeavePolicySelectScalar = {
    id?: boolean
    leaveTypeId?: boolean
    name?: boolean
    description?: boolean
    maxDaysPerYear?: boolean
    maxDaysPerRequest?: boolean
    minDaysNotice?: boolean
    maxCarryForward?: boolean
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: boolean
    probationPeriodDays?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type LeavePolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leaveTypeId" | "name" | "description" | "maxDaysPerYear" | "maxDaysPerRequest" | "minDaysNotice" | "maxCarryForward" | "allowNegativeBalance" | "requiresApproval" | "autoApprove" | "accrualRate" | "probationPeriodDays" | "isActive" | "effectiveDate" | "expiryDate" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["leavePolicy"]>
  export type LeavePolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type LeavePolicyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type LeavePolicyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $LeavePolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeavePolicy"
    objects: {
      leaveType: Prisma.$LeaveTypePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leaveTypeId: string
      name: string
      description: string | null
      maxDaysPerYear: number
      maxDaysPerRequest: number | null
      minDaysNotice: number
      maxCarryForward: number
      allowNegativeBalance: boolean
      requiresApproval: boolean
      autoApprove: boolean
      accrualRate: number
      probationPeriodDays: number
      isActive: boolean
      effectiveDate: Date
      expiryDate: Date | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["leavePolicy"]>
    composites: {}
  }

  type LeavePolicyGetPayload<S extends boolean | null | undefined | LeavePolicyDefaultArgs> = $Result.GetResult<Prisma.$LeavePolicyPayload, S>

  type LeavePolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeavePolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeavePolicyCountAggregateInputType | true
    }

  export interface LeavePolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeavePolicy'], meta: { name: 'LeavePolicy' } }
    /**
     * Find zero or one LeavePolicy that matches the filter.
     * @param {LeavePolicyFindUniqueArgs} args - Arguments to find a LeavePolicy
     * @example
     * // Get one LeavePolicy
     * const leavePolicy = await prisma.leavePolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeavePolicyFindUniqueArgs>(args: SelectSubset<T, LeavePolicyFindUniqueArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeavePolicy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeavePolicyFindUniqueOrThrowArgs} args - Arguments to find a LeavePolicy
     * @example
     * // Get one LeavePolicy
     * const leavePolicy = await prisma.leavePolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeavePolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, LeavePolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeavePolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePolicyFindFirstArgs} args - Arguments to find a LeavePolicy
     * @example
     * // Get one LeavePolicy
     * const leavePolicy = await prisma.leavePolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeavePolicyFindFirstArgs>(args?: SelectSubset<T, LeavePolicyFindFirstArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeavePolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePolicyFindFirstOrThrowArgs} args - Arguments to find a LeavePolicy
     * @example
     * // Get one LeavePolicy
     * const leavePolicy = await prisma.leavePolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeavePolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, LeavePolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeavePolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeavePolicies
     * const leavePolicies = await prisma.leavePolicy.findMany()
     * 
     * // Get first 10 LeavePolicies
     * const leavePolicies = await prisma.leavePolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leavePolicyWithIdOnly = await prisma.leavePolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeavePolicyFindManyArgs>(args?: SelectSubset<T, LeavePolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeavePolicy.
     * @param {LeavePolicyCreateArgs} args - Arguments to create a LeavePolicy.
     * @example
     * // Create one LeavePolicy
     * const LeavePolicy = await prisma.leavePolicy.create({
     *   data: {
     *     // ... data to create a LeavePolicy
     *   }
     * })
     * 
     */
    create<T extends LeavePolicyCreateArgs>(args: SelectSubset<T, LeavePolicyCreateArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeavePolicies.
     * @param {LeavePolicyCreateManyArgs} args - Arguments to create many LeavePolicies.
     * @example
     * // Create many LeavePolicies
     * const leavePolicy = await prisma.leavePolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeavePolicyCreateManyArgs>(args?: SelectSubset<T, LeavePolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeavePolicies and returns the data saved in the database.
     * @param {LeavePolicyCreateManyAndReturnArgs} args - Arguments to create many LeavePolicies.
     * @example
     * // Create many LeavePolicies
     * const leavePolicy = await prisma.leavePolicy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeavePolicies and only return the `id`
     * const leavePolicyWithIdOnly = await prisma.leavePolicy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeavePolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, LeavePolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeavePolicy.
     * @param {LeavePolicyDeleteArgs} args - Arguments to delete one LeavePolicy.
     * @example
     * // Delete one LeavePolicy
     * const LeavePolicy = await prisma.leavePolicy.delete({
     *   where: {
     *     // ... filter to delete one LeavePolicy
     *   }
     * })
     * 
     */
    delete<T extends LeavePolicyDeleteArgs>(args: SelectSubset<T, LeavePolicyDeleteArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeavePolicy.
     * @param {LeavePolicyUpdateArgs} args - Arguments to update one LeavePolicy.
     * @example
     * // Update one LeavePolicy
     * const leavePolicy = await prisma.leavePolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeavePolicyUpdateArgs>(args: SelectSubset<T, LeavePolicyUpdateArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeavePolicies.
     * @param {LeavePolicyDeleteManyArgs} args - Arguments to filter LeavePolicies to delete.
     * @example
     * // Delete a few LeavePolicies
     * const { count } = await prisma.leavePolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeavePolicyDeleteManyArgs>(args?: SelectSubset<T, LeavePolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeavePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeavePolicies
     * const leavePolicy = await prisma.leavePolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeavePolicyUpdateManyArgs>(args: SelectSubset<T, LeavePolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeavePolicies and returns the data updated in the database.
     * @param {LeavePolicyUpdateManyAndReturnArgs} args - Arguments to update many LeavePolicies.
     * @example
     * // Update many LeavePolicies
     * const leavePolicy = await prisma.leavePolicy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeavePolicies and only return the `id`
     * const leavePolicyWithIdOnly = await prisma.leavePolicy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeavePolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, LeavePolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeavePolicy.
     * @param {LeavePolicyUpsertArgs} args - Arguments to update or create a LeavePolicy.
     * @example
     * // Update or create a LeavePolicy
     * const leavePolicy = await prisma.leavePolicy.upsert({
     *   create: {
     *     // ... data to create a LeavePolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeavePolicy we want to update
     *   }
     * })
     */
    upsert<T extends LeavePolicyUpsertArgs>(args: SelectSubset<T, LeavePolicyUpsertArgs<ExtArgs>>): Prisma__LeavePolicyClient<$Result.GetResult<Prisma.$LeavePolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeavePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePolicyCountArgs} args - Arguments to filter LeavePolicies to count.
     * @example
     * // Count the number of LeavePolicies
     * const count = await prisma.leavePolicy.count({
     *   where: {
     *     // ... the filter for the LeavePolicies we want to count
     *   }
     * })
    **/
    count<T extends LeavePolicyCountArgs>(
      args?: Subset<T, LeavePolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeavePolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeavePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeavePolicyAggregateArgs>(args: Subset<T, LeavePolicyAggregateArgs>): Prisma.PrismaPromise<GetLeavePolicyAggregateType<T>>

    /**
     * Group by LeavePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeavePolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeavePolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeavePolicyGroupByArgs['orderBy'] }
        : { orderBy?: LeavePolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeavePolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeavePolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeavePolicy model
   */
  readonly fields: LeavePolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeavePolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeavePolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leaveType<T extends LeaveTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeaveTypeDefaultArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeavePolicy model
   */
  interface LeavePolicyFieldRefs {
    readonly id: FieldRef<"LeavePolicy", 'String'>
    readonly leaveTypeId: FieldRef<"LeavePolicy", 'String'>
    readonly name: FieldRef<"LeavePolicy", 'String'>
    readonly description: FieldRef<"LeavePolicy", 'String'>
    readonly maxDaysPerYear: FieldRef<"LeavePolicy", 'Int'>
    readonly maxDaysPerRequest: FieldRef<"LeavePolicy", 'Int'>
    readonly minDaysNotice: FieldRef<"LeavePolicy", 'Int'>
    readonly maxCarryForward: FieldRef<"LeavePolicy", 'Int'>
    readonly allowNegativeBalance: FieldRef<"LeavePolicy", 'Boolean'>
    readonly requiresApproval: FieldRef<"LeavePolicy", 'Boolean'>
    readonly autoApprove: FieldRef<"LeavePolicy", 'Boolean'>
    readonly accrualRate: FieldRef<"LeavePolicy", 'Float'>
    readonly probationPeriodDays: FieldRef<"LeavePolicy", 'Int'>
    readonly isActive: FieldRef<"LeavePolicy", 'Boolean'>
    readonly effectiveDate: FieldRef<"LeavePolicy", 'DateTime'>
    readonly expiryDate: FieldRef<"LeavePolicy", 'DateTime'>
    readonly createdAt: FieldRef<"LeavePolicy", 'DateTime'>
    readonly updatedAt: FieldRef<"LeavePolicy", 'DateTime'>
    readonly tenantId: FieldRef<"LeavePolicy", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeavePolicy findUnique
   */
  export type LeavePolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * Filter, which LeavePolicy to fetch.
     */
    where: LeavePolicyWhereUniqueInput
  }

  /**
   * LeavePolicy findUniqueOrThrow
   */
  export type LeavePolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * Filter, which LeavePolicy to fetch.
     */
    where: LeavePolicyWhereUniqueInput
  }

  /**
   * LeavePolicy findFirst
   */
  export type LeavePolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * Filter, which LeavePolicy to fetch.
     */
    where?: LeavePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePolicies to fetch.
     */
    orderBy?: LeavePolicyOrderByWithRelationInput | LeavePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeavePolicies.
     */
    cursor?: LeavePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeavePolicies.
     */
    distinct?: LeavePolicyScalarFieldEnum | LeavePolicyScalarFieldEnum[]
  }

  /**
   * LeavePolicy findFirstOrThrow
   */
  export type LeavePolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * Filter, which LeavePolicy to fetch.
     */
    where?: LeavePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePolicies to fetch.
     */
    orderBy?: LeavePolicyOrderByWithRelationInput | LeavePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeavePolicies.
     */
    cursor?: LeavePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeavePolicies.
     */
    distinct?: LeavePolicyScalarFieldEnum | LeavePolicyScalarFieldEnum[]
  }

  /**
   * LeavePolicy findMany
   */
  export type LeavePolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * Filter, which LeavePolicies to fetch.
     */
    where?: LeavePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeavePolicies to fetch.
     */
    orderBy?: LeavePolicyOrderByWithRelationInput | LeavePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeavePolicies.
     */
    cursor?: LeavePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeavePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeavePolicies.
     */
    skip?: number
    distinct?: LeavePolicyScalarFieldEnum | LeavePolicyScalarFieldEnum[]
  }

  /**
   * LeavePolicy create
   */
  export type LeavePolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a LeavePolicy.
     */
    data: XOR<LeavePolicyCreateInput, LeavePolicyUncheckedCreateInput>
  }

  /**
   * LeavePolicy createMany
   */
  export type LeavePolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeavePolicies.
     */
    data: LeavePolicyCreateManyInput | LeavePolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeavePolicy createManyAndReturn
   */
  export type LeavePolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * The data used to create many LeavePolicies.
     */
    data: LeavePolicyCreateManyInput | LeavePolicyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeavePolicy update
   */
  export type LeavePolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a LeavePolicy.
     */
    data: XOR<LeavePolicyUpdateInput, LeavePolicyUncheckedUpdateInput>
    /**
     * Choose, which LeavePolicy to update.
     */
    where: LeavePolicyWhereUniqueInput
  }

  /**
   * LeavePolicy updateMany
   */
  export type LeavePolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeavePolicies.
     */
    data: XOR<LeavePolicyUpdateManyMutationInput, LeavePolicyUncheckedUpdateManyInput>
    /**
     * Filter which LeavePolicies to update
     */
    where?: LeavePolicyWhereInput
    /**
     * Limit how many LeavePolicies to update.
     */
    limit?: number
  }

  /**
   * LeavePolicy updateManyAndReturn
   */
  export type LeavePolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * The data used to update LeavePolicies.
     */
    data: XOR<LeavePolicyUpdateManyMutationInput, LeavePolicyUncheckedUpdateManyInput>
    /**
     * Filter which LeavePolicies to update
     */
    where?: LeavePolicyWhereInput
    /**
     * Limit how many LeavePolicies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeavePolicy upsert
   */
  export type LeavePolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the LeavePolicy to update in case it exists.
     */
    where: LeavePolicyWhereUniqueInput
    /**
     * In case the LeavePolicy found by the `where` argument doesn't exist, create a new LeavePolicy with this data.
     */
    create: XOR<LeavePolicyCreateInput, LeavePolicyUncheckedCreateInput>
    /**
     * In case the LeavePolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeavePolicyUpdateInput, LeavePolicyUncheckedUpdateInput>
  }

  /**
   * LeavePolicy delete
   */
  export type LeavePolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
    /**
     * Filter which LeavePolicy to delete.
     */
    where: LeavePolicyWhereUniqueInput
  }

  /**
   * LeavePolicy deleteMany
   */
  export type LeavePolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeavePolicies to delete
     */
    where?: LeavePolicyWhereInput
    /**
     * Limit how many LeavePolicies to delete.
     */
    limit?: number
  }

  /**
   * LeavePolicy without action
   */
  export type LeavePolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeavePolicy
     */
    select?: LeavePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeavePolicy
     */
    omit?: LeavePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeavePolicyInclude<ExtArgs> | null
  }


  /**
   * Model LeaveRequest
   */

  export type AggregateLeaveRequest = {
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  export type LeaveRequestAvgAggregateOutputType = {
    totalDays: number | null
  }

  export type LeaveRequestSumAggregateOutputType = {
    totalDays: number | null
  }

  export type LeaveRequestMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    branchId: string | null
    leaveTypeId: string | null
    startDate: Date | null
    endDate: Date | null
    totalDays: number | null
    reason: string | null
    status: string | null
    appliedAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    rejectedAt: Date | null
    rejectedBy: string | null
    rejectionReason: string | null
    cancelledAt: Date | null
    cancelledBy: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeaveRequestMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    branchId: string | null
    leaveTypeId: string | null
    startDate: Date | null
    endDate: Date | null
    totalDays: number | null
    reason: string | null
    status: string | null
    appliedAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    rejectedAt: Date | null
    rejectedBy: string | null
    rejectionReason: string | null
    cancelledAt: Date | null
    cancelledBy: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeaveRequestCountAggregateOutputType = {
    id: number
    employeeId: number
    branchId: number
    leaveTypeId: number
    startDate: number
    endDate: number
    totalDays: number
    reason: number
    status: number
    appliedAt: number
    approvedAt: number
    approvedBy: number
    rejectedAt: number
    rejectedBy: number
    rejectionReason: number
    cancelledAt: number
    cancelledBy: number
    comments: number
    attachments: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type LeaveRequestAvgAggregateInputType = {
    totalDays?: true
  }

  export type LeaveRequestSumAggregateInputType = {
    totalDays?: true
  }

  export type LeaveRequestMinAggregateInputType = {
    id?: true
    employeeId?: true
    branchId?: true
    leaveTypeId?: true
    startDate?: true
    endDate?: true
    totalDays?: true
    reason?: true
    status?: true
    appliedAt?: true
    approvedAt?: true
    approvedBy?: true
    rejectedAt?: true
    rejectedBy?: true
    rejectionReason?: true
    cancelledAt?: true
    cancelledBy?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeaveRequestMaxAggregateInputType = {
    id?: true
    employeeId?: true
    branchId?: true
    leaveTypeId?: true
    startDate?: true
    endDate?: true
    totalDays?: true
    reason?: true
    status?: true
    appliedAt?: true
    approvedAt?: true
    approvedBy?: true
    rejectedAt?: true
    rejectedBy?: true
    rejectionReason?: true
    cancelledAt?: true
    cancelledBy?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeaveRequestCountAggregateInputType = {
    id?: true
    employeeId?: true
    branchId?: true
    leaveTypeId?: true
    startDate?: true
    endDate?: true
    totalDays?: true
    reason?: true
    status?: true
    appliedAt?: true
    approvedAt?: true
    approvedBy?: true
    rejectedAt?: true
    rejectedBy?: true
    rejectionReason?: true
    cancelledAt?: true
    cancelledBy?: true
    comments?: true
    attachments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type LeaveRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequest to aggregate.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveRequests
    **/
    _count?: true | LeaveRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type GetLeaveRequestAggregateType<T extends LeaveRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveRequest[P]>
      : GetScalarType<T[P], AggregateLeaveRequest[P]>
  }




  export type LeaveRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithAggregationInput | LeaveRequestOrderByWithAggregationInput[]
    by: LeaveRequestScalarFieldEnum[] | LeaveRequestScalarFieldEnum
    having?: LeaveRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveRequestCountAggregateInputType | true
    _avg?: LeaveRequestAvgAggregateInputType
    _sum?: LeaveRequestSumAggregateInputType
    _min?: LeaveRequestMinAggregateInputType
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type LeaveRequestGroupByOutputType = {
    id: string
    employeeId: string
    branchId: string | null
    leaveTypeId: string
    startDate: Date
    endDate: Date
    totalDays: number
    reason: string | null
    status: string
    appliedAt: Date
    approvedAt: Date | null
    approvedBy: string | null
    rejectedAt: Date | null
    rejectedBy: string | null
    rejectionReason: string | null
    cancelledAt: Date | null
    cancelledBy: string | null
    comments: string | null
    attachments: string[]
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  type GetLeaveRequestGroupByPayload<T extends LeaveRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
        }
      >
    >


  export type LeaveRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    leaveTypeId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalDays?: boolean
    reason?: boolean
    status?: boolean
    appliedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    cancelledAt?: boolean
    cancelledBy?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | LeaveRequest$branchArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    leaveTypeId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalDays?: boolean
    reason?: boolean
    status?: boolean
    appliedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    cancelledAt?: boolean
    cancelledBy?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | LeaveRequest$branchArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    leaveTypeId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalDays?: boolean
    reason?: boolean
    status?: boolean
    appliedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    cancelledAt?: boolean
    cancelledBy?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | LeaveRequest$branchArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectScalar = {
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    leaveTypeId?: boolean
    startDate?: boolean
    endDate?: boolean
    totalDays?: boolean
    reason?: boolean
    status?: boolean
    appliedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    cancelledAt?: boolean
    cancelledBy?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type LeaveRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "branchId" | "leaveTypeId" | "startDate" | "endDate" | "totalDays" | "reason" | "status" | "appliedAt" | "approvedAt" | "approvedBy" | "rejectedAt" | "rejectedBy" | "rejectionReason" | "cancelledAt" | "cancelledBy" | "comments" | "attachments" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["leaveRequest"]>
  export type LeaveRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | LeaveRequest$branchArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type LeaveRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | LeaveRequest$branchArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type LeaveRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | LeaveRequest$branchArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $LeaveRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveRequest"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs> | null
      leaveType: Prisma.$LeaveTypePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      branchId: string | null
      leaveTypeId: string
      startDate: Date
      endDate: Date
      totalDays: number
      reason: string | null
      status: string
      appliedAt: Date
      approvedAt: Date | null
      approvedBy: string | null
      rejectedAt: Date | null
      rejectedBy: string | null
      rejectionReason: string | null
      cancelledAt: Date | null
      cancelledBy: string | null
      comments: string | null
      attachments: string[]
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["leaveRequest"]>
    composites: {}
  }

  type LeaveRequestGetPayload<S extends boolean | null | undefined | LeaveRequestDefaultArgs> = $Result.GetResult<Prisma.$LeaveRequestPayload, S>

  type LeaveRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaveRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaveRequestCountAggregateInputType | true
    }

  export interface LeaveRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveRequest'], meta: { name: 'LeaveRequest' } }
    /**
     * Find zero or one LeaveRequest that matches the filter.
     * @param {LeaveRequestFindUniqueArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveRequestFindUniqueArgs>(args: SelectSubset<T, LeaveRequestFindUniqueArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaveRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaveRequestFindUniqueOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveRequestFindFirstArgs>(args?: SelectSubset<T, LeaveRequestFindFirstArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaveRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany()
     * 
     * // Get first 10 LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveRequestFindManyArgs>(args?: SelectSubset<T, LeaveRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaveRequest.
     * @param {LeaveRequestCreateArgs} args - Arguments to create a LeaveRequest.
     * @example
     * // Create one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.create({
     *   data: {
     *     // ... data to create a LeaveRequest
     *   }
     * })
     * 
     */
    create<T extends LeaveRequestCreateArgs>(args: SelectSubset<T, LeaveRequestCreateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaveRequests.
     * @param {LeaveRequestCreateManyArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveRequestCreateManyArgs>(args?: SelectSubset<T, LeaveRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveRequests and returns the data saved in the database.
     * @param {LeaveRequestCreateManyAndReturnArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveRequests and only return the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeaveRequest.
     * @param {LeaveRequestDeleteArgs} args - Arguments to delete one LeaveRequest.
     * @example
     * // Delete one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.delete({
     *   where: {
     *     // ... filter to delete one LeaveRequest
     *   }
     * })
     * 
     */
    delete<T extends LeaveRequestDeleteArgs>(args: SelectSubset<T, LeaveRequestDeleteArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaveRequest.
     * @param {LeaveRequestUpdateArgs} args - Arguments to update one LeaveRequest.
     * @example
     * // Update one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveRequestUpdateArgs>(args: SelectSubset<T, LeaveRequestUpdateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaveRequests.
     * @param {LeaveRequestDeleteManyArgs} args - Arguments to filter LeaveRequests to delete.
     * @example
     * // Delete a few LeaveRequests
     * const { count } = await prisma.leaveRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveRequestDeleteManyArgs>(args?: SelectSubset<T, LeaveRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveRequestUpdateManyArgs>(args: SelectSubset<T, LeaveRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests and returns the data updated in the database.
     * @param {LeaveRequestUpdateManyAndReturnArgs} args - Arguments to update many LeaveRequests.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeaveRequests and only return the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaveRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaveRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeaveRequest.
     * @param {LeaveRequestUpsertArgs} args - Arguments to update or create a LeaveRequest.
     * @example
     * // Update or create a LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.upsert({
     *   create: {
     *     // ... data to create a LeaveRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveRequest we want to update
     *   }
     * })
     */
    upsert<T extends LeaveRequestUpsertArgs>(args: SelectSubset<T, LeaveRequestUpsertArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestCountArgs} args - Arguments to filter LeaveRequests to count.
     * @example
     * // Count the number of LeaveRequests
     * const count = await prisma.leaveRequest.count({
     *   where: {
     *     // ... the filter for the LeaveRequests we want to count
     *   }
     * })
    **/
    count<T extends LeaveRequestCountArgs>(
      args?: Subset<T, LeaveRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveRequestAggregateArgs>(args: Subset<T, LeaveRequestAggregateArgs>): Prisma.PrismaPromise<GetLeaveRequestAggregateType<T>>

    /**
     * Group by LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveRequestGroupByArgs['orderBy'] }
        : { orderBy?: LeaveRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveRequest model
   */
  readonly fields: LeaveRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends LeaveRequest$branchArgs<ExtArgs> = {}>(args?: Subset<T, LeaveRequest$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    leaveType<T extends LeaveTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeaveTypeDefaultArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveRequest model
   */
  interface LeaveRequestFieldRefs {
    readonly id: FieldRef<"LeaveRequest", 'String'>
    readonly employeeId: FieldRef<"LeaveRequest", 'String'>
    readonly branchId: FieldRef<"LeaveRequest", 'String'>
    readonly leaveTypeId: FieldRef<"LeaveRequest", 'String'>
    readonly startDate: FieldRef<"LeaveRequest", 'DateTime'>
    readonly endDate: FieldRef<"LeaveRequest", 'DateTime'>
    readonly totalDays: FieldRef<"LeaveRequest", 'Int'>
    readonly reason: FieldRef<"LeaveRequest", 'String'>
    readonly status: FieldRef<"LeaveRequest", 'String'>
    readonly appliedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly approvedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly approvedBy: FieldRef<"LeaveRequest", 'String'>
    readonly rejectedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly rejectedBy: FieldRef<"LeaveRequest", 'String'>
    readonly rejectionReason: FieldRef<"LeaveRequest", 'String'>
    readonly cancelledAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly cancelledBy: FieldRef<"LeaveRequest", 'String'>
    readonly comments: FieldRef<"LeaveRequest", 'String'>
    readonly attachments: FieldRef<"LeaveRequest", 'String[]'>
    readonly createdAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly tenantId: FieldRef<"LeaveRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeaveRequest findUnique
   */
  export type LeaveRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findUniqueOrThrow
   */
  export type LeaveRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findFirst
   */
  export type LeaveRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findFirstOrThrow
   */
  export type LeaveRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findMany
   */
  export type LeaveRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequests to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest create
   */
  export type LeaveRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveRequest.
     */
    data: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
  }

  /**
   * LeaveRequest createMany
   */
  export type LeaveRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveRequest createManyAndReturn
   */
  export type LeaveRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveRequest update
   */
  export type LeaveRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveRequest.
     */
    data: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
    /**
     * Choose, which LeaveRequest to update.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest updateMany
   */
  export type LeaveRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveRequests.
     */
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which LeaveRequests to update
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to update.
     */
    limit?: number
  }

  /**
   * LeaveRequest updateManyAndReturn
   */
  export type LeaveRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * The data used to update LeaveRequests.
     */
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which LeaveRequests to update
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveRequest upsert
   */
  export type LeaveRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveRequest to update in case it exists.
     */
    where: LeaveRequestWhereUniqueInput
    /**
     * In case the LeaveRequest found by the `where` argument doesn't exist, create a new LeaveRequest with this data.
     */
    create: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
    /**
     * In case the LeaveRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
  }

  /**
   * LeaveRequest delete
   */
  export type LeaveRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter which LeaveRequest to delete.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest deleteMany
   */
  export type LeaveRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequests to delete
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to delete.
     */
    limit?: number
  }

  /**
   * LeaveRequest.branch
   */
  export type LeaveRequest$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * LeaveRequest without action
   */
  export type LeaveRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
  }


  /**
   * Model LeaveBalance
   */

  export type AggregateLeaveBalance = {
    _count: LeaveBalanceCountAggregateOutputType | null
    _avg: LeaveBalanceAvgAggregateOutputType | null
    _sum: LeaveBalanceSumAggregateOutputType | null
    _min: LeaveBalanceMinAggregateOutputType | null
    _max: LeaveBalanceMaxAggregateOutputType | null
  }

  export type LeaveBalanceAvgAggregateOutputType = {
    year: number | null
    allocated: number | null
    used: number | null
    pending: number | null
    available: number | null
    carriedForward: number | null
    accrued: number | null
  }

  export type LeaveBalanceSumAggregateOutputType = {
    year: number | null
    allocated: number | null
    used: number | null
    pending: number | null
    available: number | null
    carriedForward: number | null
    accrued: number | null
  }

  export type LeaveBalanceMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    leaveTypeId: string | null
    year: number | null
    allocated: number | null
    used: number | null
    pending: number | null
    available: number | null
    carriedForward: number | null
    accrued: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeaveBalanceMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    leaveTypeId: string | null
    year: number | null
    allocated: number | null
    used: number | null
    pending: number | null
    available: number | null
    carriedForward: number | null
    accrued: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type LeaveBalanceCountAggregateOutputType = {
    id: number
    employeeId: number
    leaveTypeId: number
    year: number
    allocated: number
    used: number
    pending: number
    available: number
    carriedForward: number
    accrued: number
    lastUpdated: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type LeaveBalanceAvgAggregateInputType = {
    year?: true
    allocated?: true
    used?: true
    pending?: true
    available?: true
    carriedForward?: true
    accrued?: true
  }

  export type LeaveBalanceSumAggregateInputType = {
    year?: true
    allocated?: true
    used?: true
    pending?: true
    available?: true
    carriedForward?: true
    accrued?: true
  }

  export type LeaveBalanceMinAggregateInputType = {
    id?: true
    employeeId?: true
    leaveTypeId?: true
    year?: true
    allocated?: true
    used?: true
    pending?: true
    available?: true
    carriedForward?: true
    accrued?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeaveBalanceMaxAggregateInputType = {
    id?: true
    employeeId?: true
    leaveTypeId?: true
    year?: true
    allocated?: true
    used?: true
    pending?: true
    available?: true
    carriedForward?: true
    accrued?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type LeaveBalanceCountAggregateInputType = {
    id?: true
    employeeId?: true
    leaveTypeId?: true
    year?: true
    allocated?: true
    used?: true
    pending?: true
    available?: true
    carriedForward?: true
    accrued?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type LeaveBalanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveBalance to aggregate.
     */
    where?: LeaveBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveBalances to fetch.
     */
    orderBy?: LeaveBalanceOrderByWithRelationInput | LeaveBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveBalances
    **/
    _count?: true | LeaveBalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveBalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveBalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveBalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveBalanceMaxAggregateInputType
  }

  export type GetLeaveBalanceAggregateType<T extends LeaveBalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveBalance[P]>
      : GetScalarType<T[P], AggregateLeaveBalance[P]>
  }




  export type LeaveBalanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveBalanceWhereInput
    orderBy?: LeaveBalanceOrderByWithAggregationInput | LeaveBalanceOrderByWithAggregationInput[]
    by: LeaveBalanceScalarFieldEnum[] | LeaveBalanceScalarFieldEnum
    having?: LeaveBalanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveBalanceCountAggregateInputType | true
    _avg?: LeaveBalanceAvgAggregateInputType
    _sum?: LeaveBalanceSumAggregateInputType
    _min?: LeaveBalanceMinAggregateInputType
    _max?: LeaveBalanceMaxAggregateInputType
  }

  export type LeaveBalanceGroupByOutputType = {
    id: string
    employeeId: string
    leaveTypeId: string
    year: number
    allocated: number
    used: number
    pending: number
    available: number
    carriedForward: number
    accrued: number
    lastUpdated: Date
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: LeaveBalanceCountAggregateOutputType | null
    _avg: LeaveBalanceAvgAggregateOutputType | null
    _sum: LeaveBalanceSumAggregateOutputType | null
    _min: LeaveBalanceMinAggregateOutputType | null
    _max: LeaveBalanceMaxAggregateOutputType | null
  }

  type GetLeaveBalanceGroupByPayload<T extends LeaveBalanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveBalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveBalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveBalanceGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveBalanceGroupByOutputType[P]>
        }
      >
    >


  export type LeaveBalanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    leaveTypeId?: boolean
    year?: boolean
    allocated?: boolean
    used?: boolean
    pending?: boolean
    available?: boolean
    carriedForward?: boolean
    accrued?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveBalance"]>

  export type LeaveBalanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    leaveTypeId?: boolean
    year?: boolean
    allocated?: boolean
    used?: boolean
    pending?: boolean
    available?: boolean
    carriedForward?: boolean
    accrued?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveBalance"]>

  export type LeaveBalanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    leaveTypeId?: boolean
    year?: boolean
    allocated?: boolean
    used?: boolean
    pending?: boolean
    available?: boolean
    carriedForward?: boolean
    accrued?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveBalance"]>

  export type LeaveBalanceSelectScalar = {
    id?: boolean
    employeeId?: boolean
    leaveTypeId?: boolean
    year?: boolean
    allocated?: boolean
    used?: boolean
    pending?: boolean
    available?: boolean
    carriedForward?: boolean
    accrued?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type LeaveBalanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "leaveTypeId" | "year" | "allocated" | "used" | "pending" | "available" | "carriedForward" | "accrued" | "lastUpdated" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["leaveBalance"]>
  export type LeaveBalanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type LeaveBalanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type LeaveBalanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    leaveType?: boolean | LeaveTypeDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $LeaveBalancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveBalance"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      leaveType: Prisma.$LeaveTypePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      leaveTypeId: string
      year: number
      allocated: number
      used: number
      pending: number
      available: number
      carriedForward: number
      accrued: number
      lastUpdated: Date
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["leaveBalance"]>
    composites: {}
  }

  type LeaveBalanceGetPayload<S extends boolean | null | undefined | LeaveBalanceDefaultArgs> = $Result.GetResult<Prisma.$LeaveBalancePayload, S>

  type LeaveBalanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaveBalanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaveBalanceCountAggregateInputType | true
    }

  export interface LeaveBalanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveBalance'], meta: { name: 'LeaveBalance' } }
    /**
     * Find zero or one LeaveBalance that matches the filter.
     * @param {LeaveBalanceFindUniqueArgs} args - Arguments to find a LeaveBalance
     * @example
     * // Get one LeaveBalance
     * const leaveBalance = await prisma.leaveBalance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveBalanceFindUniqueArgs>(args: SelectSubset<T, LeaveBalanceFindUniqueArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaveBalance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaveBalanceFindUniqueOrThrowArgs} args - Arguments to find a LeaveBalance
     * @example
     * // Get one LeaveBalance
     * const leaveBalance = await prisma.leaveBalance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveBalanceFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveBalanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveBalance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveBalanceFindFirstArgs} args - Arguments to find a LeaveBalance
     * @example
     * // Get one LeaveBalance
     * const leaveBalance = await prisma.leaveBalance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveBalanceFindFirstArgs>(args?: SelectSubset<T, LeaveBalanceFindFirstArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveBalance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveBalanceFindFirstOrThrowArgs} args - Arguments to find a LeaveBalance
     * @example
     * // Get one LeaveBalance
     * const leaveBalance = await prisma.leaveBalance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveBalanceFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveBalanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaveBalances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveBalanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveBalances
     * const leaveBalances = await prisma.leaveBalance.findMany()
     * 
     * // Get first 10 LeaveBalances
     * const leaveBalances = await prisma.leaveBalance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveBalanceWithIdOnly = await prisma.leaveBalance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveBalanceFindManyArgs>(args?: SelectSubset<T, LeaveBalanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaveBalance.
     * @param {LeaveBalanceCreateArgs} args - Arguments to create a LeaveBalance.
     * @example
     * // Create one LeaveBalance
     * const LeaveBalance = await prisma.leaveBalance.create({
     *   data: {
     *     // ... data to create a LeaveBalance
     *   }
     * })
     * 
     */
    create<T extends LeaveBalanceCreateArgs>(args: SelectSubset<T, LeaveBalanceCreateArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaveBalances.
     * @param {LeaveBalanceCreateManyArgs} args - Arguments to create many LeaveBalances.
     * @example
     * // Create many LeaveBalances
     * const leaveBalance = await prisma.leaveBalance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveBalanceCreateManyArgs>(args?: SelectSubset<T, LeaveBalanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveBalances and returns the data saved in the database.
     * @param {LeaveBalanceCreateManyAndReturnArgs} args - Arguments to create many LeaveBalances.
     * @example
     * // Create many LeaveBalances
     * const leaveBalance = await prisma.leaveBalance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveBalances and only return the `id`
     * const leaveBalanceWithIdOnly = await prisma.leaveBalance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveBalanceCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveBalanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeaveBalance.
     * @param {LeaveBalanceDeleteArgs} args - Arguments to delete one LeaveBalance.
     * @example
     * // Delete one LeaveBalance
     * const LeaveBalance = await prisma.leaveBalance.delete({
     *   where: {
     *     // ... filter to delete one LeaveBalance
     *   }
     * })
     * 
     */
    delete<T extends LeaveBalanceDeleteArgs>(args: SelectSubset<T, LeaveBalanceDeleteArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaveBalance.
     * @param {LeaveBalanceUpdateArgs} args - Arguments to update one LeaveBalance.
     * @example
     * // Update one LeaveBalance
     * const leaveBalance = await prisma.leaveBalance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveBalanceUpdateArgs>(args: SelectSubset<T, LeaveBalanceUpdateArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaveBalances.
     * @param {LeaveBalanceDeleteManyArgs} args - Arguments to filter LeaveBalances to delete.
     * @example
     * // Delete a few LeaveBalances
     * const { count } = await prisma.leaveBalance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveBalanceDeleteManyArgs>(args?: SelectSubset<T, LeaveBalanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveBalanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveBalances
     * const leaveBalance = await prisma.leaveBalance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveBalanceUpdateManyArgs>(args: SelectSubset<T, LeaveBalanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveBalances and returns the data updated in the database.
     * @param {LeaveBalanceUpdateManyAndReturnArgs} args - Arguments to update many LeaveBalances.
     * @example
     * // Update many LeaveBalances
     * const leaveBalance = await prisma.leaveBalance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeaveBalances and only return the `id`
     * const leaveBalanceWithIdOnly = await prisma.leaveBalance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaveBalanceUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaveBalanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeaveBalance.
     * @param {LeaveBalanceUpsertArgs} args - Arguments to update or create a LeaveBalance.
     * @example
     * // Update or create a LeaveBalance
     * const leaveBalance = await prisma.leaveBalance.upsert({
     *   create: {
     *     // ... data to create a LeaveBalance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveBalance we want to update
     *   }
     * })
     */
    upsert<T extends LeaveBalanceUpsertArgs>(args: SelectSubset<T, LeaveBalanceUpsertArgs<ExtArgs>>): Prisma__LeaveBalanceClient<$Result.GetResult<Prisma.$LeaveBalancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaveBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveBalanceCountArgs} args - Arguments to filter LeaveBalances to count.
     * @example
     * // Count the number of LeaveBalances
     * const count = await prisma.leaveBalance.count({
     *   where: {
     *     // ... the filter for the LeaveBalances we want to count
     *   }
     * })
    **/
    count<T extends LeaveBalanceCountArgs>(
      args?: Subset<T, LeaveBalanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveBalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveBalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveBalanceAggregateArgs>(args: Subset<T, LeaveBalanceAggregateArgs>): Prisma.PrismaPromise<GetLeaveBalanceAggregateType<T>>

    /**
     * Group by LeaveBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveBalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveBalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveBalanceGroupByArgs['orderBy'] }
        : { orderBy?: LeaveBalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveBalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveBalance model
   */
  readonly fields: LeaveBalanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveBalance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveBalanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    leaveType<T extends LeaveTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeaveTypeDefaultArgs<ExtArgs>>): Prisma__LeaveTypeClient<$Result.GetResult<Prisma.$LeaveTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveBalance model
   */
  interface LeaveBalanceFieldRefs {
    readonly id: FieldRef<"LeaveBalance", 'String'>
    readonly employeeId: FieldRef<"LeaveBalance", 'String'>
    readonly leaveTypeId: FieldRef<"LeaveBalance", 'String'>
    readonly year: FieldRef<"LeaveBalance", 'Int'>
    readonly allocated: FieldRef<"LeaveBalance", 'Float'>
    readonly used: FieldRef<"LeaveBalance", 'Float'>
    readonly pending: FieldRef<"LeaveBalance", 'Float'>
    readonly available: FieldRef<"LeaveBalance", 'Float'>
    readonly carriedForward: FieldRef<"LeaveBalance", 'Float'>
    readonly accrued: FieldRef<"LeaveBalance", 'Float'>
    readonly lastUpdated: FieldRef<"LeaveBalance", 'DateTime'>
    readonly createdAt: FieldRef<"LeaveBalance", 'DateTime'>
    readonly updatedAt: FieldRef<"LeaveBalance", 'DateTime'>
    readonly tenantId: FieldRef<"LeaveBalance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeaveBalance findUnique
   */
  export type LeaveBalanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * Filter, which LeaveBalance to fetch.
     */
    where: LeaveBalanceWhereUniqueInput
  }

  /**
   * LeaveBalance findUniqueOrThrow
   */
  export type LeaveBalanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * Filter, which LeaveBalance to fetch.
     */
    where: LeaveBalanceWhereUniqueInput
  }

  /**
   * LeaveBalance findFirst
   */
  export type LeaveBalanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * Filter, which LeaveBalance to fetch.
     */
    where?: LeaveBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveBalances to fetch.
     */
    orderBy?: LeaveBalanceOrderByWithRelationInput | LeaveBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveBalances.
     */
    cursor?: LeaveBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveBalances.
     */
    distinct?: LeaveBalanceScalarFieldEnum | LeaveBalanceScalarFieldEnum[]
  }

  /**
   * LeaveBalance findFirstOrThrow
   */
  export type LeaveBalanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * Filter, which LeaveBalance to fetch.
     */
    where?: LeaveBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveBalances to fetch.
     */
    orderBy?: LeaveBalanceOrderByWithRelationInput | LeaveBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveBalances.
     */
    cursor?: LeaveBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveBalances.
     */
    distinct?: LeaveBalanceScalarFieldEnum | LeaveBalanceScalarFieldEnum[]
  }

  /**
   * LeaveBalance findMany
   */
  export type LeaveBalanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * Filter, which LeaveBalances to fetch.
     */
    where?: LeaveBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveBalances to fetch.
     */
    orderBy?: LeaveBalanceOrderByWithRelationInput | LeaveBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveBalances.
     */
    cursor?: LeaveBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveBalances.
     */
    skip?: number
    distinct?: LeaveBalanceScalarFieldEnum | LeaveBalanceScalarFieldEnum[]
  }

  /**
   * LeaveBalance create
   */
  export type LeaveBalanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveBalance.
     */
    data: XOR<LeaveBalanceCreateInput, LeaveBalanceUncheckedCreateInput>
  }

  /**
   * LeaveBalance createMany
   */
  export type LeaveBalanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveBalances.
     */
    data: LeaveBalanceCreateManyInput | LeaveBalanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveBalance createManyAndReturn
   */
  export type LeaveBalanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * The data used to create many LeaveBalances.
     */
    data: LeaveBalanceCreateManyInput | LeaveBalanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveBalance update
   */
  export type LeaveBalanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveBalance.
     */
    data: XOR<LeaveBalanceUpdateInput, LeaveBalanceUncheckedUpdateInput>
    /**
     * Choose, which LeaveBalance to update.
     */
    where: LeaveBalanceWhereUniqueInput
  }

  /**
   * LeaveBalance updateMany
   */
  export type LeaveBalanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveBalances.
     */
    data: XOR<LeaveBalanceUpdateManyMutationInput, LeaveBalanceUncheckedUpdateManyInput>
    /**
     * Filter which LeaveBalances to update
     */
    where?: LeaveBalanceWhereInput
    /**
     * Limit how many LeaveBalances to update.
     */
    limit?: number
  }

  /**
   * LeaveBalance updateManyAndReturn
   */
  export type LeaveBalanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * The data used to update LeaveBalances.
     */
    data: XOR<LeaveBalanceUpdateManyMutationInput, LeaveBalanceUncheckedUpdateManyInput>
    /**
     * Filter which LeaveBalances to update
     */
    where?: LeaveBalanceWhereInput
    /**
     * Limit how many LeaveBalances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveBalance upsert
   */
  export type LeaveBalanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveBalance to update in case it exists.
     */
    where: LeaveBalanceWhereUniqueInput
    /**
     * In case the LeaveBalance found by the `where` argument doesn't exist, create a new LeaveBalance with this data.
     */
    create: XOR<LeaveBalanceCreateInput, LeaveBalanceUncheckedCreateInput>
    /**
     * In case the LeaveBalance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveBalanceUpdateInput, LeaveBalanceUncheckedUpdateInput>
  }

  /**
   * LeaveBalance delete
   */
  export type LeaveBalanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
    /**
     * Filter which LeaveBalance to delete.
     */
    where: LeaveBalanceWhereUniqueInput
  }

  /**
   * LeaveBalance deleteMany
   */
  export type LeaveBalanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveBalances to delete
     */
    where?: LeaveBalanceWhereInput
    /**
     * Limit how many LeaveBalances to delete.
     */
    limit?: number
  }

  /**
   * LeaveBalance without action
   */
  export type LeaveBalanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveBalance
     */
    select?: LeaveBalanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveBalance
     */
    omit?: LeaveBalanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveBalanceInclude<ExtArgs> | null
  }


  /**
   * Model Holiday
   */

  export type AggregateHoliday = {
    _count: HolidayCountAggregateOutputType | null
    _min: HolidayMinAggregateOutputType | null
    _max: HolidayMaxAggregateOutputType | null
  }

  export type HolidayMinAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    type: string | null
    description: string | null
    isRecurring: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type HolidayMaxAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    type: string | null
    description: string | null
    isRecurring: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type HolidayCountAggregateOutputType = {
    id: number
    name: number
    date: number
    type: number
    description: number
    isRecurring: number
    isActive: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type HolidayMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    type?: true
    description?: true
    isRecurring?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type HolidayMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    type?: true
    description?: true
    isRecurring?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type HolidayCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    type?: true
    description?: true
    isRecurring?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type HolidayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holiday to aggregate.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Holidays
    **/
    _count?: true | HolidayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HolidayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HolidayMaxAggregateInputType
  }

  export type GetHolidayAggregateType<T extends HolidayAggregateArgs> = {
        [P in keyof T & keyof AggregateHoliday]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHoliday[P]>
      : GetScalarType<T[P], AggregateHoliday[P]>
  }




  export type HolidayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolidayWhereInput
    orderBy?: HolidayOrderByWithAggregationInput | HolidayOrderByWithAggregationInput[]
    by: HolidayScalarFieldEnum[] | HolidayScalarFieldEnum
    having?: HolidayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HolidayCountAggregateInputType | true
    _min?: HolidayMinAggregateInputType
    _max?: HolidayMaxAggregateInputType
  }

  export type HolidayGroupByOutputType = {
    id: string
    name: string
    date: Date
    type: string
    description: string | null
    isRecurring: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: HolidayCountAggregateOutputType | null
    _min: HolidayMinAggregateOutputType | null
    _max: HolidayMaxAggregateOutputType | null
  }

  type GetHolidayGroupByPayload<T extends HolidayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HolidayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HolidayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HolidayGroupByOutputType[P]>
            : GetScalarType<T[P], HolidayGroupByOutputType[P]>
        }
      >
    >


  export type HolidaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    type?: boolean
    description?: boolean
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holiday"]>

  export type HolidaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    type?: boolean
    description?: boolean
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holiday"]>

  export type HolidaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    type?: boolean
    description?: boolean
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holiday"]>

  export type HolidaySelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    type?: boolean
    description?: boolean
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type HolidayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "date" | "type" | "description" | "isRecurring" | "isActive" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["holiday"]>
  export type HolidayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type HolidayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type HolidayIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $HolidayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Holiday"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      date: Date
      type: string
      description: string | null
      isRecurring: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["holiday"]>
    composites: {}
  }

  type HolidayGetPayload<S extends boolean | null | undefined | HolidayDefaultArgs> = $Result.GetResult<Prisma.$HolidayPayload, S>

  type HolidayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HolidayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HolidayCountAggregateInputType | true
    }

  export interface HolidayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Holiday'], meta: { name: 'Holiday' } }
    /**
     * Find zero or one Holiday that matches the filter.
     * @param {HolidayFindUniqueArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HolidayFindUniqueArgs>(args: SelectSubset<T, HolidayFindUniqueArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Holiday that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HolidayFindUniqueOrThrowArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HolidayFindUniqueOrThrowArgs>(args: SelectSubset<T, HolidayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holiday that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayFindFirstArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HolidayFindFirstArgs>(args?: SelectSubset<T, HolidayFindFirstArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holiday that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayFindFirstOrThrowArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HolidayFindFirstOrThrowArgs>(args?: SelectSubset<T, HolidayFindFirstOrThrowArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Holidays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Holidays
     * const holidays = await prisma.holiday.findMany()
     * 
     * // Get first 10 Holidays
     * const holidays = await prisma.holiday.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const holidayWithIdOnly = await prisma.holiday.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HolidayFindManyArgs>(args?: SelectSubset<T, HolidayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Holiday.
     * @param {HolidayCreateArgs} args - Arguments to create a Holiday.
     * @example
     * // Create one Holiday
     * const Holiday = await prisma.holiday.create({
     *   data: {
     *     // ... data to create a Holiday
     *   }
     * })
     * 
     */
    create<T extends HolidayCreateArgs>(args: SelectSubset<T, HolidayCreateArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Holidays.
     * @param {HolidayCreateManyArgs} args - Arguments to create many Holidays.
     * @example
     * // Create many Holidays
     * const holiday = await prisma.holiday.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HolidayCreateManyArgs>(args?: SelectSubset<T, HolidayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Holidays and returns the data saved in the database.
     * @param {HolidayCreateManyAndReturnArgs} args - Arguments to create many Holidays.
     * @example
     * // Create many Holidays
     * const holiday = await prisma.holiday.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Holidays and only return the `id`
     * const holidayWithIdOnly = await prisma.holiday.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HolidayCreateManyAndReturnArgs>(args?: SelectSubset<T, HolidayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Holiday.
     * @param {HolidayDeleteArgs} args - Arguments to delete one Holiday.
     * @example
     * // Delete one Holiday
     * const Holiday = await prisma.holiday.delete({
     *   where: {
     *     // ... filter to delete one Holiday
     *   }
     * })
     * 
     */
    delete<T extends HolidayDeleteArgs>(args: SelectSubset<T, HolidayDeleteArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Holiday.
     * @param {HolidayUpdateArgs} args - Arguments to update one Holiday.
     * @example
     * // Update one Holiday
     * const holiday = await prisma.holiday.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HolidayUpdateArgs>(args: SelectSubset<T, HolidayUpdateArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Holidays.
     * @param {HolidayDeleteManyArgs} args - Arguments to filter Holidays to delete.
     * @example
     * // Delete a few Holidays
     * const { count } = await prisma.holiday.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HolidayDeleteManyArgs>(args?: SelectSubset<T, HolidayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Holidays
     * const holiday = await prisma.holiday.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HolidayUpdateManyArgs>(args: SelectSubset<T, HolidayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holidays and returns the data updated in the database.
     * @param {HolidayUpdateManyAndReturnArgs} args - Arguments to update many Holidays.
     * @example
     * // Update many Holidays
     * const holiday = await prisma.holiday.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Holidays and only return the `id`
     * const holidayWithIdOnly = await prisma.holiday.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HolidayUpdateManyAndReturnArgs>(args: SelectSubset<T, HolidayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Holiday.
     * @param {HolidayUpsertArgs} args - Arguments to update or create a Holiday.
     * @example
     * // Update or create a Holiday
     * const holiday = await prisma.holiday.upsert({
     *   create: {
     *     // ... data to create a Holiday
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Holiday we want to update
     *   }
     * })
     */
    upsert<T extends HolidayUpsertArgs>(args: SelectSubset<T, HolidayUpsertArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayCountArgs} args - Arguments to filter Holidays to count.
     * @example
     * // Count the number of Holidays
     * const count = await prisma.holiday.count({
     *   where: {
     *     // ... the filter for the Holidays we want to count
     *   }
     * })
    **/
    count<T extends HolidayCountArgs>(
      args?: Subset<T, HolidayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HolidayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Holiday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HolidayAggregateArgs>(args: Subset<T, HolidayAggregateArgs>): Prisma.PrismaPromise<GetHolidayAggregateType<T>>

    /**
     * Group by Holiday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HolidayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HolidayGroupByArgs['orderBy'] }
        : { orderBy?: HolidayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HolidayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHolidayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Holiday model
   */
  readonly fields: HolidayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Holiday.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HolidayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Holiday model
   */
  interface HolidayFieldRefs {
    readonly id: FieldRef<"Holiday", 'String'>
    readonly name: FieldRef<"Holiday", 'String'>
    readonly date: FieldRef<"Holiday", 'DateTime'>
    readonly type: FieldRef<"Holiday", 'String'>
    readonly description: FieldRef<"Holiday", 'String'>
    readonly isRecurring: FieldRef<"Holiday", 'Boolean'>
    readonly isActive: FieldRef<"Holiday", 'Boolean'>
    readonly createdAt: FieldRef<"Holiday", 'DateTime'>
    readonly updatedAt: FieldRef<"Holiday", 'DateTime'>
    readonly tenantId: FieldRef<"Holiday", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Holiday findUnique
   */
  export type HolidayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday findUniqueOrThrow
   */
  export type HolidayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday findFirst
   */
  export type HolidayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holidays.
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holidays.
     */
    distinct?: HolidayScalarFieldEnum | HolidayScalarFieldEnum[]
  }

  /**
   * Holiday findFirstOrThrow
   */
  export type HolidayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holidays.
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holidays.
     */
    distinct?: HolidayScalarFieldEnum | HolidayScalarFieldEnum[]
  }

  /**
   * Holiday findMany
   */
  export type HolidayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * Filter, which Holidays to fetch.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Holidays.
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    distinct?: HolidayScalarFieldEnum | HolidayScalarFieldEnum[]
  }

  /**
   * Holiday create
   */
  export type HolidayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * The data needed to create a Holiday.
     */
    data: XOR<HolidayCreateInput, HolidayUncheckedCreateInput>
  }

  /**
   * Holiday createMany
   */
  export type HolidayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Holidays.
     */
    data: HolidayCreateManyInput | HolidayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Holiday createManyAndReturn
   */
  export type HolidayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * The data used to create many Holidays.
     */
    data: HolidayCreateManyInput | HolidayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Holiday update
   */
  export type HolidayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * The data needed to update a Holiday.
     */
    data: XOR<HolidayUpdateInput, HolidayUncheckedUpdateInput>
    /**
     * Choose, which Holiday to update.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday updateMany
   */
  export type HolidayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Holidays.
     */
    data: XOR<HolidayUpdateManyMutationInput, HolidayUncheckedUpdateManyInput>
    /**
     * Filter which Holidays to update
     */
    where?: HolidayWhereInput
    /**
     * Limit how many Holidays to update.
     */
    limit?: number
  }

  /**
   * Holiday updateManyAndReturn
   */
  export type HolidayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * The data used to update Holidays.
     */
    data: XOR<HolidayUpdateManyMutationInput, HolidayUncheckedUpdateManyInput>
    /**
     * Filter which Holidays to update
     */
    where?: HolidayWhereInput
    /**
     * Limit how many Holidays to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Holiday upsert
   */
  export type HolidayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * The filter to search for the Holiday to update in case it exists.
     */
    where: HolidayWhereUniqueInput
    /**
     * In case the Holiday found by the `where` argument doesn't exist, create a new Holiday with this data.
     */
    create: XOR<HolidayCreateInput, HolidayUncheckedCreateInput>
    /**
     * In case the Holiday was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HolidayUpdateInput, HolidayUncheckedUpdateInput>
  }

  /**
   * Holiday delete
   */
  export type HolidayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
    /**
     * Filter which Holiday to delete.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday deleteMany
   */
  export type HolidayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holidays to delete
     */
    where?: HolidayWhereInput
    /**
     * Limit how many Holidays to delete.
     */
    limit?: number
  }

  /**
   * Holiday without action
   */
  export type HolidayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HolidayInclude<ExtArgs> | null
  }


  /**
   * Model PerformanceReviewCycle
   */

  export type AggregatePerformanceReviewCycle = {
    _count: PerformanceReviewCycleCountAggregateOutputType | null
    _min: PerformanceReviewCycleMinAggregateOutputType | null
    _max: PerformanceReviewCycleMaxAggregateOutputType | null
  }

  export type PerformanceReviewCycleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    reviewDeadline: Date | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceReviewCycleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    reviewDeadline: Date | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceReviewCycleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startDate: number
    endDate: number
    reviewDeadline: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PerformanceReviewCycleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    reviewDeadline?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceReviewCycleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    reviewDeadline?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceReviewCycleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    reviewDeadline?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PerformanceReviewCycleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceReviewCycle to aggregate.
     */
    where?: PerformanceReviewCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviewCycles to fetch.
     */
    orderBy?: PerformanceReviewCycleOrderByWithRelationInput | PerformanceReviewCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformanceReviewCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviewCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviewCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformanceReviewCycles
    **/
    _count?: true | PerformanceReviewCycleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformanceReviewCycleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformanceReviewCycleMaxAggregateInputType
  }

  export type GetPerformanceReviewCycleAggregateType<T extends PerformanceReviewCycleAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformanceReviewCycle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformanceReviewCycle[P]>
      : GetScalarType<T[P], AggregatePerformanceReviewCycle[P]>
  }




  export type PerformanceReviewCycleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewCycleWhereInput
    orderBy?: PerformanceReviewCycleOrderByWithAggregationInput | PerformanceReviewCycleOrderByWithAggregationInput[]
    by: PerformanceReviewCycleScalarFieldEnum[] | PerformanceReviewCycleScalarFieldEnum
    having?: PerformanceReviewCycleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformanceReviewCycleCountAggregateInputType | true
    _min?: PerformanceReviewCycleMinAggregateInputType
    _max?: PerformanceReviewCycleMaxAggregateInputType
  }

  export type PerformanceReviewCycleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    reviewDeadline: Date
    status: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PerformanceReviewCycleCountAggregateOutputType | null
    _min: PerformanceReviewCycleMinAggregateOutputType | null
    _max: PerformanceReviewCycleMaxAggregateOutputType | null
  }

  type GetPerformanceReviewCycleGroupByPayload<T extends PerformanceReviewCycleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformanceReviewCycleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformanceReviewCycleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformanceReviewCycleGroupByOutputType[P]>
            : GetScalarType<T[P], PerformanceReviewCycleGroupByOutputType[P]>
        }
      >
    >


  export type PerformanceReviewCycleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    reviewDeadline?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceGoals?: boolean | PerformanceReviewCycle$performanceGoalsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    performanceReviews?: boolean | PerformanceReviewCycle$performanceReviewsArgs<ExtArgs>
    _count?: boolean | PerformanceReviewCycleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReviewCycle"]>

  export type PerformanceReviewCycleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    reviewDeadline?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReviewCycle"]>

  export type PerformanceReviewCycleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    reviewDeadline?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReviewCycle"]>

  export type PerformanceReviewCycleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    reviewDeadline?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PerformanceReviewCycleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "startDate" | "endDate" | "reviewDeadline" | "status" | "isActive" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["performanceReviewCycle"]>
  export type PerformanceReviewCycleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceGoals?: boolean | PerformanceReviewCycle$performanceGoalsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    performanceReviews?: boolean | PerformanceReviewCycle$performanceReviewsArgs<ExtArgs>
    _count?: boolean | PerformanceReviewCycleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PerformanceReviewCycleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceReviewCycleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PerformanceReviewCyclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformanceReviewCycle"
    objects: {
      performanceGoals: Prisma.$PerformanceGoalPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
      performanceReviews: Prisma.$PerformanceReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      startDate: Date
      endDate: Date
      reviewDeadline: Date
      status: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["performanceReviewCycle"]>
    composites: {}
  }

  type PerformanceReviewCycleGetPayload<S extends boolean | null | undefined | PerformanceReviewCycleDefaultArgs> = $Result.GetResult<Prisma.$PerformanceReviewCyclePayload, S>

  type PerformanceReviewCycleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerformanceReviewCycleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerformanceReviewCycleCountAggregateInputType | true
    }

  export interface PerformanceReviewCycleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformanceReviewCycle'], meta: { name: 'PerformanceReviewCycle' } }
    /**
     * Find zero or one PerformanceReviewCycle that matches the filter.
     * @param {PerformanceReviewCycleFindUniqueArgs} args - Arguments to find a PerformanceReviewCycle
     * @example
     * // Get one PerformanceReviewCycle
     * const performanceReviewCycle = await prisma.performanceReviewCycle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformanceReviewCycleFindUniqueArgs>(args: SelectSubset<T, PerformanceReviewCycleFindUniqueArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerformanceReviewCycle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerformanceReviewCycleFindUniqueOrThrowArgs} args - Arguments to find a PerformanceReviewCycle
     * @example
     * // Get one PerformanceReviewCycle
     * const performanceReviewCycle = await prisma.performanceReviewCycle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformanceReviewCycleFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformanceReviewCycleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceReviewCycle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCycleFindFirstArgs} args - Arguments to find a PerformanceReviewCycle
     * @example
     * // Get one PerformanceReviewCycle
     * const performanceReviewCycle = await prisma.performanceReviewCycle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformanceReviewCycleFindFirstArgs>(args?: SelectSubset<T, PerformanceReviewCycleFindFirstArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceReviewCycle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCycleFindFirstOrThrowArgs} args - Arguments to find a PerformanceReviewCycle
     * @example
     * // Get one PerformanceReviewCycle
     * const performanceReviewCycle = await prisma.performanceReviewCycle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformanceReviewCycleFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformanceReviewCycleFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerformanceReviewCycles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCycleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformanceReviewCycles
     * const performanceReviewCycles = await prisma.performanceReviewCycle.findMany()
     * 
     * // Get first 10 PerformanceReviewCycles
     * const performanceReviewCycles = await prisma.performanceReviewCycle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performanceReviewCycleWithIdOnly = await prisma.performanceReviewCycle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformanceReviewCycleFindManyArgs>(args?: SelectSubset<T, PerformanceReviewCycleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerformanceReviewCycle.
     * @param {PerformanceReviewCycleCreateArgs} args - Arguments to create a PerformanceReviewCycle.
     * @example
     * // Create one PerformanceReviewCycle
     * const PerformanceReviewCycle = await prisma.performanceReviewCycle.create({
     *   data: {
     *     // ... data to create a PerformanceReviewCycle
     *   }
     * })
     * 
     */
    create<T extends PerformanceReviewCycleCreateArgs>(args: SelectSubset<T, PerformanceReviewCycleCreateArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerformanceReviewCycles.
     * @param {PerformanceReviewCycleCreateManyArgs} args - Arguments to create many PerformanceReviewCycles.
     * @example
     * // Create many PerformanceReviewCycles
     * const performanceReviewCycle = await prisma.performanceReviewCycle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformanceReviewCycleCreateManyArgs>(args?: SelectSubset<T, PerformanceReviewCycleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformanceReviewCycles and returns the data saved in the database.
     * @param {PerformanceReviewCycleCreateManyAndReturnArgs} args - Arguments to create many PerformanceReviewCycles.
     * @example
     * // Create many PerformanceReviewCycles
     * const performanceReviewCycle = await prisma.performanceReviewCycle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformanceReviewCycles and only return the `id`
     * const performanceReviewCycleWithIdOnly = await prisma.performanceReviewCycle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformanceReviewCycleCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformanceReviewCycleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PerformanceReviewCycle.
     * @param {PerformanceReviewCycleDeleteArgs} args - Arguments to delete one PerformanceReviewCycle.
     * @example
     * // Delete one PerformanceReviewCycle
     * const PerformanceReviewCycle = await prisma.performanceReviewCycle.delete({
     *   where: {
     *     // ... filter to delete one PerformanceReviewCycle
     *   }
     * })
     * 
     */
    delete<T extends PerformanceReviewCycleDeleteArgs>(args: SelectSubset<T, PerformanceReviewCycleDeleteArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerformanceReviewCycle.
     * @param {PerformanceReviewCycleUpdateArgs} args - Arguments to update one PerformanceReviewCycle.
     * @example
     * // Update one PerformanceReviewCycle
     * const performanceReviewCycle = await prisma.performanceReviewCycle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformanceReviewCycleUpdateArgs>(args: SelectSubset<T, PerformanceReviewCycleUpdateArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerformanceReviewCycles.
     * @param {PerformanceReviewCycleDeleteManyArgs} args - Arguments to filter PerformanceReviewCycles to delete.
     * @example
     * // Delete a few PerformanceReviewCycles
     * const { count } = await prisma.performanceReviewCycle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformanceReviewCycleDeleteManyArgs>(args?: SelectSubset<T, PerformanceReviewCycleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceReviewCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCycleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformanceReviewCycles
     * const performanceReviewCycle = await prisma.performanceReviewCycle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformanceReviewCycleUpdateManyArgs>(args: SelectSubset<T, PerformanceReviewCycleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceReviewCycles and returns the data updated in the database.
     * @param {PerformanceReviewCycleUpdateManyAndReturnArgs} args - Arguments to update many PerformanceReviewCycles.
     * @example
     * // Update many PerformanceReviewCycles
     * const performanceReviewCycle = await prisma.performanceReviewCycle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PerformanceReviewCycles and only return the `id`
     * const performanceReviewCycleWithIdOnly = await prisma.performanceReviewCycle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PerformanceReviewCycleUpdateManyAndReturnArgs>(args: SelectSubset<T, PerformanceReviewCycleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PerformanceReviewCycle.
     * @param {PerformanceReviewCycleUpsertArgs} args - Arguments to update or create a PerformanceReviewCycle.
     * @example
     * // Update or create a PerformanceReviewCycle
     * const performanceReviewCycle = await prisma.performanceReviewCycle.upsert({
     *   create: {
     *     // ... data to create a PerformanceReviewCycle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformanceReviewCycle we want to update
     *   }
     * })
     */
    upsert<T extends PerformanceReviewCycleUpsertArgs>(args: SelectSubset<T, PerformanceReviewCycleUpsertArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerformanceReviewCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCycleCountArgs} args - Arguments to filter PerformanceReviewCycles to count.
     * @example
     * // Count the number of PerformanceReviewCycles
     * const count = await prisma.performanceReviewCycle.count({
     *   where: {
     *     // ... the filter for the PerformanceReviewCycles we want to count
     *   }
     * })
    **/
    count<T extends PerformanceReviewCycleCountArgs>(
      args?: Subset<T, PerformanceReviewCycleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformanceReviewCycleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformanceReviewCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCycleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformanceReviewCycleAggregateArgs>(args: Subset<T, PerformanceReviewCycleAggregateArgs>): Prisma.PrismaPromise<GetPerformanceReviewCycleAggregateType<T>>

    /**
     * Group by PerformanceReviewCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCycleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformanceReviewCycleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformanceReviewCycleGroupByArgs['orderBy'] }
        : { orderBy?: PerformanceReviewCycleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformanceReviewCycleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformanceReviewCycleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformanceReviewCycle model
   */
  readonly fields: PerformanceReviewCycleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformanceReviewCycle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformanceReviewCycleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performanceGoals<T extends PerformanceReviewCycle$performanceGoalsArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceReviewCycle$performanceGoalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    performanceReviews<T extends PerformanceReviewCycle$performanceReviewsArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceReviewCycle$performanceReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformanceReviewCycle model
   */
  interface PerformanceReviewCycleFieldRefs {
    readonly id: FieldRef<"PerformanceReviewCycle", 'String'>
    readonly name: FieldRef<"PerformanceReviewCycle", 'String'>
    readonly description: FieldRef<"PerformanceReviewCycle", 'String'>
    readonly startDate: FieldRef<"PerformanceReviewCycle", 'DateTime'>
    readonly endDate: FieldRef<"PerformanceReviewCycle", 'DateTime'>
    readonly reviewDeadline: FieldRef<"PerformanceReviewCycle", 'DateTime'>
    readonly status: FieldRef<"PerformanceReviewCycle", 'String'>
    readonly isActive: FieldRef<"PerformanceReviewCycle", 'Boolean'>
    readonly createdAt: FieldRef<"PerformanceReviewCycle", 'DateTime'>
    readonly updatedAt: FieldRef<"PerformanceReviewCycle", 'DateTime'>
    readonly tenantId: FieldRef<"PerformanceReviewCycle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PerformanceReviewCycle findUnique
   */
  export type PerformanceReviewCycleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReviewCycle to fetch.
     */
    where: PerformanceReviewCycleWhereUniqueInput
  }

  /**
   * PerformanceReviewCycle findUniqueOrThrow
   */
  export type PerformanceReviewCycleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReviewCycle to fetch.
     */
    where: PerformanceReviewCycleWhereUniqueInput
  }

  /**
   * PerformanceReviewCycle findFirst
   */
  export type PerformanceReviewCycleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReviewCycle to fetch.
     */
    where?: PerformanceReviewCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviewCycles to fetch.
     */
    orderBy?: PerformanceReviewCycleOrderByWithRelationInput | PerformanceReviewCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceReviewCycles.
     */
    cursor?: PerformanceReviewCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviewCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviewCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceReviewCycles.
     */
    distinct?: PerformanceReviewCycleScalarFieldEnum | PerformanceReviewCycleScalarFieldEnum[]
  }

  /**
   * PerformanceReviewCycle findFirstOrThrow
   */
  export type PerformanceReviewCycleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReviewCycle to fetch.
     */
    where?: PerformanceReviewCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviewCycles to fetch.
     */
    orderBy?: PerformanceReviewCycleOrderByWithRelationInput | PerformanceReviewCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceReviewCycles.
     */
    cursor?: PerformanceReviewCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviewCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviewCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceReviewCycles.
     */
    distinct?: PerformanceReviewCycleScalarFieldEnum | PerformanceReviewCycleScalarFieldEnum[]
  }

  /**
   * PerformanceReviewCycle findMany
   */
  export type PerformanceReviewCycleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReviewCycles to fetch.
     */
    where?: PerformanceReviewCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviewCycles to fetch.
     */
    orderBy?: PerformanceReviewCycleOrderByWithRelationInput | PerformanceReviewCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformanceReviewCycles.
     */
    cursor?: PerformanceReviewCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviewCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviewCycles.
     */
    skip?: number
    distinct?: PerformanceReviewCycleScalarFieldEnum | PerformanceReviewCycleScalarFieldEnum[]
  }

  /**
   * PerformanceReviewCycle create
   */
  export type PerformanceReviewCycleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformanceReviewCycle.
     */
    data: XOR<PerformanceReviewCycleCreateInput, PerformanceReviewCycleUncheckedCreateInput>
  }

  /**
   * PerformanceReviewCycle createMany
   */
  export type PerformanceReviewCycleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformanceReviewCycles.
     */
    data: PerformanceReviewCycleCreateManyInput | PerformanceReviewCycleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformanceReviewCycle createManyAndReturn
   */
  export type PerformanceReviewCycleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * The data used to create many PerformanceReviewCycles.
     */
    data: PerformanceReviewCycleCreateManyInput | PerformanceReviewCycleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceReviewCycle update
   */
  export type PerformanceReviewCycleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformanceReviewCycle.
     */
    data: XOR<PerformanceReviewCycleUpdateInput, PerformanceReviewCycleUncheckedUpdateInput>
    /**
     * Choose, which PerformanceReviewCycle to update.
     */
    where: PerformanceReviewCycleWhereUniqueInput
  }

  /**
   * PerformanceReviewCycle updateMany
   */
  export type PerformanceReviewCycleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformanceReviewCycles.
     */
    data: XOR<PerformanceReviewCycleUpdateManyMutationInput, PerformanceReviewCycleUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceReviewCycles to update
     */
    where?: PerformanceReviewCycleWhereInput
    /**
     * Limit how many PerformanceReviewCycles to update.
     */
    limit?: number
  }

  /**
   * PerformanceReviewCycle updateManyAndReturn
   */
  export type PerformanceReviewCycleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * The data used to update PerformanceReviewCycles.
     */
    data: XOR<PerformanceReviewCycleUpdateManyMutationInput, PerformanceReviewCycleUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceReviewCycles to update
     */
    where?: PerformanceReviewCycleWhereInput
    /**
     * Limit how many PerformanceReviewCycles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceReviewCycle upsert
   */
  export type PerformanceReviewCycleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformanceReviewCycle to update in case it exists.
     */
    where: PerformanceReviewCycleWhereUniqueInput
    /**
     * In case the PerformanceReviewCycle found by the `where` argument doesn't exist, create a new PerformanceReviewCycle with this data.
     */
    create: XOR<PerformanceReviewCycleCreateInput, PerformanceReviewCycleUncheckedCreateInput>
    /**
     * In case the PerformanceReviewCycle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformanceReviewCycleUpdateInput, PerformanceReviewCycleUncheckedUpdateInput>
  }

  /**
   * PerformanceReviewCycle delete
   */
  export type PerformanceReviewCycleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    /**
     * Filter which PerformanceReviewCycle to delete.
     */
    where: PerformanceReviewCycleWhereUniqueInput
  }

  /**
   * PerformanceReviewCycle deleteMany
   */
  export type PerformanceReviewCycleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceReviewCycles to delete
     */
    where?: PerformanceReviewCycleWhereInput
    /**
     * Limit how many PerformanceReviewCycles to delete.
     */
    limit?: number
  }

  /**
   * PerformanceReviewCycle.performanceGoals
   */
  export type PerformanceReviewCycle$performanceGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    where?: PerformanceGoalWhereInput
    orderBy?: PerformanceGoalOrderByWithRelationInput | PerformanceGoalOrderByWithRelationInput[]
    cursor?: PerformanceGoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceGoalScalarFieldEnum | PerformanceGoalScalarFieldEnum[]
  }

  /**
   * PerformanceReviewCycle.performanceReviews
   */
  export type PerformanceReviewCycle$performanceReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    where?: PerformanceReviewWhereInput
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    cursor?: PerformanceReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * PerformanceReviewCycle without action
   */
  export type PerformanceReviewCycleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
  }


  /**
   * Model PerformanceReview
   */

  export type AggregatePerformanceReview = {
    _count: PerformanceReviewCountAggregateOutputType | null
    _avg: PerformanceReviewAvgAggregateOutputType | null
    _sum: PerformanceReviewSumAggregateOutputType | null
    _min: PerformanceReviewMinAggregateOutputType | null
    _max: PerformanceReviewMaxAggregateOutputType | null
  }

  export type PerformanceReviewAvgAggregateOutputType = {
    overallRating: number | null
  }

  export type PerformanceReviewSumAggregateOutputType = {
    overallRating: number | null
  }

  export type PerformanceReviewMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    reviewCycleId: string | null
    reviewerId: string | null
    status: string | null
    selfAssessmentCompleted: boolean | null
    managerReviewCompleted: boolean | null
    overallRating: number | null
    overallComments: string | null
    strengths: string | null
    areasForImprovement: string | null
    developmentPlan: string | null
    goals: string | null
    submittedAt: Date | null
    completedAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceReviewMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    reviewCycleId: string | null
    reviewerId: string | null
    status: string | null
    selfAssessmentCompleted: boolean | null
    managerReviewCompleted: boolean | null
    overallRating: number | null
    overallComments: string | null
    strengths: string | null
    areasForImprovement: string | null
    developmentPlan: string | null
    goals: string | null
    submittedAt: Date | null
    completedAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceReviewCountAggregateOutputType = {
    id: number
    employeeId: number
    reviewCycleId: number
    reviewerId: number
    status: number
    selfAssessmentCompleted: number
    managerReviewCompleted: number
    overallRating: number
    overallComments: number
    strengths: number
    areasForImprovement: number
    developmentPlan: number
    goals: number
    submittedAt: number
    completedAt: number
    approvedAt: number
    approvedBy: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PerformanceReviewAvgAggregateInputType = {
    overallRating?: true
  }

  export type PerformanceReviewSumAggregateInputType = {
    overallRating?: true
  }

  export type PerformanceReviewMinAggregateInputType = {
    id?: true
    employeeId?: true
    reviewCycleId?: true
    reviewerId?: true
    status?: true
    selfAssessmentCompleted?: true
    managerReviewCompleted?: true
    overallRating?: true
    overallComments?: true
    strengths?: true
    areasForImprovement?: true
    developmentPlan?: true
    goals?: true
    submittedAt?: true
    completedAt?: true
    approvedAt?: true
    approvedBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceReviewMaxAggregateInputType = {
    id?: true
    employeeId?: true
    reviewCycleId?: true
    reviewerId?: true
    status?: true
    selfAssessmentCompleted?: true
    managerReviewCompleted?: true
    overallRating?: true
    overallComments?: true
    strengths?: true
    areasForImprovement?: true
    developmentPlan?: true
    goals?: true
    submittedAt?: true
    completedAt?: true
    approvedAt?: true
    approvedBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceReviewCountAggregateInputType = {
    id?: true
    employeeId?: true
    reviewCycleId?: true
    reviewerId?: true
    status?: true
    selfAssessmentCompleted?: true
    managerReviewCompleted?: true
    overallRating?: true
    overallComments?: true
    strengths?: true
    areasForImprovement?: true
    developmentPlan?: true
    goals?: true
    submittedAt?: true
    completedAt?: true
    approvedAt?: true
    approvedBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PerformanceReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceReview to aggregate.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformanceReviews
    **/
    _count?: true | PerformanceReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerformanceReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerformanceReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformanceReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformanceReviewMaxAggregateInputType
  }

  export type GetPerformanceReviewAggregateType<T extends PerformanceReviewAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformanceReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformanceReview[P]>
      : GetScalarType<T[P], AggregatePerformanceReview[P]>
  }




  export type PerformanceReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceReviewWhereInput
    orderBy?: PerformanceReviewOrderByWithAggregationInput | PerformanceReviewOrderByWithAggregationInput[]
    by: PerformanceReviewScalarFieldEnum[] | PerformanceReviewScalarFieldEnum
    having?: PerformanceReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformanceReviewCountAggregateInputType | true
    _avg?: PerformanceReviewAvgAggregateInputType
    _sum?: PerformanceReviewSumAggregateInputType
    _min?: PerformanceReviewMinAggregateInputType
    _max?: PerformanceReviewMaxAggregateInputType
  }

  export type PerformanceReviewGroupByOutputType = {
    id: string
    employeeId: string
    reviewCycleId: string
    reviewerId: string
    status: string
    selfAssessmentCompleted: boolean
    managerReviewCompleted: boolean
    overallRating: number | null
    overallComments: string | null
    strengths: string | null
    areasForImprovement: string | null
    developmentPlan: string | null
    goals: string | null
    submittedAt: Date | null
    completedAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PerformanceReviewCountAggregateOutputType | null
    _avg: PerformanceReviewAvgAggregateOutputType | null
    _sum: PerformanceReviewSumAggregateOutputType | null
    _min: PerformanceReviewMinAggregateOutputType | null
    _max: PerformanceReviewMaxAggregateOutputType | null
  }

  type GetPerformanceReviewGroupByPayload<T extends PerformanceReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformanceReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformanceReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformanceReviewGroupByOutputType[P]>
            : GetScalarType<T[P], PerformanceReviewGroupByOutputType[P]>
        }
      >
    >


  export type PerformanceReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    reviewerId?: boolean
    status?: boolean
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: boolean
    overallComments?: boolean
    strengths?: boolean
    areasForImprovement?: boolean
    developmentPlan?: boolean
    goals?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceFeedback?: boolean | PerformanceReview$performanceFeedbackArgs<ExtArgs>
    performanceRatings?: boolean | PerformanceReview$performanceRatingsArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceReviewCycleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | PerformanceReviewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReview"]>

  export type PerformanceReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    reviewerId?: boolean
    status?: boolean
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: boolean
    overallComments?: boolean
    strengths?: boolean
    areasForImprovement?: boolean
    developmentPlan?: boolean
    goals?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceReviewCycleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReview"]>

  export type PerformanceReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    reviewerId?: boolean
    status?: boolean
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: boolean
    overallComments?: boolean
    strengths?: boolean
    areasForImprovement?: boolean
    developmentPlan?: boolean
    goals?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceReviewCycleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceReview"]>

  export type PerformanceReviewSelectScalar = {
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    reviewerId?: boolean
    status?: boolean
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: boolean
    overallComments?: boolean
    strengths?: boolean
    areasForImprovement?: boolean
    developmentPlan?: boolean
    goals?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PerformanceReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "reviewCycleId" | "reviewerId" | "status" | "selfAssessmentCompleted" | "managerReviewCompleted" | "overallRating" | "overallComments" | "strengths" | "areasForImprovement" | "developmentPlan" | "goals" | "submittedAt" | "completedAt" | "approvedAt" | "approvedBy" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["performanceReview"]>
  export type PerformanceReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceFeedback?: boolean | PerformanceReview$performanceFeedbackArgs<ExtArgs>
    performanceRatings?: boolean | PerformanceReview$performanceRatingsArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceReviewCycleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | PerformanceReviewCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PerformanceReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceReviewCycleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceReviewCycleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PerformanceReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformanceReview"
    objects: {
      performanceFeedback: Prisma.$PerformanceFeedbackPayload<ExtArgs>[]
      performanceRatings: Prisma.$PerformanceRatingPayload<ExtArgs>[]
      employee: Prisma.$EmployeePayload<ExtArgs>
      reviewCycle: Prisma.$PerformanceReviewCyclePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      reviewCycleId: string
      reviewerId: string
      status: string
      selfAssessmentCompleted: boolean
      managerReviewCompleted: boolean
      overallRating: number | null
      overallComments: string | null
      strengths: string | null
      areasForImprovement: string | null
      developmentPlan: string | null
      goals: string | null
      submittedAt: Date | null
      completedAt: Date | null
      approvedAt: Date | null
      approvedBy: string | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["performanceReview"]>
    composites: {}
  }

  type PerformanceReviewGetPayload<S extends boolean | null | undefined | PerformanceReviewDefaultArgs> = $Result.GetResult<Prisma.$PerformanceReviewPayload, S>

  type PerformanceReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerformanceReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerformanceReviewCountAggregateInputType | true
    }

  export interface PerformanceReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformanceReview'], meta: { name: 'PerformanceReview' } }
    /**
     * Find zero or one PerformanceReview that matches the filter.
     * @param {PerformanceReviewFindUniqueArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformanceReviewFindUniqueArgs>(args: SelectSubset<T, PerformanceReviewFindUniqueArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerformanceReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerformanceReviewFindUniqueOrThrowArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformanceReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformanceReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewFindFirstArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformanceReviewFindFirstArgs>(args?: SelectSubset<T, PerformanceReviewFindFirstArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewFindFirstOrThrowArgs} args - Arguments to find a PerformanceReview
     * @example
     * // Get one PerformanceReview
     * const performanceReview = await prisma.performanceReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformanceReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformanceReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerformanceReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformanceReviews
     * const performanceReviews = await prisma.performanceReview.findMany()
     * 
     * // Get first 10 PerformanceReviews
     * const performanceReviews = await prisma.performanceReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performanceReviewWithIdOnly = await prisma.performanceReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformanceReviewFindManyArgs>(args?: SelectSubset<T, PerformanceReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerformanceReview.
     * @param {PerformanceReviewCreateArgs} args - Arguments to create a PerformanceReview.
     * @example
     * // Create one PerformanceReview
     * const PerformanceReview = await prisma.performanceReview.create({
     *   data: {
     *     // ... data to create a PerformanceReview
     *   }
     * })
     * 
     */
    create<T extends PerformanceReviewCreateArgs>(args: SelectSubset<T, PerformanceReviewCreateArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerformanceReviews.
     * @param {PerformanceReviewCreateManyArgs} args - Arguments to create many PerformanceReviews.
     * @example
     * // Create many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformanceReviewCreateManyArgs>(args?: SelectSubset<T, PerformanceReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformanceReviews and returns the data saved in the database.
     * @param {PerformanceReviewCreateManyAndReturnArgs} args - Arguments to create many PerformanceReviews.
     * @example
     * // Create many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformanceReviews and only return the `id`
     * const performanceReviewWithIdOnly = await prisma.performanceReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformanceReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformanceReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PerformanceReview.
     * @param {PerformanceReviewDeleteArgs} args - Arguments to delete one PerformanceReview.
     * @example
     * // Delete one PerformanceReview
     * const PerformanceReview = await prisma.performanceReview.delete({
     *   where: {
     *     // ... filter to delete one PerformanceReview
     *   }
     * })
     * 
     */
    delete<T extends PerformanceReviewDeleteArgs>(args: SelectSubset<T, PerformanceReviewDeleteArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerformanceReview.
     * @param {PerformanceReviewUpdateArgs} args - Arguments to update one PerformanceReview.
     * @example
     * // Update one PerformanceReview
     * const performanceReview = await prisma.performanceReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformanceReviewUpdateArgs>(args: SelectSubset<T, PerformanceReviewUpdateArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerformanceReviews.
     * @param {PerformanceReviewDeleteManyArgs} args - Arguments to filter PerformanceReviews to delete.
     * @example
     * // Delete a few PerformanceReviews
     * const { count } = await prisma.performanceReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformanceReviewDeleteManyArgs>(args?: SelectSubset<T, PerformanceReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformanceReviewUpdateManyArgs>(args: SelectSubset<T, PerformanceReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceReviews and returns the data updated in the database.
     * @param {PerformanceReviewUpdateManyAndReturnArgs} args - Arguments to update many PerformanceReviews.
     * @example
     * // Update many PerformanceReviews
     * const performanceReview = await prisma.performanceReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PerformanceReviews and only return the `id`
     * const performanceReviewWithIdOnly = await prisma.performanceReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PerformanceReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, PerformanceReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PerformanceReview.
     * @param {PerformanceReviewUpsertArgs} args - Arguments to update or create a PerformanceReview.
     * @example
     * // Update or create a PerformanceReview
     * const performanceReview = await prisma.performanceReview.upsert({
     *   create: {
     *     // ... data to create a PerformanceReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformanceReview we want to update
     *   }
     * })
     */
    upsert<T extends PerformanceReviewUpsertArgs>(args: SelectSubset<T, PerformanceReviewUpsertArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerformanceReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewCountArgs} args - Arguments to filter PerformanceReviews to count.
     * @example
     * // Count the number of PerformanceReviews
     * const count = await prisma.performanceReview.count({
     *   where: {
     *     // ... the filter for the PerformanceReviews we want to count
     *   }
     * })
    **/
    count<T extends PerformanceReviewCountArgs>(
      args?: Subset<T, PerformanceReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformanceReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformanceReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformanceReviewAggregateArgs>(args: Subset<T, PerformanceReviewAggregateArgs>): Prisma.PrismaPromise<GetPerformanceReviewAggregateType<T>>

    /**
     * Group by PerformanceReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformanceReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformanceReviewGroupByArgs['orderBy'] }
        : { orderBy?: PerformanceReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformanceReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformanceReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformanceReview model
   */
  readonly fields: PerformanceReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformanceReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformanceReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performanceFeedback<T extends PerformanceReview$performanceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceReview$performanceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceRatings<T extends PerformanceReview$performanceRatingsArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceReview$performanceRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviewCycle<T extends PerformanceReviewCycleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceReviewCycleDefaultArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformanceReview model
   */
  interface PerformanceReviewFieldRefs {
    readonly id: FieldRef<"PerformanceReview", 'String'>
    readonly employeeId: FieldRef<"PerformanceReview", 'String'>
    readonly reviewCycleId: FieldRef<"PerformanceReview", 'String'>
    readonly reviewerId: FieldRef<"PerformanceReview", 'String'>
    readonly status: FieldRef<"PerformanceReview", 'String'>
    readonly selfAssessmentCompleted: FieldRef<"PerformanceReview", 'Boolean'>
    readonly managerReviewCompleted: FieldRef<"PerformanceReview", 'Boolean'>
    readonly overallRating: FieldRef<"PerformanceReview", 'Float'>
    readonly overallComments: FieldRef<"PerformanceReview", 'String'>
    readonly strengths: FieldRef<"PerformanceReview", 'String'>
    readonly areasForImprovement: FieldRef<"PerformanceReview", 'String'>
    readonly developmentPlan: FieldRef<"PerformanceReview", 'String'>
    readonly goals: FieldRef<"PerformanceReview", 'String'>
    readonly submittedAt: FieldRef<"PerformanceReview", 'DateTime'>
    readonly completedAt: FieldRef<"PerformanceReview", 'DateTime'>
    readonly approvedAt: FieldRef<"PerformanceReview", 'DateTime'>
    readonly approvedBy: FieldRef<"PerformanceReview", 'String'>
    readonly createdAt: FieldRef<"PerformanceReview", 'DateTime'>
    readonly updatedAt: FieldRef<"PerformanceReview", 'DateTime'>
    readonly tenantId: FieldRef<"PerformanceReview", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PerformanceReview findUnique
   */
  export type PerformanceReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview findUniqueOrThrow
   */
  export type PerformanceReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview findFirst
   */
  export type PerformanceReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceReviews.
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceReviews.
     */
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * PerformanceReview findFirstOrThrow
   */
  export type PerformanceReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReview to fetch.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceReviews.
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceReviews.
     */
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * PerformanceReview findMany
   */
  export type PerformanceReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceReviews to fetch.
     */
    where?: PerformanceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceReviews to fetch.
     */
    orderBy?: PerformanceReviewOrderByWithRelationInput | PerformanceReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformanceReviews.
     */
    cursor?: PerformanceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceReviews.
     */
    skip?: number
    distinct?: PerformanceReviewScalarFieldEnum | PerformanceReviewScalarFieldEnum[]
  }

  /**
   * PerformanceReview create
   */
  export type PerformanceReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformanceReview.
     */
    data: XOR<PerformanceReviewCreateInput, PerformanceReviewUncheckedCreateInput>
  }

  /**
   * PerformanceReview createMany
   */
  export type PerformanceReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformanceReviews.
     */
    data: PerformanceReviewCreateManyInput | PerformanceReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformanceReview createManyAndReturn
   */
  export type PerformanceReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * The data used to create many PerformanceReviews.
     */
    data: PerformanceReviewCreateManyInput | PerformanceReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceReview update
   */
  export type PerformanceReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformanceReview.
     */
    data: XOR<PerformanceReviewUpdateInput, PerformanceReviewUncheckedUpdateInput>
    /**
     * Choose, which PerformanceReview to update.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview updateMany
   */
  export type PerformanceReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformanceReviews.
     */
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceReviews to update
     */
    where?: PerformanceReviewWhereInput
    /**
     * Limit how many PerformanceReviews to update.
     */
    limit?: number
  }

  /**
   * PerformanceReview updateManyAndReturn
   */
  export type PerformanceReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * The data used to update PerformanceReviews.
     */
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceReviews to update
     */
    where?: PerformanceReviewWhereInput
    /**
     * Limit how many PerformanceReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceReview upsert
   */
  export type PerformanceReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformanceReview to update in case it exists.
     */
    where: PerformanceReviewWhereUniqueInput
    /**
     * In case the PerformanceReview found by the `where` argument doesn't exist, create a new PerformanceReview with this data.
     */
    create: XOR<PerformanceReviewCreateInput, PerformanceReviewUncheckedCreateInput>
    /**
     * In case the PerformanceReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformanceReviewUpdateInput, PerformanceReviewUncheckedUpdateInput>
  }

  /**
   * PerformanceReview delete
   */
  export type PerformanceReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
    /**
     * Filter which PerformanceReview to delete.
     */
    where: PerformanceReviewWhereUniqueInput
  }

  /**
   * PerformanceReview deleteMany
   */
  export type PerformanceReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceReviews to delete
     */
    where?: PerformanceReviewWhereInput
    /**
     * Limit how many PerformanceReviews to delete.
     */
    limit?: number
  }

  /**
   * PerformanceReview.performanceFeedback
   */
  export type PerformanceReview$performanceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    where?: PerformanceFeedbackWhereInput
    orderBy?: PerformanceFeedbackOrderByWithRelationInput | PerformanceFeedbackOrderByWithRelationInput[]
    cursor?: PerformanceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceFeedbackScalarFieldEnum | PerformanceFeedbackScalarFieldEnum[]
  }

  /**
   * PerformanceReview.performanceRatings
   */
  export type PerformanceReview$performanceRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    where?: PerformanceRatingWhereInput
    orderBy?: PerformanceRatingOrderByWithRelationInput | PerformanceRatingOrderByWithRelationInput[]
    cursor?: PerformanceRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformanceRatingScalarFieldEnum | PerformanceRatingScalarFieldEnum[]
  }

  /**
   * PerformanceReview without action
   */
  export type PerformanceReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReview
     */
    select?: PerformanceReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReview
     */
    omit?: PerformanceReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewInclude<ExtArgs> | null
  }


  /**
   * Model PerformanceGoal
   */

  export type AggregatePerformanceGoal = {
    _count: PerformanceGoalCountAggregateOutputType | null
    _avg: PerformanceGoalAvgAggregateOutputType | null
    _sum: PerformanceGoalSumAggregateOutputType | null
    _min: PerformanceGoalMinAggregateOutputType | null
    _max: PerformanceGoalMaxAggregateOutputType | null
  }

  export type PerformanceGoalAvgAggregateOutputType = {
    progress: number | null
  }

  export type PerformanceGoalSumAggregateOutputType = {
    progress: number | null
  }

  export type PerformanceGoalMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    reviewCycleId: string | null
    title: string | null
    description: string | null
    category: string | null
    priority: string | null
    targetDate: Date | null
    status: string | null
    progress: number | null
    measurementCriteria: string | null
    achievedDate: Date | null
    comments: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceGoalMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    reviewCycleId: string | null
    title: string | null
    description: string | null
    category: string | null
    priority: string | null
    targetDate: Date | null
    status: string | null
    progress: number | null
    measurementCriteria: string | null
    achievedDate: Date | null
    comments: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceGoalCountAggregateOutputType = {
    id: number
    employeeId: number
    reviewCycleId: number
    title: number
    description: number
    category: number
    priority: number
    targetDate: number
    status: number
    progress: number
    measurementCriteria: number
    achievedDate: number
    comments: number
    createdBy: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PerformanceGoalAvgAggregateInputType = {
    progress?: true
  }

  export type PerformanceGoalSumAggregateInputType = {
    progress?: true
  }

  export type PerformanceGoalMinAggregateInputType = {
    id?: true
    employeeId?: true
    reviewCycleId?: true
    title?: true
    description?: true
    category?: true
    priority?: true
    targetDate?: true
    status?: true
    progress?: true
    measurementCriteria?: true
    achievedDate?: true
    comments?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceGoalMaxAggregateInputType = {
    id?: true
    employeeId?: true
    reviewCycleId?: true
    title?: true
    description?: true
    category?: true
    priority?: true
    targetDate?: true
    status?: true
    progress?: true
    measurementCriteria?: true
    achievedDate?: true
    comments?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceGoalCountAggregateInputType = {
    id?: true
    employeeId?: true
    reviewCycleId?: true
    title?: true
    description?: true
    category?: true
    priority?: true
    targetDate?: true
    status?: true
    progress?: true
    measurementCriteria?: true
    achievedDate?: true
    comments?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PerformanceGoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceGoal to aggregate.
     */
    where?: PerformanceGoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceGoals to fetch.
     */
    orderBy?: PerformanceGoalOrderByWithRelationInput | PerformanceGoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformanceGoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceGoals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceGoals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformanceGoals
    **/
    _count?: true | PerformanceGoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerformanceGoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerformanceGoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformanceGoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformanceGoalMaxAggregateInputType
  }

  export type GetPerformanceGoalAggregateType<T extends PerformanceGoalAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformanceGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformanceGoal[P]>
      : GetScalarType<T[P], AggregatePerformanceGoal[P]>
  }




  export type PerformanceGoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceGoalWhereInput
    orderBy?: PerformanceGoalOrderByWithAggregationInput | PerformanceGoalOrderByWithAggregationInput[]
    by: PerformanceGoalScalarFieldEnum[] | PerformanceGoalScalarFieldEnum
    having?: PerformanceGoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformanceGoalCountAggregateInputType | true
    _avg?: PerformanceGoalAvgAggregateInputType
    _sum?: PerformanceGoalSumAggregateInputType
    _min?: PerformanceGoalMinAggregateInputType
    _max?: PerformanceGoalMaxAggregateInputType
  }

  export type PerformanceGoalGroupByOutputType = {
    id: string
    employeeId: string
    reviewCycleId: string | null
    title: string
    description: string
    category: string
    priority: string
    targetDate: Date | null
    status: string
    progress: number
    measurementCriteria: string | null
    achievedDate: Date | null
    comments: string | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PerformanceGoalCountAggregateOutputType | null
    _avg: PerformanceGoalAvgAggregateOutputType | null
    _sum: PerformanceGoalSumAggregateOutputType | null
    _min: PerformanceGoalMinAggregateOutputType | null
    _max: PerformanceGoalMaxAggregateOutputType | null
  }

  type GetPerformanceGoalGroupByPayload<T extends PerformanceGoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformanceGoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformanceGoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformanceGoalGroupByOutputType[P]>
            : GetScalarType<T[P], PerformanceGoalGroupByOutputType[P]>
        }
      >
    >


  export type PerformanceGoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    targetDate?: boolean
    status?: boolean
    progress?: boolean
    measurementCriteria?: boolean
    achievedDate?: boolean
    comments?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceGoal$reviewCycleArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceGoal"]>

  export type PerformanceGoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    targetDate?: boolean
    status?: boolean
    progress?: boolean
    measurementCriteria?: boolean
    achievedDate?: boolean
    comments?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceGoal$reviewCycleArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceGoal"]>

  export type PerformanceGoalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    targetDate?: boolean
    status?: boolean
    progress?: boolean
    measurementCriteria?: boolean
    achievedDate?: boolean
    comments?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceGoal$reviewCycleArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceGoal"]>

  export type PerformanceGoalSelectScalar = {
    id?: boolean
    employeeId?: boolean
    reviewCycleId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    targetDate?: boolean
    status?: boolean
    progress?: boolean
    measurementCriteria?: boolean
    achievedDate?: boolean
    comments?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PerformanceGoalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "reviewCycleId" | "title" | "description" | "category" | "priority" | "targetDate" | "status" | "progress" | "measurementCriteria" | "achievedDate" | "comments" | "createdBy" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["performanceGoal"]>
  export type PerformanceGoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceGoal$reviewCycleArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceGoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceGoal$reviewCycleArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceGoalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewCycle?: boolean | PerformanceGoal$reviewCycleArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PerformanceGoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformanceGoal"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      reviewCycle: Prisma.$PerformanceReviewCyclePayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      reviewCycleId: string | null
      title: string
      description: string
      category: string
      priority: string
      targetDate: Date | null
      status: string
      progress: number
      measurementCriteria: string | null
      achievedDate: Date | null
      comments: string | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["performanceGoal"]>
    composites: {}
  }

  type PerformanceGoalGetPayload<S extends boolean | null | undefined | PerformanceGoalDefaultArgs> = $Result.GetResult<Prisma.$PerformanceGoalPayload, S>

  type PerformanceGoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerformanceGoalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerformanceGoalCountAggregateInputType | true
    }

  export interface PerformanceGoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformanceGoal'], meta: { name: 'PerformanceGoal' } }
    /**
     * Find zero or one PerformanceGoal that matches the filter.
     * @param {PerformanceGoalFindUniqueArgs} args - Arguments to find a PerformanceGoal
     * @example
     * // Get one PerformanceGoal
     * const performanceGoal = await prisma.performanceGoal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformanceGoalFindUniqueArgs>(args: SelectSubset<T, PerformanceGoalFindUniqueArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerformanceGoal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerformanceGoalFindUniqueOrThrowArgs} args - Arguments to find a PerformanceGoal
     * @example
     * // Get one PerformanceGoal
     * const performanceGoal = await prisma.performanceGoal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformanceGoalFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformanceGoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceGoal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceGoalFindFirstArgs} args - Arguments to find a PerformanceGoal
     * @example
     * // Get one PerformanceGoal
     * const performanceGoal = await prisma.performanceGoal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformanceGoalFindFirstArgs>(args?: SelectSubset<T, PerformanceGoalFindFirstArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceGoal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceGoalFindFirstOrThrowArgs} args - Arguments to find a PerformanceGoal
     * @example
     * // Get one PerformanceGoal
     * const performanceGoal = await prisma.performanceGoal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformanceGoalFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformanceGoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerformanceGoals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceGoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformanceGoals
     * const performanceGoals = await prisma.performanceGoal.findMany()
     * 
     * // Get first 10 PerformanceGoals
     * const performanceGoals = await prisma.performanceGoal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performanceGoalWithIdOnly = await prisma.performanceGoal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformanceGoalFindManyArgs>(args?: SelectSubset<T, PerformanceGoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerformanceGoal.
     * @param {PerformanceGoalCreateArgs} args - Arguments to create a PerformanceGoal.
     * @example
     * // Create one PerformanceGoal
     * const PerformanceGoal = await prisma.performanceGoal.create({
     *   data: {
     *     // ... data to create a PerformanceGoal
     *   }
     * })
     * 
     */
    create<T extends PerformanceGoalCreateArgs>(args: SelectSubset<T, PerformanceGoalCreateArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerformanceGoals.
     * @param {PerformanceGoalCreateManyArgs} args - Arguments to create many PerformanceGoals.
     * @example
     * // Create many PerformanceGoals
     * const performanceGoal = await prisma.performanceGoal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformanceGoalCreateManyArgs>(args?: SelectSubset<T, PerformanceGoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformanceGoals and returns the data saved in the database.
     * @param {PerformanceGoalCreateManyAndReturnArgs} args - Arguments to create many PerformanceGoals.
     * @example
     * // Create many PerformanceGoals
     * const performanceGoal = await prisma.performanceGoal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformanceGoals and only return the `id`
     * const performanceGoalWithIdOnly = await prisma.performanceGoal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformanceGoalCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformanceGoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PerformanceGoal.
     * @param {PerformanceGoalDeleteArgs} args - Arguments to delete one PerformanceGoal.
     * @example
     * // Delete one PerformanceGoal
     * const PerformanceGoal = await prisma.performanceGoal.delete({
     *   where: {
     *     // ... filter to delete one PerformanceGoal
     *   }
     * })
     * 
     */
    delete<T extends PerformanceGoalDeleteArgs>(args: SelectSubset<T, PerformanceGoalDeleteArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerformanceGoal.
     * @param {PerformanceGoalUpdateArgs} args - Arguments to update one PerformanceGoal.
     * @example
     * // Update one PerformanceGoal
     * const performanceGoal = await prisma.performanceGoal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformanceGoalUpdateArgs>(args: SelectSubset<T, PerformanceGoalUpdateArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerformanceGoals.
     * @param {PerformanceGoalDeleteManyArgs} args - Arguments to filter PerformanceGoals to delete.
     * @example
     * // Delete a few PerformanceGoals
     * const { count } = await prisma.performanceGoal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformanceGoalDeleteManyArgs>(args?: SelectSubset<T, PerformanceGoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceGoals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceGoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformanceGoals
     * const performanceGoal = await prisma.performanceGoal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformanceGoalUpdateManyArgs>(args: SelectSubset<T, PerformanceGoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceGoals and returns the data updated in the database.
     * @param {PerformanceGoalUpdateManyAndReturnArgs} args - Arguments to update many PerformanceGoals.
     * @example
     * // Update many PerformanceGoals
     * const performanceGoal = await prisma.performanceGoal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PerformanceGoals and only return the `id`
     * const performanceGoalWithIdOnly = await prisma.performanceGoal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PerformanceGoalUpdateManyAndReturnArgs>(args: SelectSubset<T, PerformanceGoalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PerformanceGoal.
     * @param {PerformanceGoalUpsertArgs} args - Arguments to update or create a PerformanceGoal.
     * @example
     * // Update or create a PerformanceGoal
     * const performanceGoal = await prisma.performanceGoal.upsert({
     *   create: {
     *     // ... data to create a PerformanceGoal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformanceGoal we want to update
     *   }
     * })
     */
    upsert<T extends PerformanceGoalUpsertArgs>(args: SelectSubset<T, PerformanceGoalUpsertArgs<ExtArgs>>): Prisma__PerformanceGoalClient<$Result.GetResult<Prisma.$PerformanceGoalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerformanceGoals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceGoalCountArgs} args - Arguments to filter PerformanceGoals to count.
     * @example
     * // Count the number of PerformanceGoals
     * const count = await prisma.performanceGoal.count({
     *   where: {
     *     // ... the filter for the PerformanceGoals we want to count
     *   }
     * })
    **/
    count<T extends PerformanceGoalCountArgs>(
      args?: Subset<T, PerformanceGoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformanceGoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformanceGoal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceGoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformanceGoalAggregateArgs>(args: Subset<T, PerformanceGoalAggregateArgs>): Prisma.PrismaPromise<GetPerformanceGoalAggregateType<T>>

    /**
     * Group by PerformanceGoal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceGoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformanceGoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformanceGoalGroupByArgs['orderBy'] }
        : { orderBy?: PerformanceGoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformanceGoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformanceGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformanceGoal model
   */
  readonly fields: PerformanceGoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformanceGoal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformanceGoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviewCycle<T extends PerformanceGoal$reviewCycleArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceGoal$reviewCycleArgs<ExtArgs>>): Prisma__PerformanceReviewCycleClient<$Result.GetResult<Prisma.$PerformanceReviewCyclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformanceGoal model
   */
  interface PerformanceGoalFieldRefs {
    readonly id: FieldRef<"PerformanceGoal", 'String'>
    readonly employeeId: FieldRef<"PerformanceGoal", 'String'>
    readonly reviewCycleId: FieldRef<"PerformanceGoal", 'String'>
    readonly title: FieldRef<"PerformanceGoal", 'String'>
    readonly description: FieldRef<"PerformanceGoal", 'String'>
    readonly category: FieldRef<"PerformanceGoal", 'String'>
    readonly priority: FieldRef<"PerformanceGoal", 'String'>
    readonly targetDate: FieldRef<"PerformanceGoal", 'DateTime'>
    readonly status: FieldRef<"PerformanceGoal", 'String'>
    readonly progress: FieldRef<"PerformanceGoal", 'Int'>
    readonly measurementCriteria: FieldRef<"PerformanceGoal", 'String'>
    readonly achievedDate: FieldRef<"PerformanceGoal", 'DateTime'>
    readonly comments: FieldRef<"PerformanceGoal", 'String'>
    readonly createdBy: FieldRef<"PerformanceGoal", 'String'>
    readonly createdAt: FieldRef<"PerformanceGoal", 'DateTime'>
    readonly updatedAt: FieldRef<"PerformanceGoal", 'DateTime'>
    readonly tenantId: FieldRef<"PerformanceGoal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PerformanceGoal findUnique
   */
  export type PerformanceGoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceGoal to fetch.
     */
    where: PerformanceGoalWhereUniqueInput
  }

  /**
   * PerformanceGoal findUniqueOrThrow
   */
  export type PerformanceGoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceGoal to fetch.
     */
    where: PerformanceGoalWhereUniqueInput
  }

  /**
   * PerformanceGoal findFirst
   */
  export type PerformanceGoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceGoal to fetch.
     */
    where?: PerformanceGoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceGoals to fetch.
     */
    orderBy?: PerformanceGoalOrderByWithRelationInput | PerformanceGoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceGoals.
     */
    cursor?: PerformanceGoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceGoals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceGoals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceGoals.
     */
    distinct?: PerformanceGoalScalarFieldEnum | PerformanceGoalScalarFieldEnum[]
  }

  /**
   * PerformanceGoal findFirstOrThrow
   */
  export type PerformanceGoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceGoal to fetch.
     */
    where?: PerformanceGoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceGoals to fetch.
     */
    orderBy?: PerformanceGoalOrderByWithRelationInput | PerformanceGoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceGoals.
     */
    cursor?: PerformanceGoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceGoals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceGoals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceGoals.
     */
    distinct?: PerformanceGoalScalarFieldEnum | PerformanceGoalScalarFieldEnum[]
  }

  /**
   * PerformanceGoal findMany
   */
  export type PerformanceGoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceGoals to fetch.
     */
    where?: PerformanceGoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceGoals to fetch.
     */
    orderBy?: PerformanceGoalOrderByWithRelationInput | PerformanceGoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformanceGoals.
     */
    cursor?: PerformanceGoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceGoals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceGoals.
     */
    skip?: number
    distinct?: PerformanceGoalScalarFieldEnum | PerformanceGoalScalarFieldEnum[]
  }

  /**
   * PerformanceGoal create
   */
  export type PerformanceGoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformanceGoal.
     */
    data: XOR<PerformanceGoalCreateInput, PerformanceGoalUncheckedCreateInput>
  }

  /**
   * PerformanceGoal createMany
   */
  export type PerformanceGoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformanceGoals.
     */
    data: PerformanceGoalCreateManyInput | PerformanceGoalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformanceGoal createManyAndReturn
   */
  export type PerformanceGoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * The data used to create many PerformanceGoals.
     */
    data: PerformanceGoalCreateManyInput | PerformanceGoalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceGoal update
   */
  export type PerformanceGoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformanceGoal.
     */
    data: XOR<PerformanceGoalUpdateInput, PerformanceGoalUncheckedUpdateInput>
    /**
     * Choose, which PerformanceGoal to update.
     */
    where: PerformanceGoalWhereUniqueInput
  }

  /**
   * PerformanceGoal updateMany
   */
  export type PerformanceGoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformanceGoals.
     */
    data: XOR<PerformanceGoalUpdateManyMutationInput, PerformanceGoalUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceGoals to update
     */
    where?: PerformanceGoalWhereInput
    /**
     * Limit how many PerformanceGoals to update.
     */
    limit?: number
  }

  /**
   * PerformanceGoal updateManyAndReturn
   */
  export type PerformanceGoalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * The data used to update PerformanceGoals.
     */
    data: XOR<PerformanceGoalUpdateManyMutationInput, PerformanceGoalUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceGoals to update
     */
    where?: PerformanceGoalWhereInput
    /**
     * Limit how many PerformanceGoals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceGoal upsert
   */
  export type PerformanceGoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformanceGoal to update in case it exists.
     */
    where: PerformanceGoalWhereUniqueInput
    /**
     * In case the PerformanceGoal found by the `where` argument doesn't exist, create a new PerformanceGoal with this data.
     */
    create: XOR<PerformanceGoalCreateInput, PerformanceGoalUncheckedCreateInput>
    /**
     * In case the PerformanceGoal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformanceGoalUpdateInput, PerformanceGoalUncheckedUpdateInput>
  }

  /**
   * PerformanceGoal delete
   */
  export type PerformanceGoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
    /**
     * Filter which PerformanceGoal to delete.
     */
    where: PerformanceGoalWhereUniqueInput
  }

  /**
   * PerformanceGoal deleteMany
   */
  export type PerformanceGoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceGoals to delete
     */
    where?: PerformanceGoalWhereInput
    /**
     * Limit how many PerformanceGoals to delete.
     */
    limit?: number
  }

  /**
   * PerformanceGoal.reviewCycle
   */
  export type PerformanceGoal$reviewCycleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceReviewCycle
     */
    select?: PerformanceReviewCycleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceReviewCycle
     */
    omit?: PerformanceReviewCycleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceReviewCycleInclude<ExtArgs> | null
    where?: PerformanceReviewCycleWhereInput
  }

  /**
   * PerformanceGoal without action
   */
  export type PerformanceGoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceGoal
     */
    select?: PerformanceGoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceGoal
     */
    omit?: PerformanceGoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceGoalInclude<ExtArgs> | null
  }


  /**
   * Model PerformanceRating
   */

  export type AggregatePerformanceRating = {
    _count: PerformanceRatingCountAggregateOutputType | null
    _avg: PerformanceRatingAvgAggregateOutputType | null
    _sum: PerformanceRatingSumAggregateOutputType | null
    _min: PerformanceRatingMinAggregateOutputType | null
    _max: PerformanceRatingMaxAggregateOutputType | null
  }

  export type PerformanceRatingAvgAggregateOutputType = {
    rating: number | null
    maxRating: number | null
    weight: number | null
  }

  export type PerformanceRatingSumAggregateOutputType = {
    rating: number | null
    maxRating: number | null
    weight: number | null
  }

  export type PerformanceRatingMinAggregateOutputType = {
    id: string | null
    performanceReviewId: string | null
    competency: string | null
    rating: number | null
    maxRating: number | null
    weight: number | null
    comments: string | null
    raterType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceRatingMaxAggregateOutputType = {
    id: string | null
    performanceReviewId: string | null
    competency: string | null
    rating: number | null
    maxRating: number | null
    weight: number | null
    comments: string | null
    raterType: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceRatingCountAggregateOutputType = {
    id: number
    performanceReviewId: number
    competency: number
    rating: number
    maxRating: number
    weight: number
    comments: number
    raterType: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PerformanceRatingAvgAggregateInputType = {
    rating?: true
    maxRating?: true
    weight?: true
  }

  export type PerformanceRatingSumAggregateInputType = {
    rating?: true
    maxRating?: true
    weight?: true
  }

  export type PerformanceRatingMinAggregateInputType = {
    id?: true
    performanceReviewId?: true
    competency?: true
    rating?: true
    maxRating?: true
    weight?: true
    comments?: true
    raterType?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceRatingMaxAggregateInputType = {
    id?: true
    performanceReviewId?: true
    competency?: true
    rating?: true
    maxRating?: true
    weight?: true
    comments?: true
    raterType?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceRatingCountAggregateInputType = {
    id?: true
    performanceReviewId?: true
    competency?: true
    rating?: true
    maxRating?: true
    weight?: true
    comments?: true
    raterType?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PerformanceRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceRating to aggregate.
     */
    where?: PerformanceRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceRatings to fetch.
     */
    orderBy?: PerformanceRatingOrderByWithRelationInput | PerformanceRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformanceRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformanceRatings
    **/
    _count?: true | PerformanceRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerformanceRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerformanceRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformanceRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformanceRatingMaxAggregateInputType
  }

  export type GetPerformanceRatingAggregateType<T extends PerformanceRatingAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformanceRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformanceRating[P]>
      : GetScalarType<T[P], AggregatePerformanceRating[P]>
  }




  export type PerformanceRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceRatingWhereInput
    orderBy?: PerformanceRatingOrderByWithAggregationInput | PerformanceRatingOrderByWithAggregationInput[]
    by: PerformanceRatingScalarFieldEnum[] | PerformanceRatingScalarFieldEnum
    having?: PerformanceRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformanceRatingCountAggregateInputType | true
    _avg?: PerformanceRatingAvgAggregateInputType
    _sum?: PerformanceRatingSumAggregateInputType
    _min?: PerformanceRatingMinAggregateInputType
    _max?: PerformanceRatingMaxAggregateInputType
  }

  export type PerformanceRatingGroupByOutputType = {
    id: string
    performanceReviewId: string
    competency: string
    rating: number
    maxRating: number
    weight: number
    comments: string | null
    raterType: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PerformanceRatingCountAggregateOutputType | null
    _avg: PerformanceRatingAvgAggregateOutputType | null
    _sum: PerformanceRatingSumAggregateOutputType | null
    _min: PerformanceRatingMinAggregateOutputType | null
    _max: PerformanceRatingMaxAggregateOutputType | null
  }

  type GetPerformanceRatingGroupByPayload<T extends PerformanceRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformanceRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformanceRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformanceRatingGroupByOutputType[P]>
            : GetScalarType<T[P], PerformanceRatingGroupByOutputType[P]>
        }
      >
    >


  export type PerformanceRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performanceReviewId?: boolean
    competency?: boolean
    rating?: boolean
    maxRating?: boolean
    weight?: boolean
    comments?: boolean
    raterType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceRating"]>

  export type PerformanceRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performanceReviewId?: boolean
    competency?: boolean
    rating?: boolean
    maxRating?: boolean
    weight?: boolean
    comments?: boolean
    raterType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceRating"]>

  export type PerformanceRatingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performanceReviewId?: boolean
    competency?: boolean
    rating?: boolean
    maxRating?: boolean
    weight?: boolean
    comments?: boolean
    raterType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceRating"]>

  export type PerformanceRatingSelectScalar = {
    id?: boolean
    performanceReviewId?: boolean
    competency?: boolean
    rating?: boolean
    maxRating?: boolean
    weight?: boolean
    comments?: boolean
    raterType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PerformanceRatingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "performanceReviewId" | "competency" | "rating" | "maxRating" | "weight" | "comments" | "raterType" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["performanceRating"]>
  export type PerformanceRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceRatingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PerformanceRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformanceRating"
    objects: {
      performanceReview: Prisma.$PerformanceReviewPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      performanceReviewId: string
      competency: string
      rating: number
      maxRating: number
      weight: number
      comments: string | null
      raterType: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["performanceRating"]>
    composites: {}
  }

  type PerformanceRatingGetPayload<S extends boolean | null | undefined | PerformanceRatingDefaultArgs> = $Result.GetResult<Prisma.$PerformanceRatingPayload, S>

  type PerformanceRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerformanceRatingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerformanceRatingCountAggregateInputType | true
    }

  export interface PerformanceRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformanceRating'], meta: { name: 'PerformanceRating' } }
    /**
     * Find zero or one PerformanceRating that matches the filter.
     * @param {PerformanceRatingFindUniqueArgs} args - Arguments to find a PerformanceRating
     * @example
     * // Get one PerformanceRating
     * const performanceRating = await prisma.performanceRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformanceRatingFindUniqueArgs>(args: SelectSubset<T, PerformanceRatingFindUniqueArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerformanceRating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerformanceRatingFindUniqueOrThrowArgs} args - Arguments to find a PerformanceRating
     * @example
     * // Get one PerformanceRating
     * const performanceRating = await prisma.performanceRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformanceRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformanceRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceRatingFindFirstArgs} args - Arguments to find a PerformanceRating
     * @example
     * // Get one PerformanceRating
     * const performanceRating = await prisma.performanceRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformanceRatingFindFirstArgs>(args?: SelectSubset<T, PerformanceRatingFindFirstArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceRatingFindFirstOrThrowArgs} args - Arguments to find a PerformanceRating
     * @example
     * // Get one PerformanceRating
     * const performanceRating = await prisma.performanceRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformanceRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformanceRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerformanceRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformanceRatings
     * const performanceRatings = await prisma.performanceRating.findMany()
     * 
     * // Get first 10 PerformanceRatings
     * const performanceRatings = await prisma.performanceRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performanceRatingWithIdOnly = await prisma.performanceRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformanceRatingFindManyArgs>(args?: SelectSubset<T, PerformanceRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerformanceRating.
     * @param {PerformanceRatingCreateArgs} args - Arguments to create a PerformanceRating.
     * @example
     * // Create one PerformanceRating
     * const PerformanceRating = await prisma.performanceRating.create({
     *   data: {
     *     // ... data to create a PerformanceRating
     *   }
     * })
     * 
     */
    create<T extends PerformanceRatingCreateArgs>(args: SelectSubset<T, PerformanceRatingCreateArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerformanceRatings.
     * @param {PerformanceRatingCreateManyArgs} args - Arguments to create many PerformanceRatings.
     * @example
     * // Create many PerformanceRatings
     * const performanceRating = await prisma.performanceRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformanceRatingCreateManyArgs>(args?: SelectSubset<T, PerformanceRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformanceRatings and returns the data saved in the database.
     * @param {PerformanceRatingCreateManyAndReturnArgs} args - Arguments to create many PerformanceRatings.
     * @example
     * // Create many PerformanceRatings
     * const performanceRating = await prisma.performanceRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformanceRatings and only return the `id`
     * const performanceRatingWithIdOnly = await prisma.performanceRating.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformanceRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformanceRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PerformanceRating.
     * @param {PerformanceRatingDeleteArgs} args - Arguments to delete one PerformanceRating.
     * @example
     * // Delete one PerformanceRating
     * const PerformanceRating = await prisma.performanceRating.delete({
     *   where: {
     *     // ... filter to delete one PerformanceRating
     *   }
     * })
     * 
     */
    delete<T extends PerformanceRatingDeleteArgs>(args: SelectSubset<T, PerformanceRatingDeleteArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerformanceRating.
     * @param {PerformanceRatingUpdateArgs} args - Arguments to update one PerformanceRating.
     * @example
     * // Update one PerformanceRating
     * const performanceRating = await prisma.performanceRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformanceRatingUpdateArgs>(args: SelectSubset<T, PerformanceRatingUpdateArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerformanceRatings.
     * @param {PerformanceRatingDeleteManyArgs} args - Arguments to filter PerformanceRatings to delete.
     * @example
     * // Delete a few PerformanceRatings
     * const { count } = await prisma.performanceRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformanceRatingDeleteManyArgs>(args?: SelectSubset<T, PerformanceRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformanceRatings
     * const performanceRating = await prisma.performanceRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformanceRatingUpdateManyArgs>(args: SelectSubset<T, PerformanceRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceRatings and returns the data updated in the database.
     * @param {PerformanceRatingUpdateManyAndReturnArgs} args - Arguments to update many PerformanceRatings.
     * @example
     * // Update many PerformanceRatings
     * const performanceRating = await prisma.performanceRating.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PerformanceRatings and only return the `id`
     * const performanceRatingWithIdOnly = await prisma.performanceRating.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PerformanceRatingUpdateManyAndReturnArgs>(args: SelectSubset<T, PerformanceRatingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PerformanceRating.
     * @param {PerformanceRatingUpsertArgs} args - Arguments to update or create a PerformanceRating.
     * @example
     * // Update or create a PerformanceRating
     * const performanceRating = await prisma.performanceRating.upsert({
     *   create: {
     *     // ... data to create a PerformanceRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformanceRating we want to update
     *   }
     * })
     */
    upsert<T extends PerformanceRatingUpsertArgs>(args: SelectSubset<T, PerformanceRatingUpsertArgs<ExtArgs>>): Prisma__PerformanceRatingClient<$Result.GetResult<Prisma.$PerformanceRatingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerformanceRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceRatingCountArgs} args - Arguments to filter PerformanceRatings to count.
     * @example
     * // Count the number of PerformanceRatings
     * const count = await prisma.performanceRating.count({
     *   where: {
     *     // ... the filter for the PerformanceRatings we want to count
     *   }
     * })
    **/
    count<T extends PerformanceRatingCountArgs>(
      args?: Subset<T, PerformanceRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformanceRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformanceRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformanceRatingAggregateArgs>(args: Subset<T, PerformanceRatingAggregateArgs>): Prisma.PrismaPromise<GetPerformanceRatingAggregateType<T>>

    /**
     * Group by PerformanceRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformanceRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformanceRatingGroupByArgs['orderBy'] }
        : { orderBy?: PerformanceRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformanceRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformanceRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformanceRating model
   */
  readonly fields: PerformanceRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformanceRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformanceRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performanceReview<T extends PerformanceReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceReviewDefaultArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformanceRating model
   */
  interface PerformanceRatingFieldRefs {
    readonly id: FieldRef<"PerformanceRating", 'String'>
    readonly performanceReviewId: FieldRef<"PerformanceRating", 'String'>
    readonly competency: FieldRef<"PerformanceRating", 'String'>
    readonly rating: FieldRef<"PerformanceRating", 'Float'>
    readonly maxRating: FieldRef<"PerformanceRating", 'Float'>
    readonly weight: FieldRef<"PerformanceRating", 'Float'>
    readonly comments: FieldRef<"PerformanceRating", 'String'>
    readonly raterType: FieldRef<"PerformanceRating", 'String'>
    readonly createdAt: FieldRef<"PerformanceRating", 'DateTime'>
    readonly updatedAt: FieldRef<"PerformanceRating", 'DateTime'>
    readonly tenantId: FieldRef<"PerformanceRating", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PerformanceRating findUnique
   */
  export type PerformanceRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceRating to fetch.
     */
    where: PerformanceRatingWhereUniqueInput
  }

  /**
   * PerformanceRating findUniqueOrThrow
   */
  export type PerformanceRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceRating to fetch.
     */
    where: PerformanceRatingWhereUniqueInput
  }

  /**
   * PerformanceRating findFirst
   */
  export type PerformanceRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceRating to fetch.
     */
    where?: PerformanceRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceRatings to fetch.
     */
    orderBy?: PerformanceRatingOrderByWithRelationInput | PerformanceRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceRatings.
     */
    cursor?: PerformanceRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceRatings.
     */
    distinct?: PerformanceRatingScalarFieldEnum | PerformanceRatingScalarFieldEnum[]
  }

  /**
   * PerformanceRating findFirstOrThrow
   */
  export type PerformanceRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceRating to fetch.
     */
    where?: PerformanceRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceRatings to fetch.
     */
    orderBy?: PerformanceRatingOrderByWithRelationInput | PerformanceRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceRatings.
     */
    cursor?: PerformanceRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceRatings.
     */
    distinct?: PerformanceRatingScalarFieldEnum | PerformanceRatingScalarFieldEnum[]
  }

  /**
   * PerformanceRating findMany
   */
  export type PerformanceRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceRatings to fetch.
     */
    where?: PerformanceRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceRatings to fetch.
     */
    orderBy?: PerformanceRatingOrderByWithRelationInput | PerformanceRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformanceRatings.
     */
    cursor?: PerformanceRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceRatings.
     */
    skip?: number
    distinct?: PerformanceRatingScalarFieldEnum | PerformanceRatingScalarFieldEnum[]
  }

  /**
   * PerformanceRating create
   */
  export type PerformanceRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformanceRating.
     */
    data: XOR<PerformanceRatingCreateInput, PerformanceRatingUncheckedCreateInput>
  }

  /**
   * PerformanceRating createMany
   */
  export type PerformanceRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformanceRatings.
     */
    data: PerformanceRatingCreateManyInput | PerformanceRatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformanceRating createManyAndReturn
   */
  export type PerformanceRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * The data used to create many PerformanceRatings.
     */
    data: PerformanceRatingCreateManyInput | PerformanceRatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceRating update
   */
  export type PerformanceRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformanceRating.
     */
    data: XOR<PerformanceRatingUpdateInput, PerformanceRatingUncheckedUpdateInput>
    /**
     * Choose, which PerformanceRating to update.
     */
    where: PerformanceRatingWhereUniqueInput
  }

  /**
   * PerformanceRating updateMany
   */
  export type PerformanceRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformanceRatings.
     */
    data: XOR<PerformanceRatingUpdateManyMutationInput, PerformanceRatingUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceRatings to update
     */
    where?: PerformanceRatingWhereInput
    /**
     * Limit how many PerformanceRatings to update.
     */
    limit?: number
  }

  /**
   * PerformanceRating updateManyAndReturn
   */
  export type PerformanceRatingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * The data used to update PerformanceRatings.
     */
    data: XOR<PerformanceRatingUpdateManyMutationInput, PerformanceRatingUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceRatings to update
     */
    where?: PerformanceRatingWhereInput
    /**
     * Limit how many PerformanceRatings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceRating upsert
   */
  export type PerformanceRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformanceRating to update in case it exists.
     */
    where: PerformanceRatingWhereUniqueInput
    /**
     * In case the PerformanceRating found by the `where` argument doesn't exist, create a new PerformanceRating with this data.
     */
    create: XOR<PerformanceRatingCreateInput, PerformanceRatingUncheckedCreateInput>
    /**
     * In case the PerformanceRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformanceRatingUpdateInput, PerformanceRatingUncheckedUpdateInput>
  }

  /**
   * PerformanceRating delete
   */
  export type PerformanceRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
    /**
     * Filter which PerformanceRating to delete.
     */
    where: PerformanceRatingWhereUniqueInput
  }

  /**
   * PerformanceRating deleteMany
   */
  export type PerformanceRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceRatings to delete
     */
    where?: PerformanceRatingWhereInput
    /**
     * Limit how many PerformanceRatings to delete.
     */
    limit?: number
  }

  /**
   * PerformanceRating without action
   */
  export type PerformanceRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceRating
     */
    select?: PerformanceRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceRating
     */
    omit?: PerformanceRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceRatingInclude<ExtArgs> | null
  }


  /**
   * Model PerformanceFeedback
   */

  export type AggregatePerformanceFeedback = {
    _count: PerformanceFeedbackCountAggregateOutputType | null
    _min: PerformanceFeedbackMinAggregateOutputType | null
    _max: PerformanceFeedbackMaxAggregateOutputType | null
  }

  export type PerformanceFeedbackMinAggregateOutputType = {
    id: string | null
    performanceReviewId: string | null
    feedbackType: string | null
    feedback: string | null
    isPrivate: boolean | null
    providedBy: string | null
    providedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceFeedbackMaxAggregateOutputType = {
    id: string | null
    performanceReviewId: string | null
    feedbackType: string | null
    feedback: string | null
    isPrivate: boolean | null
    providedBy: string | null
    providedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type PerformanceFeedbackCountAggregateOutputType = {
    id: number
    performanceReviewId: number
    feedbackType: number
    feedback: number
    isPrivate: number
    providedBy: number
    providedAt: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type PerformanceFeedbackMinAggregateInputType = {
    id?: true
    performanceReviewId?: true
    feedbackType?: true
    feedback?: true
    isPrivate?: true
    providedBy?: true
    providedAt?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceFeedbackMaxAggregateInputType = {
    id?: true
    performanceReviewId?: true
    feedbackType?: true
    feedback?: true
    isPrivate?: true
    providedBy?: true
    providedAt?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type PerformanceFeedbackCountAggregateInputType = {
    id?: true
    performanceReviewId?: true
    feedbackType?: true
    feedback?: true
    isPrivate?: true
    providedBy?: true
    providedAt?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type PerformanceFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceFeedback to aggregate.
     */
    where?: PerformanceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceFeedbacks to fetch.
     */
    orderBy?: PerformanceFeedbackOrderByWithRelationInput | PerformanceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformanceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformanceFeedbacks
    **/
    _count?: true | PerformanceFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformanceFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformanceFeedbackMaxAggregateInputType
  }

  export type GetPerformanceFeedbackAggregateType<T extends PerformanceFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformanceFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformanceFeedback[P]>
      : GetScalarType<T[P], AggregatePerformanceFeedback[P]>
  }




  export type PerformanceFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceFeedbackWhereInput
    orderBy?: PerformanceFeedbackOrderByWithAggregationInput | PerformanceFeedbackOrderByWithAggregationInput[]
    by: PerformanceFeedbackScalarFieldEnum[] | PerformanceFeedbackScalarFieldEnum
    having?: PerformanceFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformanceFeedbackCountAggregateInputType | true
    _min?: PerformanceFeedbackMinAggregateInputType
    _max?: PerformanceFeedbackMaxAggregateInputType
  }

  export type PerformanceFeedbackGroupByOutputType = {
    id: string
    performanceReviewId: string
    feedbackType: string
    feedback: string
    isPrivate: boolean
    providedBy: string
    providedAt: Date
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: PerformanceFeedbackCountAggregateOutputType | null
    _min: PerformanceFeedbackMinAggregateOutputType | null
    _max: PerformanceFeedbackMaxAggregateOutputType | null
  }

  type GetPerformanceFeedbackGroupByPayload<T extends PerformanceFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformanceFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformanceFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformanceFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], PerformanceFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type PerformanceFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performanceReviewId?: boolean
    feedbackType?: boolean
    feedback?: boolean
    isPrivate?: boolean
    providedBy?: boolean
    providedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceFeedback"]>

  export type PerformanceFeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performanceReviewId?: boolean
    feedbackType?: boolean
    feedback?: boolean
    isPrivate?: boolean
    providedBy?: boolean
    providedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceFeedback"]>

  export type PerformanceFeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    performanceReviewId?: boolean
    feedbackType?: boolean
    feedback?: boolean
    isPrivate?: boolean
    providedBy?: boolean
    providedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceFeedback"]>

  export type PerformanceFeedbackSelectScalar = {
    id?: boolean
    performanceReviewId?: boolean
    feedbackType?: boolean
    feedback?: boolean
    isPrivate?: boolean
    providedBy?: boolean
    providedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type PerformanceFeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "performanceReviewId" | "feedbackType" | "feedback" | "isPrivate" | "providedBy" | "providedAt" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["performanceFeedback"]>
  export type PerformanceFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceFeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PerformanceFeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performanceReview?: boolean | PerformanceReviewDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PerformanceFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformanceFeedback"
    objects: {
      performanceReview: Prisma.$PerformanceReviewPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      performanceReviewId: string
      feedbackType: string
      feedback: string
      isPrivate: boolean
      providedBy: string
      providedAt: Date
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["performanceFeedback"]>
    composites: {}
  }

  type PerformanceFeedbackGetPayload<S extends boolean | null | undefined | PerformanceFeedbackDefaultArgs> = $Result.GetResult<Prisma.$PerformanceFeedbackPayload, S>

  type PerformanceFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerformanceFeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerformanceFeedbackCountAggregateInputType | true
    }

  export interface PerformanceFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformanceFeedback'], meta: { name: 'PerformanceFeedback' } }
    /**
     * Find zero or one PerformanceFeedback that matches the filter.
     * @param {PerformanceFeedbackFindUniqueArgs} args - Arguments to find a PerformanceFeedback
     * @example
     * // Get one PerformanceFeedback
     * const performanceFeedback = await prisma.performanceFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformanceFeedbackFindUniqueArgs>(args: SelectSubset<T, PerformanceFeedbackFindUniqueArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerformanceFeedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerformanceFeedbackFindUniqueOrThrowArgs} args - Arguments to find a PerformanceFeedback
     * @example
     * // Get one PerformanceFeedback
     * const performanceFeedback = await prisma.performanceFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformanceFeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformanceFeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceFeedbackFindFirstArgs} args - Arguments to find a PerformanceFeedback
     * @example
     * // Get one PerformanceFeedback
     * const performanceFeedback = await prisma.performanceFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformanceFeedbackFindFirstArgs>(args?: SelectSubset<T, PerformanceFeedbackFindFirstArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceFeedbackFindFirstOrThrowArgs} args - Arguments to find a PerformanceFeedback
     * @example
     * // Get one PerformanceFeedback
     * const performanceFeedback = await prisma.performanceFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformanceFeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformanceFeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerformanceFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceFeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformanceFeedbacks
     * const performanceFeedbacks = await prisma.performanceFeedback.findMany()
     * 
     * // Get first 10 PerformanceFeedbacks
     * const performanceFeedbacks = await prisma.performanceFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performanceFeedbackWithIdOnly = await prisma.performanceFeedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformanceFeedbackFindManyArgs>(args?: SelectSubset<T, PerformanceFeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerformanceFeedback.
     * @param {PerformanceFeedbackCreateArgs} args - Arguments to create a PerformanceFeedback.
     * @example
     * // Create one PerformanceFeedback
     * const PerformanceFeedback = await prisma.performanceFeedback.create({
     *   data: {
     *     // ... data to create a PerformanceFeedback
     *   }
     * })
     * 
     */
    create<T extends PerformanceFeedbackCreateArgs>(args: SelectSubset<T, PerformanceFeedbackCreateArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerformanceFeedbacks.
     * @param {PerformanceFeedbackCreateManyArgs} args - Arguments to create many PerformanceFeedbacks.
     * @example
     * // Create many PerformanceFeedbacks
     * const performanceFeedback = await prisma.performanceFeedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformanceFeedbackCreateManyArgs>(args?: SelectSubset<T, PerformanceFeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformanceFeedbacks and returns the data saved in the database.
     * @param {PerformanceFeedbackCreateManyAndReturnArgs} args - Arguments to create many PerformanceFeedbacks.
     * @example
     * // Create many PerformanceFeedbacks
     * const performanceFeedback = await prisma.performanceFeedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformanceFeedbacks and only return the `id`
     * const performanceFeedbackWithIdOnly = await prisma.performanceFeedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformanceFeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformanceFeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PerformanceFeedback.
     * @param {PerformanceFeedbackDeleteArgs} args - Arguments to delete one PerformanceFeedback.
     * @example
     * // Delete one PerformanceFeedback
     * const PerformanceFeedback = await prisma.performanceFeedback.delete({
     *   where: {
     *     // ... filter to delete one PerformanceFeedback
     *   }
     * })
     * 
     */
    delete<T extends PerformanceFeedbackDeleteArgs>(args: SelectSubset<T, PerformanceFeedbackDeleteArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerformanceFeedback.
     * @param {PerformanceFeedbackUpdateArgs} args - Arguments to update one PerformanceFeedback.
     * @example
     * // Update one PerformanceFeedback
     * const performanceFeedback = await prisma.performanceFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformanceFeedbackUpdateArgs>(args: SelectSubset<T, PerformanceFeedbackUpdateArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerformanceFeedbacks.
     * @param {PerformanceFeedbackDeleteManyArgs} args - Arguments to filter PerformanceFeedbacks to delete.
     * @example
     * // Delete a few PerformanceFeedbacks
     * const { count } = await prisma.performanceFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformanceFeedbackDeleteManyArgs>(args?: SelectSubset<T, PerformanceFeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformanceFeedbacks
     * const performanceFeedback = await prisma.performanceFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformanceFeedbackUpdateManyArgs>(args: SelectSubset<T, PerformanceFeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceFeedbacks and returns the data updated in the database.
     * @param {PerformanceFeedbackUpdateManyAndReturnArgs} args - Arguments to update many PerformanceFeedbacks.
     * @example
     * // Update many PerformanceFeedbacks
     * const performanceFeedback = await prisma.performanceFeedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PerformanceFeedbacks and only return the `id`
     * const performanceFeedbackWithIdOnly = await prisma.performanceFeedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PerformanceFeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, PerformanceFeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PerformanceFeedback.
     * @param {PerformanceFeedbackUpsertArgs} args - Arguments to update or create a PerformanceFeedback.
     * @example
     * // Update or create a PerformanceFeedback
     * const performanceFeedback = await prisma.performanceFeedback.upsert({
     *   create: {
     *     // ... data to create a PerformanceFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformanceFeedback we want to update
     *   }
     * })
     */
    upsert<T extends PerformanceFeedbackUpsertArgs>(args: SelectSubset<T, PerformanceFeedbackUpsertArgs<ExtArgs>>): Prisma__PerformanceFeedbackClient<$Result.GetResult<Prisma.$PerformanceFeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerformanceFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceFeedbackCountArgs} args - Arguments to filter PerformanceFeedbacks to count.
     * @example
     * // Count the number of PerformanceFeedbacks
     * const count = await prisma.performanceFeedback.count({
     *   where: {
     *     // ... the filter for the PerformanceFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends PerformanceFeedbackCountArgs>(
      args?: Subset<T, PerformanceFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformanceFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformanceFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformanceFeedbackAggregateArgs>(args: Subset<T, PerformanceFeedbackAggregateArgs>): Prisma.PrismaPromise<GetPerformanceFeedbackAggregateType<T>>

    /**
     * Group by PerformanceFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformanceFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformanceFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: PerformanceFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformanceFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformanceFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformanceFeedback model
   */
  readonly fields: PerformanceFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformanceFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformanceFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    performanceReview<T extends PerformanceReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PerformanceReviewDefaultArgs<ExtArgs>>): Prisma__PerformanceReviewClient<$Result.GetResult<Prisma.$PerformanceReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformanceFeedback model
   */
  interface PerformanceFeedbackFieldRefs {
    readonly id: FieldRef<"PerformanceFeedback", 'String'>
    readonly performanceReviewId: FieldRef<"PerformanceFeedback", 'String'>
    readonly feedbackType: FieldRef<"PerformanceFeedback", 'String'>
    readonly feedback: FieldRef<"PerformanceFeedback", 'String'>
    readonly isPrivate: FieldRef<"PerformanceFeedback", 'Boolean'>
    readonly providedBy: FieldRef<"PerformanceFeedback", 'String'>
    readonly providedAt: FieldRef<"PerformanceFeedback", 'DateTime'>
    readonly createdAt: FieldRef<"PerformanceFeedback", 'DateTime'>
    readonly updatedAt: FieldRef<"PerformanceFeedback", 'DateTime'>
    readonly tenantId: FieldRef<"PerformanceFeedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PerformanceFeedback findUnique
   */
  export type PerformanceFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceFeedback to fetch.
     */
    where: PerformanceFeedbackWhereUniqueInput
  }

  /**
   * PerformanceFeedback findUniqueOrThrow
   */
  export type PerformanceFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceFeedback to fetch.
     */
    where: PerformanceFeedbackWhereUniqueInput
  }

  /**
   * PerformanceFeedback findFirst
   */
  export type PerformanceFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceFeedback to fetch.
     */
    where?: PerformanceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceFeedbacks to fetch.
     */
    orderBy?: PerformanceFeedbackOrderByWithRelationInput | PerformanceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceFeedbacks.
     */
    cursor?: PerformanceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceFeedbacks.
     */
    distinct?: PerformanceFeedbackScalarFieldEnum | PerformanceFeedbackScalarFieldEnum[]
  }

  /**
   * PerformanceFeedback findFirstOrThrow
   */
  export type PerformanceFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceFeedback to fetch.
     */
    where?: PerformanceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceFeedbacks to fetch.
     */
    orderBy?: PerformanceFeedbackOrderByWithRelationInput | PerformanceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceFeedbacks.
     */
    cursor?: PerformanceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceFeedbacks.
     */
    distinct?: PerformanceFeedbackScalarFieldEnum | PerformanceFeedbackScalarFieldEnum[]
  }

  /**
   * PerformanceFeedback findMany
   */
  export type PerformanceFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceFeedbacks to fetch.
     */
    where?: PerformanceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceFeedbacks to fetch.
     */
    orderBy?: PerformanceFeedbackOrderByWithRelationInput | PerformanceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformanceFeedbacks.
     */
    cursor?: PerformanceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceFeedbacks.
     */
    skip?: number
    distinct?: PerformanceFeedbackScalarFieldEnum | PerformanceFeedbackScalarFieldEnum[]
  }

  /**
   * PerformanceFeedback create
   */
  export type PerformanceFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformanceFeedback.
     */
    data: XOR<PerformanceFeedbackCreateInput, PerformanceFeedbackUncheckedCreateInput>
  }

  /**
   * PerformanceFeedback createMany
   */
  export type PerformanceFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformanceFeedbacks.
     */
    data: PerformanceFeedbackCreateManyInput | PerformanceFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformanceFeedback createManyAndReturn
   */
  export type PerformanceFeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many PerformanceFeedbacks.
     */
    data: PerformanceFeedbackCreateManyInput | PerformanceFeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceFeedback update
   */
  export type PerformanceFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformanceFeedback.
     */
    data: XOR<PerformanceFeedbackUpdateInput, PerformanceFeedbackUncheckedUpdateInput>
    /**
     * Choose, which PerformanceFeedback to update.
     */
    where: PerformanceFeedbackWhereUniqueInput
  }

  /**
   * PerformanceFeedback updateMany
   */
  export type PerformanceFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformanceFeedbacks.
     */
    data: XOR<PerformanceFeedbackUpdateManyMutationInput, PerformanceFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceFeedbacks to update
     */
    where?: PerformanceFeedbackWhereInput
    /**
     * Limit how many PerformanceFeedbacks to update.
     */
    limit?: number
  }

  /**
   * PerformanceFeedback updateManyAndReturn
   */
  export type PerformanceFeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * The data used to update PerformanceFeedbacks.
     */
    data: XOR<PerformanceFeedbackUpdateManyMutationInput, PerformanceFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceFeedbacks to update
     */
    where?: PerformanceFeedbackWhereInput
    /**
     * Limit how many PerformanceFeedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformanceFeedback upsert
   */
  export type PerformanceFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformanceFeedback to update in case it exists.
     */
    where: PerformanceFeedbackWhereUniqueInput
    /**
     * In case the PerformanceFeedback found by the `where` argument doesn't exist, create a new PerformanceFeedback with this data.
     */
    create: XOR<PerformanceFeedbackCreateInput, PerformanceFeedbackUncheckedCreateInput>
    /**
     * In case the PerformanceFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformanceFeedbackUpdateInput, PerformanceFeedbackUncheckedUpdateInput>
  }

  /**
   * PerformanceFeedback delete
   */
  export type PerformanceFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
    /**
     * Filter which PerformanceFeedback to delete.
     */
    where: PerformanceFeedbackWhereUniqueInput
  }

  /**
   * PerformanceFeedback deleteMany
   */
  export type PerformanceFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceFeedbacks to delete
     */
    where?: PerformanceFeedbackWhereInput
    /**
     * Limit how many PerformanceFeedbacks to delete.
     */
    limit?: number
  }

  /**
   * PerformanceFeedback without action
   */
  export type PerformanceFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceFeedback
     */
    select?: PerformanceFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceFeedback
     */
    omit?: PerformanceFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceFeedbackInclude<ExtArgs> | null
  }


  /**
   * Model ReportTemplate
   */

  export type AggregateReportTemplate = {
    _count: ReportTemplateCountAggregateOutputType | null
    _min: ReportTemplateMinAggregateOutputType | null
    _max: ReportTemplateMaxAggregateOutputType | null
  }

  export type ReportTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    type: string | null
    query: string | null
    isActive: boolean | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type ReportTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    type: string | null
    query: string | null
    isActive: boolean | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type ReportTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    type: number
    query: number
    parameters: number
    columns: number
    filters: number
    groupBy: number
    sortBy: number
    chartConfig: number
    isActive: number
    isPublic: number
    createdBy: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type ReportTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    type?: true
    query?: true
    isActive?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type ReportTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    type?: true
    query?: true
    isActive?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type ReportTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    type?: true
    query?: true
    parameters?: true
    columns?: true
    filters?: true
    groupBy?: true
    sortBy?: true
    chartConfig?: true
    isActive?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type ReportTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportTemplate to aggregate.
     */
    where?: ReportTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportTemplates to fetch.
     */
    orderBy?: ReportTemplateOrderByWithRelationInput | ReportTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportTemplates
    **/
    _count?: true | ReportTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportTemplateMaxAggregateInputType
  }

  export type GetReportTemplateAggregateType<T extends ReportTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateReportTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportTemplate[P]>
      : GetScalarType<T[P], AggregateReportTemplate[P]>
  }




  export type ReportTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportTemplateWhereInput
    orderBy?: ReportTemplateOrderByWithAggregationInput | ReportTemplateOrderByWithAggregationInput[]
    by: ReportTemplateScalarFieldEnum[] | ReportTemplateScalarFieldEnum
    having?: ReportTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportTemplateCountAggregateInputType | true
    _min?: ReportTemplateMinAggregateInputType
    _max?: ReportTemplateMaxAggregateInputType
  }

  export type ReportTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string
    type: string
    query: string
    parameters: JsonValue | null
    columns: JsonValue
    filters: JsonValue | null
    groupBy: JsonValue | null
    sortBy: JsonValue | null
    chartConfig: JsonValue | null
    isActive: boolean
    isPublic: boolean
    createdBy: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: ReportTemplateCountAggregateOutputType | null
    _min: ReportTemplateMinAggregateOutputType | null
    _max: ReportTemplateMaxAggregateOutputType | null
  }

  type GetReportTemplateGroupByPayload<T extends ReportTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], ReportTemplateGroupByOutputType[P]>
        }
      >
    >


  export type ReportTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    query?: boolean
    parameters?: boolean
    columns?: boolean
    filters?: boolean
    groupBy?: boolean
    sortBy?: boolean
    chartConfig?: boolean
    isActive?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    reportInstances?: boolean | ReportTemplate$reportInstancesArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | ReportTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportTemplate"]>

  export type ReportTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    query?: boolean
    parameters?: boolean
    columns?: boolean
    filters?: boolean
    groupBy?: boolean
    sortBy?: boolean
    chartConfig?: boolean
    isActive?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportTemplate"]>

  export type ReportTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    query?: boolean
    parameters?: boolean
    columns?: boolean
    filters?: boolean
    groupBy?: boolean
    sortBy?: boolean
    chartConfig?: boolean
    isActive?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportTemplate"]>

  export type ReportTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    query?: boolean
    parameters?: boolean
    columns?: boolean
    filters?: boolean
    groupBy?: boolean
    sortBy?: boolean
    chartConfig?: boolean
    isActive?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type ReportTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "category" | "type" | "query" | "parameters" | "columns" | "filters" | "groupBy" | "sortBy" | "chartConfig" | "isActive" | "isPublic" | "createdBy" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["reportTemplate"]>
  export type ReportTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportInstances?: boolean | ReportTemplate$reportInstancesArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | ReportTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type ReportTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $ReportTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportTemplate"
    objects: {
      reportInstances: Prisma.$ReportInstancePayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string
      type: string
      query: string
      parameters: Prisma.JsonValue | null
      columns: Prisma.JsonValue
      filters: Prisma.JsonValue | null
      groupBy: Prisma.JsonValue | null
      sortBy: Prisma.JsonValue | null
      chartConfig: Prisma.JsonValue | null
      isActive: boolean
      isPublic: boolean
      createdBy: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["reportTemplate"]>
    composites: {}
  }

  type ReportTemplateGetPayload<S extends boolean | null | undefined | ReportTemplateDefaultArgs> = $Result.GetResult<Prisma.$ReportTemplatePayload, S>

  type ReportTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportTemplateCountAggregateInputType | true
    }

  export interface ReportTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportTemplate'], meta: { name: 'ReportTemplate' } }
    /**
     * Find zero or one ReportTemplate that matches the filter.
     * @param {ReportTemplateFindUniqueArgs} args - Arguments to find a ReportTemplate
     * @example
     * // Get one ReportTemplate
     * const reportTemplate = await prisma.reportTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportTemplateFindUniqueArgs>(args: SelectSubset<T, ReportTemplateFindUniqueArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportTemplateFindUniqueOrThrowArgs} args - Arguments to find a ReportTemplate
     * @example
     * // Get one ReportTemplate
     * const reportTemplate = await prisma.reportTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportTemplateFindFirstArgs} args - Arguments to find a ReportTemplate
     * @example
     * // Get one ReportTemplate
     * const reportTemplate = await prisma.reportTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportTemplateFindFirstArgs>(args?: SelectSubset<T, ReportTemplateFindFirstArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportTemplateFindFirstOrThrowArgs} args - Arguments to find a ReportTemplate
     * @example
     * // Get one ReportTemplate
     * const reportTemplate = await prisma.reportTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportTemplates
     * const reportTemplates = await prisma.reportTemplate.findMany()
     * 
     * // Get first 10 ReportTemplates
     * const reportTemplates = await prisma.reportTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportTemplateWithIdOnly = await prisma.reportTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportTemplateFindManyArgs>(args?: SelectSubset<T, ReportTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportTemplate.
     * @param {ReportTemplateCreateArgs} args - Arguments to create a ReportTemplate.
     * @example
     * // Create one ReportTemplate
     * const ReportTemplate = await prisma.reportTemplate.create({
     *   data: {
     *     // ... data to create a ReportTemplate
     *   }
     * })
     * 
     */
    create<T extends ReportTemplateCreateArgs>(args: SelectSubset<T, ReportTemplateCreateArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportTemplates.
     * @param {ReportTemplateCreateManyArgs} args - Arguments to create many ReportTemplates.
     * @example
     * // Create many ReportTemplates
     * const reportTemplate = await prisma.reportTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportTemplateCreateManyArgs>(args?: SelectSubset<T, ReportTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportTemplates and returns the data saved in the database.
     * @param {ReportTemplateCreateManyAndReturnArgs} args - Arguments to create many ReportTemplates.
     * @example
     * // Create many ReportTemplates
     * const reportTemplate = await prisma.reportTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportTemplates and only return the `id`
     * const reportTemplateWithIdOnly = await prisma.reportTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportTemplate.
     * @param {ReportTemplateDeleteArgs} args - Arguments to delete one ReportTemplate.
     * @example
     * // Delete one ReportTemplate
     * const ReportTemplate = await prisma.reportTemplate.delete({
     *   where: {
     *     // ... filter to delete one ReportTemplate
     *   }
     * })
     * 
     */
    delete<T extends ReportTemplateDeleteArgs>(args: SelectSubset<T, ReportTemplateDeleteArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportTemplate.
     * @param {ReportTemplateUpdateArgs} args - Arguments to update one ReportTemplate.
     * @example
     * // Update one ReportTemplate
     * const reportTemplate = await prisma.reportTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportTemplateUpdateArgs>(args: SelectSubset<T, ReportTemplateUpdateArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportTemplates.
     * @param {ReportTemplateDeleteManyArgs} args - Arguments to filter ReportTemplates to delete.
     * @example
     * // Delete a few ReportTemplates
     * const { count } = await prisma.reportTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportTemplateDeleteManyArgs>(args?: SelectSubset<T, ReportTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportTemplates
     * const reportTemplate = await prisma.reportTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportTemplateUpdateManyArgs>(args: SelectSubset<T, ReportTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportTemplates and returns the data updated in the database.
     * @param {ReportTemplateUpdateManyAndReturnArgs} args - Arguments to update many ReportTemplates.
     * @example
     * // Update many ReportTemplates
     * const reportTemplate = await prisma.reportTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportTemplates and only return the `id`
     * const reportTemplateWithIdOnly = await prisma.reportTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportTemplate.
     * @param {ReportTemplateUpsertArgs} args - Arguments to update or create a ReportTemplate.
     * @example
     * // Update or create a ReportTemplate
     * const reportTemplate = await prisma.reportTemplate.upsert({
     *   create: {
     *     // ... data to create a ReportTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportTemplate we want to update
     *   }
     * })
     */
    upsert<T extends ReportTemplateUpsertArgs>(args: SelectSubset<T, ReportTemplateUpsertArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportTemplateCountArgs} args - Arguments to filter ReportTemplates to count.
     * @example
     * // Count the number of ReportTemplates
     * const count = await prisma.reportTemplate.count({
     *   where: {
     *     // ... the filter for the ReportTemplates we want to count
     *   }
     * })
    **/
    count<T extends ReportTemplateCountArgs>(
      args?: Subset<T, ReportTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportTemplateAggregateArgs>(args: Subset<T, ReportTemplateAggregateArgs>): Prisma.PrismaPromise<GetReportTemplateAggregateType<T>>

    /**
     * Group by ReportTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportTemplateGroupByArgs['orderBy'] }
        : { orderBy?: ReportTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportTemplate model
   */
  readonly fields: ReportTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reportInstances<T extends ReportTemplate$reportInstancesArgs<ExtArgs> = {}>(args?: Subset<T, ReportTemplate$reportInstancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportTemplate model
   */
  interface ReportTemplateFieldRefs {
    readonly id: FieldRef<"ReportTemplate", 'String'>
    readonly name: FieldRef<"ReportTemplate", 'String'>
    readonly description: FieldRef<"ReportTemplate", 'String'>
    readonly category: FieldRef<"ReportTemplate", 'String'>
    readonly type: FieldRef<"ReportTemplate", 'String'>
    readonly query: FieldRef<"ReportTemplate", 'String'>
    readonly parameters: FieldRef<"ReportTemplate", 'Json'>
    readonly columns: FieldRef<"ReportTemplate", 'Json'>
    readonly filters: FieldRef<"ReportTemplate", 'Json'>
    readonly groupBy: FieldRef<"ReportTemplate", 'Json'>
    readonly sortBy: FieldRef<"ReportTemplate", 'Json'>
    readonly chartConfig: FieldRef<"ReportTemplate", 'Json'>
    readonly isActive: FieldRef<"ReportTemplate", 'Boolean'>
    readonly isPublic: FieldRef<"ReportTemplate", 'Boolean'>
    readonly createdBy: FieldRef<"ReportTemplate", 'String'>
    readonly createdAt: FieldRef<"ReportTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"ReportTemplate", 'DateTime'>
    readonly tenantId: FieldRef<"ReportTemplate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportTemplate findUnique
   */
  export type ReportTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ReportTemplate to fetch.
     */
    where: ReportTemplateWhereUniqueInput
  }

  /**
   * ReportTemplate findUniqueOrThrow
   */
  export type ReportTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ReportTemplate to fetch.
     */
    where: ReportTemplateWhereUniqueInput
  }

  /**
   * ReportTemplate findFirst
   */
  export type ReportTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ReportTemplate to fetch.
     */
    where?: ReportTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportTemplates to fetch.
     */
    orderBy?: ReportTemplateOrderByWithRelationInput | ReportTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportTemplates.
     */
    cursor?: ReportTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportTemplates.
     */
    distinct?: ReportTemplateScalarFieldEnum | ReportTemplateScalarFieldEnum[]
  }

  /**
   * ReportTemplate findFirstOrThrow
   */
  export type ReportTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ReportTemplate to fetch.
     */
    where?: ReportTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportTemplates to fetch.
     */
    orderBy?: ReportTemplateOrderByWithRelationInput | ReportTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportTemplates.
     */
    cursor?: ReportTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportTemplates.
     */
    distinct?: ReportTemplateScalarFieldEnum | ReportTemplateScalarFieldEnum[]
  }

  /**
   * ReportTemplate findMany
   */
  export type ReportTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ReportTemplates to fetch.
     */
    where?: ReportTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportTemplates to fetch.
     */
    orderBy?: ReportTemplateOrderByWithRelationInput | ReportTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportTemplates.
     */
    cursor?: ReportTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportTemplates.
     */
    skip?: number
    distinct?: ReportTemplateScalarFieldEnum | ReportTemplateScalarFieldEnum[]
  }

  /**
   * ReportTemplate create
   */
  export type ReportTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportTemplate.
     */
    data: XOR<ReportTemplateCreateInput, ReportTemplateUncheckedCreateInput>
  }

  /**
   * ReportTemplate createMany
   */
  export type ReportTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportTemplates.
     */
    data: ReportTemplateCreateManyInput | ReportTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportTemplate createManyAndReturn
   */
  export type ReportTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many ReportTemplates.
     */
    data: ReportTemplateCreateManyInput | ReportTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportTemplate update
   */
  export type ReportTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportTemplate.
     */
    data: XOR<ReportTemplateUpdateInput, ReportTemplateUncheckedUpdateInput>
    /**
     * Choose, which ReportTemplate to update.
     */
    where: ReportTemplateWhereUniqueInput
  }

  /**
   * ReportTemplate updateMany
   */
  export type ReportTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportTemplates.
     */
    data: XOR<ReportTemplateUpdateManyMutationInput, ReportTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ReportTemplates to update
     */
    where?: ReportTemplateWhereInput
    /**
     * Limit how many ReportTemplates to update.
     */
    limit?: number
  }

  /**
   * ReportTemplate updateManyAndReturn
   */
  export type ReportTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * The data used to update ReportTemplates.
     */
    data: XOR<ReportTemplateUpdateManyMutationInput, ReportTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ReportTemplates to update
     */
    where?: ReportTemplateWhereInput
    /**
     * Limit how many ReportTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportTemplate upsert
   */
  export type ReportTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportTemplate to update in case it exists.
     */
    where: ReportTemplateWhereUniqueInput
    /**
     * In case the ReportTemplate found by the `where` argument doesn't exist, create a new ReportTemplate with this data.
     */
    create: XOR<ReportTemplateCreateInput, ReportTemplateUncheckedCreateInput>
    /**
     * In case the ReportTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportTemplateUpdateInput, ReportTemplateUncheckedUpdateInput>
  }

  /**
   * ReportTemplate delete
   */
  export type ReportTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
    /**
     * Filter which ReportTemplate to delete.
     */
    where: ReportTemplateWhereUniqueInput
  }

  /**
   * ReportTemplate deleteMany
   */
  export type ReportTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportTemplates to delete
     */
    where?: ReportTemplateWhereInput
    /**
     * Limit how many ReportTemplates to delete.
     */
    limit?: number
  }

  /**
   * ReportTemplate.reportInstances
   */
  export type ReportTemplate$reportInstancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    where?: ReportInstanceWhereInput
    orderBy?: ReportInstanceOrderByWithRelationInput | ReportInstanceOrderByWithRelationInput[]
    cursor?: ReportInstanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportInstanceScalarFieldEnum | ReportInstanceScalarFieldEnum[]
  }

  /**
   * ReportTemplate without action
   */
  export type ReportTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportTemplate
     */
    select?: ReportTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportTemplate
     */
    omit?: ReportTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportTemplateInclude<ExtArgs> | null
  }


  /**
   * Model ReportInstance
   */

  export type AggregateReportInstance = {
    _count: ReportInstanceCountAggregateOutputType | null
    _avg: ReportInstanceAvgAggregateOutputType | null
    _sum: ReportInstanceSumAggregateOutputType | null
    _min: ReportInstanceMinAggregateOutputType | null
    _max: ReportInstanceMaxAggregateOutputType | null
  }

  export type ReportInstanceAvgAggregateOutputType = {
    fileSize: number | null
    recordCount: number | null
  }

  export type ReportInstanceSumAggregateOutputType = {
    fileSize: number | null
    recordCount: number | null
  }

  export type ReportInstanceMinAggregateOutputType = {
    id: string | null
    templateId: string | null
    name: string | null
    description: string | null
    status: string | null
    filePath: string | null
    fileFormat: string | null
    fileSize: number | null
    recordCount: number | null
    generatedBy: string | null
    generatedAt: Date | null
    expiresAt: Date | null
    isScheduled: boolean | null
    error: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type ReportInstanceMaxAggregateOutputType = {
    id: string | null
    templateId: string | null
    name: string | null
    description: string | null
    status: string | null
    filePath: string | null
    fileFormat: string | null
    fileSize: number | null
    recordCount: number | null
    generatedBy: string | null
    generatedAt: Date | null
    expiresAt: Date | null
    isScheduled: boolean | null
    error: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type ReportInstanceCountAggregateOutputType = {
    id: number
    templateId: number
    name: number
    description: number
    parameters: number
    filters: number
    status: number
    data: number
    filePath: number
    fileFormat: number
    fileSize: number
    recordCount: number
    generatedBy: number
    generatedAt: number
    expiresAt: number
    isScheduled: number
    scheduleConfig: number
    error: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type ReportInstanceAvgAggregateInputType = {
    fileSize?: true
    recordCount?: true
  }

  export type ReportInstanceSumAggregateInputType = {
    fileSize?: true
    recordCount?: true
  }

  export type ReportInstanceMinAggregateInputType = {
    id?: true
    templateId?: true
    name?: true
    description?: true
    status?: true
    filePath?: true
    fileFormat?: true
    fileSize?: true
    recordCount?: true
    generatedBy?: true
    generatedAt?: true
    expiresAt?: true
    isScheduled?: true
    error?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type ReportInstanceMaxAggregateInputType = {
    id?: true
    templateId?: true
    name?: true
    description?: true
    status?: true
    filePath?: true
    fileFormat?: true
    fileSize?: true
    recordCount?: true
    generatedBy?: true
    generatedAt?: true
    expiresAt?: true
    isScheduled?: true
    error?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type ReportInstanceCountAggregateInputType = {
    id?: true
    templateId?: true
    name?: true
    description?: true
    parameters?: true
    filters?: true
    status?: true
    data?: true
    filePath?: true
    fileFormat?: true
    fileSize?: true
    recordCount?: true
    generatedBy?: true
    generatedAt?: true
    expiresAt?: true
    isScheduled?: true
    scheduleConfig?: true
    error?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type ReportInstanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportInstance to aggregate.
     */
    where?: ReportInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportInstances to fetch.
     */
    orderBy?: ReportInstanceOrderByWithRelationInput | ReportInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportInstances
    **/
    _count?: true | ReportInstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportInstanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportInstanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportInstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportInstanceMaxAggregateInputType
  }

  export type GetReportInstanceAggregateType<T extends ReportInstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateReportInstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportInstance[P]>
      : GetScalarType<T[P], AggregateReportInstance[P]>
  }




  export type ReportInstanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportInstanceWhereInput
    orderBy?: ReportInstanceOrderByWithAggregationInput | ReportInstanceOrderByWithAggregationInput[]
    by: ReportInstanceScalarFieldEnum[] | ReportInstanceScalarFieldEnum
    having?: ReportInstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportInstanceCountAggregateInputType | true
    _avg?: ReportInstanceAvgAggregateInputType
    _sum?: ReportInstanceSumAggregateInputType
    _min?: ReportInstanceMinAggregateInputType
    _max?: ReportInstanceMaxAggregateInputType
  }

  export type ReportInstanceGroupByOutputType = {
    id: string
    templateId: string
    name: string
    description: string | null
    parameters: JsonValue | null
    filters: JsonValue | null
    status: string
    data: JsonValue | null
    filePath: string | null
    fileFormat: string
    fileSize: number | null
    recordCount: number | null
    generatedBy: string
    generatedAt: Date
    expiresAt: Date | null
    isScheduled: boolean
    scheduleConfig: JsonValue | null
    error: string | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: ReportInstanceCountAggregateOutputType | null
    _avg: ReportInstanceAvgAggregateOutputType | null
    _sum: ReportInstanceSumAggregateOutputType | null
    _min: ReportInstanceMinAggregateOutputType | null
    _max: ReportInstanceMaxAggregateOutputType | null
  }

  type GetReportInstanceGroupByPayload<T extends ReportInstanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportInstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportInstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportInstanceGroupByOutputType[P]>
            : GetScalarType<T[P], ReportInstanceGroupByOutputType[P]>
        }
      >
    >


  export type ReportInstanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    name?: boolean
    description?: boolean
    parameters?: boolean
    filters?: boolean
    status?: boolean
    data?: boolean
    filePath?: boolean
    fileFormat?: boolean
    fileSize?: boolean
    recordCount?: boolean
    generatedBy?: boolean
    generatedAt?: boolean
    expiresAt?: boolean
    isScheduled?: boolean
    scheduleConfig?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    template?: boolean | ReportTemplateDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportInstance"]>

  export type ReportInstanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    name?: boolean
    description?: boolean
    parameters?: boolean
    filters?: boolean
    status?: boolean
    data?: boolean
    filePath?: boolean
    fileFormat?: boolean
    fileSize?: boolean
    recordCount?: boolean
    generatedBy?: boolean
    generatedAt?: boolean
    expiresAt?: boolean
    isScheduled?: boolean
    scheduleConfig?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    template?: boolean | ReportTemplateDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportInstance"]>

  export type ReportInstanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    name?: boolean
    description?: boolean
    parameters?: boolean
    filters?: boolean
    status?: boolean
    data?: boolean
    filePath?: boolean
    fileFormat?: boolean
    fileSize?: boolean
    recordCount?: boolean
    generatedBy?: boolean
    generatedAt?: boolean
    expiresAt?: boolean
    isScheduled?: boolean
    scheduleConfig?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    template?: boolean | ReportTemplateDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportInstance"]>

  export type ReportInstanceSelectScalar = {
    id?: boolean
    templateId?: boolean
    name?: boolean
    description?: boolean
    parameters?: boolean
    filters?: boolean
    status?: boolean
    data?: boolean
    filePath?: boolean
    fileFormat?: boolean
    fileSize?: boolean
    recordCount?: boolean
    generatedBy?: boolean
    generatedAt?: boolean
    expiresAt?: boolean
    isScheduled?: boolean
    scheduleConfig?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type ReportInstanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "templateId" | "name" | "description" | "parameters" | "filters" | "status" | "data" | "filePath" | "fileFormat" | "fileSize" | "recordCount" | "generatedBy" | "generatedAt" | "expiresAt" | "isScheduled" | "scheduleConfig" | "error" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["reportInstance"]>
  export type ReportInstanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | ReportTemplateDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type ReportInstanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | ReportTemplateDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type ReportInstanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | ReportTemplateDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $ReportInstancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportInstance"
    objects: {
      template: Prisma.$ReportTemplatePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      templateId: string
      name: string
      description: string | null
      parameters: Prisma.JsonValue | null
      filters: Prisma.JsonValue | null
      status: string
      data: Prisma.JsonValue | null
      filePath: string | null
      fileFormat: string
      fileSize: number | null
      recordCount: number | null
      generatedBy: string
      generatedAt: Date
      expiresAt: Date | null
      isScheduled: boolean
      scheduleConfig: Prisma.JsonValue | null
      error: string | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["reportInstance"]>
    composites: {}
  }

  type ReportInstanceGetPayload<S extends boolean | null | undefined | ReportInstanceDefaultArgs> = $Result.GetResult<Prisma.$ReportInstancePayload, S>

  type ReportInstanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportInstanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportInstanceCountAggregateInputType | true
    }

  export interface ReportInstanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportInstance'], meta: { name: 'ReportInstance' } }
    /**
     * Find zero or one ReportInstance that matches the filter.
     * @param {ReportInstanceFindUniqueArgs} args - Arguments to find a ReportInstance
     * @example
     * // Get one ReportInstance
     * const reportInstance = await prisma.reportInstance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportInstanceFindUniqueArgs>(args: SelectSubset<T, ReportInstanceFindUniqueArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportInstance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportInstanceFindUniqueOrThrowArgs} args - Arguments to find a ReportInstance
     * @example
     * // Get one ReportInstance
     * const reportInstance = await prisma.reportInstance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportInstanceFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportInstanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportInstance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportInstanceFindFirstArgs} args - Arguments to find a ReportInstance
     * @example
     * // Get one ReportInstance
     * const reportInstance = await prisma.reportInstance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportInstanceFindFirstArgs>(args?: SelectSubset<T, ReportInstanceFindFirstArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportInstance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportInstanceFindFirstOrThrowArgs} args - Arguments to find a ReportInstance
     * @example
     * // Get one ReportInstance
     * const reportInstance = await prisma.reportInstance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportInstanceFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportInstanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportInstances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportInstances
     * const reportInstances = await prisma.reportInstance.findMany()
     * 
     * // Get first 10 ReportInstances
     * const reportInstances = await prisma.reportInstance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportInstanceWithIdOnly = await prisma.reportInstance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportInstanceFindManyArgs>(args?: SelectSubset<T, ReportInstanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportInstance.
     * @param {ReportInstanceCreateArgs} args - Arguments to create a ReportInstance.
     * @example
     * // Create one ReportInstance
     * const ReportInstance = await prisma.reportInstance.create({
     *   data: {
     *     // ... data to create a ReportInstance
     *   }
     * })
     * 
     */
    create<T extends ReportInstanceCreateArgs>(args: SelectSubset<T, ReportInstanceCreateArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportInstances.
     * @param {ReportInstanceCreateManyArgs} args - Arguments to create many ReportInstances.
     * @example
     * // Create many ReportInstances
     * const reportInstance = await prisma.reportInstance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportInstanceCreateManyArgs>(args?: SelectSubset<T, ReportInstanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportInstances and returns the data saved in the database.
     * @param {ReportInstanceCreateManyAndReturnArgs} args - Arguments to create many ReportInstances.
     * @example
     * // Create many ReportInstances
     * const reportInstance = await prisma.reportInstance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportInstances and only return the `id`
     * const reportInstanceWithIdOnly = await prisma.reportInstance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportInstanceCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportInstanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportInstance.
     * @param {ReportInstanceDeleteArgs} args - Arguments to delete one ReportInstance.
     * @example
     * // Delete one ReportInstance
     * const ReportInstance = await prisma.reportInstance.delete({
     *   where: {
     *     // ... filter to delete one ReportInstance
     *   }
     * })
     * 
     */
    delete<T extends ReportInstanceDeleteArgs>(args: SelectSubset<T, ReportInstanceDeleteArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportInstance.
     * @param {ReportInstanceUpdateArgs} args - Arguments to update one ReportInstance.
     * @example
     * // Update one ReportInstance
     * const reportInstance = await prisma.reportInstance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportInstanceUpdateArgs>(args: SelectSubset<T, ReportInstanceUpdateArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportInstances.
     * @param {ReportInstanceDeleteManyArgs} args - Arguments to filter ReportInstances to delete.
     * @example
     * // Delete a few ReportInstances
     * const { count } = await prisma.reportInstance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportInstanceDeleteManyArgs>(args?: SelectSubset<T, ReportInstanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportInstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportInstances
     * const reportInstance = await prisma.reportInstance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportInstanceUpdateManyArgs>(args: SelectSubset<T, ReportInstanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportInstances and returns the data updated in the database.
     * @param {ReportInstanceUpdateManyAndReturnArgs} args - Arguments to update many ReportInstances.
     * @example
     * // Update many ReportInstances
     * const reportInstance = await prisma.reportInstance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportInstances and only return the `id`
     * const reportInstanceWithIdOnly = await prisma.reportInstance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportInstanceUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportInstanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportInstance.
     * @param {ReportInstanceUpsertArgs} args - Arguments to update or create a ReportInstance.
     * @example
     * // Update or create a ReportInstance
     * const reportInstance = await prisma.reportInstance.upsert({
     *   create: {
     *     // ... data to create a ReportInstance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportInstance we want to update
     *   }
     * })
     */
    upsert<T extends ReportInstanceUpsertArgs>(args: SelectSubset<T, ReportInstanceUpsertArgs<ExtArgs>>): Prisma__ReportInstanceClient<$Result.GetResult<Prisma.$ReportInstancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportInstances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportInstanceCountArgs} args - Arguments to filter ReportInstances to count.
     * @example
     * // Count the number of ReportInstances
     * const count = await prisma.reportInstance.count({
     *   where: {
     *     // ... the filter for the ReportInstances we want to count
     *   }
     * })
    **/
    count<T extends ReportInstanceCountArgs>(
      args?: Subset<T, ReportInstanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportInstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportInstanceAggregateArgs>(args: Subset<T, ReportInstanceAggregateArgs>): Prisma.PrismaPromise<GetReportInstanceAggregateType<T>>

    /**
     * Group by ReportInstance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportInstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportInstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportInstanceGroupByArgs['orderBy'] }
        : { orderBy?: ReportInstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportInstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportInstanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportInstance model
   */
  readonly fields: ReportInstanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportInstance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportInstanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends ReportTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportTemplateDefaultArgs<ExtArgs>>): Prisma__ReportTemplateClient<$Result.GetResult<Prisma.$ReportTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportInstance model
   */
  interface ReportInstanceFieldRefs {
    readonly id: FieldRef<"ReportInstance", 'String'>
    readonly templateId: FieldRef<"ReportInstance", 'String'>
    readonly name: FieldRef<"ReportInstance", 'String'>
    readonly description: FieldRef<"ReportInstance", 'String'>
    readonly parameters: FieldRef<"ReportInstance", 'Json'>
    readonly filters: FieldRef<"ReportInstance", 'Json'>
    readonly status: FieldRef<"ReportInstance", 'String'>
    readonly data: FieldRef<"ReportInstance", 'Json'>
    readonly filePath: FieldRef<"ReportInstance", 'String'>
    readonly fileFormat: FieldRef<"ReportInstance", 'String'>
    readonly fileSize: FieldRef<"ReportInstance", 'Int'>
    readonly recordCount: FieldRef<"ReportInstance", 'Int'>
    readonly generatedBy: FieldRef<"ReportInstance", 'String'>
    readonly generatedAt: FieldRef<"ReportInstance", 'DateTime'>
    readonly expiresAt: FieldRef<"ReportInstance", 'DateTime'>
    readonly isScheduled: FieldRef<"ReportInstance", 'Boolean'>
    readonly scheduleConfig: FieldRef<"ReportInstance", 'Json'>
    readonly error: FieldRef<"ReportInstance", 'String'>
    readonly createdAt: FieldRef<"ReportInstance", 'DateTime'>
    readonly updatedAt: FieldRef<"ReportInstance", 'DateTime'>
    readonly tenantId: FieldRef<"ReportInstance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportInstance findUnique
   */
  export type ReportInstanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ReportInstance to fetch.
     */
    where: ReportInstanceWhereUniqueInput
  }

  /**
   * ReportInstance findUniqueOrThrow
   */
  export type ReportInstanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ReportInstance to fetch.
     */
    where: ReportInstanceWhereUniqueInput
  }

  /**
   * ReportInstance findFirst
   */
  export type ReportInstanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ReportInstance to fetch.
     */
    where?: ReportInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportInstances to fetch.
     */
    orderBy?: ReportInstanceOrderByWithRelationInput | ReportInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportInstances.
     */
    cursor?: ReportInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportInstances.
     */
    distinct?: ReportInstanceScalarFieldEnum | ReportInstanceScalarFieldEnum[]
  }

  /**
   * ReportInstance findFirstOrThrow
   */
  export type ReportInstanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ReportInstance to fetch.
     */
    where?: ReportInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportInstances to fetch.
     */
    orderBy?: ReportInstanceOrderByWithRelationInput | ReportInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportInstances.
     */
    cursor?: ReportInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportInstances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportInstances.
     */
    distinct?: ReportInstanceScalarFieldEnum | ReportInstanceScalarFieldEnum[]
  }

  /**
   * ReportInstance findMany
   */
  export type ReportInstanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * Filter, which ReportInstances to fetch.
     */
    where?: ReportInstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportInstances to fetch.
     */
    orderBy?: ReportInstanceOrderByWithRelationInput | ReportInstanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportInstances.
     */
    cursor?: ReportInstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportInstances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportInstances.
     */
    skip?: number
    distinct?: ReportInstanceScalarFieldEnum | ReportInstanceScalarFieldEnum[]
  }

  /**
   * ReportInstance create
   */
  export type ReportInstanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportInstance.
     */
    data: XOR<ReportInstanceCreateInput, ReportInstanceUncheckedCreateInput>
  }

  /**
   * ReportInstance createMany
   */
  export type ReportInstanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportInstances.
     */
    data: ReportInstanceCreateManyInput | ReportInstanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportInstance createManyAndReturn
   */
  export type ReportInstanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * The data used to create many ReportInstances.
     */
    data: ReportInstanceCreateManyInput | ReportInstanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportInstance update
   */
  export type ReportInstanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportInstance.
     */
    data: XOR<ReportInstanceUpdateInput, ReportInstanceUncheckedUpdateInput>
    /**
     * Choose, which ReportInstance to update.
     */
    where: ReportInstanceWhereUniqueInput
  }

  /**
   * ReportInstance updateMany
   */
  export type ReportInstanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportInstances.
     */
    data: XOR<ReportInstanceUpdateManyMutationInput, ReportInstanceUncheckedUpdateManyInput>
    /**
     * Filter which ReportInstances to update
     */
    where?: ReportInstanceWhereInput
    /**
     * Limit how many ReportInstances to update.
     */
    limit?: number
  }

  /**
   * ReportInstance updateManyAndReturn
   */
  export type ReportInstanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * The data used to update ReportInstances.
     */
    data: XOR<ReportInstanceUpdateManyMutationInput, ReportInstanceUncheckedUpdateManyInput>
    /**
     * Filter which ReportInstances to update
     */
    where?: ReportInstanceWhereInput
    /**
     * Limit how many ReportInstances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportInstance upsert
   */
  export type ReportInstanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportInstance to update in case it exists.
     */
    where: ReportInstanceWhereUniqueInput
    /**
     * In case the ReportInstance found by the `where` argument doesn't exist, create a new ReportInstance with this data.
     */
    create: XOR<ReportInstanceCreateInput, ReportInstanceUncheckedCreateInput>
    /**
     * In case the ReportInstance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportInstanceUpdateInput, ReportInstanceUncheckedUpdateInput>
  }

  /**
   * ReportInstance delete
   */
  export type ReportInstanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
    /**
     * Filter which ReportInstance to delete.
     */
    where: ReportInstanceWhereUniqueInput
  }

  /**
   * ReportInstance deleteMany
   */
  export type ReportInstanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportInstances to delete
     */
    where?: ReportInstanceWhereInput
    /**
     * Limit how many ReportInstances to delete.
     */
    limit?: number
  }

  /**
   * ReportInstance without action
   */
  export type ReportInstanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportInstance
     */
    select?: ReportInstanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportInstance
     */
    omit?: ReportInstanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInstanceInclude<ExtArgs> | null
  }


  /**
   * Model Dashboard
   */

  export type AggregateDashboard = {
    _count: DashboardCountAggregateOutputType | null
    _avg: DashboardAvgAggregateOutputType | null
    _sum: DashboardSumAggregateOutputType | null
    _min: DashboardMinAggregateOutputType | null
    _max: DashboardMaxAggregateOutputType | null
  }

  export type DashboardAvgAggregateOutputType = {
    refreshInterval: number | null
  }

  export type DashboardSumAggregateOutputType = {
    refreshInterval: number | null
  }

  export type DashboardMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    refreshInterval: number | null
    isDefault: boolean | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type DashboardMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    refreshInterval: number | null
    isDefault: boolean | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type DashboardCountAggregateOutputType = {
    id: number
    name: number
    description: number
    layout: number
    widgets: number
    filters: number
    refreshInterval: number
    isDefault: number
    isPublic: number
    allowedRoles: number
    createdBy: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type DashboardAvgAggregateInputType = {
    refreshInterval?: true
  }

  export type DashboardSumAggregateInputType = {
    refreshInterval?: true
  }

  export type DashboardMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    refreshInterval?: true
    isDefault?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type DashboardMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    refreshInterval?: true
    isDefault?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type DashboardCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    layout?: true
    widgets?: true
    filters?: true
    refreshInterval?: true
    isDefault?: true
    isPublic?: true
    allowedRoles?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type DashboardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dashboard to aggregate.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dashboards
    **/
    _count?: true | DashboardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DashboardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DashboardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DashboardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DashboardMaxAggregateInputType
  }

  export type GetDashboardAggregateType<T extends DashboardAggregateArgs> = {
        [P in keyof T & keyof AggregateDashboard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDashboard[P]>
      : GetScalarType<T[P], AggregateDashboard[P]>
  }




  export type DashboardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DashboardWhereInput
    orderBy?: DashboardOrderByWithAggregationInput | DashboardOrderByWithAggregationInput[]
    by: DashboardScalarFieldEnum[] | DashboardScalarFieldEnum
    having?: DashboardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DashboardCountAggregateInputType | true
    _avg?: DashboardAvgAggregateInputType
    _sum?: DashboardSumAggregateInputType
    _min?: DashboardMinAggregateInputType
    _max?: DashboardMaxAggregateInputType
  }

  export type DashboardGroupByOutputType = {
    id: string
    name: string
    description: string | null
    layout: JsonValue
    widgets: JsonValue
    filters: JsonValue | null
    refreshInterval: number | null
    isDefault: boolean
    isPublic: boolean
    allowedRoles: string[]
    createdBy: string
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: DashboardCountAggregateOutputType | null
    _avg: DashboardAvgAggregateOutputType | null
    _sum: DashboardSumAggregateOutputType | null
    _min: DashboardMinAggregateOutputType | null
    _max: DashboardMaxAggregateOutputType | null
  }

  type GetDashboardGroupByPayload<T extends DashboardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DashboardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DashboardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DashboardGroupByOutputType[P]>
            : GetScalarType<T[P], DashboardGroupByOutputType[P]>
        }
      >
    >


  export type DashboardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    layout?: boolean
    widgets?: boolean
    filters?: boolean
    refreshInterval?: boolean
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dashboard"]>

  export type DashboardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    layout?: boolean
    widgets?: boolean
    filters?: boolean
    refreshInterval?: boolean
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dashboard"]>

  export type DashboardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    layout?: boolean
    widgets?: boolean
    filters?: boolean
    refreshInterval?: boolean
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dashboard"]>

  export type DashboardSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    layout?: boolean
    widgets?: boolean
    filters?: boolean
    refreshInterval?: boolean
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type DashboardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "layout" | "widgets" | "filters" | "refreshInterval" | "isDefault" | "isPublic" | "allowedRoles" | "createdBy" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["dashboard"]>
  export type DashboardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type DashboardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type DashboardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $DashboardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dashboard"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      layout: Prisma.JsonValue
      widgets: Prisma.JsonValue
      filters: Prisma.JsonValue | null
      refreshInterval: number | null
      isDefault: boolean
      isPublic: boolean
      allowedRoles: string[]
      createdBy: string
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["dashboard"]>
    composites: {}
  }

  type DashboardGetPayload<S extends boolean | null | undefined | DashboardDefaultArgs> = $Result.GetResult<Prisma.$DashboardPayload, S>

  type DashboardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DashboardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DashboardCountAggregateInputType | true
    }

  export interface DashboardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dashboard'], meta: { name: 'Dashboard' } }
    /**
     * Find zero or one Dashboard that matches the filter.
     * @param {DashboardFindUniqueArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DashboardFindUniqueArgs>(args: SelectSubset<T, DashboardFindUniqueArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Dashboard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DashboardFindUniqueOrThrowArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DashboardFindUniqueOrThrowArgs>(args: SelectSubset<T, DashboardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dashboard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardFindFirstArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DashboardFindFirstArgs>(args?: SelectSubset<T, DashboardFindFirstArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dashboard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardFindFirstOrThrowArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DashboardFindFirstOrThrowArgs>(args?: SelectSubset<T, DashboardFindFirstOrThrowArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Dashboards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dashboards
     * const dashboards = await prisma.dashboard.findMany()
     * 
     * // Get first 10 Dashboards
     * const dashboards = await prisma.dashboard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dashboardWithIdOnly = await prisma.dashboard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DashboardFindManyArgs>(args?: SelectSubset<T, DashboardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Dashboard.
     * @param {DashboardCreateArgs} args - Arguments to create a Dashboard.
     * @example
     * // Create one Dashboard
     * const Dashboard = await prisma.dashboard.create({
     *   data: {
     *     // ... data to create a Dashboard
     *   }
     * })
     * 
     */
    create<T extends DashboardCreateArgs>(args: SelectSubset<T, DashboardCreateArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Dashboards.
     * @param {DashboardCreateManyArgs} args - Arguments to create many Dashboards.
     * @example
     * // Create many Dashboards
     * const dashboard = await prisma.dashboard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DashboardCreateManyArgs>(args?: SelectSubset<T, DashboardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dashboards and returns the data saved in the database.
     * @param {DashboardCreateManyAndReturnArgs} args - Arguments to create many Dashboards.
     * @example
     * // Create many Dashboards
     * const dashboard = await prisma.dashboard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dashboards and only return the `id`
     * const dashboardWithIdOnly = await prisma.dashboard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DashboardCreateManyAndReturnArgs>(args?: SelectSubset<T, DashboardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Dashboard.
     * @param {DashboardDeleteArgs} args - Arguments to delete one Dashboard.
     * @example
     * // Delete one Dashboard
     * const Dashboard = await prisma.dashboard.delete({
     *   where: {
     *     // ... filter to delete one Dashboard
     *   }
     * })
     * 
     */
    delete<T extends DashboardDeleteArgs>(args: SelectSubset<T, DashboardDeleteArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Dashboard.
     * @param {DashboardUpdateArgs} args - Arguments to update one Dashboard.
     * @example
     * // Update one Dashboard
     * const dashboard = await prisma.dashboard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DashboardUpdateArgs>(args: SelectSubset<T, DashboardUpdateArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Dashboards.
     * @param {DashboardDeleteManyArgs} args - Arguments to filter Dashboards to delete.
     * @example
     * // Delete a few Dashboards
     * const { count } = await prisma.dashboard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DashboardDeleteManyArgs>(args?: SelectSubset<T, DashboardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dashboards
     * const dashboard = await prisma.dashboard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DashboardUpdateManyArgs>(args: SelectSubset<T, DashboardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dashboards and returns the data updated in the database.
     * @param {DashboardUpdateManyAndReturnArgs} args - Arguments to update many Dashboards.
     * @example
     * // Update many Dashboards
     * const dashboard = await prisma.dashboard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dashboards and only return the `id`
     * const dashboardWithIdOnly = await prisma.dashboard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DashboardUpdateManyAndReturnArgs>(args: SelectSubset<T, DashboardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Dashboard.
     * @param {DashboardUpsertArgs} args - Arguments to update or create a Dashboard.
     * @example
     * // Update or create a Dashboard
     * const dashboard = await prisma.dashboard.upsert({
     *   create: {
     *     // ... data to create a Dashboard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dashboard we want to update
     *   }
     * })
     */
    upsert<T extends DashboardUpsertArgs>(args: SelectSubset<T, DashboardUpsertArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardCountArgs} args - Arguments to filter Dashboards to count.
     * @example
     * // Count the number of Dashboards
     * const count = await prisma.dashboard.count({
     *   where: {
     *     // ... the filter for the Dashboards we want to count
     *   }
     * })
    **/
    count<T extends DashboardCountArgs>(
      args?: Subset<T, DashboardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DashboardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dashboard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DashboardAggregateArgs>(args: Subset<T, DashboardAggregateArgs>): Prisma.PrismaPromise<GetDashboardAggregateType<T>>

    /**
     * Group by Dashboard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DashboardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DashboardGroupByArgs['orderBy'] }
        : { orderBy?: DashboardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DashboardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dashboard model
   */
  readonly fields: DashboardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dashboard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DashboardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dashboard model
   */
  interface DashboardFieldRefs {
    readonly id: FieldRef<"Dashboard", 'String'>
    readonly name: FieldRef<"Dashboard", 'String'>
    readonly description: FieldRef<"Dashboard", 'String'>
    readonly layout: FieldRef<"Dashboard", 'Json'>
    readonly widgets: FieldRef<"Dashboard", 'Json'>
    readonly filters: FieldRef<"Dashboard", 'Json'>
    readonly refreshInterval: FieldRef<"Dashboard", 'Int'>
    readonly isDefault: FieldRef<"Dashboard", 'Boolean'>
    readonly isPublic: FieldRef<"Dashboard", 'Boolean'>
    readonly allowedRoles: FieldRef<"Dashboard", 'String[]'>
    readonly createdBy: FieldRef<"Dashboard", 'String'>
    readonly createdAt: FieldRef<"Dashboard", 'DateTime'>
    readonly updatedAt: FieldRef<"Dashboard", 'DateTime'>
    readonly tenantId: FieldRef<"Dashboard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dashboard findUnique
   */
  export type DashboardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard findUniqueOrThrow
   */
  export type DashboardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard findFirst
   */
  export type DashboardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dashboards.
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dashboards.
     */
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * Dashboard findFirstOrThrow
   */
  export type DashboardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dashboards.
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dashboards.
     */
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * Dashboard findMany
   */
  export type DashboardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboards to fetch.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dashboards.
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * Dashboard create
   */
  export type DashboardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * The data needed to create a Dashboard.
     */
    data: XOR<DashboardCreateInput, DashboardUncheckedCreateInput>
  }

  /**
   * Dashboard createMany
   */
  export type DashboardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dashboards.
     */
    data: DashboardCreateManyInput | DashboardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dashboard createManyAndReturn
   */
  export type DashboardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * The data used to create many Dashboards.
     */
    data: DashboardCreateManyInput | DashboardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dashboard update
   */
  export type DashboardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * The data needed to update a Dashboard.
     */
    data: XOR<DashboardUpdateInput, DashboardUncheckedUpdateInput>
    /**
     * Choose, which Dashboard to update.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard updateMany
   */
  export type DashboardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dashboards.
     */
    data: XOR<DashboardUpdateManyMutationInput, DashboardUncheckedUpdateManyInput>
    /**
     * Filter which Dashboards to update
     */
    where?: DashboardWhereInput
    /**
     * Limit how many Dashboards to update.
     */
    limit?: number
  }

  /**
   * Dashboard updateManyAndReturn
   */
  export type DashboardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * The data used to update Dashboards.
     */
    data: XOR<DashboardUpdateManyMutationInput, DashboardUncheckedUpdateManyInput>
    /**
     * Filter which Dashboards to update
     */
    where?: DashboardWhereInput
    /**
     * Limit how many Dashboards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dashboard upsert
   */
  export type DashboardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * The filter to search for the Dashboard to update in case it exists.
     */
    where: DashboardWhereUniqueInput
    /**
     * In case the Dashboard found by the `where` argument doesn't exist, create a new Dashboard with this data.
     */
    create: XOR<DashboardCreateInput, DashboardUncheckedCreateInput>
    /**
     * In case the Dashboard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DashboardUpdateInput, DashboardUncheckedUpdateInput>
  }

  /**
   * Dashboard delete
   */
  export type DashboardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter which Dashboard to delete.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard deleteMany
   */
  export type DashboardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dashboards to delete
     */
    where?: DashboardWhereInput
    /**
     * Limit how many Dashboards to delete.
     */
    limit?: number
  }

  /**
   * Dashboard without action
   */
  export type DashboardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
  }


  /**
   * Model SalaryAdvancePolicy
   */

  export type AggregateSalaryAdvancePolicy = {
    _count: SalaryAdvancePolicyCountAggregateOutputType | null
    _avg: SalaryAdvancePolicyAvgAggregateOutputType | null
    _sum: SalaryAdvancePolicySumAggregateOutputType | null
    _min: SalaryAdvancePolicyMinAggregateOutputType | null
    _max: SalaryAdvancePolicyMaxAggregateOutputType | null
  }

  export type SalaryAdvancePolicyAvgAggregateOutputType = {
    maxAdvancePercentage: number | null
    maxAdvanceAmount: number | null
    minServiceMonths: number | null
    maxAdvancesPerYear: number | null
    interestRate: number | null
    monthlyDeductionPercentage: number | null
  }

  export type SalaryAdvancePolicySumAggregateOutputType = {
    maxAdvancePercentage: number | null
    maxAdvanceAmount: number | null
    minServiceMonths: number | null
    maxAdvancesPerYear: number | null
    interestRate: number | null
    monthlyDeductionPercentage: number | null
  }

  export type SalaryAdvancePolicyMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    maxAdvancePercentage: number | null
    maxAdvanceAmount: number | null
    minServiceMonths: number | null
    maxAdvancesPerYear: number | null
    interestRate: number | null
    requiresApproval: boolean | null
    autoApprove: boolean | null
    isActive: boolean | null
    effectiveDate: Date | null
    expiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    monthlyDeductionPercentage: number | null
  }

  export type SalaryAdvancePolicyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    maxAdvancePercentage: number | null
    maxAdvanceAmount: number | null
    minServiceMonths: number | null
    maxAdvancesPerYear: number | null
    interestRate: number | null
    requiresApproval: boolean | null
    autoApprove: boolean | null
    isActive: boolean | null
    effectiveDate: Date | null
    expiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
    monthlyDeductionPercentage: number | null
  }

  export type SalaryAdvancePolicyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    maxAdvancePercentage: number
    maxAdvanceAmount: number
    minServiceMonths: number
    maxAdvancesPerYear: number
    interestRate: number
    requiresApproval: number
    autoApprove: number
    isActive: number
    effectiveDate: number
    expiryDate: number
    createdAt: number
    updatedAt: number
    tenantId: number
    monthlyDeductionPercentage: number
    _all: number
  }


  export type SalaryAdvancePolicyAvgAggregateInputType = {
    maxAdvancePercentage?: true
    maxAdvanceAmount?: true
    minServiceMonths?: true
    maxAdvancesPerYear?: true
    interestRate?: true
    monthlyDeductionPercentage?: true
  }

  export type SalaryAdvancePolicySumAggregateInputType = {
    maxAdvancePercentage?: true
    maxAdvanceAmount?: true
    minServiceMonths?: true
    maxAdvancesPerYear?: true
    interestRate?: true
    monthlyDeductionPercentage?: true
  }

  export type SalaryAdvancePolicyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    maxAdvancePercentage?: true
    maxAdvanceAmount?: true
    minServiceMonths?: true
    maxAdvancesPerYear?: true
    interestRate?: true
    requiresApproval?: true
    autoApprove?: true
    isActive?: true
    effectiveDate?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    monthlyDeductionPercentage?: true
  }

  export type SalaryAdvancePolicyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    maxAdvancePercentage?: true
    maxAdvanceAmount?: true
    minServiceMonths?: true
    maxAdvancesPerYear?: true
    interestRate?: true
    requiresApproval?: true
    autoApprove?: true
    isActive?: true
    effectiveDate?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    monthlyDeductionPercentage?: true
  }

  export type SalaryAdvancePolicyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    maxAdvancePercentage?: true
    maxAdvanceAmount?: true
    minServiceMonths?: true
    maxAdvancesPerYear?: true
    interestRate?: true
    requiresApproval?: true
    autoApprove?: true
    isActive?: true
    effectiveDate?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    monthlyDeductionPercentage?: true
    _all?: true
  }

  export type SalaryAdvancePolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryAdvancePolicy to aggregate.
     */
    where?: SalaryAdvancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvancePolicies to fetch.
     */
    orderBy?: SalaryAdvancePolicyOrderByWithRelationInput | SalaryAdvancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaryAdvancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvancePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalaryAdvancePolicies
    **/
    _count?: true | SalaryAdvancePolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaryAdvancePolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaryAdvancePolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaryAdvancePolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaryAdvancePolicyMaxAggregateInputType
  }

  export type GetSalaryAdvancePolicyAggregateType<T extends SalaryAdvancePolicyAggregateArgs> = {
        [P in keyof T & keyof AggregateSalaryAdvancePolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalaryAdvancePolicy[P]>
      : GetScalarType<T[P], AggregateSalaryAdvancePolicy[P]>
  }




  export type SalaryAdvancePolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvancePolicyWhereInput
    orderBy?: SalaryAdvancePolicyOrderByWithAggregationInput | SalaryAdvancePolicyOrderByWithAggregationInput[]
    by: SalaryAdvancePolicyScalarFieldEnum[] | SalaryAdvancePolicyScalarFieldEnum
    having?: SalaryAdvancePolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaryAdvancePolicyCountAggregateInputType | true
    _avg?: SalaryAdvancePolicyAvgAggregateInputType
    _sum?: SalaryAdvancePolicySumAggregateInputType
    _min?: SalaryAdvancePolicyMinAggregateInputType
    _max?: SalaryAdvancePolicyMaxAggregateInputType
  }

  export type SalaryAdvancePolicyGroupByOutputType = {
    id: string
    name: string
    description: string | null
    maxAdvancePercentage: number
    maxAdvanceAmount: number | null
    minServiceMonths: number
    maxAdvancesPerYear: number
    interestRate: number
    requiresApproval: boolean
    autoApprove: boolean
    isActive: boolean
    effectiveDate: Date
    expiryDate: Date | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    monthlyDeductionPercentage: number
    _count: SalaryAdvancePolicyCountAggregateOutputType | null
    _avg: SalaryAdvancePolicyAvgAggregateOutputType | null
    _sum: SalaryAdvancePolicySumAggregateOutputType | null
    _min: SalaryAdvancePolicyMinAggregateOutputType | null
    _max: SalaryAdvancePolicyMaxAggregateOutputType | null
  }

  type GetSalaryAdvancePolicyGroupByPayload<T extends SalaryAdvancePolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaryAdvancePolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaryAdvancePolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaryAdvancePolicyGroupByOutputType[P]>
            : GetScalarType<T[P], SalaryAdvancePolicyGroupByOutputType[P]>
        }
      >
    >


  export type SalaryAdvancePolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    maxAdvancePercentage?: boolean
    maxAdvanceAmount?: boolean
    minServiceMonths?: boolean
    maxAdvancesPerYear?: boolean
    interestRate?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    monthlyDeductionPercentage?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvancePolicy"]>

  export type SalaryAdvancePolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    maxAdvancePercentage?: boolean
    maxAdvanceAmount?: boolean
    minServiceMonths?: boolean
    maxAdvancesPerYear?: boolean
    interestRate?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    monthlyDeductionPercentage?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvancePolicy"]>

  export type SalaryAdvancePolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    maxAdvancePercentage?: boolean
    maxAdvanceAmount?: boolean
    minServiceMonths?: boolean
    maxAdvancesPerYear?: boolean
    interestRate?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    monthlyDeductionPercentage?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvancePolicy"]>

  export type SalaryAdvancePolicySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    maxAdvancePercentage?: boolean
    maxAdvanceAmount?: boolean
    minServiceMonths?: boolean
    maxAdvancesPerYear?: boolean
    interestRate?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    monthlyDeductionPercentage?: boolean
  }

  export type SalaryAdvancePolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "maxAdvancePercentage" | "maxAdvanceAmount" | "minServiceMonths" | "maxAdvancesPerYear" | "interestRate" | "requiresApproval" | "autoApprove" | "isActive" | "effectiveDate" | "expiryDate" | "createdAt" | "updatedAt" | "tenantId" | "monthlyDeductionPercentage", ExtArgs["result"]["salaryAdvancePolicy"]>
  export type SalaryAdvancePolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SalaryAdvancePolicyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SalaryAdvancePolicyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $SalaryAdvancePolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SalaryAdvancePolicy"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      maxAdvancePercentage: number
      maxAdvanceAmount: number | null
      minServiceMonths: number
      maxAdvancesPerYear: number
      interestRate: number
      requiresApproval: boolean
      autoApprove: boolean
      isActive: boolean
      effectiveDate: Date
      expiryDate: Date | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
      monthlyDeductionPercentage: number
    }, ExtArgs["result"]["salaryAdvancePolicy"]>
    composites: {}
  }

  type SalaryAdvancePolicyGetPayload<S extends boolean | null | undefined | SalaryAdvancePolicyDefaultArgs> = $Result.GetResult<Prisma.$SalaryAdvancePolicyPayload, S>

  type SalaryAdvancePolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SalaryAdvancePolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SalaryAdvancePolicyCountAggregateInputType | true
    }

  export interface SalaryAdvancePolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalaryAdvancePolicy'], meta: { name: 'SalaryAdvancePolicy' } }
    /**
     * Find zero or one SalaryAdvancePolicy that matches the filter.
     * @param {SalaryAdvancePolicyFindUniqueArgs} args - Arguments to find a SalaryAdvancePolicy
     * @example
     * // Get one SalaryAdvancePolicy
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalaryAdvancePolicyFindUniqueArgs>(args: SelectSubset<T, SalaryAdvancePolicyFindUniqueArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SalaryAdvancePolicy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SalaryAdvancePolicyFindUniqueOrThrowArgs} args - Arguments to find a SalaryAdvancePolicy
     * @example
     * // Get one SalaryAdvancePolicy
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalaryAdvancePolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, SalaryAdvancePolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryAdvancePolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvancePolicyFindFirstArgs} args - Arguments to find a SalaryAdvancePolicy
     * @example
     * // Get one SalaryAdvancePolicy
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalaryAdvancePolicyFindFirstArgs>(args?: SelectSubset<T, SalaryAdvancePolicyFindFirstArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryAdvancePolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvancePolicyFindFirstOrThrowArgs} args - Arguments to find a SalaryAdvancePolicy
     * @example
     * // Get one SalaryAdvancePolicy
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalaryAdvancePolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, SalaryAdvancePolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SalaryAdvancePolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvancePolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalaryAdvancePolicies
     * const salaryAdvancePolicies = await prisma.salaryAdvancePolicy.findMany()
     * 
     * // Get first 10 SalaryAdvancePolicies
     * const salaryAdvancePolicies = await prisma.salaryAdvancePolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaryAdvancePolicyWithIdOnly = await prisma.salaryAdvancePolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalaryAdvancePolicyFindManyArgs>(args?: SelectSubset<T, SalaryAdvancePolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SalaryAdvancePolicy.
     * @param {SalaryAdvancePolicyCreateArgs} args - Arguments to create a SalaryAdvancePolicy.
     * @example
     * // Create one SalaryAdvancePolicy
     * const SalaryAdvancePolicy = await prisma.salaryAdvancePolicy.create({
     *   data: {
     *     // ... data to create a SalaryAdvancePolicy
     *   }
     * })
     * 
     */
    create<T extends SalaryAdvancePolicyCreateArgs>(args: SelectSubset<T, SalaryAdvancePolicyCreateArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SalaryAdvancePolicies.
     * @param {SalaryAdvancePolicyCreateManyArgs} args - Arguments to create many SalaryAdvancePolicies.
     * @example
     * // Create many SalaryAdvancePolicies
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalaryAdvancePolicyCreateManyArgs>(args?: SelectSubset<T, SalaryAdvancePolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SalaryAdvancePolicies and returns the data saved in the database.
     * @param {SalaryAdvancePolicyCreateManyAndReturnArgs} args - Arguments to create many SalaryAdvancePolicies.
     * @example
     * // Create many SalaryAdvancePolicies
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SalaryAdvancePolicies and only return the `id`
     * const salaryAdvancePolicyWithIdOnly = await prisma.salaryAdvancePolicy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SalaryAdvancePolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, SalaryAdvancePolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SalaryAdvancePolicy.
     * @param {SalaryAdvancePolicyDeleteArgs} args - Arguments to delete one SalaryAdvancePolicy.
     * @example
     * // Delete one SalaryAdvancePolicy
     * const SalaryAdvancePolicy = await prisma.salaryAdvancePolicy.delete({
     *   where: {
     *     // ... filter to delete one SalaryAdvancePolicy
     *   }
     * })
     * 
     */
    delete<T extends SalaryAdvancePolicyDeleteArgs>(args: SelectSubset<T, SalaryAdvancePolicyDeleteArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SalaryAdvancePolicy.
     * @param {SalaryAdvancePolicyUpdateArgs} args - Arguments to update one SalaryAdvancePolicy.
     * @example
     * // Update one SalaryAdvancePolicy
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalaryAdvancePolicyUpdateArgs>(args: SelectSubset<T, SalaryAdvancePolicyUpdateArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SalaryAdvancePolicies.
     * @param {SalaryAdvancePolicyDeleteManyArgs} args - Arguments to filter SalaryAdvancePolicies to delete.
     * @example
     * // Delete a few SalaryAdvancePolicies
     * const { count } = await prisma.salaryAdvancePolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalaryAdvancePolicyDeleteManyArgs>(args?: SelectSubset<T, SalaryAdvancePolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryAdvancePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvancePolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalaryAdvancePolicies
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalaryAdvancePolicyUpdateManyArgs>(args: SelectSubset<T, SalaryAdvancePolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryAdvancePolicies and returns the data updated in the database.
     * @param {SalaryAdvancePolicyUpdateManyAndReturnArgs} args - Arguments to update many SalaryAdvancePolicies.
     * @example
     * // Update many SalaryAdvancePolicies
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SalaryAdvancePolicies and only return the `id`
     * const salaryAdvancePolicyWithIdOnly = await prisma.salaryAdvancePolicy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SalaryAdvancePolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, SalaryAdvancePolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SalaryAdvancePolicy.
     * @param {SalaryAdvancePolicyUpsertArgs} args - Arguments to update or create a SalaryAdvancePolicy.
     * @example
     * // Update or create a SalaryAdvancePolicy
     * const salaryAdvancePolicy = await prisma.salaryAdvancePolicy.upsert({
     *   create: {
     *     // ... data to create a SalaryAdvancePolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalaryAdvancePolicy we want to update
     *   }
     * })
     */
    upsert<T extends SalaryAdvancePolicyUpsertArgs>(args: SelectSubset<T, SalaryAdvancePolicyUpsertArgs<ExtArgs>>): Prisma__SalaryAdvancePolicyClient<$Result.GetResult<Prisma.$SalaryAdvancePolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SalaryAdvancePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvancePolicyCountArgs} args - Arguments to filter SalaryAdvancePolicies to count.
     * @example
     * // Count the number of SalaryAdvancePolicies
     * const count = await prisma.salaryAdvancePolicy.count({
     *   where: {
     *     // ... the filter for the SalaryAdvancePolicies we want to count
     *   }
     * })
    **/
    count<T extends SalaryAdvancePolicyCountArgs>(
      args?: Subset<T, SalaryAdvancePolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaryAdvancePolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalaryAdvancePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvancePolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaryAdvancePolicyAggregateArgs>(args: Subset<T, SalaryAdvancePolicyAggregateArgs>): Prisma.PrismaPromise<GetSalaryAdvancePolicyAggregateType<T>>

    /**
     * Group by SalaryAdvancePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvancePolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaryAdvancePolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaryAdvancePolicyGroupByArgs['orderBy'] }
        : { orderBy?: SalaryAdvancePolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaryAdvancePolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaryAdvancePolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SalaryAdvancePolicy model
   */
  readonly fields: SalaryAdvancePolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SalaryAdvancePolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaryAdvancePolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SalaryAdvancePolicy model
   */
  interface SalaryAdvancePolicyFieldRefs {
    readonly id: FieldRef<"SalaryAdvancePolicy", 'String'>
    readonly name: FieldRef<"SalaryAdvancePolicy", 'String'>
    readonly description: FieldRef<"SalaryAdvancePolicy", 'String'>
    readonly maxAdvancePercentage: FieldRef<"SalaryAdvancePolicy", 'Float'>
    readonly maxAdvanceAmount: FieldRef<"SalaryAdvancePolicy", 'Float'>
    readonly minServiceMonths: FieldRef<"SalaryAdvancePolicy", 'Int'>
    readonly maxAdvancesPerYear: FieldRef<"SalaryAdvancePolicy", 'Int'>
    readonly interestRate: FieldRef<"SalaryAdvancePolicy", 'Float'>
    readonly requiresApproval: FieldRef<"SalaryAdvancePolicy", 'Boolean'>
    readonly autoApprove: FieldRef<"SalaryAdvancePolicy", 'Boolean'>
    readonly isActive: FieldRef<"SalaryAdvancePolicy", 'Boolean'>
    readonly effectiveDate: FieldRef<"SalaryAdvancePolicy", 'DateTime'>
    readonly expiryDate: FieldRef<"SalaryAdvancePolicy", 'DateTime'>
    readonly createdAt: FieldRef<"SalaryAdvancePolicy", 'DateTime'>
    readonly updatedAt: FieldRef<"SalaryAdvancePolicy", 'DateTime'>
    readonly tenantId: FieldRef<"SalaryAdvancePolicy", 'String'>
    readonly monthlyDeductionPercentage: FieldRef<"SalaryAdvancePolicy", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * SalaryAdvancePolicy findUnique
   */
  export type SalaryAdvancePolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvancePolicy to fetch.
     */
    where: SalaryAdvancePolicyWhereUniqueInput
  }

  /**
   * SalaryAdvancePolicy findUniqueOrThrow
   */
  export type SalaryAdvancePolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvancePolicy to fetch.
     */
    where: SalaryAdvancePolicyWhereUniqueInput
  }

  /**
   * SalaryAdvancePolicy findFirst
   */
  export type SalaryAdvancePolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvancePolicy to fetch.
     */
    where?: SalaryAdvancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvancePolicies to fetch.
     */
    orderBy?: SalaryAdvancePolicyOrderByWithRelationInput | SalaryAdvancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryAdvancePolicies.
     */
    cursor?: SalaryAdvancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvancePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryAdvancePolicies.
     */
    distinct?: SalaryAdvancePolicyScalarFieldEnum | SalaryAdvancePolicyScalarFieldEnum[]
  }

  /**
   * SalaryAdvancePolicy findFirstOrThrow
   */
  export type SalaryAdvancePolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvancePolicy to fetch.
     */
    where?: SalaryAdvancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvancePolicies to fetch.
     */
    orderBy?: SalaryAdvancePolicyOrderByWithRelationInput | SalaryAdvancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryAdvancePolicies.
     */
    cursor?: SalaryAdvancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvancePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryAdvancePolicies.
     */
    distinct?: SalaryAdvancePolicyScalarFieldEnum | SalaryAdvancePolicyScalarFieldEnum[]
  }

  /**
   * SalaryAdvancePolicy findMany
   */
  export type SalaryAdvancePolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvancePolicies to fetch.
     */
    where?: SalaryAdvancePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvancePolicies to fetch.
     */
    orderBy?: SalaryAdvancePolicyOrderByWithRelationInput | SalaryAdvancePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalaryAdvancePolicies.
     */
    cursor?: SalaryAdvancePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvancePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvancePolicies.
     */
    skip?: number
    distinct?: SalaryAdvancePolicyScalarFieldEnum | SalaryAdvancePolicyScalarFieldEnum[]
  }

  /**
   * SalaryAdvancePolicy create
   */
  export type SalaryAdvancePolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a SalaryAdvancePolicy.
     */
    data: XOR<SalaryAdvancePolicyCreateInput, SalaryAdvancePolicyUncheckedCreateInput>
  }

  /**
   * SalaryAdvancePolicy createMany
   */
  export type SalaryAdvancePolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalaryAdvancePolicies.
     */
    data: SalaryAdvancePolicyCreateManyInput | SalaryAdvancePolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SalaryAdvancePolicy createManyAndReturn
   */
  export type SalaryAdvancePolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * The data used to create many SalaryAdvancePolicies.
     */
    data: SalaryAdvancePolicyCreateManyInput | SalaryAdvancePolicyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SalaryAdvancePolicy update
   */
  export type SalaryAdvancePolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a SalaryAdvancePolicy.
     */
    data: XOR<SalaryAdvancePolicyUpdateInput, SalaryAdvancePolicyUncheckedUpdateInput>
    /**
     * Choose, which SalaryAdvancePolicy to update.
     */
    where: SalaryAdvancePolicyWhereUniqueInput
  }

  /**
   * SalaryAdvancePolicy updateMany
   */
  export type SalaryAdvancePolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalaryAdvancePolicies.
     */
    data: XOR<SalaryAdvancePolicyUpdateManyMutationInput, SalaryAdvancePolicyUncheckedUpdateManyInput>
    /**
     * Filter which SalaryAdvancePolicies to update
     */
    where?: SalaryAdvancePolicyWhereInput
    /**
     * Limit how many SalaryAdvancePolicies to update.
     */
    limit?: number
  }

  /**
   * SalaryAdvancePolicy updateManyAndReturn
   */
  export type SalaryAdvancePolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * The data used to update SalaryAdvancePolicies.
     */
    data: XOR<SalaryAdvancePolicyUpdateManyMutationInput, SalaryAdvancePolicyUncheckedUpdateManyInput>
    /**
     * Filter which SalaryAdvancePolicies to update
     */
    where?: SalaryAdvancePolicyWhereInput
    /**
     * Limit how many SalaryAdvancePolicies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SalaryAdvancePolicy upsert
   */
  export type SalaryAdvancePolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the SalaryAdvancePolicy to update in case it exists.
     */
    where: SalaryAdvancePolicyWhereUniqueInput
    /**
     * In case the SalaryAdvancePolicy found by the `where` argument doesn't exist, create a new SalaryAdvancePolicy with this data.
     */
    create: XOR<SalaryAdvancePolicyCreateInput, SalaryAdvancePolicyUncheckedCreateInput>
    /**
     * In case the SalaryAdvancePolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaryAdvancePolicyUpdateInput, SalaryAdvancePolicyUncheckedUpdateInput>
  }

  /**
   * SalaryAdvancePolicy delete
   */
  export type SalaryAdvancePolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
    /**
     * Filter which SalaryAdvancePolicy to delete.
     */
    where: SalaryAdvancePolicyWhereUniqueInput
  }

  /**
   * SalaryAdvancePolicy deleteMany
   */
  export type SalaryAdvancePolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryAdvancePolicies to delete
     */
    where?: SalaryAdvancePolicyWhereInput
    /**
     * Limit how many SalaryAdvancePolicies to delete.
     */
    limit?: number
  }

  /**
   * SalaryAdvancePolicy without action
   */
  export type SalaryAdvancePolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvancePolicy
     */
    select?: SalaryAdvancePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvancePolicy
     */
    omit?: SalaryAdvancePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvancePolicyInclude<ExtArgs> | null
  }


  /**
   * Model SalaryAdvanceRequest
   */

  export type AggregateSalaryAdvanceRequest = {
    _count: SalaryAdvanceRequestCountAggregateOutputType | null
    _avg: SalaryAdvanceRequestAvgAggregateOutputType | null
    _sum: SalaryAdvanceRequestSumAggregateOutputType | null
    _min: SalaryAdvanceRequestMinAggregateOutputType | null
    _max: SalaryAdvanceRequestMaxAggregateOutputType | null
  }

  export type SalaryAdvanceRequestAvgAggregateOutputType = {
    requestedAmount: number | null
    approvedAmount: number | null
    monthlyDeduction: number | null
    totalRepaid: number | null
    outstandingBalance: number | null
    interestRate: number | null
    totalInterest: number | null
  }

  export type SalaryAdvanceRequestSumAggregateOutputType = {
    requestedAmount: number | null
    approvedAmount: number | null
    monthlyDeduction: number | null
    totalRepaid: number | null
    outstandingBalance: number | null
    interestRate: number | null
    totalInterest: number | null
  }

  export type SalaryAdvanceRequestMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    branchId: string | null
    requestedAmount: number | null
    approvedAmount: number | null
    reason: string | null
    status: string | null
    requestDate: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    rejectedAt: Date | null
    rejectedBy: string | null
    rejectionReason: string | null
    disbursedAt: Date | null
    disbursedBy: string | null
    repaymentStartDate: Date | null
    repaymentEndDate: Date | null
    monthlyDeduction: number | null
    totalRepaid: number | null
    outstandingBalance: number | null
    interestRate: number | null
    totalInterest: number | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type SalaryAdvanceRequestMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    branchId: string | null
    requestedAmount: number | null
    approvedAmount: number | null
    reason: string | null
    status: string | null
    requestDate: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    rejectedAt: Date | null
    rejectedBy: string | null
    rejectionReason: string | null
    disbursedAt: Date | null
    disbursedBy: string | null
    repaymentStartDate: Date | null
    repaymentEndDate: Date | null
    monthlyDeduction: number | null
    totalRepaid: number | null
    outstandingBalance: number | null
    interestRate: number | null
    totalInterest: number | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type SalaryAdvanceRequestCountAggregateOutputType = {
    id: number
    employeeId: number
    branchId: number
    requestedAmount: number
    approvedAmount: number
    reason: number
    status: number
    requestDate: number
    approvedAt: number
    approvedBy: number
    rejectedAt: number
    rejectedBy: number
    rejectionReason: number
    disbursedAt: number
    disbursedBy: number
    repaymentStartDate: number
    repaymentEndDate: number
    monthlyDeduction: number
    totalRepaid: number
    outstandingBalance: number
    interestRate: number
    totalInterest: number
    comments: number
    attachments: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type SalaryAdvanceRequestAvgAggregateInputType = {
    requestedAmount?: true
    approvedAmount?: true
    monthlyDeduction?: true
    totalRepaid?: true
    outstandingBalance?: true
    interestRate?: true
    totalInterest?: true
  }

  export type SalaryAdvanceRequestSumAggregateInputType = {
    requestedAmount?: true
    approvedAmount?: true
    monthlyDeduction?: true
    totalRepaid?: true
    outstandingBalance?: true
    interestRate?: true
    totalInterest?: true
  }

  export type SalaryAdvanceRequestMinAggregateInputType = {
    id?: true
    employeeId?: true
    branchId?: true
    requestedAmount?: true
    approvedAmount?: true
    reason?: true
    status?: true
    requestDate?: true
    approvedAt?: true
    approvedBy?: true
    rejectedAt?: true
    rejectedBy?: true
    rejectionReason?: true
    disbursedAt?: true
    disbursedBy?: true
    repaymentStartDate?: true
    repaymentEndDate?: true
    monthlyDeduction?: true
    totalRepaid?: true
    outstandingBalance?: true
    interestRate?: true
    totalInterest?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type SalaryAdvanceRequestMaxAggregateInputType = {
    id?: true
    employeeId?: true
    branchId?: true
    requestedAmount?: true
    approvedAmount?: true
    reason?: true
    status?: true
    requestDate?: true
    approvedAt?: true
    approvedBy?: true
    rejectedAt?: true
    rejectedBy?: true
    rejectionReason?: true
    disbursedAt?: true
    disbursedBy?: true
    repaymentStartDate?: true
    repaymentEndDate?: true
    monthlyDeduction?: true
    totalRepaid?: true
    outstandingBalance?: true
    interestRate?: true
    totalInterest?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type SalaryAdvanceRequestCountAggregateInputType = {
    id?: true
    employeeId?: true
    branchId?: true
    requestedAmount?: true
    approvedAmount?: true
    reason?: true
    status?: true
    requestDate?: true
    approvedAt?: true
    approvedBy?: true
    rejectedAt?: true
    rejectedBy?: true
    rejectionReason?: true
    disbursedAt?: true
    disbursedBy?: true
    repaymentStartDate?: true
    repaymentEndDate?: true
    monthlyDeduction?: true
    totalRepaid?: true
    outstandingBalance?: true
    interestRate?: true
    totalInterest?: true
    comments?: true
    attachments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type SalaryAdvanceRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryAdvanceRequest to aggregate.
     */
    where?: SalaryAdvanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRequests to fetch.
     */
    orderBy?: SalaryAdvanceRequestOrderByWithRelationInput | SalaryAdvanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaryAdvanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalaryAdvanceRequests
    **/
    _count?: true | SalaryAdvanceRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaryAdvanceRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaryAdvanceRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaryAdvanceRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaryAdvanceRequestMaxAggregateInputType
  }

  export type GetSalaryAdvanceRequestAggregateType<T extends SalaryAdvanceRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateSalaryAdvanceRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalaryAdvanceRequest[P]>
      : GetScalarType<T[P], AggregateSalaryAdvanceRequest[P]>
  }




  export type SalaryAdvanceRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRequestWhereInput
    orderBy?: SalaryAdvanceRequestOrderByWithAggregationInput | SalaryAdvanceRequestOrderByWithAggregationInput[]
    by: SalaryAdvanceRequestScalarFieldEnum[] | SalaryAdvanceRequestScalarFieldEnum
    having?: SalaryAdvanceRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaryAdvanceRequestCountAggregateInputType | true
    _avg?: SalaryAdvanceRequestAvgAggregateInputType
    _sum?: SalaryAdvanceRequestSumAggregateInputType
    _min?: SalaryAdvanceRequestMinAggregateInputType
    _max?: SalaryAdvanceRequestMaxAggregateInputType
  }

  export type SalaryAdvanceRequestGroupByOutputType = {
    id: string
    employeeId: string
    branchId: string | null
    requestedAmount: number
    approvedAmount: number | null
    reason: string
    status: string
    requestDate: Date
    approvedAt: Date | null
    approvedBy: string | null
    rejectedAt: Date | null
    rejectedBy: string | null
    rejectionReason: string | null
    disbursedAt: Date | null
    disbursedBy: string | null
    repaymentStartDate: Date | null
    repaymentEndDate: Date | null
    monthlyDeduction: number | null
    totalRepaid: number
    outstandingBalance: number | null
    interestRate: number
    totalInterest: number
    comments: string | null
    attachments: string[]
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: SalaryAdvanceRequestCountAggregateOutputType | null
    _avg: SalaryAdvanceRequestAvgAggregateOutputType | null
    _sum: SalaryAdvanceRequestSumAggregateOutputType | null
    _min: SalaryAdvanceRequestMinAggregateOutputType | null
    _max: SalaryAdvanceRequestMaxAggregateOutputType | null
  }

  type GetSalaryAdvanceRequestGroupByPayload<T extends SalaryAdvanceRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaryAdvanceRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaryAdvanceRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaryAdvanceRequestGroupByOutputType[P]>
            : GetScalarType<T[P], SalaryAdvanceRequestGroupByOutputType[P]>
        }
      >
    >


  export type SalaryAdvanceRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    requestedAmount?: boolean
    approvedAmount?: boolean
    reason?: boolean
    status?: boolean
    requestDate?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    disbursedAt?: boolean
    disbursedBy?: boolean
    repaymentStartDate?: boolean
    repaymentEndDate?: boolean
    monthlyDeduction?: boolean
    totalRepaid?: boolean
    outstandingBalance?: boolean
    interestRate?: boolean
    totalInterest?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    repayments?: boolean | SalaryAdvanceRequest$repaymentsArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | SalaryAdvanceRequest$branchArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | SalaryAdvanceRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvanceRequest"]>

  export type SalaryAdvanceRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    requestedAmount?: boolean
    approvedAmount?: boolean
    reason?: boolean
    status?: boolean
    requestDate?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    disbursedAt?: boolean
    disbursedBy?: boolean
    repaymentStartDate?: boolean
    repaymentEndDate?: boolean
    monthlyDeduction?: boolean
    totalRepaid?: boolean
    outstandingBalance?: boolean
    interestRate?: boolean
    totalInterest?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | SalaryAdvanceRequest$branchArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvanceRequest"]>

  export type SalaryAdvanceRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    requestedAmount?: boolean
    approvedAmount?: boolean
    reason?: boolean
    status?: boolean
    requestDate?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    disbursedAt?: boolean
    disbursedBy?: boolean
    repaymentStartDate?: boolean
    repaymentEndDate?: boolean
    monthlyDeduction?: boolean
    totalRepaid?: boolean
    outstandingBalance?: boolean
    interestRate?: boolean
    totalInterest?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | SalaryAdvanceRequest$branchArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvanceRequest"]>

  export type SalaryAdvanceRequestSelectScalar = {
    id?: boolean
    employeeId?: boolean
    branchId?: boolean
    requestedAmount?: boolean
    approvedAmount?: boolean
    reason?: boolean
    status?: boolean
    requestDate?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    rejectedAt?: boolean
    rejectedBy?: boolean
    rejectionReason?: boolean
    disbursedAt?: boolean
    disbursedBy?: boolean
    repaymentStartDate?: boolean
    repaymentEndDate?: boolean
    monthlyDeduction?: boolean
    totalRepaid?: boolean
    outstandingBalance?: boolean
    interestRate?: boolean
    totalInterest?: boolean
    comments?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type SalaryAdvanceRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "branchId" | "requestedAmount" | "approvedAmount" | "reason" | "status" | "requestDate" | "approvedAt" | "approvedBy" | "rejectedAt" | "rejectedBy" | "rejectionReason" | "disbursedAt" | "disbursedBy" | "repaymentStartDate" | "repaymentEndDate" | "monthlyDeduction" | "totalRepaid" | "outstandingBalance" | "interestRate" | "totalInterest" | "comments" | "attachments" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["salaryAdvanceRequest"]>
  export type SalaryAdvanceRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repayments?: boolean | SalaryAdvanceRequest$repaymentsArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | SalaryAdvanceRequest$branchArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | SalaryAdvanceRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SalaryAdvanceRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | SalaryAdvanceRequest$branchArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SalaryAdvanceRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | SalaryAdvanceRequest$branchArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $SalaryAdvanceRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SalaryAdvanceRequest"
    objects: {
      repayments: Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>[]
      employee: Prisma.$EmployeePayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      branchId: string | null
      requestedAmount: number
      approvedAmount: number | null
      reason: string
      status: string
      requestDate: Date
      approvedAt: Date | null
      approvedBy: string | null
      rejectedAt: Date | null
      rejectedBy: string | null
      rejectionReason: string | null
      disbursedAt: Date | null
      disbursedBy: string | null
      repaymentStartDate: Date | null
      repaymentEndDate: Date | null
      monthlyDeduction: number | null
      totalRepaid: number
      outstandingBalance: number | null
      interestRate: number
      totalInterest: number
      comments: string | null
      attachments: string[]
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["salaryAdvanceRequest"]>
    composites: {}
  }

  type SalaryAdvanceRequestGetPayload<S extends boolean | null | undefined | SalaryAdvanceRequestDefaultArgs> = $Result.GetResult<Prisma.$SalaryAdvanceRequestPayload, S>

  type SalaryAdvanceRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SalaryAdvanceRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SalaryAdvanceRequestCountAggregateInputType | true
    }

  export interface SalaryAdvanceRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalaryAdvanceRequest'], meta: { name: 'SalaryAdvanceRequest' } }
    /**
     * Find zero or one SalaryAdvanceRequest that matches the filter.
     * @param {SalaryAdvanceRequestFindUniqueArgs} args - Arguments to find a SalaryAdvanceRequest
     * @example
     * // Get one SalaryAdvanceRequest
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalaryAdvanceRequestFindUniqueArgs>(args: SelectSubset<T, SalaryAdvanceRequestFindUniqueArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SalaryAdvanceRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SalaryAdvanceRequestFindUniqueOrThrowArgs} args - Arguments to find a SalaryAdvanceRequest
     * @example
     * // Get one SalaryAdvanceRequest
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalaryAdvanceRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, SalaryAdvanceRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryAdvanceRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRequestFindFirstArgs} args - Arguments to find a SalaryAdvanceRequest
     * @example
     * // Get one SalaryAdvanceRequest
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalaryAdvanceRequestFindFirstArgs>(args?: SelectSubset<T, SalaryAdvanceRequestFindFirstArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryAdvanceRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRequestFindFirstOrThrowArgs} args - Arguments to find a SalaryAdvanceRequest
     * @example
     * // Get one SalaryAdvanceRequest
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalaryAdvanceRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, SalaryAdvanceRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SalaryAdvanceRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalaryAdvanceRequests
     * const salaryAdvanceRequests = await prisma.salaryAdvanceRequest.findMany()
     * 
     * // Get first 10 SalaryAdvanceRequests
     * const salaryAdvanceRequests = await prisma.salaryAdvanceRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaryAdvanceRequestWithIdOnly = await prisma.salaryAdvanceRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalaryAdvanceRequestFindManyArgs>(args?: SelectSubset<T, SalaryAdvanceRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SalaryAdvanceRequest.
     * @param {SalaryAdvanceRequestCreateArgs} args - Arguments to create a SalaryAdvanceRequest.
     * @example
     * // Create one SalaryAdvanceRequest
     * const SalaryAdvanceRequest = await prisma.salaryAdvanceRequest.create({
     *   data: {
     *     // ... data to create a SalaryAdvanceRequest
     *   }
     * })
     * 
     */
    create<T extends SalaryAdvanceRequestCreateArgs>(args: SelectSubset<T, SalaryAdvanceRequestCreateArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SalaryAdvanceRequests.
     * @param {SalaryAdvanceRequestCreateManyArgs} args - Arguments to create many SalaryAdvanceRequests.
     * @example
     * // Create many SalaryAdvanceRequests
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalaryAdvanceRequestCreateManyArgs>(args?: SelectSubset<T, SalaryAdvanceRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SalaryAdvanceRequests and returns the data saved in the database.
     * @param {SalaryAdvanceRequestCreateManyAndReturnArgs} args - Arguments to create many SalaryAdvanceRequests.
     * @example
     * // Create many SalaryAdvanceRequests
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SalaryAdvanceRequests and only return the `id`
     * const salaryAdvanceRequestWithIdOnly = await prisma.salaryAdvanceRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SalaryAdvanceRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, SalaryAdvanceRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SalaryAdvanceRequest.
     * @param {SalaryAdvanceRequestDeleteArgs} args - Arguments to delete one SalaryAdvanceRequest.
     * @example
     * // Delete one SalaryAdvanceRequest
     * const SalaryAdvanceRequest = await prisma.salaryAdvanceRequest.delete({
     *   where: {
     *     // ... filter to delete one SalaryAdvanceRequest
     *   }
     * })
     * 
     */
    delete<T extends SalaryAdvanceRequestDeleteArgs>(args: SelectSubset<T, SalaryAdvanceRequestDeleteArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SalaryAdvanceRequest.
     * @param {SalaryAdvanceRequestUpdateArgs} args - Arguments to update one SalaryAdvanceRequest.
     * @example
     * // Update one SalaryAdvanceRequest
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalaryAdvanceRequestUpdateArgs>(args: SelectSubset<T, SalaryAdvanceRequestUpdateArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SalaryAdvanceRequests.
     * @param {SalaryAdvanceRequestDeleteManyArgs} args - Arguments to filter SalaryAdvanceRequests to delete.
     * @example
     * // Delete a few SalaryAdvanceRequests
     * const { count } = await prisma.salaryAdvanceRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalaryAdvanceRequestDeleteManyArgs>(args?: SelectSubset<T, SalaryAdvanceRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryAdvanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalaryAdvanceRequests
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalaryAdvanceRequestUpdateManyArgs>(args: SelectSubset<T, SalaryAdvanceRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryAdvanceRequests and returns the data updated in the database.
     * @param {SalaryAdvanceRequestUpdateManyAndReturnArgs} args - Arguments to update many SalaryAdvanceRequests.
     * @example
     * // Update many SalaryAdvanceRequests
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SalaryAdvanceRequests and only return the `id`
     * const salaryAdvanceRequestWithIdOnly = await prisma.salaryAdvanceRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SalaryAdvanceRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, SalaryAdvanceRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SalaryAdvanceRequest.
     * @param {SalaryAdvanceRequestUpsertArgs} args - Arguments to update or create a SalaryAdvanceRequest.
     * @example
     * // Update or create a SalaryAdvanceRequest
     * const salaryAdvanceRequest = await prisma.salaryAdvanceRequest.upsert({
     *   create: {
     *     // ... data to create a SalaryAdvanceRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalaryAdvanceRequest we want to update
     *   }
     * })
     */
    upsert<T extends SalaryAdvanceRequestUpsertArgs>(args: SelectSubset<T, SalaryAdvanceRequestUpsertArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SalaryAdvanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRequestCountArgs} args - Arguments to filter SalaryAdvanceRequests to count.
     * @example
     * // Count the number of SalaryAdvanceRequests
     * const count = await prisma.salaryAdvanceRequest.count({
     *   where: {
     *     // ... the filter for the SalaryAdvanceRequests we want to count
     *   }
     * })
    **/
    count<T extends SalaryAdvanceRequestCountArgs>(
      args?: Subset<T, SalaryAdvanceRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaryAdvanceRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalaryAdvanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaryAdvanceRequestAggregateArgs>(args: Subset<T, SalaryAdvanceRequestAggregateArgs>): Prisma.PrismaPromise<GetSalaryAdvanceRequestAggregateType<T>>

    /**
     * Group by SalaryAdvanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaryAdvanceRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaryAdvanceRequestGroupByArgs['orderBy'] }
        : { orderBy?: SalaryAdvanceRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaryAdvanceRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaryAdvanceRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SalaryAdvanceRequest model
   */
  readonly fields: SalaryAdvanceRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SalaryAdvanceRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaryAdvanceRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    repayments<T extends SalaryAdvanceRequest$repaymentsArgs<ExtArgs> = {}>(args?: Subset<T, SalaryAdvanceRequest$repaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends SalaryAdvanceRequest$branchArgs<ExtArgs> = {}>(args?: Subset<T, SalaryAdvanceRequest$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SalaryAdvanceRequest model
   */
  interface SalaryAdvanceRequestFieldRefs {
    readonly id: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly employeeId: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly branchId: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly requestedAmount: FieldRef<"SalaryAdvanceRequest", 'Float'>
    readonly approvedAmount: FieldRef<"SalaryAdvanceRequest", 'Float'>
    readonly reason: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly status: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly requestDate: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly approvedAt: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly approvedBy: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly rejectedAt: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly rejectedBy: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly rejectionReason: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly disbursedAt: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly disbursedBy: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly repaymentStartDate: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly repaymentEndDate: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly monthlyDeduction: FieldRef<"SalaryAdvanceRequest", 'Float'>
    readonly totalRepaid: FieldRef<"SalaryAdvanceRequest", 'Float'>
    readonly outstandingBalance: FieldRef<"SalaryAdvanceRequest", 'Float'>
    readonly interestRate: FieldRef<"SalaryAdvanceRequest", 'Float'>
    readonly totalInterest: FieldRef<"SalaryAdvanceRequest", 'Float'>
    readonly comments: FieldRef<"SalaryAdvanceRequest", 'String'>
    readonly attachments: FieldRef<"SalaryAdvanceRequest", 'String[]'>
    readonly createdAt: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"SalaryAdvanceRequest", 'DateTime'>
    readonly tenantId: FieldRef<"SalaryAdvanceRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SalaryAdvanceRequest findUnique
   */
  export type SalaryAdvanceRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRequest to fetch.
     */
    where: SalaryAdvanceRequestWhereUniqueInput
  }

  /**
   * SalaryAdvanceRequest findUniqueOrThrow
   */
  export type SalaryAdvanceRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRequest to fetch.
     */
    where: SalaryAdvanceRequestWhereUniqueInput
  }

  /**
   * SalaryAdvanceRequest findFirst
   */
  export type SalaryAdvanceRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRequest to fetch.
     */
    where?: SalaryAdvanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRequests to fetch.
     */
    orderBy?: SalaryAdvanceRequestOrderByWithRelationInput | SalaryAdvanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryAdvanceRequests.
     */
    cursor?: SalaryAdvanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryAdvanceRequests.
     */
    distinct?: SalaryAdvanceRequestScalarFieldEnum | SalaryAdvanceRequestScalarFieldEnum[]
  }

  /**
   * SalaryAdvanceRequest findFirstOrThrow
   */
  export type SalaryAdvanceRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRequest to fetch.
     */
    where?: SalaryAdvanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRequests to fetch.
     */
    orderBy?: SalaryAdvanceRequestOrderByWithRelationInput | SalaryAdvanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryAdvanceRequests.
     */
    cursor?: SalaryAdvanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryAdvanceRequests.
     */
    distinct?: SalaryAdvanceRequestScalarFieldEnum | SalaryAdvanceRequestScalarFieldEnum[]
  }

  /**
   * SalaryAdvanceRequest findMany
   */
  export type SalaryAdvanceRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRequests to fetch.
     */
    where?: SalaryAdvanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRequests to fetch.
     */
    orderBy?: SalaryAdvanceRequestOrderByWithRelationInput | SalaryAdvanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalaryAdvanceRequests.
     */
    cursor?: SalaryAdvanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRequests.
     */
    skip?: number
    distinct?: SalaryAdvanceRequestScalarFieldEnum | SalaryAdvanceRequestScalarFieldEnum[]
  }

  /**
   * SalaryAdvanceRequest create
   */
  export type SalaryAdvanceRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a SalaryAdvanceRequest.
     */
    data: XOR<SalaryAdvanceRequestCreateInput, SalaryAdvanceRequestUncheckedCreateInput>
  }

  /**
   * SalaryAdvanceRequest createMany
   */
  export type SalaryAdvanceRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalaryAdvanceRequests.
     */
    data: SalaryAdvanceRequestCreateManyInput | SalaryAdvanceRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SalaryAdvanceRequest createManyAndReturn
   */
  export type SalaryAdvanceRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * The data used to create many SalaryAdvanceRequests.
     */
    data: SalaryAdvanceRequestCreateManyInput | SalaryAdvanceRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SalaryAdvanceRequest update
   */
  export type SalaryAdvanceRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a SalaryAdvanceRequest.
     */
    data: XOR<SalaryAdvanceRequestUpdateInput, SalaryAdvanceRequestUncheckedUpdateInput>
    /**
     * Choose, which SalaryAdvanceRequest to update.
     */
    where: SalaryAdvanceRequestWhereUniqueInput
  }

  /**
   * SalaryAdvanceRequest updateMany
   */
  export type SalaryAdvanceRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalaryAdvanceRequests.
     */
    data: XOR<SalaryAdvanceRequestUpdateManyMutationInput, SalaryAdvanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which SalaryAdvanceRequests to update
     */
    where?: SalaryAdvanceRequestWhereInput
    /**
     * Limit how many SalaryAdvanceRequests to update.
     */
    limit?: number
  }

  /**
   * SalaryAdvanceRequest updateManyAndReturn
   */
  export type SalaryAdvanceRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * The data used to update SalaryAdvanceRequests.
     */
    data: XOR<SalaryAdvanceRequestUpdateManyMutationInput, SalaryAdvanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which SalaryAdvanceRequests to update
     */
    where?: SalaryAdvanceRequestWhereInput
    /**
     * Limit how many SalaryAdvanceRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SalaryAdvanceRequest upsert
   */
  export type SalaryAdvanceRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the SalaryAdvanceRequest to update in case it exists.
     */
    where: SalaryAdvanceRequestWhereUniqueInput
    /**
     * In case the SalaryAdvanceRequest found by the `where` argument doesn't exist, create a new SalaryAdvanceRequest with this data.
     */
    create: XOR<SalaryAdvanceRequestCreateInput, SalaryAdvanceRequestUncheckedCreateInput>
    /**
     * In case the SalaryAdvanceRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaryAdvanceRequestUpdateInput, SalaryAdvanceRequestUncheckedUpdateInput>
  }

  /**
   * SalaryAdvanceRequest delete
   */
  export type SalaryAdvanceRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
    /**
     * Filter which SalaryAdvanceRequest to delete.
     */
    where: SalaryAdvanceRequestWhereUniqueInput
  }

  /**
   * SalaryAdvanceRequest deleteMany
   */
  export type SalaryAdvanceRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryAdvanceRequests to delete
     */
    where?: SalaryAdvanceRequestWhereInput
    /**
     * Limit how many SalaryAdvanceRequests to delete.
     */
    limit?: number
  }

  /**
   * SalaryAdvanceRequest.repayments
   */
  export type SalaryAdvanceRequest$repaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    where?: SalaryAdvanceRepaymentWhereInput
    orderBy?: SalaryAdvanceRepaymentOrderByWithRelationInput | SalaryAdvanceRepaymentOrderByWithRelationInput[]
    cursor?: SalaryAdvanceRepaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryAdvanceRepaymentScalarFieldEnum | SalaryAdvanceRepaymentScalarFieldEnum[]
  }

  /**
   * SalaryAdvanceRequest.branch
   */
  export type SalaryAdvanceRequest$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * SalaryAdvanceRequest without action
   */
  export type SalaryAdvanceRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRequest
     */
    select?: SalaryAdvanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRequest
     */
    omit?: SalaryAdvanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRequestInclude<ExtArgs> | null
  }


  /**
   * Model SalaryAdvanceRepayment
   */

  export type AggregateSalaryAdvanceRepayment = {
    _count: SalaryAdvanceRepaymentCountAggregateOutputType | null
    _avg: SalaryAdvanceRepaymentAvgAggregateOutputType | null
    _sum: SalaryAdvanceRepaymentSumAggregateOutputType | null
    _min: SalaryAdvanceRepaymentMinAggregateOutputType | null
    _max: SalaryAdvanceRepaymentMaxAggregateOutputType | null
  }

  export type SalaryAdvanceRepaymentAvgAggregateOutputType = {
    principalAmount: number | null
    interestAmount: number | null
    totalAmount: number | null
  }

  export type SalaryAdvanceRepaymentSumAggregateOutputType = {
    principalAmount: number | null
    interestAmount: number | null
    totalAmount: number | null
  }

  export type SalaryAdvanceRepaymentMinAggregateOutputType = {
    id: string | null
    salaryAdvanceRequestId: string | null
    payrollPeriodId: string | null
    repaymentDate: Date | null
    principalAmount: number | null
    interestAmount: number | null
    totalAmount: number | null
    paymentMethod: string | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type SalaryAdvanceRepaymentMaxAggregateOutputType = {
    id: string | null
    salaryAdvanceRequestId: string | null
    payrollPeriodId: string | null
    repaymentDate: Date | null
    principalAmount: number | null
    interestAmount: number | null
    totalAmount: number | null
    paymentMethod: string | null
    reference: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type SalaryAdvanceRepaymentCountAggregateOutputType = {
    id: number
    salaryAdvanceRequestId: number
    payrollPeriodId: number
    repaymentDate: number
    principalAmount: number
    interestAmount: number
    totalAmount: number
    paymentMethod: number
    reference: number
    notes: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type SalaryAdvanceRepaymentAvgAggregateInputType = {
    principalAmount?: true
    interestAmount?: true
    totalAmount?: true
  }

  export type SalaryAdvanceRepaymentSumAggregateInputType = {
    principalAmount?: true
    interestAmount?: true
    totalAmount?: true
  }

  export type SalaryAdvanceRepaymentMinAggregateInputType = {
    id?: true
    salaryAdvanceRequestId?: true
    payrollPeriodId?: true
    repaymentDate?: true
    principalAmount?: true
    interestAmount?: true
    totalAmount?: true
    paymentMethod?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type SalaryAdvanceRepaymentMaxAggregateInputType = {
    id?: true
    salaryAdvanceRequestId?: true
    payrollPeriodId?: true
    repaymentDate?: true
    principalAmount?: true
    interestAmount?: true
    totalAmount?: true
    paymentMethod?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type SalaryAdvanceRepaymentCountAggregateInputType = {
    id?: true
    salaryAdvanceRequestId?: true
    payrollPeriodId?: true
    repaymentDate?: true
    principalAmount?: true
    interestAmount?: true
    totalAmount?: true
    paymentMethod?: true
    reference?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type SalaryAdvanceRepaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryAdvanceRepayment to aggregate.
     */
    where?: SalaryAdvanceRepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRepayments to fetch.
     */
    orderBy?: SalaryAdvanceRepaymentOrderByWithRelationInput | SalaryAdvanceRepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaryAdvanceRepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRepayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRepayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalaryAdvanceRepayments
    **/
    _count?: true | SalaryAdvanceRepaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaryAdvanceRepaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaryAdvanceRepaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaryAdvanceRepaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaryAdvanceRepaymentMaxAggregateInputType
  }

  export type GetSalaryAdvanceRepaymentAggregateType<T extends SalaryAdvanceRepaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateSalaryAdvanceRepayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalaryAdvanceRepayment[P]>
      : GetScalarType<T[P], AggregateSalaryAdvanceRepayment[P]>
  }




  export type SalaryAdvanceRepaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryAdvanceRepaymentWhereInput
    orderBy?: SalaryAdvanceRepaymentOrderByWithAggregationInput | SalaryAdvanceRepaymentOrderByWithAggregationInput[]
    by: SalaryAdvanceRepaymentScalarFieldEnum[] | SalaryAdvanceRepaymentScalarFieldEnum
    having?: SalaryAdvanceRepaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaryAdvanceRepaymentCountAggregateInputType | true
    _avg?: SalaryAdvanceRepaymentAvgAggregateInputType
    _sum?: SalaryAdvanceRepaymentSumAggregateInputType
    _min?: SalaryAdvanceRepaymentMinAggregateInputType
    _max?: SalaryAdvanceRepaymentMaxAggregateInputType
  }

  export type SalaryAdvanceRepaymentGroupByOutputType = {
    id: string
    salaryAdvanceRequestId: string
    payrollPeriodId: string | null
    repaymentDate: Date
    principalAmount: number
    interestAmount: number
    totalAmount: number
    paymentMethod: string
    reference: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: SalaryAdvanceRepaymentCountAggregateOutputType | null
    _avg: SalaryAdvanceRepaymentAvgAggregateOutputType | null
    _sum: SalaryAdvanceRepaymentSumAggregateOutputType | null
    _min: SalaryAdvanceRepaymentMinAggregateOutputType | null
    _max: SalaryAdvanceRepaymentMaxAggregateOutputType | null
  }

  type GetSalaryAdvanceRepaymentGroupByPayload<T extends SalaryAdvanceRepaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaryAdvanceRepaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaryAdvanceRepaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaryAdvanceRepaymentGroupByOutputType[P]>
            : GetScalarType<T[P], SalaryAdvanceRepaymentGroupByOutputType[P]>
        }
      >
    >


  export type SalaryAdvanceRepaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    salaryAdvanceRequestId?: boolean
    payrollPeriodId?: boolean
    repaymentDate?: boolean
    principalAmount?: boolean
    interestAmount?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payrollPeriod?: boolean | SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs>
    salaryAdvanceRequest?: boolean | SalaryAdvanceRequestDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvanceRepayment"]>

  export type SalaryAdvanceRepaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    salaryAdvanceRequestId?: boolean
    payrollPeriodId?: boolean
    repaymentDate?: boolean
    principalAmount?: boolean
    interestAmount?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payrollPeriod?: boolean | SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs>
    salaryAdvanceRequest?: boolean | SalaryAdvanceRequestDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvanceRepayment"]>

  export type SalaryAdvanceRepaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    salaryAdvanceRequestId?: boolean
    payrollPeriodId?: boolean
    repaymentDate?: boolean
    principalAmount?: boolean
    interestAmount?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    payrollPeriod?: boolean | SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs>
    salaryAdvanceRequest?: boolean | SalaryAdvanceRequestDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryAdvanceRepayment"]>

  export type SalaryAdvanceRepaymentSelectScalar = {
    id?: boolean
    salaryAdvanceRequestId?: boolean
    payrollPeriodId?: boolean
    repaymentDate?: boolean
    principalAmount?: boolean
    interestAmount?: boolean
    totalAmount?: boolean
    paymentMethod?: boolean
    reference?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type SalaryAdvanceRepaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "salaryAdvanceRequestId" | "payrollPeriodId" | "repaymentDate" | "principalAmount" | "interestAmount" | "totalAmount" | "paymentMethod" | "reference" | "notes" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["salaryAdvanceRepayment"]>
  export type SalaryAdvanceRepaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollPeriod?: boolean | SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs>
    salaryAdvanceRequest?: boolean | SalaryAdvanceRequestDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SalaryAdvanceRepaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollPeriod?: boolean | SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs>
    salaryAdvanceRequest?: boolean | SalaryAdvanceRequestDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SalaryAdvanceRepaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollPeriod?: boolean | SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs>
    salaryAdvanceRequest?: boolean | SalaryAdvanceRequestDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $SalaryAdvanceRepaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SalaryAdvanceRepayment"
    objects: {
      payrollPeriod: Prisma.$PayrollPeriodPayload<ExtArgs> | null
      salaryAdvanceRequest: Prisma.$SalaryAdvanceRequestPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      salaryAdvanceRequestId: string
      payrollPeriodId: string | null
      repaymentDate: Date
      principalAmount: number
      interestAmount: number
      totalAmount: number
      paymentMethod: string
      reference: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["salaryAdvanceRepayment"]>
    composites: {}
  }

  type SalaryAdvanceRepaymentGetPayload<S extends boolean | null | undefined | SalaryAdvanceRepaymentDefaultArgs> = $Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload, S>

  type SalaryAdvanceRepaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SalaryAdvanceRepaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SalaryAdvanceRepaymentCountAggregateInputType | true
    }

  export interface SalaryAdvanceRepaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalaryAdvanceRepayment'], meta: { name: 'SalaryAdvanceRepayment' } }
    /**
     * Find zero or one SalaryAdvanceRepayment that matches the filter.
     * @param {SalaryAdvanceRepaymentFindUniqueArgs} args - Arguments to find a SalaryAdvanceRepayment
     * @example
     * // Get one SalaryAdvanceRepayment
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalaryAdvanceRepaymentFindUniqueArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentFindUniqueArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SalaryAdvanceRepayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SalaryAdvanceRepaymentFindUniqueOrThrowArgs} args - Arguments to find a SalaryAdvanceRepayment
     * @example
     * // Get one SalaryAdvanceRepayment
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalaryAdvanceRepaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryAdvanceRepayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRepaymentFindFirstArgs} args - Arguments to find a SalaryAdvanceRepayment
     * @example
     * // Get one SalaryAdvanceRepayment
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalaryAdvanceRepaymentFindFirstArgs>(args?: SelectSubset<T, SalaryAdvanceRepaymentFindFirstArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryAdvanceRepayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRepaymentFindFirstOrThrowArgs} args - Arguments to find a SalaryAdvanceRepayment
     * @example
     * // Get one SalaryAdvanceRepayment
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalaryAdvanceRepaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, SalaryAdvanceRepaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SalaryAdvanceRepayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRepaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalaryAdvanceRepayments
     * const salaryAdvanceRepayments = await prisma.salaryAdvanceRepayment.findMany()
     * 
     * // Get first 10 SalaryAdvanceRepayments
     * const salaryAdvanceRepayments = await prisma.salaryAdvanceRepayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaryAdvanceRepaymentWithIdOnly = await prisma.salaryAdvanceRepayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalaryAdvanceRepaymentFindManyArgs>(args?: SelectSubset<T, SalaryAdvanceRepaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SalaryAdvanceRepayment.
     * @param {SalaryAdvanceRepaymentCreateArgs} args - Arguments to create a SalaryAdvanceRepayment.
     * @example
     * // Create one SalaryAdvanceRepayment
     * const SalaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.create({
     *   data: {
     *     // ... data to create a SalaryAdvanceRepayment
     *   }
     * })
     * 
     */
    create<T extends SalaryAdvanceRepaymentCreateArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentCreateArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SalaryAdvanceRepayments.
     * @param {SalaryAdvanceRepaymentCreateManyArgs} args - Arguments to create many SalaryAdvanceRepayments.
     * @example
     * // Create many SalaryAdvanceRepayments
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalaryAdvanceRepaymentCreateManyArgs>(args?: SelectSubset<T, SalaryAdvanceRepaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SalaryAdvanceRepayments and returns the data saved in the database.
     * @param {SalaryAdvanceRepaymentCreateManyAndReturnArgs} args - Arguments to create many SalaryAdvanceRepayments.
     * @example
     * // Create many SalaryAdvanceRepayments
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SalaryAdvanceRepayments and only return the `id`
     * const salaryAdvanceRepaymentWithIdOnly = await prisma.salaryAdvanceRepayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SalaryAdvanceRepaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, SalaryAdvanceRepaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SalaryAdvanceRepayment.
     * @param {SalaryAdvanceRepaymentDeleteArgs} args - Arguments to delete one SalaryAdvanceRepayment.
     * @example
     * // Delete one SalaryAdvanceRepayment
     * const SalaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.delete({
     *   where: {
     *     // ... filter to delete one SalaryAdvanceRepayment
     *   }
     * })
     * 
     */
    delete<T extends SalaryAdvanceRepaymentDeleteArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentDeleteArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SalaryAdvanceRepayment.
     * @param {SalaryAdvanceRepaymentUpdateArgs} args - Arguments to update one SalaryAdvanceRepayment.
     * @example
     * // Update one SalaryAdvanceRepayment
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalaryAdvanceRepaymentUpdateArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentUpdateArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SalaryAdvanceRepayments.
     * @param {SalaryAdvanceRepaymentDeleteManyArgs} args - Arguments to filter SalaryAdvanceRepayments to delete.
     * @example
     * // Delete a few SalaryAdvanceRepayments
     * const { count } = await prisma.salaryAdvanceRepayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalaryAdvanceRepaymentDeleteManyArgs>(args?: SelectSubset<T, SalaryAdvanceRepaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryAdvanceRepayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRepaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalaryAdvanceRepayments
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalaryAdvanceRepaymentUpdateManyArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryAdvanceRepayments and returns the data updated in the database.
     * @param {SalaryAdvanceRepaymentUpdateManyAndReturnArgs} args - Arguments to update many SalaryAdvanceRepayments.
     * @example
     * // Update many SalaryAdvanceRepayments
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SalaryAdvanceRepayments and only return the `id`
     * const salaryAdvanceRepaymentWithIdOnly = await prisma.salaryAdvanceRepayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SalaryAdvanceRepaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SalaryAdvanceRepayment.
     * @param {SalaryAdvanceRepaymentUpsertArgs} args - Arguments to update or create a SalaryAdvanceRepayment.
     * @example
     * // Update or create a SalaryAdvanceRepayment
     * const salaryAdvanceRepayment = await prisma.salaryAdvanceRepayment.upsert({
     *   create: {
     *     // ... data to create a SalaryAdvanceRepayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalaryAdvanceRepayment we want to update
     *   }
     * })
     */
    upsert<T extends SalaryAdvanceRepaymentUpsertArgs>(args: SelectSubset<T, SalaryAdvanceRepaymentUpsertArgs<ExtArgs>>): Prisma__SalaryAdvanceRepaymentClient<$Result.GetResult<Prisma.$SalaryAdvanceRepaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SalaryAdvanceRepayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRepaymentCountArgs} args - Arguments to filter SalaryAdvanceRepayments to count.
     * @example
     * // Count the number of SalaryAdvanceRepayments
     * const count = await prisma.salaryAdvanceRepayment.count({
     *   where: {
     *     // ... the filter for the SalaryAdvanceRepayments we want to count
     *   }
     * })
    **/
    count<T extends SalaryAdvanceRepaymentCountArgs>(
      args?: Subset<T, SalaryAdvanceRepaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaryAdvanceRepaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalaryAdvanceRepayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRepaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaryAdvanceRepaymentAggregateArgs>(args: Subset<T, SalaryAdvanceRepaymentAggregateArgs>): Prisma.PrismaPromise<GetSalaryAdvanceRepaymentAggregateType<T>>

    /**
     * Group by SalaryAdvanceRepayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryAdvanceRepaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaryAdvanceRepaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaryAdvanceRepaymentGroupByArgs['orderBy'] }
        : { orderBy?: SalaryAdvanceRepaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaryAdvanceRepaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaryAdvanceRepaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SalaryAdvanceRepayment model
   */
  readonly fields: SalaryAdvanceRepaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SalaryAdvanceRepayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaryAdvanceRepaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payrollPeriod<T extends SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs> = {}>(args?: Subset<T, SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    salaryAdvanceRequest<T extends SalaryAdvanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SalaryAdvanceRequestDefaultArgs<ExtArgs>>): Prisma__SalaryAdvanceRequestClient<$Result.GetResult<Prisma.$SalaryAdvanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SalaryAdvanceRepayment model
   */
  interface SalaryAdvanceRepaymentFieldRefs {
    readonly id: FieldRef<"SalaryAdvanceRepayment", 'String'>
    readonly salaryAdvanceRequestId: FieldRef<"SalaryAdvanceRepayment", 'String'>
    readonly payrollPeriodId: FieldRef<"SalaryAdvanceRepayment", 'String'>
    readonly repaymentDate: FieldRef<"SalaryAdvanceRepayment", 'DateTime'>
    readonly principalAmount: FieldRef<"SalaryAdvanceRepayment", 'Float'>
    readonly interestAmount: FieldRef<"SalaryAdvanceRepayment", 'Float'>
    readonly totalAmount: FieldRef<"SalaryAdvanceRepayment", 'Float'>
    readonly paymentMethod: FieldRef<"SalaryAdvanceRepayment", 'String'>
    readonly reference: FieldRef<"SalaryAdvanceRepayment", 'String'>
    readonly notes: FieldRef<"SalaryAdvanceRepayment", 'String'>
    readonly createdAt: FieldRef<"SalaryAdvanceRepayment", 'DateTime'>
    readonly updatedAt: FieldRef<"SalaryAdvanceRepayment", 'DateTime'>
    readonly tenantId: FieldRef<"SalaryAdvanceRepayment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SalaryAdvanceRepayment findUnique
   */
  export type SalaryAdvanceRepaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRepayment to fetch.
     */
    where: SalaryAdvanceRepaymentWhereUniqueInput
  }

  /**
   * SalaryAdvanceRepayment findUniqueOrThrow
   */
  export type SalaryAdvanceRepaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRepayment to fetch.
     */
    where: SalaryAdvanceRepaymentWhereUniqueInput
  }

  /**
   * SalaryAdvanceRepayment findFirst
   */
  export type SalaryAdvanceRepaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRepayment to fetch.
     */
    where?: SalaryAdvanceRepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRepayments to fetch.
     */
    orderBy?: SalaryAdvanceRepaymentOrderByWithRelationInput | SalaryAdvanceRepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryAdvanceRepayments.
     */
    cursor?: SalaryAdvanceRepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRepayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRepayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryAdvanceRepayments.
     */
    distinct?: SalaryAdvanceRepaymentScalarFieldEnum | SalaryAdvanceRepaymentScalarFieldEnum[]
  }

  /**
   * SalaryAdvanceRepayment findFirstOrThrow
   */
  export type SalaryAdvanceRepaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRepayment to fetch.
     */
    where?: SalaryAdvanceRepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRepayments to fetch.
     */
    orderBy?: SalaryAdvanceRepaymentOrderByWithRelationInput | SalaryAdvanceRepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryAdvanceRepayments.
     */
    cursor?: SalaryAdvanceRepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRepayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRepayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryAdvanceRepayments.
     */
    distinct?: SalaryAdvanceRepaymentScalarFieldEnum | SalaryAdvanceRepaymentScalarFieldEnum[]
  }

  /**
   * SalaryAdvanceRepayment findMany
   */
  export type SalaryAdvanceRepaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * Filter, which SalaryAdvanceRepayments to fetch.
     */
    where?: SalaryAdvanceRepaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryAdvanceRepayments to fetch.
     */
    orderBy?: SalaryAdvanceRepaymentOrderByWithRelationInput | SalaryAdvanceRepaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalaryAdvanceRepayments.
     */
    cursor?: SalaryAdvanceRepaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryAdvanceRepayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryAdvanceRepayments.
     */
    skip?: number
    distinct?: SalaryAdvanceRepaymentScalarFieldEnum | SalaryAdvanceRepaymentScalarFieldEnum[]
  }

  /**
   * SalaryAdvanceRepayment create
   */
  export type SalaryAdvanceRepaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a SalaryAdvanceRepayment.
     */
    data: XOR<SalaryAdvanceRepaymentCreateInput, SalaryAdvanceRepaymentUncheckedCreateInput>
  }

  /**
   * SalaryAdvanceRepayment createMany
   */
  export type SalaryAdvanceRepaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalaryAdvanceRepayments.
     */
    data: SalaryAdvanceRepaymentCreateManyInput | SalaryAdvanceRepaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SalaryAdvanceRepayment createManyAndReturn
   */
  export type SalaryAdvanceRepaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * The data used to create many SalaryAdvanceRepayments.
     */
    data: SalaryAdvanceRepaymentCreateManyInput | SalaryAdvanceRepaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SalaryAdvanceRepayment update
   */
  export type SalaryAdvanceRepaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a SalaryAdvanceRepayment.
     */
    data: XOR<SalaryAdvanceRepaymentUpdateInput, SalaryAdvanceRepaymentUncheckedUpdateInput>
    /**
     * Choose, which SalaryAdvanceRepayment to update.
     */
    where: SalaryAdvanceRepaymentWhereUniqueInput
  }

  /**
   * SalaryAdvanceRepayment updateMany
   */
  export type SalaryAdvanceRepaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalaryAdvanceRepayments.
     */
    data: XOR<SalaryAdvanceRepaymentUpdateManyMutationInput, SalaryAdvanceRepaymentUncheckedUpdateManyInput>
    /**
     * Filter which SalaryAdvanceRepayments to update
     */
    where?: SalaryAdvanceRepaymentWhereInput
    /**
     * Limit how many SalaryAdvanceRepayments to update.
     */
    limit?: number
  }

  /**
   * SalaryAdvanceRepayment updateManyAndReturn
   */
  export type SalaryAdvanceRepaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * The data used to update SalaryAdvanceRepayments.
     */
    data: XOR<SalaryAdvanceRepaymentUpdateManyMutationInput, SalaryAdvanceRepaymentUncheckedUpdateManyInput>
    /**
     * Filter which SalaryAdvanceRepayments to update
     */
    where?: SalaryAdvanceRepaymentWhereInput
    /**
     * Limit how many SalaryAdvanceRepayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SalaryAdvanceRepayment upsert
   */
  export type SalaryAdvanceRepaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the SalaryAdvanceRepayment to update in case it exists.
     */
    where: SalaryAdvanceRepaymentWhereUniqueInput
    /**
     * In case the SalaryAdvanceRepayment found by the `where` argument doesn't exist, create a new SalaryAdvanceRepayment with this data.
     */
    create: XOR<SalaryAdvanceRepaymentCreateInput, SalaryAdvanceRepaymentUncheckedCreateInput>
    /**
     * In case the SalaryAdvanceRepayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaryAdvanceRepaymentUpdateInput, SalaryAdvanceRepaymentUncheckedUpdateInput>
  }

  /**
   * SalaryAdvanceRepayment delete
   */
  export type SalaryAdvanceRepaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
    /**
     * Filter which SalaryAdvanceRepayment to delete.
     */
    where: SalaryAdvanceRepaymentWhereUniqueInput
  }

  /**
   * SalaryAdvanceRepayment deleteMany
   */
  export type SalaryAdvanceRepaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryAdvanceRepayments to delete
     */
    where?: SalaryAdvanceRepaymentWhereInput
    /**
     * Limit how many SalaryAdvanceRepayments to delete.
     */
    limit?: number
  }

  /**
   * SalaryAdvanceRepayment.payrollPeriod
   */
  export type SalaryAdvanceRepayment$payrollPeriodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayrollPeriod
     */
    omit?: PayrollPeriodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    where?: PayrollPeriodWhereInput
  }

  /**
   * SalaryAdvanceRepayment without action
   */
  export type SalaryAdvanceRepaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryAdvanceRepayment
     */
    select?: SalaryAdvanceRepaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryAdvanceRepayment
     */
    omit?: SalaryAdvanceRepaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryAdvanceRepaymentInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    userId: string | null
    createdAt: Date | null
    tenantId: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    userId: string | null
    createdAt: Date | null
    tenantId: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    entity: number
    entityId: number
    userId: number
    details: number
    createdAt: number
    tenantId: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    userId?: true
    createdAt?: true
    tenantId?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    userId?: true
    createdAt?: true
    tenantId?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    entity?: true
    entityId?: true
    userId?: true
    details?: true
    createdAt?: true
    tenantId?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: string
    entity: string
    entityId: string | null
    userId: string | null
    details: JsonValue | null
    createdAt: Date
    tenantId: string
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    userId?: boolean
    details?: boolean
    createdAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    userId?: boolean
    details?: boolean
    createdAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    userId?: boolean
    details?: boolean
    createdAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    userId?: boolean
    details?: boolean
    createdAt?: boolean
    tenantId?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "entity" | "entityId" | "userId" | "details" | "createdAt" | "tenantId", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      entity: string
      entityId: string | null
      userId: string | null
      details: Prisma.JsonValue | null
      createdAt: Date
      tenantId: string
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
    readonly tenantId: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model SecurityAlert
   */

  export type AggregateSecurityAlert = {
    _count: SecurityAlertCountAggregateOutputType | null
    _min: SecurityAlertMinAggregateOutputType | null
    _max: SecurityAlertMaxAggregateOutputType | null
  }

  export type SecurityAlertMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    timestamp: Date | null
    tenantId: string | null
  }

  export type SecurityAlertMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    timestamp: Date | null
    tenantId: string | null
  }

  export type SecurityAlertCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    timestamp: number
    tenantId: number
    _all: number
  }


  export type SecurityAlertMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    timestamp?: true
    tenantId?: true
  }

  export type SecurityAlertMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    timestamp?: true
    tenantId?: true
  }

  export type SecurityAlertCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    timestamp?: true
    tenantId?: true
    _all?: true
  }

  export type SecurityAlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityAlert to aggregate.
     */
    where?: SecurityAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAlerts to fetch.
     */
    orderBy?: SecurityAlertOrderByWithRelationInput | SecurityAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SecurityAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SecurityAlerts
    **/
    _count?: true | SecurityAlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SecurityAlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SecurityAlertMaxAggregateInputType
  }

  export type GetSecurityAlertAggregateType<T extends SecurityAlertAggregateArgs> = {
        [P in keyof T & keyof AggregateSecurityAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSecurityAlert[P]>
      : GetScalarType<T[P], AggregateSecurityAlert[P]>
  }




  export type SecurityAlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityAlertWhereInput
    orderBy?: SecurityAlertOrderByWithAggregationInput | SecurityAlertOrderByWithAggregationInput[]
    by: SecurityAlertScalarFieldEnum[] | SecurityAlertScalarFieldEnum
    having?: SecurityAlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SecurityAlertCountAggregateInputType | true
    _min?: SecurityAlertMinAggregateInputType
    _max?: SecurityAlertMaxAggregateInputType
  }

  export type SecurityAlertGroupByOutputType = {
    id: string
    type: string
    title: string
    description: string
    timestamp: Date
    tenantId: string
    _count: SecurityAlertCountAggregateOutputType | null
    _min: SecurityAlertMinAggregateOutputType | null
    _max: SecurityAlertMaxAggregateOutputType | null
  }

  type GetSecurityAlertGroupByPayload<T extends SecurityAlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SecurityAlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SecurityAlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SecurityAlertGroupByOutputType[P]>
            : GetScalarType<T[P], SecurityAlertGroupByOutputType[P]>
        }
      >
    >


  export type SecurityAlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    timestamp?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securityAlert"]>

  export type SecurityAlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    timestamp?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securityAlert"]>

  export type SecurityAlertSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    timestamp?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securityAlert"]>

  export type SecurityAlertSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    timestamp?: boolean
    tenantId?: boolean
  }

  export type SecurityAlertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "description" | "timestamp" | "tenantId", ExtArgs["result"]["securityAlert"]>
  export type SecurityAlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SecurityAlertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SecurityAlertIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $SecurityAlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SecurityAlert"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      description: string
      timestamp: Date
      tenantId: string
    }, ExtArgs["result"]["securityAlert"]>
    composites: {}
  }

  type SecurityAlertGetPayload<S extends boolean | null | undefined | SecurityAlertDefaultArgs> = $Result.GetResult<Prisma.$SecurityAlertPayload, S>

  type SecurityAlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SecurityAlertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SecurityAlertCountAggregateInputType | true
    }

  export interface SecurityAlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SecurityAlert'], meta: { name: 'SecurityAlert' } }
    /**
     * Find zero or one SecurityAlert that matches the filter.
     * @param {SecurityAlertFindUniqueArgs} args - Arguments to find a SecurityAlert
     * @example
     * // Get one SecurityAlert
     * const securityAlert = await prisma.securityAlert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SecurityAlertFindUniqueArgs>(args: SelectSubset<T, SecurityAlertFindUniqueArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SecurityAlert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SecurityAlertFindUniqueOrThrowArgs} args - Arguments to find a SecurityAlert
     * @example
     * // Get one SecurityAlert
     * const securityAlert = await prisma.securityAlert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SecurityAlertFindUniqueOrThrowArgs>(args: SelectSubset<T, SecurityAlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecurityAlert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAlertFindFirstArgs} args - Arguments to find a SecurityAlert
     * @example
     * // Get one SecurityAlert
     * const securityAlert = await prisma.securityAlert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SecurityAlertFindFirstArgs>(args?: SelectSubset<T, SecurityAlertFindFirstArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecurityAlert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAlertFindFirstOrThrowArgs} args - Arguments to find a SecurityAlert
     * @example
     * // Get one SecurityAlert
     * const securityAlert = await prisma.securityAlert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SecurityAlertFindFirstOrThrowArgs>(args?: SelectSubset<T, SecurityAlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SecurityAlerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SecurityAlerts
     * const securityAlerts = await prisma.securityAlert.findMany()
     * 
     * // Get first 10 SecurityAlerts
     * const securityAlerts = await prisma.securityAlert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const securityAlertWithIdOnly = await prisma.securityAlert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SecurityAlertFindManyArgs>(args?: SelectSubset<T, SecurityAlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SecurityAlert.
     * @param {SecurityAlertCreateArgs} args - Arguments to create a SecurityAlert.
     * @example
     * // Create one SecurityAlert
     * const SecurityAlert = await prisma.securityAlert.create({
     *   data: {
     *     // ... data to create a SecurityAlert
     *   }
     * })
     * 
     */
    create<T extends SecurityAlertCreateArgs>(args: SelectSubset<T, SecurityAlertCreateArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SecurityAlerts.
     * @param {SecurityAlertCreateManyArgs} args - Arguments to create many SecurityAlerts.
     * @example
     * // Create many SecurityAlerts
     * const securityAlert = await prisma.securityAlert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SecurityAlertCreateManyArgs>(args?: SelectSubset<T, SecurityAlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SecurityAlerts and returns the data saved in the database.
     * @param {SecurityAlertCreateManyAndReturnArgs} args - Arguments to create many SecurityAlerts.
     * @example
     * // Create many SecurityAlerts
     * const securityAlert = await prisma.securityAlert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SecurityAlerts and only return the `id`
     * const securityAlertWithIdOnly = await prisma.securityAlert.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SecurityAlertCreateManyAndReturnArgs>(args?: SelectSubset<T, SecurityAlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SecurityAlert.
     * @param {SecurityAlertDeleteArgs} args - Arguments to delete one SecurityAlert.
     * @example
     * // Delete one SecurityAlert
     * const SecurityAlert = await prisma.securityAlert.delete({
     *   where: {
     *     // ... filter to delete one SecurityAlert
     *   }
     * })
     * 
     */
    delete<T extends SecurityAlertDeleteArgs>(args: SelectSubset<T, SecurityAlertDeleteArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SecurityAlert.
     * @param {SecurityAlertUpdateArgs} args - Arguments to update one SecurityAlert.
     * @example
     * // Update one SecurityAlert
     * const securityAlert = await prisma.securityAlert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SecurityAlertUpdateArgs>(args: SelectSubset<T, SecurityAlertUpdateArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SecurityAlerts.
     * @param {SecurityAlertDeleteManyArgs} args - Arguments to filter SecurityAlerts to delete.
     * @example
     * // Delete a few SecurityAlerts
     * const { count } = await prisma.securityAlert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SecurityAlertDeleteManyArgs>(args?: SelectSubset<T, SecurityAlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecurityAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SecurityAlerts
     * const securityAlert = await prisma.securityAlert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SecurityAlertUpdateManyArgs>(args: SelectSubset<T, SecurityAlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecurityAlerts and returns the data updated in the database.
     * @param {SecurityAlertUpdateManyAndReturnArgs} args - Arguments to update many SecurityAlerts.
     * @example
     * // Update many SecurityAlerts
     * const securityAlert = await prisma.securityAlert.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SecurityAlerts and only return the `id`
     * const securityAlertWithIdOnly = await prisma.securityAlert.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SecurityAlertUpdateManyAndReturnArgs>(args: SelectSubset<T, SecurityAlertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SecurityAlert.
     * @param {SecurityAlertUpsertArgs} args - Arguments to update or create a SecurityAlert.
     * @example
     * // Update or create a SecurityAlert
     * const securityAlert = await prisma.securityAlert.upsert({
     *   create: {
     *     // ... data to create a SecurityAlert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SecurityAlert we want to update
     *   }
     * })
     */
    upsert<T extends SecurityAlertUpsertArgs>(args: SelectSubset<T, SecurityAlertUpsertArgs<ExtArgs>>): Prisma__SecurityAlertClient<$Result.GetResult<Prisma.$SecurityAlertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SecurityAlerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAlertCountArgs} args - Arguments to filter SecurityAlerts to count.
     * @example
     * // Count the number of SecurityAlerts
     * const count = await prisma.securityAlert.count({
     *   where: {
     *     // ... the filter for the SecurityAlerts we want to count
     *   }
     * })
    **/
    count<T extends SecurityAlertCountArgs>(
      args?: Subset<T, SecurityAlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SecurityAlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SecurityAlert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SecurityAlertAggregateArgs>(args: Subset<T, SecurityAlertAggregateArgs>): Prisma.PrismaPromise<GetSecurityAlertAggregateType<T>>

    /**
     * Group by SecurityAlert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SecurityAlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SecurityAlertGroupByArgs['orderBy'] }
        : { orderBy?: SecurityAlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SecurityAlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecurityAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SecurityAlert model
   */
  readonly fields: SecurityAlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SecurityAlert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SecurityAlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SecurityAlert model
   */
  interface SecurityAlertFieldRefs {
    readonly id: FieldRef<"SecurityAlert", 'String'>
    readonly type: FieldRef<"SecurityAlert", 'String'>
    readonly title: FieldRef<"SecurityAlert", 'String'>
    readonly description: FieldRef<"SecurityAlert", 'String'>
    readonly timestamp: FieldRef<"SecurityAlert", 'DateTime'>
    readonly tenantId: FieldRef<"SecurityAlert", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SecurityAlert findUnique
   */
  export type SecurityAlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAlert to fetch.
     */
    where: SecurityAlertWhereUniqueInput
  }

  /**
   * SecurityAlert findUniqueOrThrow
   */
  export type SecurityAlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAlert to fetch.
     */
    where: SecurityAlertWhereUniqueInput
  }

  /**
   * SecurityAlert findFirst
   */
  export type SecurityAlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAlert to fetch.
     */
    where?: SecurityAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAlerts to fetch.
     */
    orderBy?: SecurityAlertOrderByWithRelationInput | SecurityAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityAlerts.
     */
    cursor?: SecurityAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityAlerts.
     */
    distinct?: SecurityAlertScalarFieldEnum | SecurityAlertScalarFieldEnum[]
  }

  /**
   * SecurityAlert findFirstOrThrow
   */
  export type SecurityAlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAlert to fetch.
     */
    where?: SecurityAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAlerts to fetch.
     */
    orderBy?: SecurityAlertOrderByWithRelationInput | SecurityAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityAlerts.
     */
    cursor?: SecurityAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAlerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityAlerts.
     */
    distinct?: SecurityAlertScalarFieldEnum | SecurityAlertScalarFieldEnum[]
  }

  /**
   * SecurityAlert findMany
   */
  export type SecurityAlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAlerts to fetch.
     */
    where?: SecurityAlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAlerts to fetch.
     */
    orderBy?: SecurityAlertOrderByWithRelationInput | SecurityAlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SecurityAlerts.
     */
    cursor?: SecurityAlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAlerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAlerts.
     */
    skip?: number
    distinct?: SecurityAlertScalarFieldEnum | SecurityAlertScalarFieldEnum[]
  }

  /**
   * SecurityAlert create
   */
  export type SecurityAlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * The data needed to create a SecurityAlert.
     */
    data: XOR<SecurityAlertCreateInput, SecurityAlertUncheckedCreateInput>
  }

  /**
   * SecurityAlert createMany
   */
  export type SecurityAlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SecurityAlerts.
     */
    data: SecurityAlertCreateManyInput | SecurityAlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SecurityAlert createManyAndReturn
   */
  export type SecurityAlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * The data used to create many SecurityAlerts.
     */
    data: SecurityAlertCreateManyInput | SecurityAlertCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecurityAlert update
   */
  export type SecurityAlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * The data needed to update a SecurityAlert.
     */
    data: XOR<SecurityAlertUpdateInput, SecurityAlertUncheckedUpdateInput>
    /**
     * Choose, which SecurityAlert to update.
     */
    where: SecurityAlertWhereUniqueInput
  }

  /**
   * SecurityAlert updateMany
   */
  export type SecurityAlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SecurityAlerts.
     */
    data: XOR<SecurityAlertUpdateManyMutationInput, SecurityAlertUncheckedUpdateManyInput>
    /**
     * Filter which SecurityAlerts to update
     */
    where?: SecurityAlertWhereInput
    /**
     * Limit how many SecurityAlerts to update.
     */
    limit?: number
  }

  /**
   * SecurityAlert updateManyAndReturn
   */
  export type SecurityAlertUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * The data used to update SecurityAlerts.
     */
    data: XOR<SecurityAlertUpdateManyMutationInput, SecurityAlertUncheckedUpdateManyInput>
    /**
     * Filter which SecurityAlerts to update
     */
    where?: SecurityAlertWhereInput
    /**
     * Limit how many SecurityAlerts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecurityAlert upsert
   */
  export type SecurityAlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * The filter to search for the SecurityAlert to update in case it exists.
     */
    where: SecurityAlertWhereUniqueInput
    /**
     * In case the SecurityAlert found by the `where` argument doesn't exist, create a new SecurityAlert with this data.
     */
    create: XOR<SecurityAlertCreateInput, SecurityAlertUncheckedCreateInput>
    /**
     * In case the SecurityAlert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SecurityAlertUpdateInput, SecurityAlertUncheckedUpdateInput>
  }

  /**
   * SecurityAlert delete
   */
  export type SecurityAlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
    /**
     * Filter which SecurityAlert to delete.
     */
    where: SecurityAlertWhereUniqueInput
  }

  /**
   * SecurityAlert deleteMany
   */
  export type SecurityAlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityAlerts to delete
     */
    where?: SecurityAlertWhereInput
    /**
     * Limit how many SecurityAlerts to delete.
     */
    limit?: number
  }

  /**
   * SecurityAlert without action
   */
  export type SecurityAlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAlert
     */
    select?: SecurityAlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAlert
     */
    omit?: SecurityAlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAlertInclude<ExtArgs> | null
  }


  /**
   * Model SecuritySettings
   */

  export type AggregateSecuritySettings = {
    _count: SecuritySettingsCountAggregateOutputType | null
    _min: SecuritySettingsMinAggregateOutputType | null
    _max: SecuritySettingsMaxAggregateOutputType | null
  }

  export type SecuritySettingsMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    twoFactorAuth: boolean | null
    passwordExpiry: boolean | null
    sessionTimeout: boolean | null
    ipWhitelist: boolean | null
    auditLogging: boolean | null
    encryptionAtRest: boolean | null
  }

  export type SecuritySettingsMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    twoFactorAuth: boolean | null
    passwordExpiry: boolean | null
    sessionTimeout: boolean | null
    ipWhitelist: boolean | null
    auditLogging: boolean | null
    encryptionAtRest: boolean | null
  }

  export type SecuritySettingsCountAggregateOutputType = {
    id: number
    tenantId: number
    twoFactorAuth: number
    passwordExpiry: number
    sessionTimeout: number
    ipWhitelist: number
    auditLogging: number
    encryptionAtRest: number
    _all: number
  }


  export type SecuritySettingsMinAggregateInputType = {
    id?: true
    tenantId?: true
    twoFactorAuth?: true
    passwordExpiry?: true
    sessionTimeout?: true
    ipWhitelist?: true
    auditLogging?: true
    encryptionAtRest?: true
  }

  export type SecuritySettingsMaxAggregateInputType = {
    id?: true
    tenantId?: true
    twoFactorAuth?: true
    passwordExpiry?: true
    sessionTimeout?: true
    ipWhitelist?: true
    auditLogging?: true
    encryptionAtRest?: true
  }

  export type SecuritySettingsCountAggregateInputType = {
    id?: true
    tenantId?: true
    twoFactorAuth?: true
    passwordExpiry?: true
    sessionTimeout?: true
    ipWhitelist?: true
    auditLogging?: true
    encryptionAtRest?: true
    _all?: true
  }

  export type SecuritySettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecuritySettings to aggregate.
     */
    where?: SecuritySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingsOrderByWithRelationInput | SecuritySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SecuritySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SecuritySettings
    **/
    _count?: true | SecuritySettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SecuritySettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SecuritySettingsMaxAggregateInputType
  }

  export type GetSecuritySettingsAggregateType<T extends SecuritySettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSecuritySettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSecuritySettings[P]>
      : GetScalarType<T[P], AggregateSecuritySettings[P]>
  }




  export type SecuritySettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecuritySettingsWhereInput
    orderBy?: SecuritySettingsOrderByWithAggregationInput | SecuritySettingsOrderByWithAggregationInput[]
    by: SecuritySettingsScalarFieldEnum[] | SecuritySettingsScalarFieldEnum
    having?: SecuritySettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SecuritySettingsCountAggregateInputType | true
    _min?: SecuritySettingsMinAggregateInputType
    _max?: SecuritySettingsMaxAggregateInputType
  }

  export type SecuritySettingsGroupByOutputType = {
    id: string
    tenantId: string
    twoFactorAuth: boolean
    passwordExpiry: boolean
    sessionTimeout: boolean
    ipWhitelist: boolean
    auditLogging: boolean
    encryptionAtRest: boolean
    _count: SecuritySettingsCountAggregateOutputType | null
    _min: SecuritySettingsMinAggregateOutputType | null
    _max: SecuritySettingsMaxAggregateOutputType | null
  }

  type GetSecuritySettingsGroupByPayload<T extends SecuritySettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SecuritySettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SecuritySettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SecuritySettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SecuritySettingsGroupByOutputType[P]>
        }
      >
    >


  export type SecuritySettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securitySettings"]>

  export type SecuritySettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securitySettings"]>

  export type SecuritySettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securitySettings"]>

  export type SecuritySettingsSelectScalar = {
    id?: boolean
    tenantId?: boolean
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
  }

  export type SecuritySettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "twoFactorAuth" | "passwordExpiry" | "sessionTimeout" | "ipWhitelist" | "auditLogging" | "encryptionAtRest", ExtArgs["result"]["securitySettings"]>
  export type SecuritySettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SecuritySettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type SecuritySettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $SecuritySettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SecuritySettings"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      twoFactorAuth: boolean
      passwordExpiry: boolean
      sessionTimeout: boolean
      ipWhitelist: boolean
      auditLogging: boolean
      encryptionAtRest: boolean
    }, ExtArgs["result"]["securitySettings"]>
    composites: {}
  }

  type SecuritySettingsGetPayload<S extends boolean | null | undefined | SecuritySettingsDefaultArgs> = $Result.GetResult<Prisma.$SecuritySettingsPayload, S>

  type SecuritySettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SecuritySettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SecuritySettingsCountAggregateInputType | true
    }

  export interface SecuritySettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SecuritySettings'], meta: { name: 'SecuritySettings' } }
    /**
     * Find zero or one SecuritySettings that matches the filter.
     * @param {SecuritySettingsFindUniqueArgs} args - Arguments to find a SecuritySettings
     * @example
     * // Get one SecuritySettings
     * const securitySettings = await prisma.securitySettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SecuritySettingsFindUniqueArgs>(args: SelectSubset<T, SecuritySettingsFindUniqueArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SecuritySettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SecuritySettingsFindUniqueOrThrowArgs} args - Arguments to find a SecuritySettings
     * @example
     * // Get one SecuritySettings
     * const securitySettings = await prisma.securitySettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SecuritySettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SecuritySettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecuritySettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingsFindFirstArgs} args - Arguments to find a SecuritySettings
     * @example
     * // Get one SecuritySettings
     * const securitySettings = await prisma.securitySettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SecuritySettingsFindFirstArgs>(args?: SelectSubset<T, SecuritySettingsFindFirstArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecuritySettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingsFindFirstOrThrowArgs} args - Arguments to find a SecuritySettings
     * @example
     * // Get one SecuritySettings
     * const securitySettings = await prisma.securitySettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SecuritySettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SecuritySettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SecuritySettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SecuritySettings
     * const securitySettings = await prisma.securitySettings.findMany()
     * 
     * // Get first 10 SecuritySettings
     * const securitySettings = await prisma.securitySettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const securitySettingsWithIdOnly = await prisma.securitySettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SecuritySettingsFindManyArgs>(args?: SelectSubset<T, SecuritySettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SecuritySettings.
     * @param {SecuritySettingsCreateArgs} args - Arguments to create a SecuritySettings.
     * @example
     * // Create one SecuritySettings
     * const SecuritySettings = await prisma.securitySettings.create({
     *   data: {
     *     // ... data to create a SecuritySettings
     *   }
     * })
     * 
     */
    create<T extends SecuritySettingsCreateArgs>(args: SelectSubset<T, SecuritySettingsCreateArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SecuritySettings.
     * @param {SecuritySettingsCreateManyArgs} args - Arguments to create many SecuritySettings.
     * @example
     * // Create many SecuritySettings
     * const securitySettings = await prisma.securitySettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SecuritySettingsCreateManyArgs>(args?: SelectSubset<T, SecuritySettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SecuritySettings and returns the data saved in the database.
     * @param {SecuritySettingsCreateManyAndReturnArgs} args - Arguments to create many SecuritySettings.
     * @example
     * // Create many SecuritySettings
     * const securitySettings = await prisma.securitySettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SecuritySettings and only return the `id`
     * const securitySettingsWithIdOnly = await prisma.securitySettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SecuritySettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SecuritySettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SecuritySettings.
     * @param {SecuritySettingsDeleteArgs} args - Arguments to delete one SecuritySettings.
     * @example
     * // Delete one SecuritySettings
     * const SecuritySettings = await prisma.securitySettings.delete({
     *   where: {
     *     // ... filter to delete one SecuritySettings
     *   }
     * })
     * 
     */
    delete<T extends SecuritySettingsDeleteArgs>(args: SelectSubset<T, SecuritySettingsDeleteArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SecuritySettings.
     * @param {SecuritySettingsUpdateArgs} args - Arguments to update one SecuritySettings.
     * @example
     * // Update one SecuritySettings
     * const securitySettings = await prisma.securitySettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SecuritySettingsUpdateArgs>(args: SelectSubset<T, SecuritySettingsUpdateArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SecuritySettings.
     * @param {SecuritySettingsDeleteManyArgs} args - Arguments to filter SecuritySettings to delete.
     * @example
     * // Delete a few SecuritySettings
     * const { count } = await prisma.securitySettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SecuritySettingsDeleteManyArgs>(args?: SelectSubset<T, SecuritySettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecuritySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SecuritySettings
     * const securitySettings = await prisma.securitySettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SecuritySettingsUpdateManyArgs>(args: SelectSubset<T, SecuritySettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecuritySettings and returns the data updated in the database.
     * @param {SecuritySettingsUpdateManyAndReturnArgs} args - Arguments to update many SecuritySettings.
     * @example
     * // Update many SecuritySettings
     * const securitySettings = await prisma.securitySettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SecuritySettings and only return the `id`
     * const securitySettingsWithIdOnly = await prisma.securitySettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SecuritySettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SecuritySettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SecuritySettings.
     * @param {SecuritySettingsUpsertArgs} args - Arguments to update or create a SecuritySettings.
     * @example
     * // Update or create a SecuritySettings
     * const securitySettings = await prisma.securitySettings.upsert({
     *   create: {
     *     // ... data to create a SecuritySettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SecuritySettings we want to update
     *   }
     * })
     */
    upsert<T extends SecuritySettingsUpsertArgs>(args: SelectSubset<T, SecuritySettingsUpsertArgs<ExtArgs>>): Prisma__SecuritySettingsClient<$Result.GetResult<Prisma.$SecuritySettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SecuritySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingsCountArgs} args - Arguments to filter SecuritySettings to count.
     * @example
     * // Count the number of SecuritySettings
     * const count = await prisma.securitySettings.count({
     *   where: {
     *     // ... the filter for the SecuritySettings we want to count
     *   }
     * })
    **/
    count<T extends SecuritySettingsCountArgs>(
      args?: Subset<T, SecuritySettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SecuritySettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SecuritySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SecuritySettingsAggregateArgs>(args: Subset<T, SecuritySettingsAggregateArgs>): Prisma.PrismaPromise<GetSecuritySettingsAggregateType<T>>

    /**
     * Group by SecuritySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecuritySettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SecuritySettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SecuritySettingsGroupByArgs['orderBy'] }
        : { orderBy?: SecuritySettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SecuritySettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecuritySettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SecuritySettings model
   */
  readonly fields: SecuritySettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SecuritySettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SecuritySettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SecuritySettings model
   */
  interface SecuritySettingsFieldRefs {
    readonly id: FieldRef<"SecuritySettings", 'String'>
    readonly tenantId: FieldRef<"SecuritySettings", 'String'>
    readonly twoFactorAuth: FieldRef<"SecuritySettings", 'Boolean'>
    readonly passwordExpiry: FieldRef<"SecuritySettings", 'Boolean'>
    readonly sessionTimeout: FieldRef<"SecuritySettings", 'Boolean'>
    readonly ipWhitelist: FieldRef<"SecuritySettings", 'Boolean'>
    readonly auditLogging: FieldRef<"SecuritySettings", 'Boolean'>
    readonly encryptionAtRest: FieldRef<"SecuritySettings", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * SecuritySettings findUnique
   */
  export type SecuritySettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySettings to fetch.
     */
    where: SecuritySettingsWhereUniqueInput
  }

  /**
   * SecuritySettings findUniqueOrThrow
   */
  export type SecuritySettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySettings to fetch.
     */
    where: SecuritySettingsWhereUniqueInput
  }

  /**
   * SecuritySettings findFirst
   */
  export type SecuritySettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySettings to fetch.
     */
    where?: SecuritySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingsOrderByWithRelationInput | SecuritySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecuritySettings.
     */
    cursor?: SecuritySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecuritySettings.
     */
    distinct?: SecuritySettingsScalarFieldEnum | SecuritySettingsScalarFieldEnum[]
  }

  /**
   * SecuritySettings findFirstOrThrow
   */
  export type SecuritySettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySettings to fetch.
     */
    where?: SecuritySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingsOrderByWithRelationInput | SecuritySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecuritySettings.
     */
    cursor?: SecuritySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecuritySettings.
     */
    distinct?: SecuritySettingsScalarFieldEnum | SecuritySettingsScalarFieldEnum[]
  }

  /**
   * SecuritySettings findMany
   */
  export type SecuritySettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * Filter, which SecuritySettings to fetch.
     */
    where?: SecuritySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecuritySettings to fetch.
     */
    orderBy?: SecuritySettingsOrderByWithRelationInput | SecuritySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SecuritySettings.
     */
    cursor?: SecuritySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecuritySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecuritySettings.
     */
    skip?: number
    distinct?: SecuritySettingsScalarFieldEnum | SecuritySettingsScalarFieldEnum[]
  }

  /**
   * SecuritySettings create
   */
  export type SecuritySettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a SecuritySettings.
     */
    data: XOR<SecuritySettingsCreateInput, SecuritySettingsUncheckedCreateInput>
  }

  /**
   * SecuritySettings createMany
   */
  export type SecuritySettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SecuritySettings.
     */
    data: SecuritySettingsCreateManyInput | SecuritySettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SecuritySettings createManyAndReturn
   */
  export type SecuritySettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * The data used to create many SecuritySettings.
     */
    data: SecuritySettingsCreateManyInput | SecuritySettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecuritySettings update
   */
  export type SecuritySettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a SecuritySettings.
     */
    data: XOR<SecuritySettingsUpdateInput, SecuritySettingsUncheckedUpdateInput>
    /**
     * Choose, which SecuritySettings to update.
     */
    where: SecuritySettingsWhereUniqueInput
  }

  /**
   * SecuritySettings updateMany
   */
  export type SecuritySettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SecuritySettings.
     */
    data: XOR<SecuritySettingsUpdateManyMutationInput, SecuritySettingsUncheckedUpdateManyInput>
    /**
     * Filter which SecuritySettings to update
     */
    where?: SecuritySettingsWhereInput
    /**
     * Limit how many SecuritySettings to update.
     */
    limit?: number
  }

  /**
   * SecuritySettings updateManyAndReturn
   */
  export type SecuritySettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * The data used to update SecuritySettings.
     */
    data: XOR<SecuritySettingsUpdateManyMutationInput, SecuritySettingsUncheckedUpdateManyInput>
    /**
     * Filter which SecuritySettings to update
     */
    where?: SecuritySettingsWhereInput
    /**
     * Limit how many SecuritySettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecuritySettings upsert
   */
  export type SecuritySettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the SecuritySettings to update in case it exists.
     */
    where: SecuritySettingsWhereUniqueInput
    /**
     * In case the SecuritySettings found by the `where` argument doesn't exist, create a new SecuritySettings with this data.
     */
    create: XOR<SecuritySettingsCreateInput, SecuritySettingsUncheckedCreateInput>
    /**
     * In case the SecuritySettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SecuritySettingsUpdateInput, SecuritySettingsUncheckedUpdateInput>
  }

  /**
   * SecuritySettings delete
   */
  export type SecuritySettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
    /**
     * Filter which SecuritySettings to delete.
     */
    where: SecuritySettingsWhereUniqueInput
  }

  /**
   * SecuritySettings deleteMany
   */
  export type SecuritySettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecuritySettings to delete
     */
    where?: SecuritySettingsWhereInput
    /**
     * Limit how many SecuritySettings to delete.
     */
    limit?: number
  }

  /**
   * SecuritySettings without action
   */
  export type SecuritySettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecuritySettings
     */
    select?: SecuritySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecuritySettings
     */
    omit?: SecuritySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecuritySettingsInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowTemplate
   */

  export type AggregateWorkflowTemplate = {
    _count: WorkflowTemplateCountAggregateOutputType | null
    _min: WorkflowTemplateMinAggregateOutputType | null
    _max: WorkflowTemplateMaxAggregateOutputType | null
  }

  export type WorkflowTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    version: string | null
    isActive: boolean | null
    createdBy: string | null
    createdDate: Date | null
    lastModified: Date | null
    tenantId: string | null
  }

  export type WorkflowTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    version: string | null
    isActive: boolean | null
    createdBy: string | null
    createdDate: Date | null
    lastModified: Date | null
    tenantId: string | null
  }

  export type WorkflowTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    version: number
    isActive: number
    steps: number
    triggers: number
    variables: number
    createdBy: number
    createdDate: number
    lastModified: number
    tenantId: number
    _all: number
  }


  export type WorkflowTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    version?: true
    isActive?: true
    createdBy?: true
    createdDate?: true
    lastModified?: true
    tenantId?: true
  }

  export type WorkflowTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    version?: true
    isActive?: true
    createdBy?: true
    createdDate?: true
    lastModified?: true
    tenantId?: true
  }

  export type WorkflowTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    version?: true
    isActive?: true
    steps?: true
    triggers?: true
    variables?: true
    createdBy?: true
    createdDate?: true
    lastModified?: true
    tenantId?: true
    _all?: true
  }

  export type WorkflowTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowTemplate to aggregate.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowTemplates
    **/
    _count?: true | WorkflowTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowTemplateMaxAggregateInputType
  }

  export type GetWorkflowTemplateAggregateType<T extends WorkflowTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowTemplate[P]>
      : GetScalarType<T[P], AggregateWorkflowTemplate[P]>
  }




  export type WorkflowTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowTemplateWhereInput
    orderBy?: WorkflowTemplateOrderByWithAggregationInput | WorkflowTemplateOrderByWithAggregationInput[]
    by: WorkflowTemplateScalarFieldEnum[] | WorkflowTemplateScalarFieldEnum
    having?: WorkflowTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowTemplateCountAggregateInputType | true
    _min?: WorkflowTemplateMinAggregateInputType
    _max?: WorkflowTemplateMaxAggregateInputType
  }

  export type WorkflowTemplateGroupByOutputType = {
    id: string
    name: string
    description: string
    category: string
    version: string
    isActive: boolean
    steps: JsonValue
    triggers: JsonValue
    variables: JsonValue
    createdBy: string
    createdDate: Date
    lastModified: Date
    tenantId: string
    _count: WorkflowTemplateCountAggregateOutputType | null
    _min: WorkflowTemplateMinAggregateOutputType | null
    _max: WorkflowTemplateMaxAggregateOutputType | null
  }

  type GetWorkflowTemplateGroupByPayload<T extends WorkflowTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowTemplateGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    version?: boolean
    isActive?: boolean
    steps?: boolean
    triggers?: boolean
    variables?: boolean
    createdBy?: boolean
    createdDate?: boolean
    lastModified?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    version?: boolean
    isActive?: boolean
    steps?: boolean
    triggers?: boolean
    variables?: boolean
    createdBy?: boolean
    createdDate?: boolean
    lastModified?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    version?: boolean
    isActive?: boolean
    steps?: boolean
    triggers?: boolean
    variables?: boolean
    createdBy?: boolean
    createdDate?: boolean
    lastModified?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    version?: boolean
    isActive?: boolean
    steps?: boolean
    triggers?: boolean
    variables?: boolean
    createdBy?: boolean
    createdDate?: boolean
    lastModified?: boolean
    tenantId?: boolean
  }

  export type WorkflowTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "category" | "version" | "isActive" | "steps" | "triggers" | "variables" | "createdBy" | "createdDate" | "lastModified" | "tenantId", ExtArgs["result"]["workflowTemplate"]>
  export type WorkflowTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type WorkflowTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type WorkflowTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $WorkflowTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowTemplate"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      category: string
      version: string
      isActive: boolean
      steps: Prisma.JsonValue
      triggers: Prisma.JsonValue
      variables: Prisma.JsonValue
      createdBy: string
      createdDate: Date
      lastModified: Date
      tenantId: string
    }, ExtArgs["result"]["workflowTemplate"]>
    composites: {}
  }

  type WorkflowTemplateGetPayload<S extends boolean | null | undefined | WorkflowTemplateDefaultArgs> = $Result.GetResult<Prisma.$WorkflowTemplatePayload, S>

  type WorkflowTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowTemplateCountAggregateInputType | true
    }

  export interface WorkflowTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowTemplate'], meta: { name: 'WorkflowTemplate' } }
    /**
     * Find zero or one WorkflowTemplate that matches the filter.
     * @param {WorkflowTemplateFindUniqueArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowTemplateFindUniqueArgs>(args: SelectSubset<T, WorkflowTemplateFindUniqueArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkflowTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowTemplateFindUniqueOrThrowArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindFirstArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowTemplateFindFirstArgs>(args?: SelectSubset<T, WorkflowTemplateFindFirstArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindFirstOrThrowArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkflowTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowTemplates
     * const workflowTemplates = await prisma.workflowTemplate.findMany()
     * 
     * // Get first 10 WorkflowTemplates
     * const workflowTemplates = await prisma.workflowTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowTemplateFindManyArgs>(args?: SelectSubset<T, WorkflowTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkflowTemplate.
     * @param {WorkflowTemplateCreateArgs} args - Arguments to create a WorkflowTemplate.
     * @example
     * // Create one WorkflowTemplate
     * const WorkflowTemplate = await prisma.workflowTemplate.create({
     *   data: {
     *     // ... data to create a WorkflowTemplate
     *   }
     * })
     * 
     */
    create<T extends WorkflowTemplateCreateArgs>(args: SelectSubset<T, WorkflowTemplateCreateArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkflowTemplates.
     * @param {WorkflowTemplateCreateManyArgs} args - Arguments to create many WorkflowTemplates.
     * @example
     * // Create many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowTemplateCreateManyArgs>(args?: SelectSubset<T, WorkflowTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowTemplates and returns the data saved in the database.
     * @param {WorkflowTemplateCreateManyAndReturnArgs} args - Arguments to create many WorkflowTemplates.
     * @example
     * // Create many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowTemplates and only return the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkflowTemplate.
     * @param {WorkflowTemplateDeleteArgs} args - Arguments to delete one WorkflowTemplate.
     * @example
     * // Delete one WorkflowTemplate
     * const WorkflowTemplate = await prisma.workflowTemplate.delete({
     *   where: {
     *     // ... filter to delete one WorkflowTemplate
     *   }
     * })
     * 
     */
    delete<T extends WorkflowTemplateDeleteArgs>(args: SelectSubset<T, WorkflowTemplateDeleteArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkflowTemplate.
     * @param {WorkflowTemplateUpdateArgs} args - Arguments to update one WorkflowTemplate.
     * @example
     * // Update one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowTemplateUpdateArgs>(args: SelectSubset<T, WorkflowTemplateUpdateArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkflowTemplates.
     * @param {WorkflowTemplateDeleteManyArgs} args - Arguments to filter WorkflowTemplates to delete.
     * @example
     * // Delete a few WorkflowTemplates
     * const { count } = await prisma.workflowTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowTemplateDeleteManyArgs>(args?: SelectSubset<T, WorkflowTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowTemplateUpdateManyArgs>(args: SelectSubset<T, WorkflowTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowTemplates and returns the data updated in the database.
     * @param {WorkflowTemplateUpdateManyAndReturnArgs} args - Arguments to update many WorkflowTemplates.
     * @example
     * // Update many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkflowTemplates and only return the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkflowTemplate.
     * @param {WorkflowTemplateUpsertArgs} args - Arguments to update or create a WorkflowTemplate.
     * @example
     * // Update or create a WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.upsert({
     *   create: {
     *     // ... data to create a WorkflowTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowTemplate we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowTemplateUpsertArgs>(args: SelectSubset<T, WorkflowTemplateUpsertArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkflowTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateCountArgs} args - Arguments to filter WorkflowTemplates to count.
     * @example
     * // Count the number of WorkflowTemplates
     * const count = await prisma.workflowTemplate.count({
     *   where: {
     *     // ... the filter for the WorkflowTemplates we want to count
     *   }
     * })
    **/
    count<T extends WorkflowTemplateCountArgs>(
      args?: Subset<T, WorkflowTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowTemplateAggregateArgs>(args: Subset<T, WorkflowTemplateAggregateArgs>): Prisma.PrismaPromise<GetWorkflowTemplateAggregateType<T>>

    /**
     * Group by WorkflowTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowTemplateGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowTemplate model
   */
  readonly fields: WorkflowTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowTemplate model
   */
  interface WorkflowTemplateFieldRefs {
    readonly id: FieldRef<"WorkflowTemplate", 'String'>
    readonly name: FieldRef<"WorkflowTemplate", 'String'>
    readonly description: FieldRef<"WorkflowTemplate", 'String'>
    readonly category: FieldRef<"WorkflowTemplate", 'String'>
    readonly version: FieldRef<"WorkflowTemplate", 'String'>
    readonly isActive: FieldRef<"WorkflowTemplate", 'Boolean'>
    readonly steps: FieldRef<"WorkflowTemplate", 'Json'>
    readonly triggers: FieldRef<"WorkflowTemplate", 'Json'>
    readonly variables: FieldRef<"WorkflowTemplate", 'Json'>
    readonly createdBy: FieldRef<"WorkflowTemplate", 'String'>
    readonly createdDate: FieldRef<"WorkflowTemplate", 'DateTime'>
    readonly lastModified: FieldRef<"WorkflowTemplate", 'DateTime'>
    readonly tenantId: FieldRef<"WorkflowTemplate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowTemplate findUnique
   */
  export type WorkflowTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate findUniqueOrThrow
   */
  export type WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate findFirst
   */
  export type WorkflowTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowTemplates.
     */
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate findFirstOrThrow
   */
  export type WorkflowTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowTemplates.
     */
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate findMany
   */
  export type WorkflowTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplates to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate create
   */
  export type WorkflowTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowTemplate.
     */
    data: XOR<WorkflowTemplateCreateInput, WorkflowTemplateUncheckedCreateInput>
  }

  /**
   * WorkflowTemplate createMany
   */
  export type WorkflowTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowTemplates.
     */
    data: WorkflowTemplateCreateManyInput | WorkflowTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowTemplate createManyAndReturn
   */
  export type WorkflowTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many WorkflowTemplates.
     */
    data: WorkflowTemplateCreateManyInput | WorkflowTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowTemplate update
   */
  export type WorkflowTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowTemplate.
     */
    data: XOR<WorkflowTemplateUpdateInput, WorkflowTemplateUncheckedUpdateInput>
    /**
     * Choose, which WorkflowTemplate to update.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate updateMany
   */
  export type WorkflowTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowTemplates.
     */
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowTemplates to update
     */
    where?: WorkflowTemplateWhereInput
    /**
     * Limit how many WorkflowTemplates to update.
     */
    limit?: number
  }

  /**
   * WorkflowTemplate updateManyAndReturn
   */
  export type WorkflowTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * The data used to update WorkflowTemplates.
     */
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowTemplates to update
     */
    where?: WorkflowTemplateWhereInput
    /**
     * Limit how many WorkflowTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowTemplate upsert
   */
  export type WorkflowTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowTemplate to update in case it exists.
     */
    where: WorkflowTemplateWhereUniqueInput
    /**
     * In case the WorkflowTemplate found by the `where` argument doesn't exist, create a new WorkflowTemplate with this data.
     */
    create: XOR<WorkflowTemplateCreateInput, WorkflowTemplateUncheckedCreateInput>
    /**
     * In case the WorkflowTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowTemplateUpdateInput, WorkflowTemplateUncheckedUpdateInput>
  }

  /**
   * WorkflowTemplate delete
   */
  export type WorkflowTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter which WorkflowTemplate to delete.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate deleteMany
   */
  export type WorkflowTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowTemplates to delete
     */
    where?: WorkflowTemplateWhereInput
    /**
     * Limit how many WorkflowTemplates to delete.
     */
    limit?: number
  }

  /**
   * WorkflowTemplate without action
   */
  export type WorkflowTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Training
   */

  export type AggregateTraining = {
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  export type TrainingAvgAggregateOutputType = {
    capacity: number | null
    cost: Decimal | null
  }

  export type TrainingSumAggregateOutputType = {
    capacity: number | null
    cost: Decimal | null
  }

  export type TrainingMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    capacity: number | null
    instructor: string | null
    venue: string | null
    certification: boolean | null
    cost: Decimal | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    capacity: number | null
    instructor: string | null
    venue: string | null
    certification: boolean | null
    cost: Decimal | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingCountAggregateOutputType = {
    id: number
    tenantId: number
    title: number
    description: number
    startDate: number
    endDate: number
    status: number
    capacity: number
    instructor: number
    venue: number
    requirements: number
    certification: number
    cost: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingAvgAggregateInputType = {
    capacity?: true
    cost?: true
  }

  export type TrainingSumAggregateInputType = {
    capacity?: true
    cost?: true
  }

  export type TrainingMinAggregateInputType = {
    id?: true
    tenantId?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    capacity?: true
    instructor?: true
    venue?: true
    certification?: true
    cost?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingMaxAggregateInputType = {
    id?: true
    tenantId?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    capacity?: true
    instructor?: true
    venue?: true
    certification?: true
    cost?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingCountAggregateInputType = {
    id?: true
    tenantId?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    status?: true
    capacity?: true
    instructor?: true
    venue?: true
    requirements?: true
    certification?: true
    cost?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Training to aggregate.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trainings
    **/
    _count?: true | TrainingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingMaxAggregateInputType
  }

  export type GetTrainingAggregateType<T extends TrainingAggregateArgs> = {
        [P in keyof T & keyof AggregateTraining]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTraining[P]>
      : GetScalarType<T[P], AggregateTraining[P]>
  }




  export type TrainingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingWhereInput
    orderBy?: TrainingOrderByWithAggregationInput | TrainingOrderByWithAggregationInput[]
    by: TrainingScalarFieldEnum[] | TrainingScalarFieldEnum
    having?: TrainingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingCountAggregateInputType | true
    _avg?: TrainingAvgAggregateInputType
    _sum?: TrainingSumAggregateInputType
    _min?: TrainingMinAggregateInputType
    _max?: TrainingMaxAggregateInputType
  }

  export type TrainingGroupByOutputType = {
    id: string
    tenantId: string
    title: string
    description: string | null
    startDate: Date
    endDate: Date
    status: string
    capacity: number | null
    instructor: string | null
    venue: string | null
    requirements: string[]
    certification: boolean
    cost: Decimal | null
    category: string | null
    createdAt: Date
    updatedAt: Date
    _count: TrainingCountAggregateOutputType | null
    _avg: TrainingAvgAggregateOutputType | null
    _sum: TrainingSumAggregateOutputType | null
    _min: TrainingMinAggregateOutputType | null
    _max: TrainingMaxAggregateOutputType | null
  }

  type GetTrainingGroupByPayload<T extends TrainingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingGroupByOutputType[P]>
        }
      >
    >


  export type TrainingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    capacity?: boolean
    instructor?: boolean
    venue?: boolean
    requirements?: boolean
    certification?: boolean
    cost?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    enrollments?: boolean | Training$enrollmentsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | TrainingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    capacity?: boolean
    instructor?: boolean
    venue?: boolean
    requirements?: boolean
    certification?: boolean
    cost?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    capacity?: boolean
    instructor?: boolean
    venue?: boolean
    requirements?: boolean
    certification?: boolean
    cost?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["training"]>

  export type TrainingSelectScalar = {
    id?: boolean
    tenantId?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    capacity?: boolean
    instructor?: boolean
    venue?: boolean
    requirements?: boolean
    certification?: boolean
    cost?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TrainingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "title" | "description" | "startDate" | "endDate" | "status" | "capacity" | "instructor" | "venue" | "requirements" | "certification" | "cost" | "category" | "createdAt" | "updatedAt", ExtArgs["result"]["training"]>
  export type TrainingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | Training$enrollmentsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | TrainingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrainingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TrainingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TrainingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Training"
    objects: {
      enrollments: Prisma.$TrainingEnrollmentPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      title: string
      description: string | null
      startDate: Date
      endDate: Date
      status: string
      capacity: number | null
      instructor: string | null
      venue: string | null
      requirements: string[]
      certification: boolean
      cost: Prisma.Decimal | null
      category: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["training"]>
    composites: {}
  }

  type TrainingGetPayload<S extends boolean | null | undefined | TrainingDefaultArgs> = $Result.GetResult<Prisma.$TrainingPayload, S>

  type TrainingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrainingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrainingCountAggregateInputType | true
    }

  export interface TrainingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Training'], meta: { name: 'Training' } }
    /**
     * Find zero or one Training that matches the filter.
     * @param {TrainingFindUniqueArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrainingFindUniqueArgs>(args: SelectSubset<T, TrainingFindUniqueArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Training that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrainingFindUniqueOrThrowArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrainingFindUniqueOrThrowArgs>(args: SelectSubset<T, TrainingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Training that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrainingFindFirstArgs>(args?: SelectSubset<T, TrainingFindFirstArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Training that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindFirstOrThrowArgs} args - Arguments to find a Training
     * @example
     * // Get one Training
     * const training = await prisma.training.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrainingFindFirstOrThrowArgs>(args?: SelectSubset<T, TrainingFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trainings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trainings
     * const trainings = await prisma.training.findMany()
     * 
     * // Get first 10 Trainings
     * const trainings = await prisma.training.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingWithIdOnly = await prisma.training.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrainingFindManyArgs>(args?: SelectSubset<T, TrainingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Training.
     * @param {TrainingCreateArgs} args - Arguments to create a Training.
     * @example
     * // Create one Training
     * const Training = await prisma.training.create({
     *   data: {
     *     // ... data to create a Training
     *   }
     * })
     * 
     */
    create<T extends TrainingCreateArgs>(args: SelectSubset<T, TrainingCreateArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trainings.
     * @param {TrainingCreateManyArgs} args - Arguments to create many Trainings.
     * @example
     * // Create many Trainings
     * const training = await prisma.training.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrainingCreateManyArgs>(args?: SelectSubset<T, TrainingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trainings and returns the data saved in the database.
     * @param {TrainingCreateManyAndReturnArgs} args - Arguments to create many Trainings.
     * @example
     * // Create many Trainings
     * const training = await prisma.training.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trainings and only return the `id`
     * const trainingWithIdOnly = await prisma.training.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrainingCreateManyAndReturnArgs>(args?: SelectSubset<T, TrainingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Training.
     * @param {TrainingDeleteArgs} args - Arguments to delete one Training.
     * @example
     * // Delete one Training
     * const Training = await prisma.training.delete({
     *   where: {
     *     // ... filter to delete one Training
     *   }
     * })
     * 
     */
    delete<T extends TrainingDeleteArgs>(args: SelectSubset<T, TrainingDeleteArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Training.
     * @param {TrainingUpdateArgs} args - Arguments to update one Training.
     * @example
     * // Update one Training
     * const training = await prisma.training.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrainingUpdateArgs>(args: SelectSubset<T, TrainingUpdateArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trainings.
     * @param {TrainingDeleteManyArgs} args - Arguments to filter Trainings to delete.
     * @example
     * // Delete a few Trainings
     * const { count } = await prisma.training.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrainingDeleteManyArgs>(args?: SelectSubset<T, TrainingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trainings
     * const training = await prisma.training.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrainingUpdateManyArgs>(args: SelectSubset<T, TrainingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trainings and returns the data updated in the database.
     * @param {TrainingUpdateManyAndReturnArgs} args - Arguments to update many Trainings.
     * @example
     * // Update many Trainings
     * const training = await prisma.training.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Trainings and only return the `id`
     * const trainingWithIdOnly = await prisma.training.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrainingUpdateManyAndReturnArgs>(args: SelectSubset<T, TrainingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Training.
     * @param {TrainingUpsertArgs} args - Arguments to update or create a Training.
     * @example
     * // Update or create a Training
     * const training = await prisma.training.upsert({
     *   create: {
     *     // ... data to create a Training
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Training we want to update
     *   }
     * })
     */
    upsert<T extends TrainingUpsertArgs>(args: SelectSubset<T, TrainingUpsertArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trainings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingCountArgs} args - Arguments to filter Trainings to count.
     * @example
     * // Count the number of Trainings
     * const count = await prisma.training.count({
     *   where: {
     *     // ... the filter for the Trainings we want to count
     *   }
     * })
    **/
    count<T extends TrainingCountArgs>(
      args?: Subset<T, TrainingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingAggregateArgs>(args: Subset<T, TrainingAggregateArgs>): Prisma.PrismaPromise<GetTrainingAggregateType<T>>

    /**
     * Group by Training.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingGroupByArgs['orderBy'] }
        : { orderBy?: TrainingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Training model
   */
  readonly fields: TrainingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Training.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollments<T extends Training$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Training$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Training model
   */
  interface TrainingFieldRefs {
    readonly id: FieldRef<"Training", 'String'>
    readonly tenantId: FieldRef<"Training", 'String'>
    readonly title: FieldRef<"Training", 'String'>
    readonly description: FieldRef<"Training", 'String'>
    readonly startDate: FieldRef<"Training", 'DateTime'>
    readonly endDate: FieldRef<"Training", 'DateTime'>
    readonly status: FieldRef<"Training", 'String'>
    readonly capacity: FieldRef<"Training", 'Int'>
    readonly instructor: FieldRef<"Training", 'String'>
    readonly venue: FieldRef<"Training", 'String'>
    readonly requirements: FieldRef<"Training", 'String[]'>
    readonly certification: FieldRef<"Training", 'Boolean'>
    readonly cost: FieldRef<"Training", 'Decimal'>
    readonly category: FieldRef<"Training", 'String'>
    readonly createdAt: FieldRef<"Training", 'DateTime'>
    readonly updatedAt: FieldRef<"Training", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Training findUnique
   */
  export type TrainingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training findUniqueOrThrow
   */
  export type TrainingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training findFirst
   */
  export type TrainingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     */
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training findFirstOrThrow
   */
  export type TrainingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Training to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trainings.
     */
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training findMany
   */
  export type TrainingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter, which Trainings to fetch.
     */
    where?: TrainingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trainings to fetch.
     */
    orderBy?: TrainingOrderByWithRelationInput | TrainingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trainings.
     */
    cursor?: TrainingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trainings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trainings.
     */
    skip?: number
    distinct?: TrainingScalarFieldEnum | TrainingScalarFieldEnum[]
  }

  /**
   * Training create
   */
  export type TrainingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The data needed to create a Training.
     */
    data: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
  }

  /**
   * Training createMany
   */
  export type TrainingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trainings.
     */
    data: TrainingCreateManyInput | TrainingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Training createManyAndReturn
   */
  export type TrainingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * The data used to create many Trainings.
     */
    data: TrainingCreateManyInput | TrainingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Training update
   */
  export type TrainingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The data needed to update a Training.
     */
    data: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
    /**
     * Choose, which Training to update.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training updateMany
   */
  export type TrainingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trainings.
     */
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyInput>
    /**
     * Filter which Trainings to update
     */
    where?: TrainingWhereInput
    /**
     * Limit how many Trainings to update.
     */
    limit?: number
  }

  /**
   * Training updateManyAndReturn
   */
  export type TrainingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * The data used to update Trainings.
     */
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyInput>
    /**
     * Filter which Trainings to update
     */
    where?: TrainingWhereInput
    /**
     * Limit how many Trainings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Training upsert
   */
  export type TrainingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * The filter to search for the Training to update in case it exists.
     */
    where: TrainingWhereUniqueInput
    /**
     * In case the Training found by the `where` argument doesn't exist, create a new Training with this data.
     */
    create: XOR<TrainingCreateInput, TrainingUncheckedCreateInput>
    /**
     * In case the Training was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingUpdateInput, TrainingUncheckedUpdateInput>
  }

  /**
   * Training delete
   */
  export type TrainingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
    /**
     * Filter which Training to delete.
     */
    where: TrainingWhereUniqueInput
  }

  /**
   * Training deleteMany
   */
  export type TrainingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trainings to delete
     */
    where?: TrainingWhereInput
    /**
     * Limit how many Trainings to delete.
     */
    limit?: number
  }

  /**
   * Training.enrollments
   */
  export type Training$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    where?: TrainingEnrollmentWhereInput
    orderBy?: TrainingEnrollmentOrderByWithRelationInput | TrainingEnrollmentOrderByWithRelationInput[]
    cursor?: TrainingEnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingEnrollmentScalarFieldEnum | TrainingEnrollmentScalarFieldEnum[]
  }

  /**
   * Training without action
   */
  export type TrainingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Training
     */
    select?: TrainingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Training
     */
    omit?: TrainingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingInclude<ExtArgs> | null
  }


  /**
   * Model TrainingEnrollment
   */

  export type AggregateTrainingEnrollment = {
    _count: TrainingEnrollmentCountAggregateOutputType | null
    _avg: TrainingEnrollmentAvgAggregateOutputType | null
    _sum: TrainingEnrollmentSumAggregateOutputType | null
    _min: TrainingEnrollmentMinAggregateOutputType | null
    _max: TrainingEnrollmentMaxAggregateOutputType | null
  }

  export type TrainingEnrollmentAvgAggregateOutputType = {
    progress: number | null
    score: number | null
  }

  export type TrainingEnrollmentSumAggregateOutputType = {
    progress: number | null
    score: number | null
  }

  export type TrainingEnrollmentMinAggregateOutputType = {
    id: string | null
    trainingId: string | null
    employeeId: string | null
    enrollmentDate: Date | null
    completionDate: Date | null
    status: string | null
    progress: number | null
    score: number | null
    certificateIssued: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingEnrollmentMaxAggregateOutputType = {
    id: string | null
    trainingId: string | null
    employeeId: string | null
    enrollmentDate: Date | null
    completionDate: Date | null
    status: string | null
    progress: number | null
    score: number | null
    certificateIssued: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrainingEnrollmentCountAggregateOutputType = {
    id: number
    trainingId: number
    employeeId: number
    enrollmentDate: number
    completionDate: number
    status: number
    progress: number
    score: number
    certificateIssued: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrainingEnrollmentAvgAggregateInputType = {
    progress?: true
    score?: true
  }

  export type TrainingEnrollmentSumAggregateInputType = {
    progress?: true
    score?: true
  }

  export type TrainingEnrollmentMinAggregateInputType = {
    id?: true
    trainingId?: true
    employeeId?: true
    enrollmentDate?: true
    completionDate?: true
    status?: true
    progress?: true
    score?: true
    certificateIssued?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingEnrollmentMaxAggregateInputType = {
    id?: true
    trainingId?: true
    employeeId?: true
    enrollmentDate?: true
    completionDate?: true
    status?: true
    progress?: true
    score?: true
    certificateIssued?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrainingEnrollmentCountAggregateInputType = {
    id?: true
    trainingId?: true
    employeeId?: true
    enrollmentDate?: true
    completionDate?: true
    status?: true
    progress?: true
    score?: true
    certificateIssued?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrainingEnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingEnrollment to aggregate.
     */
    where?: TrainingEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingEnrollments to fetch.
     */
    orderBy?: TrainingEnrollmentOrderByWithRelationInput | TrainingEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingEnrollments
    **/
    _count?: true | TrainingEnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingEnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingEnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingEnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingEnrollmentMaxAggregateInputType
  }

  export type GetTrainingEnrollmentAggregateType<T extends TrainingEnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingEnrollment[P]>
      : GetScalarType<T[P], AggregateTrainingEnrollment[P]>
  }




  export type TrainingEnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrainingEnrollmentWhereInput
    orderBy?: TrainingEnrollmentOrderByWithAggregationInput | TrainingEnrollmentOrderByWithAggregationInput[]
    by: TrainingEnrollmentScalarFieldEnum[] | TrainingEnrollmentScalarFieldEnum
    having?: TrainingEnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingEnrollmentCountAggregateInputType | true
    _avg?: TrainingEnrollmentAvgAggregateInputType
    _sum?: TrainingEnrollmentSumAggregateInputType
    _min?: TrainingEnrollmentMinAggregateInputType
    _max?: TrainingEnrollmentMaxAggregateInputType
  }

  export type TrainingEnrollmentGroupByOutputType = {
    id: string
    trainingId: string
    employeeId: string
    enrollmentDate: Date
    completionDate: Date | null
    status: string
    progress: number
    score: number | null
    certificateIssued: boolean
    createdAt: Date
    updatedAt: Date
    _count: TrainingEnrollmentCountAggregateOutputType | null
    _avg: TrainingEnrollmentAvgAggregateOutputType | null
    _sum: TrainingEnrollmentSumAggregateOutputType | null
    _min: TrainingEnrollmentMinAggregateOutputType | null
    _max: TrainingEnrollmentMaxAggregateOutputType | null
  }

  type GetTrainingEnrollmentGroupByPayload<T extends TrainingEnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingEnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingEnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingEnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingEnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type TrainingEnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trainingId?: boolean
    employeeId?: boolean
    enrollmentDate?: boolean
    completionDate?: boolean
    status?: boolean
    progress?: boolean
    score?: boolean
    certificateIssued?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingEnrollment"]>

  export type TrainingEnrollmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trainingId?: boolean
    employeeId?: boolean
    enrollmentDate?: boolean
    completionDate?: boolean
    status?: boolean
    progress?: boolean
    score?: boolean
    certificateIssued?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingEnrollment"]>

  export type TrainingEnrollmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trainingId?: boolean
    employeeId?: boolean
    enrollmentDate?: boolean
    completionDate?: boolean
    status?: boolean
    progress?: boolean
    score?: boolean
    certificateIssued?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingEnrollment"]>

  export type TrainingEnrollmentSelectScalar = {
    id?: boolean
    trainingId?: boolean
    employeeId?: boolean
    enrollmentDate?: boolean
    completionDate?: boolean
    status?: boolean
    progress?: boolean
    score?: boolean
    certificateIssued?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TrainingEnrollmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "trainingId" | "employeeId" | "enrollmentDate" | "completionDate" | "status" | "progress" | "score" | "certificateIssued" | "createdAt" | "updatedAt", ExtArgs["result"]["trainingEnrollment"]>
  export type TrainingEnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }
  export type TrainingEnrollmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }
  export type TrainingEnrollmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    training?: boolean | TrainingDefaultArgs<ExtArgs>
  }

  export type $TrainingEnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrainingEnrollment"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      training: Prisma.$TrainingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      trainingId: string
      employeeId: string
      enrollmentDate: Date
      completionDate: Date | null
      status: string
      progress: number
      score: number | null
      certificateIssued: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["trainingEnrollment"]>
    composites: {}
  }

  type TrainingEnrollmentGetPayload<S extends boolean | null | undefined | TrainingEnrollmentDefaultArgs> = $Result.GetResult<Prisma.$TrainingEnrollmentPayload, S>

  type TrainingEnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrainingEnrollmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrainingEnrollmentCountAggregateInputType | true
    }

  export interface TrainingEnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrainingEnrollment'], meta: { name: 'TrainingEnrollment' } }
    /**
     * Find zero or one TrainingEnrollment that matches the filter.
     * @param {TrainingEnrollmentFindUniqueArgs} args - Arguments to find a TrainingEnrollment
     * @example
     * // Get one TrainingEnrollment
     * const trainingEnrollment = await prisma.trainingEnrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrainingEnrollmentFindUniqueArgs>(args: SelectSubset<T, TrainingEnrollmentFindUniqueArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrainingEnrollment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrainingEnrollmentFindUniqueOrThrowArgs} args - Arguments to find a TrainingEnrollment
     * @example
     * // Get one TrainingEnrollment
     * const trainingEnrollment = await prisma.trainingEnrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrainingEnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TrainingEnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrainingEnrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingEnrollmentFindFirstArgs} args - Arguments to find a TrainingEnrollment
     * @example
     * // Get one TrainingEnrollment
     * const trainingEnrollment = await prisma.trainingEnrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrainingEnrollmentFindFirstArgs>(args?: SelectSubset<T, TrainingEnrollmentFindFirstArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrainingEnrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingEnrollmentFindFirstOrThrowArgs} args - Arguments to find a TrainingEnrollment
     * @example
     * // Get one TrainingEnrollment
     * const trainingEnrollment = await prisma.trainingEnrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrainingEnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TrainingEnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrainingEnrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingEnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingEnrollments
     * const trainingEnrollments = await prisma.trainingEnrollment.findMany()
     * 
     * // Get first 10 TrainingEnrollments
     * const trainingEnrollments = await prisma.trainingEnrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingEnrollmentWithIdOnly = await prisma.trainingEnrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrainingEnrollmentFindManyArgs>(args?: SelectSubset<T, TrainingEnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrainingEnrollment.
     * @param {TrainingEnrollmentCreateArgs} args - Arguments to create a TrainingEnrollment.
     * @example
     * // Create one TrainingEnrollment
     * const TrainingEnrollment = await prisma.trainingEnrollment.create({
     *   data: {
     *     // ... data to create a TrainingEnrollment
     *   }
     * })
     * 
     */
    create<T extends TrainingEnrollmentCreateArgs>(args: SelectSubset<T, TrainingEnrollmentCreateArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrainingEnrollments.
     * @param {TrainingEnrollmentCreateManyArgs} args - Arguments to create many TrainingEnrollments.
     * @example
     * // Create many TrainingEnrollments
     * const trainingEnrollment = await prisma.trainingEnrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrainingEnrollmentCreateManyArgs>(args?: SelectSubset<T, TrainingEnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrainingEnrollments and returns the data saved in the database.
     * @param {TrainingEnrollmentCreateManyAndReturnArgs} args - Arguments to create many TrainingEnrollments.
     * @example
     * // Create many TrainingEnrollments
     * const trainingEnrollment = await prisma.trainingEnrollment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrainingEnrollments and only return the `id`
     * const trainingEnrollmentWithIdOnly = await prisma.trainingEnrollment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrainingEnrollmentCreateManyAndReturnArgs>(args?: SelectSubset<T, TrainingEnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrainingEnrollment.
     * @param {TrainingEnrollmentDeleteArgs} args - Arguments to delete one TrainingEnrollment.
     * @example
     * // Delete one TrainingEnrollment
     * const TrainingEnrollment = await prisma.trainingEnrollment.delete({
     *   where: {
     *     // ... filter to delete one TrainingEnrollment
     *   }
     * })
     * 
     */
    delete<T extends TrainingEnrollmentDeleteArgs>(args: SelectSubset<T, TrainingEnrollmentDeleteArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrainingEnrollment.
     * @param {TrainingEnrollmentUpdateArgs} args - Arguments to update one TrainingEnrollment.
     * @example
     * // Update one TrainingEnrollment
     * const trainingEnrollment = await prisma.trainingEnrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrainingEnrollmentUpdateArgs>(args: SelectSubset<T, TrainingEnrollmentUpdateArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrainingEnrollments.
     * @param {TrainingEnrollmentDeleteManyArgs} args - Arguments to filter TrainingEnrollments to delete.
     * @example
     * // Delete a few TrainingEnrollments
     * const { count } = await prisma.trainingEnrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrainingEnrollmentDeleteManyArgs>(args?: SelectSubset<T, TrainingEnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingEnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingEnrollments
     * const trainingEnrollment = await prisma.trainingEnrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrainingEnrollmentUpdateManyArgs>(args: SelectSubset<T, TrainingEnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingEnrollments and returns the data updated in the database.
     * @param {TrainingEnrollmentUpdateManyAndReturnArgs} args - Arguments to update many TrainingEnrollments.
     * @example
     * // Update many TrainingEnrollments
     * const trainingEnrollment = await prisma.trainingEnrollment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrainingEnrollments and only return the `id`
     * const trainingEnrollmentWithIdOnly = await prisma.trainingEnrollment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrainingEnrollmentUpdateManyAndReturnArgs>(args: SelectSubset<T, TrainingEnrollmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrainingEnrollment.
     * @param {TrainingEnrollmentUpsertArgs} args - Arguments to update or create a TrainingEnrollment.
     * @example
     * // Update or create a TrainingEnrollment
     * const trainingEnrollment = await prisma.trainingEnrollment.upsert({
     *   create: {
     *     // ... data to create a TrainingEnrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingEnrollment we want to update
     *   }
     * })
     */
    upsert<T extends TrainingEnrollmentUpsertArgs>(args: SelectSubset<T, TrainingEnrollmentUpsertArgs<ExtArgs>>): Prisma__TrainingEnrollmentClient<$Result.GetResult<Prisma.$TrainingEnrollmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrainingEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingEnrollmentCountArgs} args - Arguments to filter TrainingEnrollments to count.
     * @example
     * // Count the number of TrainingEnrollments
     * const count = await prisma.trainingEnrollment.count({
     *   where: {
     *     // ... the filter for the TrainingEnrollments we want to count
     *   }
     * })
    **/
    count<T extends TrainingEnrollmentCountArgs>(
      args?: Subset<T, TrainingEnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingEnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingEnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingEnrollmentAggregateArgs>(args: Subset<T, TrainingEnrollmentAggregateArgs>): Prisma.PrismaPromise<GetTrainingEnrollmentAggregateType<T>>

    /**
     * Group by TrainingEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingEnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingEnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingEnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: TrainingEnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingEnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrainingEnrollment model
   */
  readonly fields: TrainingEnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingEnrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingEnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    training<T extends TrainingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrainingDefaultArgs<ExtArgs>>): Prisma__TrainingClient<$Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrainingEnrollment model
   */
  interface TrainingEnrollmentFieldRefs {
    readonly id: FieldRef<"TrainingEnrollment", 'String'>
    readonly trainingId: FieldRef<"TrainingEnrollment", 'String'>
    readonly employeeId: FieldRef<"TrainingEnrollment", 'String'>
    readonly enrollmentDate: FieldRef<"TrainingEnrollment", 'DateTime'>
    readonly completionDate: FieldRef<"TrainingEnrollment", 'DateTime'>
    readonly status: FieldRef<"TrainingEnrollment", 'String'>
    readonly progress: FieldRef<"TrainingEnrollment", 'Int'>
    readonly score: FieldRef<"TrainingEnrollment", 'Int'>
    readonly certificateIssued: FieldRef<"TrainingEnrollment", 'Boolean'>
    readonly createdAt: FieldRef<"TrainingEnrollment", 'DateTime'>
    readonly updatedAt: FieldRef<"TrainingEnrollment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrainingEnrollment findUnique
   */
  export type TrainingEnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which TrainingEnrollment to fetch.
     */
    where: TrainingEnrollmentWhereUniqueInput
  }

  /**
   * TrainingEnrollment findUniqueOrThrow
   */
  export type TrainingEnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which TrainingEnrollment to fetch.
     */
    where: TrainingEnrollmentWhereUniqueInput
  }

  /**
   * TrainingEnrollment findFirst
   */
  export type TrainingEnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which TrainingEnrollment to fetch.
     */
    where?: TrainingEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingEnrollments to fetch.
     */
    orderBy?: TrainingEnrollmentOrderByWithRelationInput | TrainingEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingEnrollments.
     */
    cursor?: TrainingEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingEnrollments.
     */
    distinct?: TrainingEnrollmentScalarFieldEnum | TrainingEnrollmentScalarFieldEnum[]
  }

  /**
   * TrainingEnrollment findFirstOrThrow
   */
  export type TrainingEnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which TrainingEnrollment to fetch.
     */
    where?: TrainingEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingEnrollments to fetch.
     */
    orderBy?: TrainingEnrollmentOrderByWithRelationInput | TrainingEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingEnrollments.
     */
    cursor?: TrainingEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingEnrollments.
     */
    distinct?: TrainingEnrollmentScalarFieldEnum | TrainingEnrollmentScalarFieldEnum[]
  }

  /**
   * TrainingEnrollment findMany
   */
  export type TrainingEnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which TrainingEnrollments to fetch.
     */
    where?: TrainingEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingEnrollments to fetch.
     */
    orderBy?: TrainingEnrollmentOrderByWithRelationInput | TrainingEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingEnrollments.
     */
    cursor?: TrainingEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingEnrollments.
     */
    skip?: number
    distinct?: TrainingEnrollmentScalarFieldEnum | TrainingEnrollmentScalarFieldEnum[]
  }

  /**
   * TrainingEnrollment create
   */
  export type TrainingEnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a TrainingEnrollment.
     */
    data: XOR<TrainingEnrollmentCreateInput, TrainingEnrollmentUncheckedCreateInput>
  }

  /**
   * TrainingEnrollment createMany
   */
  export type TrainingEnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrainingEnrollments.
     */
    data: TrainingEnrollmentCreateManyInput | TrainingEnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrainingEnrollment createManyAndReturn
   */
  export type TrainingEnrollmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * The data used to create many TrainingEnrollments.
     */
    data: TrainingEnrollmentCreateManyInput | TrainingEnrollmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrainingEnrollment update
   */
  export type TrainingEnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a TrainingEnrollment.
     */
    data: XOR<TrainingEnrollmentUpdateInput, TrainingEnrollmentUncheckedUpdateInput>
    /**
     * Choose, which TrainingEnrollment to update.
     */
    where: TrainingEnrollmentWhereUniqueInput
  }

  /**
   * TrainingEnrollment updateMany
   */
  export type TrainingEnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrainingEnrollments.
     */
    data: XOR<TrainingEnrollmentUpdateManyMutationInput, TrainingEnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which TrainingEnrollments to update
     */
    where?: TrainingEnrollmentWhereInput
    /**
     * Limit how many TrainingEnrollments to update.
     */
    limit?: number
  }

  /**
   * TrainingEnrollment updateManyAndReturn
   */
  export type TrainingEnrollmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * The data used to update TrainingEnrollments.
     */
    data: XOR<TrainingEnrollmentUpdateManyMutationInput, TrainingEnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which TrainingEnrollments to update
     */
    where?: TrainingEnrollmentWhereInput
    /**
     * Limit how many TrainingEnrollments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrainingEnrollment upsert
   */
  export type TrainingEnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the TrainingEnrollment to update in case it exists.
     */
    where: TrainingEnrollmentWhereUniqueInput
    /**
     * In case the TrainingEnrollment found by the `where` argument doesn't exist, create a new TrainingEnrollment with this data.
     */
    create: XOR<TrainingEnrollmentCreateInput, TrainingEnrollmentUncheckedCreateInput>
    /**
     * In case the TrainingEnrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingEnrollmentUpdateInput, TrainingEnrollmentUncheckedUpdateInput>
  }

  /**
   * TrainingEnrollment delete
   */
  export type TrainingEnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
    /**
     * Filter which TrainingEnrollment to delete.
     */
    where: TrainingEnrollmentWhereUniqueInput
  }

  /**
   * TrainingEnrollment deleteMany
   */
  export type TrainingEnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingEnrollments to delete
     */
    where?: TrainingEnrollmentWhereInput
    /**
     * Limit how many TrainingEnrollments to delete.
     */
    limit?: number
  }

  /**
   * TrainingEnrollment without action
   */
  export type TrainingEnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingEnrollment
     */
    select?: TrainingEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrainingEnrollment
     */
    omit?: TrainingEnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrainingEnrollmentInclude<ExtArgs> | null
  }


  /**
   * Model Integration
   */

  export type AggregateIntegration = {
    _count: IntegrationCountAggregateOutputType | null
    _avg: IntegrationAvgAggregateOutputType | null
    _sum: IntegrationSumAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  export type IntegrationAvgAggregateOutputType = {
    successRate: number | null
  }

  export type IntegrationSumAggregateOutputType = {
    successRate: number | null
  }

  export type IntegrationMinAggregateOutputType = {
    id: string | null
    name: string | null
    tenantId: string | null
    createdAt: Date | null
    lastSyncTime: Date | null
    status: string | null
    successRate: number | null
    type: string | null
    updatedAt: Date | null
  }

  export type IntegrationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    tenantId: string | null
    createdAt: Date | null
    lastSyncTime: Date | null
    status: string | null
    successRate: number | null
    type: string | null
    updatedAt: Date | null
  }

  export type IntegrationCountAggregateOutputType = {
    id: number
    name: number
    tenantId: number
    config: number
    createdAt: number
    lastSyncTime: number
    status: number
    successRate: number
    type: number
    updatedAt: number
    _all: number
  }


  export type IntegrationAvgAggregateInputType = {
    successRate?: true
  }

  export type IntegrationSumAggregateInputType = {
    successRate?: true
  }

  export type IntegrationMinAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
    createdAt?: true
    lastSyncTime?: true
    status?: true
    successRate?: true
    type?: true
    updatedAt?: true
  }

  export type IntegrationMaxAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
    createdAt?: true
    lastSyncTime?: true
    status?: true
    successRate?: true
    type?: true
    updatedAt?: true
  }

  export type IntegrationCountAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
    config?: true
    createdAt?: true
    lastSyncTime?: true
    status?: true
    successRate?: true
    type?: true
    updatedAt?: true
    _all?: true
  }

  export type IntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Integration to aggregate.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Integrations
    **/
    _count?: true | IntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IntegrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IntegrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationMaxAggregateInputType
  }

  export type GetIntegrationAggregateType<T extends IntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegration[P]>
      : GetScalarType<T[P], AggregateIntegration[P]>
  }




  export type IntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationWhereInput
    orderBy?: IntegrationOrderByWithAggregationInput | IntegrationOrderByWithAggregationInput[]
    by: IntegrationScalarFieldEnum[] | IntegrationScalarFieldEnum
    having?: IntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationCountAggregateInputType | true
    _avg?: IntegrationAvgAggregateInputType
    _sum?: IntegrationSumAggregateInputType
    _min?: IntegrationMinAggregateInputType
    _max?: IntegrationMaxAggregateInputType
  }

  export type IntegrationGroupByOutputType = {
    id: string
    name: string
    tenantId: string
    config: JsonValue | null
    createdAt: Date
    lastSyncTime: Date | null
    status: string
    successRate: number
    type: string
    updatedAt: Date
    _count: IntegrationCountAggregateOutputType | null
    _avg: IntegrationAvgAggregateOutputType | null
    _sum: IntegrationSumAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  type GetIntegrationGroupByPayload<T extends IntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    lastSyncTime?: boolean
    status?: boolean
    successRate?: boolean
    type?: boolean
    updatedAt?: boolean
    integrationLogs?: boolean | Integration$integrationLogsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | IntegrationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    lastSyncTime?: boolean
    status?: boolean
    successRate?: boolean
    type?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    lastSyncTime?: boolean
    status?: boolean
    successRate?: boolean
    type?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectScalar = {
    id?: boolean
    name?: boolean
    tenantId?: boolean
    config?: boolean
    createdAt?: boolean
    lastSyncTime?: boolean
    status?: boolean
    successRate?: boolean
    type?: boolean
    updatedAt?: boolean
  }

  export type IntegrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "tenantId" | "config" | "createdAt" | "lastSyncTime" | "status" | "successRate" | "type" | "updatedAt", ExtArgs["result"]["integration"]>
  export type IntegrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrationLogs?: boolean | Integration$integrationLogsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | IntegrationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IntegrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type IntegrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $IntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Integration"
    objects: {
      integrationLogs: Prisma.$IntegrationLogPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      tenantId: string
      config: Prisma.JsonValue | null
      createdAt: Date
      lastSyncTime: Date | null
      status: string
      successRate: number
      type: string
      updatedAt: Date
    }, ExtArgs["result"]["integration"]>
    composites: {}
  }

  type IntegrationGetPayload<S extends boolean | null | undefined | IntegrationDefaultArgs> = $Result.GetResult<Prisma.$IntegrationPayload, S>

  type IntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IntegrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IntegrationCountAggregateInputType | true
    }

  export interface IntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Integration'], meta: { name: 'Integration' } }
    /**
     * Find zero or one Integration that matches the filter.
     * @param {IntegrationFindUniqueArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationFindUniqueArgs>(args: SelectSubset<T, IntegrationFindUniqueArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Integration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IntegrationFindUniqueOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Integration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationFindFirstArgs>(args?: SelectSubset<T, IntegrationFindFirstArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Integration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Integrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Integrations
     * const integrations = await prisma.integration.findMany()
     * 
     * // Get first 10 Integrations
     * const integrations = await prisma.integration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationWithIdOnly = await prisma.integration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationFindManyArgs>(args?: SelectSubset<T, IntegrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Integration.
     * @param {IntegrationCreateArgs} args - Arguments to create a Integration.
     * @example
     * // Create one Integration
     * const Integration = await prisma.integration.create({
     *   data: {
     *     // ... data to create a Integration
     *   }
     * })
     * 
     */
    create<T extends IntegrationCreateArgs>(args: SelectSubset<T, IntegrationCreateArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Integrations.
     * @param {IntegrationCreateManyArgs} args - Arguments to create many Integrations.
     * @example
     * // Create many Integrations
     * const integration = await prisma.integration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationCreateManyArgs>(args?: SelectSubset<T, IntegrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Integrations and returns the data saved in the database.
     * @param {IntegrationCreateManyAndReturnArgs} args - Arguments to create many Integrations.
     * @example
     * // Create many Integrations
     * const integration = await prisma.integration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Integrations and only return the `id`
     * const integrationWithIdOnly = await prisma.integration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Integration.
     * @param {IntegrationDeleteArgs} args - Arguments to delete one Integration.
     * @example
     * // Delete one Integration
     * const Integration = await prisma.integration.delete({
     *   where: {
     *     // ... filter to delete one Integration
     *   }
     * })
     * 
     */
    delete<T extends IntegrationDeleteArgs>(args: SelectSubset<T, IntegrationDeleteArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Integration.
     * @param {IntegrationUpdateArgs} args - Arguments to update one Integration.
     * @example
     * // Update one Integration
     * const integration = await prisma.integration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationUpdateArgs>(args: SelectSubset<T, IntegrationUpdateArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Integrations.
     * @param {IntegrationDeleteManyArgs} args - Arguments to filter Integrations to delete.
     * @example
     * // Delete a few Integrations
     * const { count } = await prisma.integration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationDeleteManyArgs>(args?: SelectSubset<T, IntegrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Integrations
     * const integration = await prisma.integration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationUpdateManyArgs>(args: SelectSubset<T, IntegrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrations and returns the data updated in the database.
     * @param {IntegrationUpdateManyAndReturnArgs} args - Arguments to update many Integrations.
     * @example
     * // Update many Integrations
     * const integration = await prisma.integration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Integrations and only return the `id`
     * const integrationWithIdOnly = await prisma.integration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IntegrationUpdateManyAndReturnArgs>(args: SelectSubset<T, IntegrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Integration.
     * @param {IntegrationUpsertArgs} args - Arguments to update or create a Integration.
     * @example
     * // Update or create a Integration
     * const integration = await prisma.integration.upsert({
     *   create: {
     *     // ... data to create a Integration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Integration we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationUpsertArgs>(args: SelectSubset<T, IntegrationUpsertArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationCountArgs} args - Arguments to filter Integrations to count.
     * @example
     * // Count the number of Integrations
     * const count = await prisma.integration.count({
     *   where: {
     *     // ... the filter for the Integrations we want to count
     *   }
     * })
    **/
    count<T extends IntegrationCountArgs>(
      args?: Subset<T, IntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationAggregateArgs>(args: Subset<T, IntegrationAggregateArgs>): Prisma.PrismaPromise<GetIntegrationAggregateType<T>>

    /**
     * Group by Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Integration model
   */
  readonly fields: IntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Integration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    integrationLogs<T extends Integration$integrationLogsArgs<ExtArgs> = {}>(args?: Subset<T, Integration$integrationLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Integration model
   */
  interface IntegrationFieldRefs {
    readonly id: FieldRef<"Integration", 'String'>
    readonly name: FieldRef<"Integration", 'String'>
    readonly tenantId: FieldRef<"Integration", 'String'>
    readonly config: FieldRef<"Integration", 'Json'>
    readonly createdAt: FieldRef<"Integration", 'DateTime'>
    readonly lastSyncTime: FieldRef<"Integration", 'DateTime'>
    readonly status: FieldRef<"Integration", 'String'>
    readonly successRate: FieldRef<"Integration", 'Float'>
    readonly type: FieldRef<"Integration", 'String'>
    readonly updatedAt: FieldRef<"Integration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Integration findUnique
   */
  export type IntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration findUniqueOrThrow
   */
  export type IntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration findFirst
   */
  export type IntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Integrations.
     */
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration findFirstOrThrow
   */
  export type IntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Integrations.
     */
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration findMany
   */
  export type IntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integrations to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration create
   */
  export type IntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The data needed to create a Integration.
     */
    data: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
  }

  /**
   * Integration createMany
   */
  export type IntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Integrations.
     */
    data: IntegrationCreateManyInput | IntegrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Integration createManyAndReturn
   */
  export type IntegrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * The data used to create many Integrations.
     */
    data: IntegrationCreateManyInput | IntegrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Integration update
   */
  export type IntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The data needed to update a Integration.
     */
    data: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
    /**
     * Choose, which Integration to update.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration updateMany
   */
  export type IntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Integrations.
     */
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyInput>
    /**
     * Filter which Integrations to update
     */
    where?: IntegrationWhereInput
    /**
     * Limit how many Integrations to update.
     */
    limit?: number
  }

  /**
   * Integration updateManyAndReturn
   */
  export type IntegrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * The data used to update Integrations.
     */
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyInput>
    /**
     * Filter which Integrations to update
     */
    where?: IntegrationWhereInput
    /**
     * Limit how many Integrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Integration upsert
   */
  export type IntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The filter to search for the Integration to update in case it exists.
     */
    where: IntegrationWhereUniqueInput
    /**
     * In case the Integration found by the `where` argument doesn't exist, create a new Integration with this data.
     */
    create: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
    /**
     * In case the Integration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
  }

  /**
   * Integration delete
   */
  export type IntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter which Integration to delete.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration deleteMany
   */
  export type IntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Integrations to delete
     */
    where?: IntegrationWhereInput
    /**
     * Limit how many Integrations to delete.
     */
    limit?: number
  }

  /**
   * Integration.integrationLogs
   */
  export type Integration$integrationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    where?: IntegrationLogWhereInput
    orderBy?: IntegrationLogOrderByWithRelationInput | IntegrationLogOrderByWithRelationInput[]
    cursor?: IntegrationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationLogScalarFieldEnum | IntegrationLogScalarFieldEnum[]
  }

  /**
   * Integration without action
   */
  export type IntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Integration
     */
    omit?: IntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
  }


  /**
   * Model IntegrationLog
   */

  export type AggregateIntegrationLog = {
    _count: IntegrationLogCountAggregateOutputType | null
    _min: IntegrationLogMinAggregateOutputType | null
    _max: IntegrationLogMaxAggregateOutputType | null
  }

  export type IntegrationLogMinAggregateOutputType = {
    id: string | null
    integrationId: string | null
    message: string | null
    createdAt: Date | null
    tenantId: string | null
    event: string | null
    status: string | null
  }

  export type IntegrationLogMaxAggregateOutputType = {
    id: string | null
    integrationId: string | null
    message: string | null
    createdAt: Date | null
    tenantId: string | null
    event: string | null
    status: string | null
  }

  export type IntegrationLogCountAggregateOutputType = {
    id: number
    integrationId: number
    message: number
    createdAt: number
    tenantId: number
    details: number
    event: number
    status: number
    _all: number
  }


  export type IntegrationLogMinAggregateInputType = {
    id?: true
    integrationId?: true
    message?: true
    createdAt?: true
    tenantId?: true
    event?: true
    status?: true
  }

  export type IntegrationLogMaxAggregateInputType = {
    id?: true
    integrationId?: true
    message?: true
    createdAt?: true
    tenantId?: true
    event?: true
    status?: true
  }

  export type IntegrationLogCountAggregateInputType = {
    id?: true
    integrationId?: true
    message?: true
    createdAt?: true
    tenantId?: true
    details?: true
    event?: true
    status?: true
    _all?: true
  }

  export type IntegrationLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationLog to aggregate.
     */
    where?: IntegrationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationLogs to fetch.
     */
    orderBy?: IntegrationLogOrderByWithRelationInput | IntegrationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IntegrationLogs
    **/
    _count?: true | IntegrationLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationLogMaxAggregateInputType
  }

  export type GetIntegrationLogAggregateType<T extends IntegrationLogAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrationLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrationLog[P]>
      : GetScalarType<T[P], AggregateIntegrationLog[P]>
  }




  export type IntegrationLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationLogWhereInput
    orderBy?: IntegrationLogOrderByWithAggregationInput | IntegrationLogOrderByWithAggregationInput[]
    by: IntegrationLogScalarFieldEnum[] | IntegrationLogScalarFieldEnum
    having?: IntegrationLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationLogCountAggregateInputType | true
    _min?: IntegrationLogMinAggregateInputType
    _max?: IntegrationLogMaxAggregateInputType
  }

  export type IntegrationLogGroupByOutputType = {
    id: string
    integrationId: string
    message: string
    createdAt: Date
    tenantId: string
    details: JsonValue | null
    event: string
    status: string
    _count: IntegrationLogCountAggregateOutputType | null
    _min: IntegrationLogMinAggregateOutputType | null
    _max: IntegrationLogMaxAggregateOutputType | null
  }

  type GetIntegrationLogGroupByPayload<T extends IntegrationLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationLogGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationLogGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    integrationId?: boolean
    message?: boolean
    createdAt?: boolean
    tenantId?: boolean
    details?: boolean
    event?: boolean
    status?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationLog"]>

  export type IntegrationLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    integrationId?: boolean
    message?: boolean
    createdAt?: boolean
    tenantId?: boolean
    details?: boolean
    event?: boolean
    status?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationLog"]>

  export type IntegrationLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    integrationId?: boolean
    message?: boolean
    createdAt?: boolean
    tenantId?: boolean
    details?: boolean
    event?: boolean
    status?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationLog"]>

  export type IntegrationLogSelectScalar = {
    id?: boolean
    integrationId?: boolean
    message?: boolean
    createdAt?: boolean
    tenantId?: boolean
    details?: boolean
    event?: boolean
    status?: boolean
  }

  export type IntegrationLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "integrationId" | "message" | "createdAt" | "tenantId" | "details" | "event" | "status", ExtArgs["result"]["integrationLog"]>
  export type IntegrationLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type IntegrationLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type IntegrationLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $IntegrationLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IntegrationLog"
    objects: {
      integration: Prisma.$IntegrationPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      integrationId: string
      message: string
      createdAt: Date
      tenantId: string
      details: Prisma.JsonValue | null
      event: string
      status: string
    }, ExtArgs["result"]["integrationLog"]>
    composites: {}
  }

  type IntegrationLogGetPayload<S extends boolean | null | undefined | IntegrationLogDefaultArgs> = $Result.GetResult<Prisma.$IntegrationLogPayload, S>

  type IntegrationLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IntegrationLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IntegrationLogCountAggregateInputType | true
    }

  export interface IntegrationLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IntegrationLog'], meta: { name: 'IntegrationLog' } }
    /**
     * Find zero or one IntegrationLog that matches the filter.
     * @param {IntegrationLogFindUniqueArgs} args - Arguments to find a IntegrationLog
     * @example
     * // Get one IntegrationLog
     * const integrationLog = await prisma.integrationLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationLogFindUniqueArgs>(args: SelectSubset<T, IntegrationLogFindUniqueArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IntegrationLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IntegrationLogFindUniqueOrThrowArgs} args - Arguments to find a IntegrationLog
     * @example
     * // Get one IntegrationLog
     * const integrationLog = await prisma.integrationLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationLogFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntegrationLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationLogFindFirstArgs} args - Arguments to find a IntegrationLog
     * @example
     * // Get one IntegrationLog
     * const integrationLog = await prisma.integrationLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationLogFindFirstArgs>(args?: SelectSubset<T, IntegrationLogFindFirstArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntegrationLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationLogFindFirstOrThrowArgs} args - Arguments to find a IntegrationLog
     * @example
     * // Get one IntegrationLog
     * const integrationLog = await prisma.integrationLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationLogFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IntegrationLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IntegrationLogs
     * const integrationLogs = await prisma.integrationLog.findMany()
     * 
     * // Get first 10 IntegrationLogs
     * const integrationLogs = await prisma.integrationLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationLogWithIdOnly = await prisma.integrationLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationLogFindManyArgs>(args?: SelectSubset<T, IntegrationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IntegrationLog.
     * @param {IntegrationLogCreateArgs} args - Arguments to create a IntegrationLog.
     * @example
     * // Create one IntegrationLog
     * const IntegrationLog = await prisma.integrationLog.create({
     *   data: {
     *     // ... data to create a IntegrationLog
     *   }
     * })
     * 
     */
    create<T extends IntegrationLogCreateArgs>(args: SelectSubset<T, IntegrationLogCreateArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IntegrationLogs.
     * @param {IntegrationLogCreateManyArgs} args - Arguments to create many IntegrationLogs.
     * @example
     * // Create many IntegrationLogs
     * const integrationLog = await prisma.integrationLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationLogCreateManyArgs>(args?: SelectSubset<T, IntegrationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IntegrationLogs and returns the data saved in the database.
     * @param {IntegrationLogCreateManyAndReturnArgs} args - Arguments to create many IntegrationLogs.
     * @example
     * // Create many IntegrationLogs
     * const integrationLog = await prisma.integrationLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IntegrationLogs and only return the `id`
     * const integrationLogWithIdOnly = await prisma.integrationLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationLogCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a IntegrationLog.
     * @param {IntegrationLogDeleteArgs} args - Arguments to delete one IntegrationLog.
     * @example
     * // Delete one IntegrationLog
     * const IntegrationLog = await prisma.integrationLog.delete({
     *   where: {
     *     // ... filter to delete one IntegrationLog
     *   }
     * })
     * 
     */
    delete<T extends IntegrationLogDeleteArgs>(args: SelectSubset<T, IntegrationLogDeleteArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IntegrationLog.
     * @param {IntegrationLogUpdateArgs} args - Arguments to update one IntegrationLog.
     * @example
     * // Update one IntegrationLog
     * const integrationLog = await prisma.integrationLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationLogUpdateArgs>(args: SelectSubset<T, IntegrationLogUpdateArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IntegrationLogs.
     * @param {IntegrationLogDeleteManyArgs} args - Arguments to filter IntegrationLogs to delete.
     * @example
     * // Delete a few IntegrationLogs
     * const { count } = await prisma.integrationLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationLogDeleteManyArgs>(args?: SelectSubset<T, IntegrationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IntegrationLogs
     * const integrationLog = await prisma.integrationLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationLogUpdateManyArgs>(args: SelectSubset<T, IntegrationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationLogs and returns the data updated in the database.
     * @param {IntegrationLogUpdateManyAndReturnArgs} args - Arguments to update many IntegrationLogs.
     * @example
     * // Update many IntegrationLogs
     * const integrationLog = await prisma.integrationLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more IntegrationLogs and only return the `id`
     * const integrationLogWithIdOnly = await prisma.integrationLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IntegrationLogUpdateManyAndReturnArgs>(args: SelectSubset<T, IntegrationLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one IntegrationLog.
     * @param {IntegrationLogUpsertArgs} args - Arguments to update or create a IntegrationLog.
     * @example
     * // Update or create a IntegrationLog
     * const integrationLog = await prisma.integrationLog.upsert({
     *   create: {
     *     // ... data to create a IntegrationLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IntegrationLog we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationLogUpsertArgs>(args: SelectSubset<T, IntegrationLogUpsertArgs<ExtArgs>>): Prisma__IntegrationLogClient<$Result.GetResult<Prisma.$IntegrationLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IntegrationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationLogCountArgs} args - Arguments to filter IntegrationLogs to count.
     * @example
     * // Count the number of IntegrationLogs
     * const count = await prisma.integrationLog.count({
     *   where: {
     *     // ... the filter for the IntegrationLogs we want to count
     *   }
     * })
    **/
    count<T extends IntegrationLogCountArgs>(
      args?: Subset<T, IntegrationLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IntegrationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationLogAggregateArgs>(args: Subset<T, IntegrationLogAggregateArgs>): Prisma.PrismaPromise<GetIntegrationLogAggregateType<T>>

    /**
     * Group by IntegrationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationLogGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IntegrationLog model
   */
  readonly fields: IntegrationLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IntegrationLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    integration<T extends IntegrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationDefaultArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IntegrationLog model
   */
  interface IntegrationLogFieldRefs {
    readonly id: FieldRef<"IntegrationLog", 'String'>
    readonly integrationId: FieldRef<"IntegrationLog", 'String'>
    readonly message: FieldRef<"IntegrationLog", 'String'>
    readonly createdAt: FieldRef<"IntegrationLog", 'DateTime'>
    readonly tenantId: FieldRef<"IntegrationLog", 'String'>
    readonly details: FieldRef<"IntegrationLog", 'Json'>
    readonly event: FieldRef<"IntegrationLog", 'String'>
    readonly status: FieldRef<"IntegrationLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * IntegrationLog findUnique
   */
  export type IntegrationLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationLog to fetch.
     */
    where: IntegrationLogWhereUniqueInput
  }

  /**
   * IntegrationLog findUniqueOrThrow
   */
  export type IntegrationLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationLog to fetch.
     */
    where: IntegrationLogWhereUniqueInput
  }

  /**
   * IntegrationLog findFirst
   */
  export type IntegrationLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationLog to fetch.
     */
    where?: IntegrationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationLogs to fetch.
     */
    orderBy?: IntegrationLogOrderByWithRelationInput | IntegrationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationLogs.
     */
    cursor?: IntegrationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationLogs.
     */
    distinct?: IntegrationLogScalarFieldEnum | IntegrationLogScalarFieldEnum[]
  }

  /**
   * IntegrationLog findFirstOrThrow
   */
  export type IntegrationLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationLog to fetch.
     */
    where?: IntegrationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationLogs to fetch.
     */
    orderBy?: IntegrationLogOrderByWithRelationInput | IntegrationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationLogs.
     */
    cursor?: IntegrationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationLogs.
     */
    distinct?: IntegrationLogScalarFieldEnum | IntegrationLogScalarFieldEnum[]
  }

  /**
   * IntegrationLog findMany
   */
  export type IntegrationLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationLogs to fetch.
     */
    where?: IntegrationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationLogs to fetch.
     */
    orderBy?: IntegrationLogOrderByWithRelationInput | IntegrationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IntegrationLogs.
     */
    cursor?: IntegrationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationLogs.
     */
    skip?: number
    distinct?: IntegrationLogScalarFieldEnum | IntegrationLogScalarFieldEnum[]
  }

  /**
   * IntegrationLog create
   */
  export type IntegrationLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * The data needed to create a IntegrationLog.
     */
    data: XOR<IntegrationLogCreateInput, IntegrationLogUncheckedCreateInput>
  }

  /**
   * IntegrationLog createMany
   */
  export type IntegrationLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IntegrationLogs.
     */
    data: IntegrationLogCreateManyInput | IntegrationLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IntegrationLog createManyAndReturn
   */
  export type IntegrationLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * The data used to create many IntegrationLogs.
     */
    data: IntegrationLogCreateManyInput | IntegrationLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntegrationLog update
   */
  export type IntegrationLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * The data needed to update a IntegrationLog.
     */
    data: XOR<IntegrationLogUpdateInput, IntegrationLogUncheckedUpdateInput>
    /**
     * Choose, which IntegrationLog to update.
     */
    where: IntegrationLogWhereUniqueInput
  }

  /**
   * IntegrationLog updateMany
   */
  export type IntegrationLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IntegrationLogs.
     */
    data: XOR<IntegrationLogUpdateManyMutationInput, IntegrationLogUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationLogs to update
     */
    where?: IntegrationLogWhereInput
    /**
     * Limit how many IntegrationLogs to update.
     */
    limit?: number
  }

  /**
   * IntegrationLog updateManyAndReturn
   */
  export type IntegrationLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * The data used to update IntegrationLogs.
     */
    data: XOR<IntegrationLogUpdateManyMutationInput, IntegrationLogUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationLogs to update
     */
    where?: IntegrationLogWhereInput
    /**
     * Limit how many IntegrationLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntegrationLog upsert
   */
  export type IntegrationLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * The filter to search for the IntegrationLog to update in case it exists.
     */
    where: IntegrationLogWhereUniqueInput
    /**
     * In case the IntegrationLog found by the `where` argument doesn't exist, create a new IntegrationLog with this data.
     */
    create: XOR<IntegrationLogCreateInput, IntegrationLogUncheckedCreateInput>
    /**
     * In case the IntegrationLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationLogUpdateInput, IntegrationLogUncheckedUpdateInput>
  }

  /**
   * IntegrationLog delete
   */
  export type IntegrationLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
    /**
     * Filter which IntegrationLog to delete.
     */
    where: IntegrationLogWhereUniqueInput
  }

  /**
   * IntegrationLog deleteMany
   */
  export type IntegrationLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationLogs to delete
     */
    where?: IntegrationLogWhereInput
    /**
     * Limit how many IntegrationLogs to delete.
     */
    limit?: number
  }

  /**
   * IntegrationLog without action
   */
  export type IntegrationLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationLog
     */
    select?: IntegrationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntegrationLog
     */
    omit?: IntegrationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationLogInclude<ExtArgs> | null
  }


  /**
   * Model Workflow
   */

  export type AggregateWorkflow = {
    _count: WorkflowCountAggregateOutputType | null
    _min: WorkflowMinAggregateOutputType | null
    _max: WorkflowMaxAggregateOutputType | null
  }

  export type WorkflowMinAggregateOutputType = {
    id: string | null
    name: string | null
    tenantId: string | null
  }

  export type WorkflowMaxAggregateOutputType = {
    id: string | null
    name: string | null
    tenantId: string | null
  }

  export type WorkflowCountAggregateOutputType = {
    id: number
    name: number
    tenantId: number
    _all: number
  }


  export type WorkflowMinAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
  }

  export type WorkflowMaxAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
  }

  export type WorkflowCountAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
    _all?: true
  }

  export type WorkflowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workflow to aggregate.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workflows
    **/
    _count?: true | WorkflowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowMaxAggregateInputType
  }

  export type GetWorkflowAggregateType<T extends WorkflowAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflow[P]>
      : GetScalarType<T[P], AggregateWorkflow[P]>
  }




  export type WorkflowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowWhereInput
    orderBy?: WorkflowOrderByWithAggregationInput | WorkflowOrderByWithAggregationInput[]
    by: WorkflowScalarFieldEnum[] | WorkflowScalarFieldEnum
    having?: WorkflowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowCountAggregateInputType | true
    _min?: WorkflowMinAggregateInputType
    _max?: WorkflowMaxAggregateInputType
  }

  export type WorkflowGroupByOutputType = {
    id: string
    name: string
    tenantId: string
    _count: WorkflowCountAggregateOutputType | null
    _min: WorkflowMinAggregateOutputType | null
    _max: WorkflowMaxAggregateOutputType | null
  }

  type GetWorkflowGroupByPayload<T extends WorkflowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    approvals?: boolean | Workflow$approvalsArgs<ExtArgs>
    workflowStats?: boolean | Workflow$workflowStatsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | WorkflowCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflow"]>

  export type WorkflowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflow"]>

  export type WorkflowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflow"]>

  export type WorkflowSelectScalar = {
    id?: boolean
    name?: boolean
    tenantId?: boolean
  }

  export type WorkflowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "tenantId", ExtArgs["result"]["workflow"]>
  export type WorkflowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvals?: boolean | Workflow$approvalsArgs<ExtArgs>
    workflowStats?: boolean | Workflow$workflowStatsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | WorkflowCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkflowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type WorkflowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $WorkflowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workflow"
    objects: {
      approvals: Prisma.$ApprovalPayload<ExtArgs>[]
      workflowStats: Prisma.$WorkflowStatsPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      tenantId: string
    }, ExtArgs["result"]["workflow"]>
    composites: {}
  }

  type WorkflowGetPayload<S extends boolean | null | undefined | WorkflowDefaultArgs> = $Result.GetResult<Prisma.$WorkflowPayload, S>

  type WorkflowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowCountAggregateInputType | true
    }

  export interface WorkflowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workflow'], meta: { name: 'Workflow' } }
    /**
     * Find zero or one Workflow that matches the filter.
     * @param {WorkflowFindUniqueArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowFindUniqueArgs>(args: SelectSubset<T, WorkflowFindUniqueArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workflow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowFindUniqueOrThrowArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workflow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindFirstArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowFindFirstArgs>(args?: SelectSubset<T, WorkflowFindFirstArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workflow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindFirstOrThrowArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workflows
     * const workflows = await prisma.workflow.findMany()
     * 
     * // Get first 10 Workflows
     * const workflows = await prisma.workflow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowWithIdOnly = await prisma.workflow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowFindManyArgs>(args?: SelectSubset<T, WorkflowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workflow.
     * @param {WorkflowCreateArgs} args - Arguments to create a Workflow.
     * @example
     * // Create one Workflow
     * const Workflow = await prisma.workflow.create({
     *   data: {
     *     // ... data to create a Workflow
     *   }
     * })
     * 
     */
    create<T extends WorkflowCreateArgs>(args: SelectSubset<T, WorkflowCreateArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workflows.
     * @param {WorkflowCreateManyArgs} args - Arguments to create many Workflows.
     * @example
     * // Create many Workflows
     * const workflow = await prisma.workflow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowCreateManyArgs>(args?: SelectSubset<T, WorkflowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workflows and returns the data saved in the database.
     * @param {WorkflowCreateManyAndReturnArgs} args - Arguments to create many Workflows.
     * @example
     * // Create many Workflows
     * const workflow = await prisma.workflow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workflows and only return the `id`
     * const workflowWithIdOnly = await prisma.workflow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Workflow.
     * @param {WorkflowDeleteArgs} args - Arguments to delete one Workflow.
     * @example
     * // Delete one Workflow
     * const Workflow = await prisma.workflow.delete({
     *   where: {
     *     // ... filter to delete one Workflow
     *   }
     * })
     * 
     */
    delete<T extends WorkflowDeleteArgs>(args: SelectSubset<T, WorkflowDeleteArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workflow.
     * @param {WorkflowUpdateArgs} args - Arguments to update one Workflow.
     * @example
     * // Update one Workflow
     * const workflow = await prisma.workflow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowUpdateArgs>(args: SelectSubset<T, WorkflowUpdateArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workflows.
     * @param {WorkflowDeleteManyArgs} args - Arguments to filter Workflows to delete.
     * @example
     * // Delete a few Workflows
     * const { count } = await prisma.workflow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowDeleteManyArgs>(args?: SelectSubset<T, WorkflowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workflows
     * const workflow = await prisma.workflow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowUpdateManyArgs>(args: SelectSubset<T, WorkflowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workflows and returns the data updated in the database.
     * @param {WorkflowUpdateManyAndReturnArgs} args - Arguments to update many Workflows.
     * @example
     * // Update many Workflows
     * const workflow = await prisma.workflow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workflows and only return the `id`
     * const workflowWithIdOnly = await prisma.workflow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Workflow.
     * @param {WorkflowUpsertArgs} args - Arguments to update or create a Workflow.
     * @example
     * // Update or create a Workflow
     * const workflow = await prisma.workflow.upsert({
     *   create: {
     *     // ... data to create a Workflow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workflow we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowUpsertArgs>(args: SelectSubset<T, WorkflowUpsertArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowCountArgs} args - Arguments to filter Workflows to count.
     * @example
     * // Count the number of Workflows
     * const count = await prisma.workflow.count({
     *   where: {
     *     // ... the filter for the Workflows we want to count
     *   }
     * })
    **/
    count<T extends WorkflowCountArgs>(
      args?: Subset<T, WorkflowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowAggregateArgs>(args: Subset<T, WorkflowAggregateArgs>): Prisma.PrismaPromise<GetWorkflowAggregateType<T>>

    /**
     * Group by Workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workflow model
   */
  readonly fields: WorkflowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workflow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    approvals<T extends Workflow$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, Workflow$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowStats<T extends Workflow$workflowStatsArgs<ExtArgs> = {}>(args?: Subset<T, Workflow$workflowStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workflow model
   */
  interface WorkflowFieldRefs {
    readonly id: FieldRef<"Workflow", 'String'>
    readonly name: FieldRef<"Workflow", 'String'>
    readonly tenantId: FieldRef<"Workflow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Workflow findUnique
   */
  export type WorkflowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow findUniqueOrThrow
   */
  export type WorkflowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow findFirst
   */
  export type WorkflowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workflows.
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workflows.
     */
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * Workflow findFirstOrThrow
   */
  export type WorkflowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflow to fetch.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workflows.
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workflows.
     */
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * Workflow findMany
   */
  export type WorkflowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter, which Workflows to fetch.
     */
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     */
    orderBy?: WorkflowOrderByWithRelationInput | WorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workflows.
     */
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     */
    skip?: number
    distinct?: WorkflowScalarFieldEnum | WorkflowScalarFieldEnum[]
  }

  /**
   * Workflow create
   */
  export type WorkflowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * The data needed to create a Workflow.
     */
    data: XOR<WorkflowCreateInput, WorkflowUncheckedCreateInput>
  }

  /**
   * Workflow createMany
   */
  export type WorkflowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workflows.
     */
    data: WorkflowCreateManyInput | WorkflowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workflow createManyAndReturn
   */
  export type WorkflowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * The data used to create many Workflows.
     */
    data: WorkflowCreateManyInput | WorkflowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workflow update
   */
  export type WorkflowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * The data needed to update a Workflow.
     */
    data: XOR<WorkflowUpdateInput, WorkflowUncheckedUpdateInput>
    /**
     * Choose, which Workflow to update.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow updateMany
   */
  export type WorkflowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workflows.
     */
    data: XOR<WorkflowUpdateManyMutationInput, WorkflowUncheckedUpdateManyInput>
    /**
     * Filter which Workflows to update
     */
    where?: WorkflowWhereInput
    /**
     * Limit how many Workflows to update.
     */
    limit?: number
  }

  /**
   * Workflow updateManyAndReturn
   */
  export type WorkflowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * The data used to update Workflows.
     */
    data: XOR<WorkflowUpdateManyMutationInput, WorkflowUncheckedUpdateManyInput>
    /**
     * Filter which Workflows to update
     */
    where?: WorkflowWhereInput
    /**
     * Limit how many Workflows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workflow upsert
   */
  export type WorkflowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * The filter to search for the Workflow to update in case it exists.
     */
    where: WorkflowWhereUniqueInput
    /**
     * In case the Workflow found by the `where` argument doesn't exist, create a new Workflow with this data.
     */
    create: XOR<WorkflowCreateInput, WorkflowUncheckedCreateInput>
    /**
     * In case the Workflow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowUpdateInput, WorkflowUncheckedUpdateInput>
  }

  /**
   * Workflow delete
   */
  export type WorkflowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
    /**
     * Filter which Workflow to delete.
     */
    where: WorkflowWhereUniqueInput
  }

  /**
   * Workflow deleteMany
   */
  export type WorkflowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workflows to delete
     */
    where?: WorkflowWhereInput
    /**
     * Limit how many Workflows to delete.
     */
    limit?: number
  }

  /**
   * Workflow.approvals
   */
  export type Workflow$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Workflow.workflowStats
   */
  export type Workflow$workflowStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    where?: WorkflowStatsWhereInput
    orderBy?: WorkflowStatsOrderByWithRelationInput | WorkflowStatsOrderByWithRelationInput[]
    cursor?: WorkflowStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowStatsScalarFieldEnum | WorkflowStatsScalarFieldEnum[]
  }

  /**
   * Workflow without action
   */
  export type WorkflowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workflow
     */
    select?: WorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workflow
     */
    omit?: WorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowStats
   */

  export type AggregateWorkflowStats = {
    _count: WorkflowStatsCountAggregateOutputType | null
    _min: WorkflowStatsMinAggregateOutputType | null
    _max: WorkflowStatsMaxAggregateOutputType | null
  }

  export type WorkflowStatsMinAggregateOutputType = {
    id: string | null
    workflowId: string | null
    createdAt: Date | null
    tenantId: string | null
  }

  export type WorkflowStatsMaxAggregateOutputType = {
    id: string | null
    workflowId: string | null
    createdAt: Date | null
    tenantId: string | null
  }

  export type WorkflowStatsCountAggregateOutputType = {
    id: number
    workflowId: number
    stats: number
    createdAt: number
    tenantId: number
    _all: number
  }


  export type WorkflowStatsMinAggregateInputType = {
    id?: true
    workflowId?: true
    createdAt?: true
    tenantId?: true
  }

  export type WorkflowStatsMaxAggregateInputType = {
    id?: true
    workflowId?: true
    createdAt?: true
    tenantId?: true
  }

  export type WorkflowStatsCountAggregateInputType = {
    id?: true
    workflowId?: true
    stats?: true
    createdAt?: true
    tenantId?: true
    _all?: true
  }

  export type WorkflowStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowStats to aggregate.
     */
    where?: WorkflowStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStats to fetch.
     */
    orderBy?: WorkflowStatsOrderByWithRelationInput | WorkflowStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowStats
    **/
    _count?: true | WorkflowStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowStatsMaxAggregateInputType
  }

  export type GetWorkflowStatsAggregateType<T extends WorkflowStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowStats[P]>
      : GetScalarType<T[P], AggregateWorkflowStats[P]>
  }




  export type WorkflowStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStatsWhereInput
    orderBy?: WorkflowStatsOrderByWithAggregationInput | WorkflowStatsOrderByWithAggregationInput[]
    by: WorkflowStatsScalarFieldEnum[] | WorkflowStatsScalarFieldEnum
    having?: WorkflowStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowStatsCountAggregateInputType | true
    _min?: WorkflowStatsMinAggregateInputType
    _max?: WorkflowStatsMaxAggregateInputType
  }

  export type WorkflowStatsGroupByOutputType = {
    id: string
    workflowId: string
    stats: JsonValue
    createdAt: Date
    tenantId: string
    _count: WorkflowStatsCountAggregateOutputType | null
    _min: WorkflowStatsMinAggregateOutputType | null
    _max: WorkflowStatsMaxAggregateOutputType | null
  }

  type GetWorkflowStatsGroupByPayload<T extends WorkflowStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowStatsGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowStatsGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    stats?: boolean
    createdAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStats"]>

  export type WorkflowStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    stats?: boolean
    createdAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStats"]>

  export type WorkflowStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    stats?: boolean
    createdAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStats"]>

  export type WorkflowStatsSelectScalar = {
    id?: boolean
    workflowId?: boolean
    stats?: boolean
    createdAt?: boolean
    tenantId?: boolean
  }

  export type WorkflowStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workflowId" | "stats" | "createdAt" | "tenantId", ExtArgs["result"]["workflowStats"]>
  export type WorkflowStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }
  export type WorkflowStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }
  export type WorkflowStatsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }

  export type $WorkflowStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowStats"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      workflow: Prisma.$WorkflowPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workflowId: string
      stats: Prisma.JsonValue
      createdAt: Date
      tenantId: string
    }, ExtArgs["result"]["workflowStats"]>
    composites: {}
  }

  type WorkflowStatsGetPayload<S extends boolean | null | undefined | WorkflowStatsDefaultArgs> = $Result.GetResult<Prisma.$WorkflowStatsPayload, S>

  type WorkflowStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowStatsCountAggregateInputType | true
    }

  export interface WorkflowStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowStats'], meta: { name: 'WorkflowStats' } }
    /**
     * Find zero or one WorkflowStats that matches the filter.
     * @param {WorkflowStatsFindUniqueArgs} args - Arguments to find a WorkflowStats
     * @example
     * // Get one WorkflowStats
     * const workflowStats = await prisma.workflowStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowStatsFindUniqueArgs>(args: SelectSubset<T, WorkflowStatsFindUniqueArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkflowStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowStatsFindUniqueOrThrowArgs} args - Arguments to find a WorkflowStats
     * @example
     * // Get one WorkflowStats
     * const workflowStats = await prisma.workflowStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStatsFindFirstArgs} args - Arguments to find a WorkflowStats
     * @example
     * // Get one WorkflowStats
     * const workflowStats = await prisma.workflowStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowStatsFindFirstArgs>(args?: SelectSubset<T, WorkflowStatsFindFirstArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStatsFindFirstOrThrowArgs} args - Arguments to find a WorkflowStats
     * @example
     * // Get one WorkflowStats
     * const workflowStats = await prisma.workflowStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkflowStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowStats
     * const workflowStats = await prisma.workflowStats.findMany()
     * 
     * // Get first 10 WorkflowStats
     * const workflowStats = await prisma.workflowStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowStatsWithIdOnly = await prisma.workflowStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowStatsFindManyArgs>(args?: SelectSubset<T, WorkflowStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkflowStats.
     * @param {WorkflowStatsCreateArgs} args - Arguments to create a WorkflowStats.
     * @example
     * // Create one WorkflowStats
     * const WorkflowStats = await prisma.workflowStats.create({
     *   data: {
     *     // ... data to create a WorkflowStats
     *   }
     * })
     * 
     */
    create<T extends WorkflowStatsCreateArgs>(args: SelectSubset<T, WorkflowStatsCreateArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkflowStats.
     * @param {WorkflowStatsCreateManyArgs} args - Arguments to create many WorkflowStats.
     * @example
     * // Create many WorkflowStats
     * const workflowStats = await prisma.workflowStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowStatsCreateManyArgs>(args?: SelectSubset<T, WorkflowStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowStats and returns the data saved in the database.
     * @param {WorkflowStatsCreateManyAndReturnArgs} args - Arguments to create many WorkflowStats.
     * @example
     * // Create many WorkflowStats
     * const workflowStats = await prisma.workflowStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowStats and only return the `id`
     * const workflowStatsWithIdOnly = await prisma.workflowStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkflowStats.
     * @param {WorkflowStatsDeleteArgs} args - Arguments to delete one WorkflowStats.
     * @example
     * // Delete one WorkflowStats
     * const WorkflowStats = await prisma.workflowStats.delete({
     *   where: {
     *     // ... filter to delete one WorkflowStats
     *   }
     * })
     * 
     */
    delete<T extends WorkflowStatsDeleteArgs>(args: SelectSubset<T, WorkflowStatsDeleteArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkflowStats.
     * @param {WorkflowStatsUpdateArgs} args - Arguments to update one WorkflowStats.
     * @example
     * // Update one WorkflowStats
     * const workflowStats = await prisma.workflowStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowStatsUpdateArgs>(args: SelectSubset<T, WorkflowStatsUpdateArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkflowStats.
     * @param {WorkflowStatsDeleteManyArgs} args - Arguments to filter WorkflowStats to delete.
     * @example
     * // Delete a few WorkflowStats
     * const { count } = await prisma.workflowStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowStatsDeleteManyArgs>(args?: SelectSubset<T, WorkflowStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowStats
     * const workflowStats = await prisma.workflowStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowStatsUpdateManyArgs>(args: SelectSubset<T, WorkflowStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowStats and returns the data updated in the database.
     * @param {WorkflowStatsUpdateManyAndReturnArgs} args - Arguments to update many WorkflowStats.
     * @example
     * // Update many WorkflowStats
     * const workflowStats = await prisma.workflowStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkflowStats and only return the `id`
     * const workflowStatsWithIdOnly = await prisma.workflowStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkflowStats.
     * @param {WorkflowStatsUpsertArgs} args - Arguments to update or create a WorkflowStats.
     * @example
     * // Update or create a WorkflowStats
     * const workflowStats = await prisma.workflowStats.upsert({
     *   create: {
     *     // ... data to create a WorkflowStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowStats we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowStatsUpsertArgs>(args: SelectSubset<T, WorkflowStatsUpsertArgs<ExtArgs>>): Prisma__WorkflowStatsClient<$Result.GetResult<Prisma.$WorkflowStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkflowStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStatsCountArgs} args - Arguments to filter WorkflowStats to count.
     * @example
     * // Count the number of WorkflowStats
     * const count = await prisma.workflowStats.count({
     *   where: {
     *     // ... the filter for the WorkflowStats we want to count
     *   }
     * })
    **/
    count<T extends WorkflowStatsCountArgs>(
      args?: Subset<T, WorkflowStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowStatsAggregateArgs>(args: Subset<T, WorkflowStatsAggregateArgs>): Prisma.PrismaPromise<GetWorkflowStatsAggregateType<T>>

    /**
     * Group by WorkflowStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowStatsGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowStats model
   */
  readonly fields: WorkflowStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workflow<T extends WorkflowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowDefaultArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowStats model
   */
  interface WorkflowStatsFieldRefs {
    readonly id: FieldRef<"WorkflowStats", 'String'>
    readonly workflowId: FieldRef<"WorkflowStats", 'String'>
    readonly stats: FieldRef<"WorkflowStats", 'Json'>
    readonly createdAt: FieldRef<"WorkflowStats", 'DateTime'>
    readonly tenantId: FieldRef<"WorkflowStats", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowStats findUnique
   */
  export type WorkflowStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStats to fetch.
     */
    where: WorkflowStatsWhereUniqueInput
  }

  /**
   * WorkflowStats findUniqueOrThrow
   */
  export type WorkflowStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStats to fetch.
     */
    where: WorkflowStatsWhereUniqueInput
  }

  /**
   * WorkflowStats findFirst
   */
  export type WorkflowStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStats to fetch.
     */
    where?: WorkflowStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStats to fetch.
     */
    orderBy?: WorkflowStatsOrderByWithRelationInput | WorkflowStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowStats.
     */
    cursor?: WorkflowStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowStats.
     */
    distinct?: WorkflowStatsScalarFieldEnum | WorkflowStatsScalarFieldEnum[]
  }

  /**
   * WorkflowStats findFirstOrThrow
   */
  export type WorkflowStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStats to fetch.
     */
    where?: WorkflowStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStats to fetch.
     */
    orderBy?: WorkflowStatsOrderByWithRelationInput | WorkflowStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowStats.
     */
    cursor?: WorkflowStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowStats.
     */
    distinct?: WorkflowStatsScalarFieldEnum | WorkflowStatsScalarFieldEnum[]
  }

  /**
   * WorkflowStats findMany
   */
  export type WorkflowStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStats to fetch.
     */
    where?: WorkflowStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStats to fetch.
     */
    orderBy?: WorkflowStatsOrderByWithRelationInput | WorkflowStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowStats.
     */
    cursor?: WorkflowStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStats.
     */
    skip?: number
    distinct?: WorkflowStatsScalarFieldEnum | WorkflowStatsScalarFieldEnum[]
  }

  /**
   * WorkflowStats create
   */
  export type WorkflowStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowStats.
     */
    data: XOR<WorkflowStatsCreateInput, WorkflowStatsUncheckedCreateInput>
  }

  /**
   * WorkflowStats createMany
   */
  export type WorkflowStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowStats.
     */
    data: WorkflowStatsCreateManyInput | WorkflowStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowStats createManyAndReturn
   */
  export type WorkflowStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * The data used to create many WorkflowStats.
     */
    data: WorkflowStatsCreateManyInput | WorkflowStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStats update
   */
  export type WorkflowStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowStats.
     */
    data: XOR<WorkflowStatsUpdateInput, WorkflowStatsUncheckedUpdateInput>
    /**
     * Choose, which WorkflowStats to update.
     */
    where: WorkflowStatsWhereUniqueInput
  }

  /**
   * WorkflowStats updateMany
   */
  export type WorkflowStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowStats.
     */
    data: XOR<WorkflowStatsUpdateManyMutationInput, WorkflowStatsUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowStats to update
     */
    where?: WorkflowStatsWhereInput
    /**
     * Limit how many WorkflowStats to update.
     */
    limit?: number
  }

  /**
   * WorkflowStats updateManyAndReturn
   */
  export type WorkflowStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * The data used to update WorkflowStats.
     */
    data: XOR<WorkflowStatsUpdateManyMutationInput, WorkflowStatsUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowStats to update
     */
    where?: WorkflowStatsWhereInput
    /**
     * Limit how many WorkflowStats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStats upsert
   */
  export type WorkflowStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowStats to update in case it exists.
     */
    where: WorkflowStatsWhereUniqueInput
    /**
     * In case the WorkflowStats found by the `where` argument doesn't exist, create a new WorkflowStats with this data.
     */
    create: XOR<WorkflowStatsCreateInput, WorkflowStatsUncheckedCreateInput>
    /**
     * In case the WorkflowStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowStatsUpdateInput, WorkflowStatsUncheckedUpdateInput>
  }

  /**
   * WorkflowStats delete
   */
  export type WorkflowStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
    /**
     * Filter which WorkflowStats to delete.
     */
    where: WorkflowStatsWhereUniqueInput
  }

  /**
   * WorkflowStats deleteMany
   */
  export type WorkflowStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowStats to delete
     */
    where?: WorkflowStatsWhereInput
    /**
     * Limit how many WorkflowStats to delete.
     */
    limit?: number
  }

  /**
   * WorkflowStats without action
   */
  export type WorkflowStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStats
     */
    select?: WorkflowStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStats
     */
    omit?: WorkflowStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStatsInclude<ExtArgs> | null
  }


  /**
   * Model Approval
   */

  export type AggregateApproval = {
    _count: ApprovalCountAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  export type ApprovalMinAggregateOutputType = {
    id: string | null
    workflowId: string | null
    approverId: string | null
    status: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type ApprovalMaxAggregateOutputType = {
    id: string | null
    workflowId: string | null
    approverId: string | null
    status: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type ApprovalCountAggregateOutputType = {
    id: number
    workflowId: number
    approverId: number
    status: number
    comments: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type ApprovalMinAggregateInputType = {
    id?: true
    workflowId?: true
    approverId?: true
    status?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type ApprovalMaxAggregateInputType = {
    id?: true
    workflowId?: true
    approverId?: true
    status?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type ApprovalCountAggregateInputType = {
    id?: true
    workflowId?: true
    approverId?: true
    status?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type ApprovalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approval to aggregate.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Approvals
    **/
    _count?: true | ApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovalMaxAggregateInputType
  }

  export type GetApprovalAggregateType<T extends ApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApproval[P]>
      : GetScalarType<T[P], AggregateApproval[P]>
  }




  export type ApprovalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithAggregationInput | ApprovalOrderByWithAggregationInput[]
    by: ApprovalScalarFieldEnum[] | ApprovalScalarFieldEnum
    having?: ApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovalCountAggregateInputType | true
    _min?: ApprovalMinAggregateInputType
    _max?: ApprovalMaxAggregateInputType
  }

  export type ApprovalGroupByOutputType = {
    id: string
    workflowId: string
    approverId: string
    status: string
    comments: string | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: ApprovalCountAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  type GetApprovalGroupByPayload<T extends ApprovalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
        }
      >
    >


  export type ApprovalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    approverId?: boolean
    status?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    approverId?: boolean
    status?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowId?: boolean
    approverId?: boolean
    status?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectScalar = {
    id?: boolean
    workflowId?: boolean
    approverId?: boolean
    status?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type ApprovalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workflowId" | "approverId" | "status" | "comments" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["approval"]>
  export type ApprovalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }
  export type ApprovalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }
  export type ApprovalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    workflow?: boolean | WorkflowDefaultArgs<ExtArgs>
  }

  export type $ApprovalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Approval"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      workflow: Prisma.$WorkflowPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workflowId: string
      approverId: string
      status: string
      comments: string | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["approval"]>
    composites: {}
  }

  type ApprovalGetPayload<S extends boolean | null | undefined | ApprovalDefaultArgs> = $Result.GetResult<Prisma.$ApprovalPayload, S>

  type ApprovalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApprovalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApprovalCountAggregateInputType | true
    }

  export interface ApprovalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Approval'], meta: { name: 'Approval' } }
    /**
     * Find zero or one Approval that matches the filter.
     * @param {ApprovalFindUniqueArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApprovalFindUniqueArgs>(args: SelectSubset<T, ApprovalFindUniqueArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Approval that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApprovalFindUniqueOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApprovalFindUniqueOrThrowArgs>(args: SelectSubset<T, ApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApprovalFindFirstArgs>(args?: SelectSubset<T, ApprovalFindFirstArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approval that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApprovalFindFirstOrThrowArgs>(args?: SelectSubset<T, ApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Approvals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Approvals
     * const approvals = await prisma.approval.findMany()
     * 
     * // Get first 10 Approvals
     * const approvals = await prisma.approval.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approvalWithIdOnly = await prisma.approval.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApprovalFindManyArgs>(args?: SelectSubset<T, ApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Approval.
     * @param {ApprovalCreateArgs} args - Arguments to create a Approval.
     * @example
     * // Create one Approval
     * const Approval = await prisma.approval.create({
     *   data: {
     *     // ... data to create a Approval
     *   }
     * })
     * 
     */
    create<T extends ApprovalCreateArgs>(args: SelectSubset<T, ApprovalCreateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Approvals.
     * @param {ApprovalCreateManyArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approval = await prisma.approval.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApprovalCreateManyArgs>(args?: SelectSubset<T, ApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Approvals and returns the data saved in the database.
     * @param {ApprovalCreateManyAndReturnArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approval = await prisma.approval.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Approvals and only return the `id`
     * const approvalWithIdOnly = await prisma.approval.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApprovalCreateManyAndReturnArgs>(args?: SelectSubset<T, ApprovalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Approval.
     * @param {ApprovalDeleteArgs} args - Arguments to delete one Approval.
     * @example
     * // Delete one Approval
     * const Approval = await prisma.approval.delete({
     *   where: {
     *     // ... filter to delete one Approval
     *   }
     * })
     * 
     */
    delete<T extends ApprovalDeleteArgs>(args: SelectSubset<T, ApprovalDeleteArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Approval.
     * @param {ApprovalUpdateArgs} args - Arguments to update one Approval.
     * @example
     * // Update one Approval
     * const approval = await prisma.approval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApprovalUpdateArgs>(args: SelectSubset<T, ApprovalUpdateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Approvals.
     * @param {ApprovalDeleteManyArgs} args - Arguments to filter Approvals to delete.
     * @example
     * // Delete a few Approvals
     * const { count } = await prisma.approval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApprovalDeleteManyArgs>(args?: SelectSubset<T, ApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Approvals
     * const approval = await prisma.approval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApprovalUpdateManyArgs>(args: SelectSubset<T, ApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals and returns the data updated in the database.
     * @param {ApprovalUpdateManyAndReturnArgs} args - Arguments to update many Approvals.
     * @example
     * // Update many Approvals
     * const approval = await prisma.approval.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Approvals and only return the `id`
     * const approvalWithIdOnly = await prisma.approval.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApprovalUpdateManyAndReturnArgs>(args: SelectSubset<T, ApprovalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Approval.
     * @param {ApprovalUpsertArgs} args - Arguments to update or create a Approval.
     * @example
     * // Update or create a Approval
     * const approval = await prisma.approval.upsert({
     *   create: {
     *     // ... data to create a Approval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Approval we want to update
     *   }
     * })
     */
    upsert<T extends ApprovalUpsertArgs>(args: SelectSubset<T, ApprovalUpsertArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalCountArgs} args - Arguments to filter Approvals to count.
     * @example
     * // Count the number of Approvals
     * const count = await prisma.approval.count({
     *   where: {
     *     // ... the filter for the Approvals we want to count
     *   }
     * })
    **/
    count<T extends ApprovalCountArgs>(
      args?: Subset<T, ApprovalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovalAggregateArgs>(args: Subset<T, ApprovalAggregateArgs>): Prisma.PrismaPromise<GetApprovalAggregateType<T>>

    /**
     * Group by Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovalGroupByArgs['orderBy'] }
        : { orderBy?: ApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Approval model
   */
  readonly fields: ApprovalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Approval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprovalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workflow<T extends WorkflowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowDefaultArgs<ExtArgs>>): Prisma__WorkflowClient<$Result.GetResult<Prisma.$WorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Approval model
   */
  interface ApprovalFieldRefs {
    readonly id: FieldRef<"Approval", 'String'>
    readonly workflowId: FieldRef<"Approval", 'String'>
    readonly approverId: FieldRef<"Approval", 'String'>
    readonly status: FieldRef<"Approval", 'String'>
    readonly comments: FieldRef<"Approval", 'String'>
    readonly createdAt: FieldRef<"Approval", 'DateTime'>
    readonly updatedAt: FieldRef<"Approval", 'DateTime'>
    readonly tenantId: FieldRef<"Approval", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Approval findUnique
   */
  export type ApprovalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findUniqueOrThrow
   */
  export type ApprovalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findFirst
   */
  export type ApprovalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findFirstOrThrow
   */
  export type ApprovalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findMany
   */
  export type ApprovalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval create
   */
  export type ApprovalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to create a Approval.
     */
    data: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
  }

  /**
   * Approval createMany
   */
  export type ApprovalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalCreateManyInput | ApprovalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Approval createManyAndReturn
   */
  export type ApprovalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalCreateManyInput | ApprovalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Approval update
   */
  export type ApprovalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to update a Approval.
     */
    data: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
    /**
     * Choose, which Approval to update.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval updateMany
   */
  export type ApprovalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Approvals.
     */
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to update.
     */
    limit?: number
  }

  /**
   * Approval updateManyAndReturn
   */
  export type ApprovalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * The data used to update Approvals.
     */
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Approval upsert
   */
  export type ApprovalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The filter to search for the Approval to update in case it exists.
     */
    where: ApprovalWhereUniqueInput
    /**
     * In case the Approval found by the `where` argument doesn't exist, create a new Approval with this data.
     */
    create: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
    /**
     * In case the Approval was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
  }

  /**
   * Approval delete
   */
  export type ApprovalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter which Approval to delete.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval deleteMany
   */
  export type ApprovalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approvals to delete
     */
    where?: ApprovalWhereInput
    /**
     * Limit how many Approvals to delete.
     */
    limit?: number
  }

  /**
   * Approval without action
   */
  export type ApprovalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approval
     */
    omit?: ApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
  }


  /**
   * Model ExperimentalFeature
   */

  export type AggregateExperimentalFeature = {
    _count: ExperimentalFeatureCountAggregateOutputType | null
    _min: ExperimentalFeatureMinAggregateOutputType | null
    _max: ExperimentalFeatureMaxAggregateOutputType | null
  }

  export type ExperimentalFeatureMinAggregateOutputType = {
    id: string | null
    key: string | null
    name: string | null
    description: string | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    tenantId: string | null
  }

  export type ExperimentalFeatureMaxAggregateOutputType = {
    id: string | null
    key: string | null
    name: string | null
    description: string | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
    tenantId: string | null
  }

  export type ExperimentalFeatureCountAggregateOutputType = {
    id: number
    key: number
    name: number
    description: number
    enabled: number
    createdAt: number
    updatedAt: number
    createdBy: number
    tenantId: number
    _all: number
  }


  export type ExperimentalFeatureMinAggregateInputType = {
    id?: true
    key?: true
    name?: true
    description?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    tenantId?: true
  }

  export type ExperimentalFeatureMaxAggregateInputType = {
    id?: true
    key?: true
    name?: true
    description?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    tenantId?: true
  }

  export type ExperimentalFeatureCountAggregateInputType = {
    id?: true
    key?: true
    name?: true
    description?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    tenantId?: true
    _all?: true
  }

  export type ExperimentalFeatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExperimentalFeature to aggregate.
     */
    where?: ExperimentalFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentalFeatures to fetch.
     */
    orderBy?: ExperimentalFeatureOrderByWithRelationInput | ExperimentalFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperimentalFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentalFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentalFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExperimentalFeatures
    **/
    _count?: true | ExperimentalFeatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperimentalFeatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperimentalFeatureMaxAggregateInputType
  }

  export type GetExperimentalFeatureAggregateType<T extends ExperimentalFeatureAggregateArgs> = {
        [P in keyof T & keyof AggregateExperimentalFeature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperimentalFeature[P]>
      : GetScalarType<T[P], AggregateExperimentalFeature[P]>
  }




  export type ExperimentalFeatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentalFeatureWhereInput
    orderBy?: ExperimentalFeatureOrderByWithAggregationInput | ExperimentalFeatureOrderByWithAggregationInput[]
    by: ExperimentalFeatureScalarFieldEnum[] | ExperimentalFeatureScalarFieldEnum
    having?: ExperimentalFeatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperimentalFeatureCountAggregateInputType | true
    _min?: ExperimentalFeatureMinAggregateInputType
    _max?: ExperimentalFeatureMaxAggregateInputType
  }

  export type ExperimentalFeatureGroupByOutputType = {
    id: string
    key: string
    name: string
    description: string | null
    enabled: boolean
    createdAt: Date
    updatedAt: Date
    createdBy: string | null
    tenantId: string
    _count: ExperimentalFeatureCountAggregateOutputType | null
    _min: ExperimentalFeatureMinAggregateOutputType | null
    _max: ExperimentalFeatureMaxAggregateOutputType | null
  }

  type GetExperimentalFeatureGroupByPayload<T extends ExperimentalFeatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperimentalFeatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperimentalFeatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperimentalFeatureGroupByOutputType[P]>
            : GetScalarType<T[P], ExperimentalFeatureGroupByOutputType[P]>
        }
      >
    >


  export type ExperimentalFeatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    description?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experimentalFeature"]>

  export type ExperimentalFeatureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    description?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experimentalFeature"]>

  export type ExperimentalFeatureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    description?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    tenantId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experimentalFeature"]>

  export type ExperimentalFeatureSelectScalar = {
    id?: boolean
    key?: boolean
    name?: boolean
    description?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    tenantId?: boolean
  }

  export type ExperimentalFeatureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "name" | "description" | "enabled" | "createdAt" | "updatedAt" | "createdBy" | "tenantId", ExtArgs["result"]["experimentalFeature"]>
  export type ExperimentalFeatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type ExperimentalFeatureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type ExperimentalFeatureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $ExperimentalFeaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExperimentalFeature"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      name: string
      description: string | null
      enabled: boolean
      createdAt: Date
      updatedAt: Date
      createdBy: string | null
      tenantId: string
    }, ExtArgs["result"]["experimentalFeature"]>
    composites: {}
  }

  type ExperimentalFeatureGetPayload<S extends boolean | null | undefined | ExperimentalFeatureDefaultArgs> = $Result.GetResult<Prisma.$ExperimentalFeaturePayload, S>

  type ExperimentalFeatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExperimentalFeatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExperimentalFeatureCountAggregateInputType | true
    }

  export interface ExperimentalFeatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExperimentalFeature'], meta: { name: 'ExperimentalFeature' } }
    /**
     * Find zero or one ExperimentalFeature that matches the filter.
     * @param {ExperimentalFeatureFindUniqueArgs} args - Arguments to find a ExperimentalFeature
     * @example
     * // Get one ExperimentalFeature
     * const experimentalFeature = await prisma.experimentalFeature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExperimentalFeatureFindUniqueArgs>(args: SelectSubset<T, ExperimentalFeatureFindUniqueArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExperimentalFeature that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExperimentalFeatureFindUniqueOrThrowArgs} args - Arguments to find a ExperimentalFeature
     * @example
     * // Get one ExperimentalFeature
     * const experimentalFeature = await prisma.experimentalFeature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExperimentalFeatureFindUniqueOrThrowArgs>(args: SelectSubset<T, ExperimentalFeatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExperimentalFeature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentalFeatureFindFirstArgs} args - Arguments to find a ExperimentalFeature
     * @example
     * // Get one ExperimentalFeature
     * const experimentalFeature = await prisma.experimentalFeature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExperimentalFeatureFindFirstArgs>(args?: SelectSubset<T, ExperimentalFeatureFindFirstArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExperimentalFeature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentalFeatureFindFirstOrThrowArgs} args - Arguments to find a ExperimentalFeature
     * @example
     * // Get one ExperimentalFeature
     * const experimentalFeature = await prisma.experimentalFeature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExperimentalFeatureFindFirstOrThrowArgs>(args?: SelectSubset<T, ExperimentalFeatureFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExperimentalFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentalFeatureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExperimentalFeatures
     * const experimentalFeatures = await prisma.experimentalFeature.findMany()
     * 
     * // Get first 10 ExperimentalFeatures
     * const experimentalFeatures = await prisma.experimentalFeature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experimentalFeatureWithIdOnly = await prisma.experimentalFeature.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExperimentalFeatureFindManyArgs>(args?: SelectSubset<T, ExperimentalFeatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExperimentalFeature.
     * @param {ExperimentalFeatureCreateArgs} args - Arguments to create a ExperimentalFeature.
     * @example
     * // Create one ExperimentalFeature
     * const ExperimentalFeature = await prisma.experimentalFeature.create({
     *   data: {
     *     // ... data to create a ExperimentalFeature
     *   }
     * })
     * 
     */
    create<T extends ExperimentalFeatureCreateArgs>(args: SelectSubset<T, ExperimentalFeatureCreateArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExperimentalFeatures.
     * @param {ExperimentalFeatureCreateManyArgs} args - Arguments to create many ExperimentalFeatures.
     * @example
     * // Create many ExperimentalFeatures
     * const experimentalFeature = await prisma.experimentalFeature.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExperimentalFeatureCreateManyArgs>(args?: SelectSubset<T, ExperimentalFeatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExperimentalFeatures and returns the data saved in the database.
     * @param {ExperimentalFeatureCreateManyAndReturnArgs} args - Arguments to create many ExperimentalFeatures.
     * @example
     * // Create many ExperimentalFeatures
     * const experimentalFeature = await prisma.experimentalFeature.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExperimentalFeatures and only return the `id`
     * const experimentalFeatureWithIdOnly = await prisma.experimentalFeature.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExperimentalFeatureCreateManyAndReturnArgs>(args?: SelectSubset<T, ExperimentalFeatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExperimentalFeature.
     * @param {ExperimentalFeatureDeleteArgs} args - Arguments to delete one ExperimentalFeature.
     * @example
     * // Delete one ExperimentalFeature
     * const ExperimentalFeature = await prisma.experimentalFeature.delete({
     *   where: {
     *     // ... filter to delete one ExperimentalFeature
     *   }
     * })
     * 
     */
    delete<T extends ExperimentalFeatureDeleteArgs>(args: SelectSubset<T, ExperimentalFeatureDeleteArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExperimentalFeature.
     * @param {ExperimentalFeatureUpdateArgs} args - Arguments to update one ExperimentalFeature.
     * @example
     * // Update one ExperimentalFeature
     * const experimentalFeature = await prisma.experimentalFeature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExperimentalFeatureUpdateArgs>(args: SelectSubset<T, ExperimentalFeatureUpdateArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExperimentalFeatures.
     * @param {ExperimentalFeatureDeleteManyArgs} args - Arguments to filter ExperimentalFeatures to delete.
     * @example
     * // Delete a few ExperimentalFeatures
     * const { count } = await prisma.experimentalFeature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExperimentalFeatureDeleteManyArgs>(args?: SelectSubset<T, ExperimentalFeatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExperimentalFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentalFeatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExperimentalFeatures
     * const experimentalFeature = await prisma.experimentalFeature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExperimentalFeatureUpdateManyArgs>(args: SelectSubset<T, ExperimentalFeatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExperimentalFeatures and returns the data updated in the database.
     * @param {ExperimentalFeatureUpdateManyAndReturnArgs} args - Arguments to update many ExperimentalFeatures.
     * @example
     * // Update many ExperimentalFeatures
     * const experimentalFeature = await prisma.experimentalFeature.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExperimentalFeatures and only return the `id`
     * const experimentalFeatureWithIdOnly = await prisma.experimentalFeature.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExperimentalFeatureUpdateManyAndReturnArgs>(args: SelectSubset<T, ExperimentalFeatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExperimentalFeature.
     * @param {ExperimentalFeatureUpsertArgs} args - Arguments to update or create a ExperimentalFeature.
     * @example
     * // Update or create a ExperimentalFeature
     * const experimentalFeature = await prisma.experimentalFeature.upsert({
     *   create: {
     *     // ... data to create a ExperimentalFeature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExperimentalFeature we want to update
     *   }
     * })
     */
    upsert<T extends ExperimentalFeatureUpsertArgs>(args: SelectSubset<T, ExperimentalFeatureUpsertArgs<ExtArgs>>): Prisma__ExperimentalFeatureClient<$Result.GetResult<Prisma.$ExperimentalFeaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExperimentalFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentalFeatureCountArgs} args - Arguments to filter ExperimentalFeatures to count.
     * @example
     * // Count the number of ExperimentalFeatures
     * const count = await prisma.experimentalFeature.count({
     *   where: {
     *     // ... the filter for the ExperimentalFeatures we want to count
     *   }
     * })
    **/
    count<T extends ExperimentalFeatureCountArgs>(
      args?: Subset<T, ExperimentalFeatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperimentalFeatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExperimentalFeature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentalFeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperimentalFeatureAggregateArgs>(args: Subset<T, ExperimentalFeatureAggregateArgs>): Prisma.PrismaPromise<GetExperimentalFeatureAggregateType<T>>

    /**
     * Group by ExperimentalFeature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentalFeatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperimentalFeatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperimentalFeatureGroupByArgs['orderBy'] }
        : { orderBy?: ExperimentalFeatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperimentalFeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperimentalFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExperimentalFeature model
   */
  readonly fields: ExperimentalFeatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExperimentalFeature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperimentalFeatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExperimentalFeature model
   */
  interface ExperimentalFeatureFieldRefs {
    readonly id: FieldRef<"ExperimentalFeature", 'String'>
    readonly key: FieldRef<"ExperimentalFeature", 'String'>
    readonly name: FieldRef<"ExperimentalFeature", 'String'>
    readonly description: FieldRef<"ExperimentalFeature", 'String'>
    readonly enabled: FieldRef<"ExperimentalFeature", 'Boolean'>
    readonly createdAt: FieldRef<"ExperimentalFeature", 'DateTime'>
    readonly updatedAt: FieldRef<"ExperimentalFeature", 'DateTime'>
    readonly createdBy: FieldRef<"ExperimentalFeature", 'String'>
    readonly tenantId: FieldRef<"ExperimentalFeature", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExperimentalFeature findUnique
   */
  export type ExperimentalFeatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentalFeature to fetch.
     */
    where: ExperimentalFeatureWhereUniqueInput
  }

  /**
   * ExperimentalFeature findUniqueOrThrow
   */
  export type ExperimentalFeatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentalFeature to fetch.
     */
    where: ExperimentalFeatureWhereUniqueInput
  }

  /**
   * ExperimentalFeature findFirst
   */
  export type ExperimentalFeatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentalFeature to fetch.
     */
    where?: ExperimentalFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentalFeatures to fetch.
     */
    orderBy?: ExperimentalFeatureOrderByWithRelationInput | ExperimentalFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExperimentalFeatures.
     */
    cursor?: ExperimentalFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentalFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentalFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExperimentalFeatures.
     */
    distinct?: ExperimentalFeatureScalarFieldEnum | ExperimentalFeatureScalarFieldEnum[]
  }

  /**
   * ExperimentalFeature findFirstOrThrow
   */
  export type ExperimentalFeatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentalFeature to fetch.
     */
    where?: ExperimentalFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentalFeatures to fetch.
     */
    orderBy?: ExperimentalFeatureOrderByWithRelationInput | ExperimentalFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExperimentalFeatures.
     */
    cursor?: ExperimentalFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentalFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentalFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExperimentalFeatures.
     */
    distinct?: ExperimentalFeatureScalarFieldEnum | ExperimentalFeatureScalarFieldEnum[]
  }

  /**
   * ExperimentalFeature findMany
   */
  export type ExperimentalFeatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ExperimentalFeatures to fetch.
     */
    where?: ExperimentalFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExperimentalFeatures to fetch.
     */
    orderBy?: ExperimentalFeatureOrderByWithRelationInput | ExperimentalFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExperimentalFeatures.
     */
    cursor?: ExperimentalFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExperimentalFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExperimentalFeatures.
     */
    skip?: number
    distinct?: ExperimentalFeatureScalarFieldEnum | ExperimentalFeatureScalarFieldEnum[]
  }

  /**
   * ExperimentalFeature create
   */
  export type ExperimentalFeatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * The data needed to create a ExperimentalFeature.
     */
    data: XOR<ExperimentalFeatureCreateInput, ExperimentalFeatureUncheckedCreateInput>
  }

  /**
   * ExperimentalFeature createMany
   */
  export type ExperimentalFeatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExperimentalFeatures.
     */
    data: ExperimentalFeatureCreateManyInput | ExperimentalFeatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExperimentalFeature createManyAndReturn
   */
  export type ExperimentalFeatureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * The data used to create many ExperimentalFeatures.
     */
    data: ExperimentalFeatureCreateManyInput | ExperimentalFeatureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExperimentalFeature update
   */
  export type ExperimentalFeatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * The data needed to update a ExperimentalFeature.
     */
    data: XOR<ExperimentalFeatureUpdateInput, ExperimentalFeatureUncheckedUpdateInput>
    /**
     * Choose, which ExperimentalFeature to update.
     */
    where: ExperimentalFeatureWhereUniqueInput
  }

  /**
   * ExperimentalFeature updateMany
   */
  export type ExperimentalFeatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExperimentalFeatures.
     */
    data: XOR<ExperimentalFeatureUpdateManyMutationInput, ExperimentalFeatureUncheckedUpdateManyInput>
    /**
     * Filter which ExperimentalFeatures to update
     */
    where?: ExperimentalFeatureWhereInput
    /**
     * Limit how many ExperimentalFeatures to update.
     */
    limit?: number
  }

  /**
   * ExperimentalFeature updateManyAndReturn
   */
  export type ExperimentalFeatureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * The data used to update ExperimentalFeatures.
     */
    data: XOR<ExperimentalFeatureUpdateManyMutationInput, ExperimentalFeatureUncheckedUpdateManyInput>
    /**
     * Filter which ExperimentalFeatures to update
     */
    where?: ExperimentalFeatureWhereInput
    /**
     * Limit how many ExperimentalFeatures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExperimentalFeature upsert
   */
  export type ExperimentalFeatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * The filter to search for the ExperimentalFeature to update in case it exists.
     */
    where: ExperimentalFeatureWhereUniqueInput
    /**
     * In case the ExperimentalFeature found by the `where` argument doesn't exist, create a new ExperimentalFeature with this data.
     */
    create: XOR<ExperimentalFeatureCreateInput, ExperimentalFeatureUncheckedCreateInput>
    /**
     * In case the ExperimentalFeature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperimentalFeatureUpdateInput, ExperimentalFeatureUncheckedUpdateInput>
  }

  /**
   * ExperimentalFeature delete
   */
  export type ExperimentalFeatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
    /**
     * Filter which ExperimentalFeature to delete.
     */
    where: ExperimentalFeatureWhereUniqueInput
  }

  /**
   * ExperimentalFeature deleteMany
   */
  export type ExperimentalFeatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExperimentalFeatures to delete
     */
    where?: ExperimentalFeatureWhereInput
    /**
     * Limit how many ExperimentalFeatures to delete.
     */
    limit?: number
  }

  /**
   * ExperimentalFeature without action
   */
  export type ExperimentalFeatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentalFeature
     */
    select?: ExperimentalFeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExperimentalFeature
     */
    omit?: ExperimentalFeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentalFeatureInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    domain: 'domain',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    timestamp: 'timestamp',
    read: 'read',
    actionUrl: 'actionUrl',
    actionLabel: 'actionLabel',
    module: 'module',
    tenantId: 'tenantId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    status: 'status',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId',
    employeeId: 'employeeId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    managerId: 'managerId',
    employeeCount: 'employeeCount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const BranchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    address: 'address',
    managerId: 'managerId',
    managerUserId: 'managerUserId',
    departmentId: 'departmentId',
    employeeCount: 'employeeCount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type BranchScalarFieldEnum = (typeof BranchScalarFieldEnum)[keyof typeof BranchScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    employeeNumber: 'employeeNumber',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    position: 'position',
    departmentId: 'departmentId',
    branchId: 'branchId',
    salary: 'salary',
    hireDate: 'hireDate',
    terminationDate: 'terminationDate',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const PayrollPeriodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    payDate: 'payDate',
    status: 'status',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PayrollPeriodScalarFieldEnum = (typeof PayrollPeriodScalarFieldEnum)[keyof typeof PayrollPeriodScalarFieldEnum]


  export const PayrollScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    payrollPeriodId: 'payrollPeriodId',
    basicSalary: 'basicSalary',
    grossSalary: 'grossSalary',
    totalDeductions: 'totalDeductions',
    netSalary: 'netSalary',
    status: 'status',
    processedAt: 'processedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PayrollScalarFieldEnum = (typeof PayrollScalarFieldEnum)[keyof typeof PayrollScalarFieldEnum]


  export const PayrollItemScalarFieldEnum: {
    id: 'id',
    payrollId: 'payrollId',
    type: 'type',
    category: 'category',
    name: 'name',
    amount: 'amount',
    isStatutory: 'isStatutory',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PayrollItemScalarFieldEnum = (typeof PayrollItemScalarFieldEnum)[keyof typeof PayrollItemScalarFieldEnum]


  export const TaxBracketScalarFieldEnum: {
    id: 'id',
    name: 'name',
    minAmount: 'minAmount',
    maxAmount: 'maxAmount',
    rate: 'rate',
    fixedAmount: 'fixedAmount',
    isActive: 'isActive',
    effectiveDate: 'effectiveDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type TaxBracketScalarFieldEnum = (typeof TaxBracketScalarFieldEnum)[keyof typeof TaxBracketScalarFieldEnum]


  export const PayStubScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    payrollId: 'payrollId',
    payrollPeriodId: 'payrollPeriodId',
    stubNumber: 'stubNumber',
    generatedAt: 'generatedAt',
    pdfPath: 'pdfPath',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PayStubScalarFieldEnum = (typeof PayStubScalarFieldEnum)[keyof typeof PayStubScalarFieldEnum]


  export const PayrollSettingsScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    companyName: 'companyName',
    kraPin: 'kraPin',
    nssfNumber: 'nssfNumber',
    nhifNumber: 'nhifNumber',
    companyAddress: 'companyAddress',
    companyCity: 'companyCity',
    companyPostalCode: 'companyPostalCode',
    personalRelief: 'personalRelief',
    overtimeMultiplier: 'overtimeMultiplier',
    workingDaysPerMonth: 'workingDaysPerMonth',
    workingHoursPerDay: 'workingHoursPerDay',
    payFrequency: 'payFrequency',
    payDay: 'payDay',
    cutoffDay: 'cutoffDay',
    requirePayrollApproval: 'requirePayrollApproval',
    approvalLevels: 'approvalLevels',
    autoApproveThreshold: 'autoApproveThreshold',
    notifyEmployeesOnPayment: 'notifyEmployeesOnPayment',
    sendPayslipsByEmail: 'sendPayslipsByEmail',
    bankName: 'bankName',
    accountNumber: 'accountNumber',
    branchCode: 'branchCode',
    swiftCode: 'swiftCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PayrollSettingsScalarFieldEnum = (typeof PayrollSettingsScalarFieldEnum)[keyof typeof PayrollSettingsScalarFieldEnum]


  export const LeaveTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type LeaveTypeScalarFieldEnum = (typeof LeaveTypeScalarFieldEnum)[keyof typeof LeaveTypeScalarFieldEnum]


  export const LeavePolicyScalarFieldEnum: {
    id: 'id',
    leaveTypeId: 'leaveTypeId',
    name: 'name',
    description: 'description',
    maxDaysPerYear: 'maxDaysPerYear',
    maxDaysPerRequest: 'maxDaysPerRequest',
    minDaysNotice: 'minDaysNotice',
    maxCarryForward: 'maxCarryForward',
    allowNegativeBalance: 'allowNegativeBalance',
    requiresApproval: 'requiresApproval',
    autoApprove: 'autoApprove',
    accrualRate: 'accrualRate',
    probationPeriodDays: 'probationPeriodDays',
    isActive: 'isActive',
    effectiveDate: 'effectiveDate',
    expiryDate: 'expiryDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type LeavePolicyScalarFieldEnum = (typeof LeavePolicyScalarFieldEnum)[keyof typeof LeavePolicyScalarFieldEnum]


  export const LeaveRequestScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    branchId: 'branchId',
    leaveTypeId: 'leaveTypeId',
    startDate: 'startDate',
    endDate: 'endDate',
    totalDays: 'totalDays',
    reason: 'reason',
    status: 'status',
    appliedAt: 'appliedAt',
    approvedAt: 'approvedAt',
    approvedBy: 'approvedBy',
    rejectedAt: 'rejectedAt',
    rejectedBy: 'rejectedBy',
    rejectionReason: 'rejectionReason',
    cancelledAt: 'cancelledAt',
    cancelledBy: 'cancelledBy',
    comments: 'comments',
    attachments: 'attachments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type LeaveRequestScalarFieldEnum = (typeof LeaveRequestScalarFieldEnum)[keyof typeof LeaveRequestScalarFieldEnum]


  export const LeaveBalanceScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    leaveTypeId: 'leaveTypeId',
    year: 'year',
    allocated: 'allocated',
    used: 'used',
    pending: 'pending',
    available: 'available',
    carriedForward: 'carriedForward',
    accrued: 'accrued',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type LeaveBalanceScalarFieldEnum = (typeof LeaveBalanceScalarFieldEnum)[keyof typeof LeaveBalanceScalarFieldEnum]


  export const HolidayScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    type: 'type',
    description: 'description',
    isRecurring: 'isRecurring',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type HolidayScalarFieldEnum = (typeof HolidayScalarFieldEnum)[keyof typeof HolidayScalarFieldEnum]


  export const PerformanceReviewCycleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    reviewDeadline: 'reviewDeadline',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PerformanceReviewCycleScalarFieldEnum = (typeof PerformanceReviewCycleScalarFieldEnum)[keyof typeof PerformanceReviewCycleScalarFieldEnum]


  export const PerformanceReviewScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    reviewCycleId: 'reviewCycleId',
    reviewerId: 'reviewerId',
    status: 'status',
    selfAssessmentCompleted: 'selfAssessmentCompleted',
    managerReviewCompleted: 'managerReviewCompleted',
    overallRating: 'overallRating',
    overallComments: 'overallComments',
    strengths: 'strengths',
    areasForImprovement: 'areasForImprovement',
    developmentPlan: 'developmentPlan',
    goals: 'goals',
    submittedAt: 'submittedAt',
    completedAt: 'completedAt',
    approvedAt: 'approvedAt',
    approvedBy: 'approvedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PerformanceReviewScalarFieldEnum = (typeof PerformanceReviewScalarFieldEnum)[keyof typeof PerformanceReviewScalarFieldEnum]


  export const PerformanceGoalScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    reviewCycleId: 'reviewCycleId',
    title: 'title',
    description: 'description',
    category: 'category',
    priority: 'priority',
    targetDate: 'targetDate',
    status: 'status',
    progress: 'progress',
    measurementCriteria: 'measurementCriteria',
    achievedDate: 'achievedDate',
    comments: 'comments',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PerformanceGoalScalarFieldEnum = (typeof PerformanceGoalScalarFieldEnum)[keyof typeof PerformanceGoalScalarFieldEnum]


  export const PerformanceRatingScalarFieldEnum: {
    id: 'id',
    performanceReviewId: 'performanceReviewId',
    competency: 'competency',
    rating: 'rating',
    maxRating: 'maxRating',
    weight: 'weight',
    comments: 'comments',
    raterType: 'raterType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PerformanceRatingScalarFieldEnum = (typeof PerformanceRatingScalarFieldEnum)[keyof typeof PerformanceRatingScalarFieldEnum]


  export const PerformanceFeedbackScalarFieldEnum: {
    id: 'id',
    performanceReviewId: 'performanceReviewId',
    feedbackType: 'feedbackType',
    feedback: 'feedback',
    isPrivate: 'isPrivate',
    providedBy: 'providedBy',
    providedAt: 'providedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type PerformanceFeedbackScalarFieldEnum = (typeof PerformanceFeedbackScalarFieldEnum)[keyof typeof PerformanceFeedbackScalarFieldEnum]


  export const ReportTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    type: 'type',
    query: 'query',
    parameters: 'parameters',
    columns: 'columns',
    filters: 'filters',
    groupBy: 'groupBy',
    sortBy: 'sortBy',
    chartConfig: 'chartConfig',
    isActive: 'isActive',
    isPublic: 'isPublic',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type ReportTemplateScalarFieldEnum = (typeof ReportTemplateScalarFieldEnum)[keyof typeof ReportTemplateScalarFieldEnum]


  export const ReportInstanceScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    name: 'name',
    description: 'description',
    parameters: 'parameters',
    filters: 'filters',
    status: 'status',
    data: 'data',
    filePath: 'filePath',
    fileFormat: 'fileFormat',
    fileSize: 'fileSize',
    recordCount: 'recordCount',
    generatedBy: 'generatedBy',
    generatedAt: 'generatedAt',
    expiresAt: 'expiresAt',
    isScheduled: 'isScheduled',
    scheduleConfig: 'scheduleConfig',
    error: 'error',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type ReportInstanceScalarFieldEnum = (typeof ReportInstanceScalarFieldEnum)[keyof typeof ReportInstanceScalarFieldEnum]


  export const DashboardScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    layout: 'layout',
    widgets: 'widgets',
    filters: 'filters',
    refreshInterval: 'refreshInterval',
    isDefault: 'isDefault',
    isPublic: 'isPublic',
    allowedRoles: 'allowedRoles',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type DashboardScalarFieldEnum = (typeof DashboardScalarFieldEnum)[keyof typeof DashboardScalarFieldEnum]


  export const SalaryAdvancePolicyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    maxAdvancePercentage: 'maxAdvancePercentage',
    maxAdvanceAmount: 'maxAdvanceAmount',
    minServiceMonths: 'minServiceMonths',
    maxAdvancesPerYear: 'maxAdvancesPerYear',
    interestRate: 'interestRate',
    requiresApproval: 'requiresApproval',
    autoApprove: 'autoApprove',
    isActive: 'isActive',
    effectiveDate: 'effectiveDate',
    expiryDate: 'expiryDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId',
    monthlyDeductionPercentage: 'monthlyDeductionPercentage'
  };

  export type SalaryAdvancePolicyScalarFieldEnum = (typeof SalaryAdvancePolicyScalarFieldEnum)[keyof typeof SalaryAdvancePolicyScalarFieldEnum]


  export const SalaryAdvanceRequestScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    branchId: 'branchId',
    requestedAmount: 'requestedAmount',
    approvedAmount: 'approvedAmount',
    reason: 'reason',
    status: 'status',
    requestDate: 'requestDate',
    approvedAt: 'approvedAt',
    approvedBy: 'approvedBy',
    rejectedAt: 'rejectedAt',
    rejectedBy: 'rejectedBy',
    rejectionReason: 'rejectionReason',
    disbursedAt: 'disbursedAt',
    disbursedBy: 'disbursedBy',
    repaymentStartDate: 'repaymentStartDate',
    repaymentEndDate: 'repaymentEndDate',
    monthlyDeduction: 'monthlyDeduction',
    totalRepaid: 'totalRepaid',
    outstandingBalance: 'outstandingBalance',
    interestRate: 'interestRate',
    totalInterest: 'totalInterest',
    comments: 'comments',
    attachments: 'attachments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type SalaryAdvanceRequestScalarFieldEnum = (typeof SalaryAdvanceRequestScalarFieldEnum)[keyof typeof SalaryAdvanceRequestScalarFieldEnum]


  export const SalaryAdvanceRepaymentScalarFieldEnum: {
    id: 'id',
    salaryAdvanceRequestId: 'salaryAdvanceRequestId',
    payrollPeriodId: 'payrollPeriodId',
    repaymentDate: 'repaymentDate',
    principalAmount: 'principalAmount',
    interestAmount: 'interestAmount',
    totalAmount: 'totalAmount',
    paymentMethod: 'paymentMethod',
    reference: 'reference',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type SalaryAdvanceRepaymentScalarFieldEnum = (typeof SalaryAdvanceRepaymentScalarFieldEnum)[keyof typeof SalaryAdvanceRepaymentScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    userId: 'userId',
    details: 'details',
    createdAt: 'createdAt',
    tenantId: 'tenantId'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SecurityAlertScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    timestamp: 'timestamp',
    tenantId: 'tenantId'
  };

  export type SecurityAlertScalarFieldEnum = (typeof SecurityAlertScalarFieldEnum)[keyof typeof SecurityAlertScalarFieldEnum]


  export const SecuritySettingsScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    twoFactorAuth: 'twoFactorAuth',
    passwordExpiry: 'passwordExpiry',
    sessionTimeout: 'sessionTimeout',
    ipWhitelist: 'ipWhitelist',
    auditLogging: 'auditLogging',
    encryptionAtRest: 'encryptionAtRest'
  };

  export type SecuritySettingsScalarFieldEnum = (typeof SecuritySettingsScalarFieldEnum)[keyof typeof SecuritySettingsScalarFieldEnum]


  export const WorkflowTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    version: 'version',
    isActive: 'isActive',
    steps: 'steps',
    triggers: 'triggers',
    variables: 'variables',
    createdBy: 'createdBy',
    createdDate: 'createdDate',
    lastModified: 'lastModified',
    tenantId: 'tenantId'
  };

  export type WorkflowTemplateScalarFieldEnum = (typeof WorkflowTemplateScalarFieldEnum)[keyof typeof WorkflowTemplateScalarFieldEnum]


  export const TrainingScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    title: 'title',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    capacity: 'capacity',
    instructor: 'instructor',
    venue: 'venue',
    requirements: 'requirements',
    certification: 'certification',
    cost: 'cost',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingScalarFieldEnum = (typeof TrainingScalarFieldEnum)[keyof typeof TrainingScalarFieldEnum]


  export const TrainingEnrollmentScalarFieldEnum: {
    id: 'id',
    trainingId: 'trainingId',
    employeeId: 'employeeId',
    enrollmentDate: 'enrollmentDate',
    completionDate: 'completionDate',
    status: 'status',
    progress: 'progress',
    score: 'score',
    certificateIssued: 'certificateIssued',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrainingEnrollmentScalarFieldEnum = (typeof TrainingEnrollmentScalarFieldEnum)[keyof typeof TrainingEnrollmentScalarFieldEnum]


  export const IntegrationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tenantId: 'tenantId',
    config: 'config',
    createdAt: 'createdAt',
    lastSyncTime: 'lastSyncTime',
    status: 'status',
    successRate: 'successRate',
    type: 'type',
    updatedAt: 'updatedAt'
  };

  export type IntegrationScalarFieldEnum = (typeof IntegrationScalarFieldEnum)[keyof typeof IntegrationScalarFieldEnum]


  export const IntegrationLogScalarFieldEnum: {
    id: 'id',
    integrationId: 'integrationId',
    message: 'message',
    createdAt: 'createdAt',
    tenantId: 'tenantId',
    details: 'details',
    event: 'event',
    status: 'status'
  };

  export type IntegrationLogScalarFieldEnum = (typeof IntegrationLogScalarFieldEnum)[keyof typeof IntegrationLogScalarFieldEnum]


  export const WorkflowScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tenantId: 'tenantId'
  };

  export type WorkflowScalarFieldEnum = (typeof WorkflowScalarFieldEnum)[keyof typeof WorkflowScalarFieldEnum]


  export const WorkflowStatsScalarFieldEnum: {
    id: 'id',
    workflowId: 'workflowId',
    stats: 'stats',
    createdAt: 'createdAt',
    tenantId: 'tenantId'
  };

  export type WorkflowStatsScalarFieldEnum = (typeof WorkflowStatsScalarFieldEnum)[keyof typeof WorkflowStatsScalarFieldEnum]


  export const ApprovalScalarFieldEnum: {
    id: 'id',
    workflowId: 'workflowId',
    approverId: 'approverId',
    status: 'status',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type ApprovalScalarFieldEnum = (typeof ApprovalScalarFieldEnum)[keyof typeof ApprovalScalarFieldEnum]


  export const ExperimentalFeatureScalarFieldEnum: {
    id: 'id',
    key: 'key',
    name: 'name',
    description: 'description',
    enabled: 'enabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    tenantId: 'tenantId'
  };

  export type ExperimentalFeatureScalarFieldEnum = (typeof ExperimentalFeatureScalarFieldEnum)[keyof typeof ExperimentalFeatureScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    domain?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    approvals?: ApprovalListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    branches?: BranchListRelationFilter
    dashboards?: DashboardListRelationFilter
    departments?: DepartmentListRelationFilter
    employees?: EmployeeListRelationFilter
    experimentalFeatures?: ExperimentalFeatureListRelationFilter
    holidays?: HolidayListRelationFilter
    integrationLogs?: IntegrationLogListRelationFilter
    integrations?: IntegrationListRelationFilter
    leaveBalances?: LeaveBalanceListRelationFilter
    leavePolicies?: LeavePolicyListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    leaveTypes?: LeaveTypeListRelationFilter
    payStubs?: PayStubListRelationFilter
    payrollItems?: PayrollItemListRelationFilter
    payrollPeriods?: PayrollPeriodListRelationFilter
    payrollSettings?: XOR<PayrollSettingsNullableScalarRelationFilter, PayrollSettingsWhereInput> | null
    payrolls?: PayrollListRelationFilter
    performanceFeedback?: PerformanceFeedbackListRelationFilter
    performanceGoals?: PerformanceGoalListRelationFilter
    performanceRatings?: PerformanceRatingListRelationFilter
    performanceReviewCycles?: PerformanceReviewCycleListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
    reportInstances?: ReportInstanceListRelationFilter
    reportTemplates?: ReportTemplateListRelationFilter
    salaryAdvancePolicies?: SalaryAdvancePolicyListRelationFilter
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentListRelationFilter
    salaryAdvanceRequests?: SalaryAdvanceRequestListRelationFilter
    securityAlerts?: SecurityAlertListRelationFilter
    securitySettings?: XOR<SecuritySettingsNullableScalarRelationFilter, SecuritySettingsWhereInput> | null
    taxBrackets?: TaxBracketListRelationFilter
    trainings?: TrainingListRelationFilter
    users?: UserListRelationFilter
    workflowStats?: WorkflowStatsListRelationFilter
    workflowTemplates?: WorkflowTemplateListRelationFilter
    workflows?: WorkflowListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    domain?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvals?: ApprovalOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    branches?: BranchOrderByRelationAggregateInput
    dashboards?: DashboardOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    employees?: EmployeeOrderByRelationAggregateInput
    experimentalFeatures?: ExperimentalFeatureOrderByRelationAggregateInput
    holidays?: HolidayOrderByRelationAggregateInput
    integrationLogs?: IntegrationLogOrderByRelationAggregateInput
    integrations?: IntegrationOrderByRelationAggregateInput
    leaveBalances?: LeaveBalanceOrderByRelationAggregateInput
    leavePolicies?: LeavePolicyOrderByRelationAggregateInput
    leaveRequests?: LeaveRequestOrderByRelationAggregateInput
    leaveTypes?: LeaveTypeOrderByRelationAggregateInput
    payStubs?: PayStubOrderByRelationAggregateInput
    payrollItems?: PayrollItemOrderByRelationAggregateInput
    payrollPeriods?: PayrollPeriodOrderByRelationAggregateInput
    payrollSettings?: PayrollSettingsOrderByWithRelationInput
    payrolls?: PayrollOrderByRelationAggregateInput
    performanceFeedback?: PerformanceFeedbackOrderByRelationAggregateInput
    performanceGoals?: PerformanceGoalOrderByRelationAggregateInput
    performanceRatings?: PerformanceRatingOrderByRelationAggregateInput
    performanceReviewCycles?: PerformanceReviewCycleOrderByRelationAggregateInput
    performanceReviews?: PerformanceReviewOrderByRelationAggregateInput
    reportInstances?: ReportInstanceOrderByRelationAggregateInput
    reportTemplates?: ReportTemplateOrderByRelationAggregateInput
    salaryAdvancePolicies?: SalaryAdvancePolicyOrderByRelationAggregateInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentOrderByRelationAggregateInput
    salaryAdvanceRequests?: SalaryAdvanceRequestOrderByRelationAggregateInput
    securityAlerts?: SecurityAlertOrderByRelationAggregateInput
    securitySettings?: SecuritySettingsOrderByWithRelationInput
    taxBrackets?: TaxBracketOrderByRelationAggregateInput
    trainings?: TrainingOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    workflowStats?: WorkflowStatsOrderByRelationAggregateInput
    workflowTemplates?: WorkflowTemplateOrderByRelationAggregateInput
    workflows?: WorkflowOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    domain?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    name?: StringFilter<"Tenant"> | string
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    approvals?: ApprovalListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    branches?: BranchListRelationFilter
    dashboards?: DashboardListRelationFilter
    departments?: DepartmentListRelationFilter
    employees?: EmployeeListRelationFilter
    experimentalFeatures?: ExperimentalFeatureListRelationFilter
    holidays?: HolidayListRelationFilter
    integrationLogs?: IntegrationLogListRelationFilter
    integrations?: IntegrationListRelationFilter
    leaveBalances?: LeaveBalanceListRelationFilter
    leavePolicies?: LeavePolicyListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    leaveTypes?: LeaveTypeListRelationFilter
    payStubs?: PayStubListRelationFilter
    payrollItems?: PayrollItemListRelationFilter
    payrollPeriods?: PayrollPeriodListRelationFilter
    payrollSettings?: XOR<PayrollSettingsNullableScalarRelationFilter, PayrollSettingsWhereInput> | null
    payrolls?: PayrollListRelationFilter
    performanceFeedback?: PerformanceFeedbackListRelationFilter
    performanceGoals?: PerformanceGoalListRelationFilter
    performanceRatings?: PerformanceRatingListRelationFilter
    performanceReviewCycles?: PerformanceReviewCycleListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
    reportInstances?: ReportInstanceListRelationFilter
    reportTemplates?: ReportTemplateListRelationFilter
    salaryAdvancePolicies?: SalaryAdvancePolicyListRelationFilter
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentListRelationFilter
    salaryAdvanceRequests?: SalaryAdvanceRequestListRelationFilter
    securityAlerts?: SecurityAlertListRelationFilter
    securitySettings?: XOR<SecuritySettingsNullableScalarRelationFilter, SecuritySettingsWhereInput> | null
    taxBrackets?: TaxBracketListRelationFilter
    trainings?: TrainingListRelationFilter
    users?: UserListRelationFilter
    workflowStats?: WorkflowStatsListRelationFilter
    workflowTemplates?: WorkflowTemplateListRelationFilter
    workflows?: WorkflowListRelationFilter
  }, "id" | "domain">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    domain?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    domain?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    timestamp?: DateTimeFilter<"Notification"> | Date | string
    read?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    actionLabel?: StringNullableFilter<"Notification"> | string | null
    module?: StringNullableFilter<"Notification"> | string | null
    tenantId?: StringFilter<"Notification"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    read?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    actionLabel?: SortOrderInput | SortOrder
    module?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    timestamp?: DateTimeFilter<"Notification"> | Date | string
    read?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    actionLabel?: StringNullableFilter<"Notification"> | string | null
    module?: StringNullableFilter<"Notification"> | string | null
    tenantId?: StringFilter<"Notification"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    read?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    actionLabel?: SortOrderInput | SortOrder
    module?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    actionLabel?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    module?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    tenantId?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    tenantId?: StringFilter<"User"> | string
    employeeId?: StringNullableFilter<"User"> | string | null
    auditLogs?: AuditLogListRelationFilter
    managedDepartments?: DepartmentListRelationFilter
    sessions?: UserSessionListRelationFilter
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    auditLogs?: AuditLogOrderByRelationAggregateInput
    managedDepartments?: DepartmentOrderByRelationAggregateInput
    sessions?: UserSessionOrderByRelationAggregateInput
    employee?: EmployeeOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    employeeId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    tenantId?: StringFilter<"User"> | string
    auditLogs?: AuditLogListRelationFilter
    managedDepartments?: DepartmentListRelationFilter
    sessions?: UserSessionListRelationFilter
    employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    notifications?: NotificationListRelationFilter
  }, "id" | "email" | "employeeId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    tenantId?: StringWithAggregatesFilter<"User"> | string
    employeeId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    token?: StringWithAggregatesFilter<"UserSession"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    managerId?: StringNullableFilter<"Department"> | string | null
    employeeCount?: IntFilter<"Department"> | number
    status?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    tenantId?: StringFilter<"Department"> | string
    branches?: BranchListRelationFilter
    manager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    employees?: EmployeeListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    managerId?: SortOrderInput | SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    branches?: BranchOrderByRelationAggregateInput
    manager?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    employees?: EmployeeOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_tenantId?: DepartmentNameTenantIdCompoundUniqueInput
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    managerId?: StringNullableFilter<"Department"> | string | null
    employeeCount?: IntFilter<"Department"> | number
    status?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    tenantId?: StringFilter<"Department"> | string
    branches?: BranchListRelationFilter
    manager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    employees?: EmployeeListRelationFilter
  }, "id" | "name_tenantId">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    managerId?: SortOrderInput | SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    managerId?: StringNullableWithAggregatesFilter<"Department"> | string | null
    employeeCount?: IntWithAggregatesFilter<"Department"> | number
    status?: StringWithAggregatesFilter<"Department"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Department"> | string
  }

  export type BranchWhereInput = {
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    id?: StringFilter<"Branch"> | string
    name?: StringFilter<"Branch"> | string
    location?: StringNullableFilter<"Branch"> | string | null
    address?: StringNullableFilter<"Branch"> | string | null
    managerId?: StringNullableFilter<"Branch"> | string | null
    managerUserId?: StringNullableFilter<"Branch"> | string | null
    departmentId?: StringFilter<"Branch"> | string
    employeeCount?: IntFilter<"Branch"> | number
    status?: StringFilter<"Branch"> | string
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    tenantId?: StringFilter<"Branch"> | string
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    employees?: EmployeeListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    salaryAdvanceRequests?: SalaryAdvanceRequestListRelationFilter
  }

  export type BranchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    managerId?: SortOrderInput | SortOrder
    managerUserId?: SortOrderInput | SortOrder
    departmentId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    employees?: EmployeeOrderByRelationAggregateInput
    leaveRequests?: LeaveRequestOrderByRelationAggregateInput
    salaryAdvanceRequests?: SalaryAdvanceRequestOrderByRelationAggregateInput
  }

  export type BranchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_tenantId?: BranchNameTenantIdCompoundUniqueInput
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    name?: StringFilter<"Branch"> | string
    location?: StringNullableFilter<"Branch"> | string | null
    address?: StringNullableFilter<"Branch"> | string | null
    managerId?: StringNullableFilter<"Branch"> | string | null
    managerUserId?: StringNullableFilter<"Branch"> | string | null
    departmentId?: StringFilter<"Branch"> | string
    employeeCount?: IntFilter<"Branch"> | number
    status?: StringFilter<"Branch"> | string
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    tenantId?: StringFilter<"Branch"> | string
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    employees?: EmployeeListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    salaryAdvanceRequests?: SalaryAdvanceRequestListRelationFilter
  }, "id" | "name_tenantId">

  export type BranchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    managerId?: SortOrderInput | SortOrder
    managerUserId?: SortOrderInput | SortOrder
    departmentId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: BranchCountOrderByAggregateInput
    _avg?: BranchAvgOrderByAggregateInput
    _max?: BranchMaxOrderByAggregateInput
    _min?: BranchMinOrderByAggregateInput
    _sum?: BranchSumOrderByAggregateInput
  }

  export type BranchScalarWhereWithAggregatesInput = {
    AND?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    OR?: BranchScalarWhereWithAggregatesInput[]
    NOT?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Branch"> | string
    name?: StringWithAggregatesFilter<"Branch"> | string
    location?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    address?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    managerId?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    managerUserId?: StringNullableWithAggregatesFilter<"Branch"> | string | null
    departmentId?: StringWithAggregatesFilter<"Branch"> | string
    employeeCount?: IntWithAggregatesFilter<"Branch"> | number
    status?: StringWithAggregatesFilter<"Branch"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Branch"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Branch"> | string
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    employeeNumber?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    phone?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    position?: StringFilter<"Employee"> | string
    departmentId?: StringFilter<"Employee"> | string
    branchId?: StringNullableFilter<"Employee"> | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    hireDate?: DateTimeFilter<"Employee"> | Date | string
    terminationDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    status?: StringFilter<"Employee"> | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    tenantId?: StringFilter<"Employee"> | string
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    leaveBalances?: LeaveBalanceListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    payStubs?: PayStubListRelationFilter
    payrolls?: PayrollListRelationFilter
    performanceGoals?: PerformanceGoalListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
    salaryAdvanceRequests?: SalaryAdvanceRequestListRelationFilter
    trainingEnrollments?: TrainingEnrollmentListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    employeeNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    branch?: BranchOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    leaveBalances?: LeaveBalanceOrderByRelationAggregateInput
    leaveRequests?: LeaveRequestOrderByRelationAggregateInput
    payStubs?: PayStubOrderByRelationAggregateInput
    payrolls?: PayrollOrderByRelationAggregateInput
    performanceGoals?: PerformanceGoalOrderByRelationAggregateInput
    performanceReviews?: PerformanceReviewOrderByRelationAggregateInput
    salaryAdvanceRequests?: SalaryAdvanceRequestOrderByRelationAggregateInput
    trainingEnrollments?: TrainingEnrollmentOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeNumber?: string
    email?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    phone?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    position?: StringFilter<"Employee"> | string
    departmentId?: StringFilter<"Employee"> | string
    branchId?: StringNullableFilter<"Employee"> | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    hireDate?: DateTimeFilter<"Employee"> | Date | string
    terminationDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    status?: StringFilter<"Employee"> | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    tenantId?: StringFilter<"Employee"> | string
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    leaveBalances?: LeaveBalanceListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    payStubs?: PayStubListRelationFilter
    payrolls?: PayrollListRelationFilter
    performanceGoals?: PerformanceGoalListRelationFilter
    performanceReviews?: PerformanceReviewListRelationFilter
    salaryAdvanceRequests?: SalaryAdvanceRequestListRelationFilter
    trainingEnrollments?: TrainingEnrollmentListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "employeeNumber" | "email">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    employeeNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    employeeNumber?: StringWithAggregatesFilter<"Employee"> | string
    firstName?: StringWithAggregatesFilter<"Employee"> | string
    lastName?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    phone?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    address?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    position?: StringWithAggregatesFilter<"Employee"> | string
    departmentId?: StringWithAggregatesFilter<"Employee"> | string
    branchId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    salary?: FloatNullableWithAggregatesFilter<"Employee"> | number | null
    hireDate?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    terminationDate?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    status?: StringWithAggregatesFilter<"Employee"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Employee"> | string
  }

  export type PayrollPeriodWhereInput = {
    AND?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    OR?: PayrollPeriodWhereInput[]
    NOT?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    id?: StringFilter<"PayrollPeriod"> | string
    name?: StringFilter<"PayrollPeriod"> | string
    startDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    endDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    payDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    status?: StringFilter<"PayrollPeriod"> | string
    description?: StringNullableFilter<"PayrollPeriod"> | string | null
    createdAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    tenantId?: StringFilter<"PayrollPeriod"> | string
    payStubs?: PayStubListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    payrolls?: PayrollListRelationFilter
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentListRelationFilter
  }

  export type PayrollPeriodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    payStubs?: PayStubOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
    payrolls?: PayrollOrderByRelationAggregateInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentOrderByRelationAggregateInput
  }

  export type PayrollPeriodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_tenantId?: PayrollPeriodNameTenantIdCompoundUniqueInput
    AND?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    OR?: PayrollPeriodWhereInput[]
    NOT?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    name?: StringFilter<"PayrollPeriod"> | string
    startDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    endDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    payDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    status?: StringFilter<"PayrollPeriod"> | string
    description?: StringNullableFilter<"PayrollPeriod"> | string | null
    createdAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    tenantId?: StringFilter<"PayrollPeriod"> | string
    payStubs?: PayStubListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    payrolls?: PayrollListRelationFilter
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentListRelationFilter
  }, "id" | "name_tenantId">

  export type PayrollPeriodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PayrollPeriodCountOrderByAggregateInput
    _max?: PayrollPeriodMaxOrderByAggregateInput
    _min?: PayrollPeriodMinOrderByAggregateInput
  }

  export type PayrollPeriodScalarWhereWithAggregatesInput = {
    AND?: PayrollPeriodScalarWhereWithAggregatesInput | PayrollPeriodScalarWhereWithAggregatesInput[]
    OR?: PayrollPeriodScalarWhereWithAggregatesInput[]
    NOT?: PayrollPeriodScalarWhereWithAggregatesInput | PayrollPeriodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollPeriod"> | string
    name?: StringWithAggregatesFilter<"PayrollPeriod"> | string
    startDate?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    payDate?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    status?: StringWithAggregatesFilter<"PayrollPeriod"> | string
    description?: StringNullableWithAggregatesFilter<"PayrollPeriod"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PayrollPeriod"> | string
  }

  export type PayrollWhereInput = {
    AND?: PayrollWhereInput | PayrollWhereInput[]
    OR?: PayrollWhereInput[]
    NOT?: PayrollWhereInput | PayrollWhereInput[]
    id?: StringFilter<"Payroll"> | string
    employeeId?: StringFilter<"Payroll"> | string
    payrollPeriodId?: StringFilter<"Payroll"> | string
    basicSalary?: FloatFilter<"Payroll"> | number
    grossSalary?: FloatFilter<"Payroll"> | number
    totalDeductions?: FloatFilter<"Payroll"> | number
    netSalary?: FloatFilter<"Payroll"> | number
    status?: StringFilter<"Payroll"> | string
    processedAt?: DateTimeNullableFilter<"Payroll"> | Date | string | null
    createdAt?: DateTimeFilter<"Payroll"> | Date | string
    updatedAt?: DateTimeFilter<"Payroll"> | Date | string
    tenantId?: StringFilter<"Payroll"> | string
    payStub?: XOR<PayStubNullableScalarRelationFilter, PayStubWhereInput> | null
    payrollItems?: PayrollItemListRelationFilter
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    payrollPeriod?: XOR<PayrollPeriodScalarRelationFilter, PayrollPeriodWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PayrollOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    basicSalary?: SortOrder
    grossSalary?: SortOrder
    totalDeductions?: SortOrder
    netSalary?: SortOrder
    status?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    payStub?: PayStubOrderByWithRelationInput
    payrollItems?: PayrollItemOrderByRelationAggregateInput
    employee?: EmployeeOrderByWithRelationInput
    payrollPeriod?: PayrollPeriodOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PayrollWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeId_payrollPeriodId?: PayrollEmployeeIdPayrollPeriodIdCompoundUniqueInput
    AND?: PayrollWhereInput | PayrollWhereInput[]
    OR?: PayrollWhereInput[]
    NOT?: PayrollWhereInput | PayrollWhereInput[]
    employeeId?: StringFilter<"Payroll"> | string
    payrollPeriodId?: StringFilter<"Payroll"> | string
    basicSalary?: FloatFilter<"Payroll"> | number
    grossSalary?: FloatFilter<"Payroll"> | number
    totalDeductions?: FloatFilter<"Payroll"> | number
    netSalary?: FloatFilter<"Payroll"> | number
    status?: StringFilter<"Payroll"> | string
    processedAt?: DateTimeNullableFilter<"Payroll"> | Date | string | null
    createdAt?: DateTimeFilter<"Payroll"> | Date | string
    updatedAt?: DateTimeFilter<"Payroll"> | Date | string
    tenantId?: StringFilter<"Payroll"> | string
    payStub?: XOR<PayStubNullableScalarRelationFilter, PayStubWhereInput> | null
    payrollItems?: PayrollItemListRelationFilter
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    payrollPeriod?: XOR<PayrollPeriodScalarRelationFilter, PayrollPeriodWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "employeeId_payrollPeriodId">

  export type PayrollOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    basicSalary?: SortOrder
    grossSalary?: SortOrder
    totalDeductions?: SortOrder
    netSalary?: SortOrder
    status?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PayrollCountOrderByAggregateInput
    _avg?: PayrollAvgOrderByAggregateInput
    _max?: PayrollMaxOrderByAggregateInput
    _min?: PayrollMinOrderByAggregateInput
    _sum?: PayrollSumOrderByAggregateInput
  }

  export type PayrollScalarWhereWithAggregatesInput = {
    AND?: PayrollScalarWhereWithAggregatesInput | PayrollScalarWhereWithAggregatesInput[]
    OR?: PayrollScalarWhereWithAggregatesInput[]
    NOT?: PayrollScalarWhereWithAggregatesInput | PayrollScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payroll"> | string
    employeeId?: StringWithAggregatesFilter<"Payroll"> | string
    payrollPeriodId?: StringWithAggregatesFilter<"Payroll"> | string
    basicSalary?: FloatWithAggregatesFilter<"Payroll"> | number
    grossSalary?: FloatWithAggregatesFilter<"Payroll"> | number
    totalDeductions?: FloatWithAggregatesFilter<"Payroll"> | number
    netSalary?: FloatWithAggregatesFilter<"Payroll"> | number
    status?: StringWithAggregatesFilter<"Payroll"> | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"Payroll"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payroll"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payroll"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Payroll"> | string
  }

  export type PayrollItemWhereInput = {
    AND?: PayrollItemWhereInput | PayrollItemWhereInput[]
    OR?: PayrollItemWhereInput[]
    NOT?: PayrollItemWhereInput | PayrollItemWhereInput[]
    id?: StringFilter<"PayrollItem"> | string
    payrollId?: StringFilter<"PayrollItem"> | string
    type?: StringFilter<"PayrollItem"> | string
    category?: StringFilter<"PayrollItem"> | string
    name?: StringFilter<"PayrollItem"> | string
    amount?: FloatFilter<"PayrollItem"> | number
    isStatutory?: BoolFilter<"PayrollItem"> | boolean
    createdAt?: DateTimeFilter<"PayrollItem"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollItem"> | Date | string
    tenantId?: StringFilter<"PayrollItem"> | string
    payroll?: XOR<PayrollScalarRelationFilter, PayrollWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PayrollItemOrderByWithRelationInput = {
    id?: SortOrder
    payrollId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    isStatutory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    payroll?: PayrollOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PayrollItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PayrollItemWhereInput | PayrollItemWhereInput[]
    OR?: PayrollItemWhereInput[]
    NOT?: PayrollItemWhereInput | PayrollItemWhereInput[]
    payrollId?: StringFilter<"PayrollItem"> | string
    type?: StringFilter<"PayrollItem"> | string
    category?: StringFilter<"PayrollItem"> | string
    name?: StringFilter<"PayrollItem"> | string
    amount?: FloatFilter<"PayrollItem"> | number
    isStatutory?: BoolFilter<"PayrollItem"> | boolean
    createdAt?: DateTimeFilter<"PayrollItem"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollItem"> | Date | string
    tenantId?: StringFilter<"PayrollItem"> | string
    payroll?: XOR<PayrollScalarRelationFilter, PayrollWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type PayrollItemOrderByWithAggregationInput = {
    id?: SortOrder
    payrollId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    isStatutory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PayrollItemCountOrderByAggregateInput
    _avg?: PayrollItemAvgOrderByAggregateInput
    _max?: PayrollItemMaxOrderByAggregateInput
    _min?: PayrollItemMinOrderByAggregateInput
    _sum?: PayrollItemSumOrderByAggregateInput
  }

  export type PayrollItemScalarWhereWithAggregatesInput = {
    AND?: PayrollItemScalarWhereWithAggregatesInput | PayrollItemScalarWhereWithAggregatesInput[]
    OR?: PayrollItemScalarWhereWithAggregatesInput[]
    NOT?: PayrollItemScalarWhereWithAggregatesInput | PayrollItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollItem"> | string
    payrollId?: StringWithAggregatesFilter<"PayrollItem"> | string
    type?: StringWithAggregatesFilter<"PayrollItem"> | string
    category?: StringWithAggregatesFilter<"PayrollItem"> | string
    name?: StringWithAggregatesFilter<"PayrollItem"> | string
    amount?: FloatWithAggregatesFilter<"PayrollItem"> | number
    isStatutory?: BoolWithAggregatesFilter<"PayrollItem"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PayrollItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayrollItem"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PayrollItem"> | string
  }

  export type TaxBracketWhereInput = {
    AND?: TaxBracketWhereInput | TaxBracketWhereInput[]
    OR?: TaxBracketWhereInput[]
    NOT?: TaxBracketWhereInput | TaxBracketWhereInput[]
    id?: StringFilter<"TaxBracket"> | string
    name?: StringFilter<"TaxBracket"> | string
    minAmount?: FloatFilter<"TaxBracket"> | number
    maxAmount?: FloatNullableFilter<"TaxBracket"> | number | null
    rate?: FloatFilter<"TaxBracket"> | number
    fixedAmount?: FloatFilter<"TaxBracket"> | number
    isActive?: BoolFilter<"TaxBracket"> | boolean
    effectiveDate?: DateTimeFilter<"TaxBracket"> | Date | string
    createdAt?: DateTimeFilter<"TaxBracket"> | Date | string
    updatedAt?: DateTimeFilter<"TaxBracket"> | Date | string
    tenantId?: StringFilter<"TaxBracket"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type TaxBracketOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrderInput | SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type TaxBracketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaxBracketWhereInput | TaxBracketWhereInput[]
    OR?: TaxBracketWhereInput[]
    NOT?: TaxBracketWhereInput | TaxBracketWhereInput[]
    name?: StringFilter<"TaxBracket"> | string
    minAmount?: FloatFilter<"TaxBracket"> | number
    maxAmount?: FloatNullableFilter<"TaxBracket"> | number | null
    rate?: FloatFilter<"TaxBracket"> | number
    fixedAmount?: FloatFilter<"TaxBracket"> | number
    isActive?: BoolFilter<"TaxBracket"> | boolean
    effectiveDate?: DateTimeFilter<"TaxBracket"> | Date | string
    createdAt?: DateTimeFilter<"TaxBracket"> | Date | string
    updatedAt?: DateTimeFilter<"TaxBracket"> | Date | string
    tenantId?: StringFilter<"TaxBracket"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type TaxBracketOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrderInput | SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: TaxBracketCountOrderByAggregateInput
    _avg?: TaxBracketAvgOrderByAggregateInput
    _max?: TaxBracketMaxOrderByAggregateInput
    _min?: TaxBracketMinOrderByAggregateInput
    _sum?: TaxBracketSumOrderByAggregateInput
  }

  export type TaxBracketScalarWhereWithAggregatesInput = {
    AND?: TaxBracketScalarWhereWithAggregatesInput | TaxBracketScalarWhereWithAggregatesInput[]
    OR?: TaxBracketScalarWhereWithAggregatesInput[]
    NOT?: TaxBracketScalarWhereWithAggregatesInput | TaxBracketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TaxBracket"> | string
    name?: StringWithAggregatesFilter<"TaxBracket"> | string
    minAmount?: FloatWithAggregatesFilter<"TaxBracket"> | number
    maxAmount?: FloatNullableWithAggregatesFilter<"TaxBracket"> | number | null
    rate?: FloatWithAggregatesFilter<"TaxBracket"> | number
    fixedAmount?: FloatWithAggregatesFilter<"TaxBracket"> | number
    isActive?: BoolWithAggregatesFilter<"TaxBracket"> | boolean
    effectiveDate?: DateTimeWithAggregatesFilter<"TaxBracket"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"TaxBracket"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TaxBracket"> | Date | string
    tenantId?: StringWithAggregatesFilter<"TaxBracket"> | string
  }

  export type PayStubWhereInput = {
    AND?: PayStubWhereInput | PayStubWhereInput[]
    OR?: PayStubWhereInput[]
    NOT?: PayStubWhereInput | PayStubWhereInput[]
    id?: StringFilter<"PayStub"> | string
    employeeId?: StringFilter<"PayStub"> | string
    payrollId?: StringFilter<"PayStub"> | string
    payrollPeriodId?: StringFilter<"PayStub"> | string
    stubNumber?: StringFilter<"PayStub"> | string
    generatedAt?: DateTimeFilter<"PayStub"> | Date | string
    pdfPath?: StringNullableFilter<"PayStub"> | string | null
    status?: StringFilter<"PayStub"> | string
    createdAt?: DateTimeFilter<"PayStub"> | Date | string
    updatedAt?: DateTimeFilter<"PayStub"> | Date | string
    tenantId?: StringFilter<"PayStub"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    payroll?: XOR<PayrollScalarRelationFilter, PayrollWhereInput>
    payrollPeriod?: XOR<PayrollPeriodScalarRelationFilter, PayrollPeriodWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PayStubOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollId?: SortOrder
    payrollPeriodId?: SortOrder
    stubNumber?: SortOrder
    generatedAt?: SortOrder
    pdfPath?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    payroll?: PayrollOrderByWithRelationInput
    payrollPeriod?: PayrollPeriodOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PayStubWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    payrollId?: string
    stubNumber?: string
    AND?: PayStubWhereInput | PayStubWhereInput[]
    OR?: PayStubWhereInput[]
    NOT?: PayStubWhereInput | PayStubWhereInput[]
    employeeId?: StringFilter<"PayStub"> | string
    payrollPeriodId?: StringFilter<"PayStub"> | string
    generatedAt?: DateTimeFilter<"PayStub"> | Date | string
    pdfPath?: StringNullableFilter<"PayStub"> | string | null
    status?: StringFilter<"PayStub"> | string
    createdAt?: DateTimeFilter<"PayStub"> | Date | string
    updatedAt?: DateTimeFilter<"PayStub"> | Date | string
    tenantId?: StringFilter<"PayStub"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    payroll?: XOR<PayrollScalarRelationFilter, PayrollWhereInput>
    payrollPeriod?: XOR<PayrollPeriodScalarRelationFilter, PayrollPeriodWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "payrollId" | "stubNumber">

  export type PayStubOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollId?: SortOrder
    payrollPeriodId?: SortOrder
    stubNumber?: SortOrder
    generatedAt?: SortOrder
    pdfPath?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PayStubCountOrderByAggregateInput
    _max?: PayStubMaxOrderByAggregateInput
    _min?: PayStubMinOrderByAggregateInput
  }

  export type PayStubScalarWhereWithAggregatesInput = {
    AND?: PayStubScalarWhereWithAggregatesInput | PayStubScalarWhereWithAggregatesInput[]
    OR?: PayStubScalarWhereWithAggregatesInput[]
    NOT?: PayStubScalarWhereWithAggregatesInput | PayStubScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayStub"> | string
    employeeId?: StringWithAggregatesFilter<"PayStub"> | string
    payrollId?: StringWithAggregatesFilter<"PayStub"> | string
    payrollPeriodId?: StringWithAggregatesFilter<"PayStub"> | string
    stubNumber?: StringWithAggregatesFilter<"PayStub"> | string
    generatedAt?: DateTimeWithAggregatesFilter<"PayStub"> | Date | string
    pdfPath?: StringNullableWithAggregatesFilter<"PayStub"> | string | null
    status?: StringWithAggregatesFilter<"PayStub"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PayStub"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayStub"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PayStub"> | string
  }

  export type PayrollSettingsWhereInput = {
    AND?: PayrollSettingsWhereInput | PayrollSettingsWhereInput[]
    OR?: PayrollSettingsWhereInput[]
    NOT?: PayrollSettingsWhereInput | PayrollSettingsWhereInput[]
    id?: StringFilter<"PayrollSettings"> | string
    tenantId?: StringFilter<"PayrollSettings"> | string
    companyName?: StringNullableFilter<"PayrollSettings"> | string | null
    kraPin?: StringNullableFilter<"PayrollSettings"> | string | null
    nssfNumber?: StringNullableFilter<"PayrollSettings"> | string | null
    nhifNumber?: StringNullableFilter<"PayrollSettings"> | string | null
    companyAddress?: StringNullableFilter<"PayrollSettings"> | string | null
    companyCity?: StringNullableFilter<"PayrollSettings"> | string | null
    companyPostalCode?: StringNullableFilter<"PayrollSettings"> | string | null
    personalRelief?: FloatFilter<"PayrollSettings"> | number
    overtimeMultiplier?: FloatFilter<"PayrollSettings"> | number
    workingDaysPerMonth?: IntFilter<"PayrollSettings"> | number
    workingHoursPerDay?: IntFilter<"PayrollSettings"> | number
    payFrequency?: StringFilter<"PayrollSettings"> | string
    payDay?: IntFilter<"PayrollSettings"> | number
    cutoffDay?: IntFilter<"PayrollSettings"> | number
    requirePayrollApproval?: BoolFilter<"PayrollSettings"> | boolean
    approvalLevels?: IntFilter<"PayrollSettings"> | number
    autoApproveThreshold?: FloatFilter<"PayrollSettings"> | number
    notifyEmployeesOnPayment?: BoolFilter<"PayrollSettings"> | boolean
    sendPayslipsByEmail?: BoolFilter<"PayrollSettings"> | boolean
    bankName?: StringNullableFilter<"PayrollSettings"> | string | null
    accountNumber?: StringNullableFilter<"PayrollSettings"> | string | null
    branchCode?: StringNullableFilter<"PayrollSettings"> | string | null
    swiftCode?: StringNullableFilter<"PayrollSettings"> | string | null
    createdAt?: DateTimeFilter<"PayrollSettings"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollSettings"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PayrollSettingsOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    companyName?: SortOrderInput | SortOrder
    kraPin?: SortOrderInput | SortOrder
    nssfNumber?: SortOrderInput | SortOrder
    nhifNumber?: SortOrderInput | SortOrder
    companyAddress?: SortOrderInput | SortOrder
    companyCity?: SortOrderInput | SortOrder
    companyPostalCode?: SortOrderInput | SortOrder
    personalRelief?: SortOrder
    overtimeMultiplier?: SortOrder
    workingDaysPerMonth?: SortOrder
    workingHoursPerDay?: SortOrder
    payFrequency?: SortOrder
    payDay?: SortOrder
    cutoffDay?: SortOrder
    requirePayrollApproval?: SortOrder
    approvalLevels?: SortOrder
    autoApproveThreshold?: SortOrder
    notifyEmployeesOnPayment?: SortOrder
    sendPayslipsByEmail?: SortOrder
    bankName?: SortOrderInput | SortOrder
    accountNumber?: SortOrderInput | SortOrder
    branchCode?: SortOrderInput | SortOrder
    swiftCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type PayrollSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId?: string
    AND?: PayrollSettingsWhereInput | PayrollSettingsWhereInput[]
    OR?: PayrollSettingsWhereInput[]
    NOT?: PayrollSettingsWhereInput | PayrollSettingsWhereInput[]
    companyName?: StringNullableFilter<"PayrollSettings"> | string | null
    kraPin?: StringNullableFilter<"PayrollSettings"> | string | null
    nssfNumber?: StringNullableFilter<"PayrollSettings"> | string | null
    nhifNumber?: StringNullableFilter<"PayrollSettings"> | string | null
    companyAddress?: StringNullableFilter<"PayrollSettings"> | string | null
    companyCity?: StringNullableFilter<"PayrollSettings"> | string | null
    companyPostalCode?: StringNullableFilter<"PayrollSettings"> | string | null
    personalRelief?: FloatFilter<"PayrollSettings"> | number
    overtimeMultiplier?: FloatFilter<"PayrollSettings"> | number
    workingDaysPerMonth?: IntFilter<"PayrollSettings"> | number
    workingHoursPerDay?: IntFilter<"PayrollSettings"> | number
    payFrequency?: StringFilter<"PayrollSettings"> | string
    payDay?: IntFilter<"PayrollSettings"> | number
    cutoffDay?: IntFilter<"PayrollSettings"> | number
    requirePayrollApproval?: BoolFilter<"PayrollSettings"> | boolean
    approvalLevels?: IntFilter<"PayrollSettings"> | number
    autoApproveThreshold?: FloatFilter<"PayrollSettings"> | number
    notifyEmployeesOnPayment?: BoolFilter<"PayrollSettings"> | boolean
    sendPayslipsByEmail?: BoolFilter<"PayrollSettings"> | boolean
    bankName?: StringNullableFilter<"PayrollSettings"> | string | null
    accountNumber?: StringNullableFilter<"PayrollSettings"> | string | null
    branchCode?: StringNullableFilter<"PayrollSettings"> | string | null
    swiftCode?: StringNullableFilter<"PayrollSettings"> | string | null
    createdAt?: DateTimeFilter<"PayrollSettings"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollSettings"> | Date | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "tenantId">

  export type PayrollSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    companyName?: SortOrderInput | SortOrder
    kraPin?: SortOrderInput | SortOrder
    nssfNumber?: SortOrderInput | SortOrder
    nhifNumber?: SortOrderInput | SortOrder
    companyAddress?: SortOrderInput | SortOrder
    companyCity?: SortOrderInput | SortOrder
    companyPostalCode?: SortOrderInput | SortOrder
    personalRelief?: SortOrder
    overtimeMultiplier?: SortOrder
    workingDaysPerMonth?: SortOrder
    workingHoursPerDay?: SortOrder
    payFrequency?: SortOrder
    payDay?: SortOrder
    cutoffDay?: SortOrder
    requirePayrollApproval?: SortOrder
    approvalLevels?: SortOrder
    autoApproveThreshold?: SortOrder
    notifyEmployeesOnPayment?: SortOrder
    sendPayslipsByEmail?: SortOrder
    bankName?: SortOrderInput | SortOrder
    accountNumber?: SortOrderInput | SortOrder
    branchCode?: SortOrderInput | SortOrder
    swiftCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PayrollSettingsCountOrderByAggregateInput
    _avg?: PayrollSettingsAvgOrderByAggregateInput
    _max?: PayrollSettingsMaxOrderByAggregateInput
    _min?: PayrollSettingsMinOrderByAggregateInput
    _sum?: PayrollSettingsSumOrderByAggregateInput
  }

  export type PayrollSettingsScalarWhereWithAggregatesInput = {
    AND?: PayrollSettingsScalarWhereWithAggregatesInput | PayrollSettingsScalarWhereWithAggregatesInput[]
    OR?: PayrollSettingsScalarWhereWithAggregatesInput[]
    NOT?: PayrollSettingsScalarWhereWithAggregatesInput | PayrollSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollSettings"> | string
    tenantId?: StringWithAggregatesFilter<"PayrollSettings"> | string
    companyName?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    kraPin?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    nssfNumber?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    nhifNumber?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    companyAddress?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    companyCity?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    companyPostalCode?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    personalRelief?: FloatWithAggregatesFilter<"PayrollSettings"> | number
    overtimeMultiplier?: FloatWithAggregatesFilter<"PayrollSettings"> | number
    workingDaysPerMonth?: IntWithAggregatesFilter<"PayrollSettings"> | number
    workingHoursPerDay?: IntWithAggregatesFilter<"PayrollSettings"> | number
    payFrequency?: StringWithAggregatesFilter<"PayrollSettings"> | string
    payDay?: IntWithAggregatesFilter<"PayrollSettings"> | number
    cutoffDay?: IntWithAggregatesFilter<"PayrollSettings"> | number
    requirePayrollApproval?: BoolWithAggregatesFilter<"PayrollSettings"> | boolean
    approvalLevels?: IntWithAggregatesFilter<"PayrollSettings"> | number
    autoApproveThreshold?: FloatWithAggregatesFilter<"PayrollSettings"> | number
    notifyEmployeesOnPayment?: BoolWithAggregatesFilter<"PayrollSettings"> | boolean
    sendPayslipsByEmail?: BoolWithAggregatesFilter<"PayrollSettings"> | boolean
    bankName?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    accountNumber?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    branchCode?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    swiftCode?: StringNullableWithAggregatesFilter<"PayrollSettings"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PayrollSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayrollSettings"> | Date | string
  }

  export type LeaveTypeWhereInput = {
    AND?: LeaveTypeWhereInput | LeaveTypeWhereInput[]
    OR?: LeaveTypeWhereInput[]
    NOT?: LeaveTypeWhereInput | LeaveTypeWhereInput[]
    id?: StringFilter<"LeaveType"> | string
    name?: StringFilter<"LeaveType"> | string
    code?: StringFilter<"LeaveType"> | string
    description?: StringNullableFilter<"LeaveType"> | string | null
    color?: StringNullableFilter<"LeaveType"> | string | null
    isActive?: BoolFilter<"LeaveType"> | boolean
    createdAt?: DateTimeFilter<"LeaveType"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveType"> | Date | string
    tenantId?: StringFilter<"LeaveType"> | string
    leaveBalances?: LeaveBalanceListRelationFilter
    leavePolicies?: LeavePolicyListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type LeaveTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    leaveBalances?: LeaveBalanceOrderByRelationAggregateInput
    leavePolicies?: LeavePolicyOrderByRelationAggregateInput
    leaveRequests?: LeaveRequestOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type LeaveTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code_tenantId?: LeaveTypeCodeTenantIdCompoundUniqueInput
    AND?: LeaveTypeWhereInput | LeaveTypeWhereInput[]
    OR?: LeaveTypeWhereInput[]
    NOT?: LeaveTypeWhereInput | LeaveTypeWhereInput[]
    name?: StringFilter<"LeaveType"> | string
    code?: StringFilter<"LeaveType"> | string
    description?: StringNullableFilter<"LeaveType"> | string | null
    color?: StringNullableFilter<"LeaveType"> | string | null
    isActive?: BoolFilter<"LeaveType"> | boolean
    createdAt?: DateTimeFilter<"LeaveType"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveType"> | Date | string
    tenantId?: StringFilter<"LeaveType"> | string
    leaveBalances?: LeaveBalanceListRelationFilter
    leavePolicies?: LeavePolicyListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "code_tenantId">

  export type LeaveTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: LeaveTypeCountOrderByAggregateInput
    _max?: LeaveTypeMaxOrderByAggregateInput
    _min?: LeaveTypeMinOrderByAggregateInput
  }

  export type LeaveTypeScalarWhereWithAggregatesInput = {
    AND?: LeaveTypeScalarWhereWithAggregatesInput | LeaveTypeScalarWhereWithAggregatesInput[]
    OR?: LeaveTypeScalarWhereWithAggregatesInput[]
    NOT?: LeaveTypeScalarWhereWithAggregatesInput | LeaveTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeaveType"> | string
    name?: StringWithAggregatesFilter<"LeaveType"> | string
    code?: StringWithAggregatesFilter<"LeaveType"> | string
    description?: StringNullableWithAggregatesFilter<"LeaveType"> | string | null
    color?: StringNullableWithAggregatesFilter<"LeaveType"> | string | null
    isActive?: BoolWithAggregatesFilter<"LeaveType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"LeaveType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LeaveType"> | Date | string
    tenantId?: StringWithAggregatesFilter<"LeaveType"> | string
  }

  export type LeavePolicyWhereInput = {
    AND?: LeavePolicyWhereInput | LeavePolicyWhereInput[]
    OR?: LeavePolicyWhereInput[]
    NOT?: LeavePolicyWhereInput | LeavePolicyWhereInput[]
    id?: StringFilter<"LeavePolicy"> | string
    leaveTypeId?: StringFilter<"LeavePolicy"> | string
    name?: StringFilter<"LeavePolicy"> | string
    description?: StringNullableFilter<"LeavePolicy"> | string | null
    maxDaysPerYear?: IntFilter<"LeavePolicy"> | number
    maxDaysPerRequest?: IntNullableFilter<"LeavePolicy"> | number | null
    minDaysNotice?: IntFilter<"LeavePolicy"> | number
    maxCarryForward?: IntFilter<"LeavePolicy"> | number
    allowNegativeBalance?: BoolFilter<"LeavePolicy"> | boolean
    requiresApproval?: BoolFilter<"LeavePolicy"> | boolean
    autoApprove?: BoolFilter<"LeavePolicy"> | boolean
    accrualRate?: FloatFilter<"LeavePolicy"> | number
    probationPeriodDays?: IntFilter<"LeavePolicy"> | number
    isActive?: BoolFilter<"LeavePolicy"> | boolean
    effectiveDate?: DateTimeFilter<"LeavePolicy"> | Date | string
    expiryDate?: DateTimeNullableFilter<"LeavePolicy"> | Date | string | null
    createdAt?: DateTimeFilter<"LeavePolicy"> | Date | string
    updatedAt?: DateTimeFilter<"LeavePolicy"> | Date | string
    tenantId?: StringFilter<"LeavePolicy"> | string
    leaveType?: XOR<LeaveTypeScalarRelationFilter, LeaveTypeWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type LeavePolicyOrderByWithRelationInput = {
    id?: SortOrder
    leaveTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    maxDaysPerYear?: SortOrder
    maxDaysPerRequest?: SortOrderInput | SortOrder
    minDaysNotice?: SortOrder
    maxCarryForward?: SortOrder
    allowNegativeBalance?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    accrualRate?: SortOrder
    probationPeriodDays?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    leaveType?: LeaveTypeOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type LeavePolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeavePolicyWhereInput | LeavePolicyWhereInput[]
    OR?: LeavePolicyWhereInput[]
    NOT?: LeavePolicyWhereInput | LeavePolicyWhereInput[]
    leaveTypeId?: StringFilter<"LeavePolicy"> | string
    name?: StringFilter<"LeavePolicy"> | string
    description?: StringNullableFilter<"LeavePolicy"> | string | null
    maxDaysPerYear?: IntFilter<"LeavePolicy"> | number
    maxDaysPerRequest?: IntNullableFilter<"LeavePolicy"> | number | null
    minDaysNotice?: IntFilter<"LeavePolicy"> | number
    maxCarryForward?: IntFilter<"LeavePolicy"> | number
    allowNegativeBalance?: BoolFilter<"LeavePolicy"> | boolean
    requiresApproval?: BoolFilter<"LeavePolicy"> | boolean
    autoApprove?: BoolFilter<"LeavePolicy"> | boolean
    accrualRate?: FloatFilter<"LeavePolicy"> | number
    probationPeriodDays?: IntFilter<"LeavePolicy"> | number
    isActive?: BoolFilter<"LeavePolicy"> | boolean
    effectiveDate?: DateTimeFilter<"LeavePolicy"> | Date | string
    expiryDate?: DateTimeNullableFilter<"LeavePolicy"> | Date | string | null
    createdAt?: DateTimeFilter<"LeavePolicy"> | Date | string
    updatedAt?: DateTimeFilter<"LeavePolicy"> | Date | string
    tenantId?: StringFilter<"LeavePolicy"> | string
    leaveType?: XOR<LeaveTypeScalarRelationFilter, LeaveTypeWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type LeavePolicyOrderByWithAggregationInput = {
    id?: SortOrder
    leaveTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    maxDaysPerYear?: SortOrder
    maxDaysPerRequest?: SortOrderInput | SortOrder
    minDaysNotice?: SortOrder
    maxCarryForward?: SortOrder
    allowNegativeBalance?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    accrualRate?: SortOrder
    probationPeriodDays?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: LeavePolicyCountOrderByAggregateInput
    _avg?: LeavePolicyAvgOrderByAggregateInput
    _max?: LeavePolicyMaxOrderByAggregateInput
    _min?: LeavePolicyMinOrderByAggregateInput
    _sum?: LeavePolicySumOrderByAggregateInput
  }

  export type LeavePolicyScalarWhereWithAggregatesInput = {
    AND?: LeavePolicyScalarWhereWithAggregatesInput | LeavePolicyScalarWhereWithAggregatesInput[]
    OR?: LeavePolicyScalarWhereWithAggregatesInput[]
    NOT?: LeavePolicyScalarWhereWithAggregatesInput | LeavePolicyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeavePolicy"> | string
    leaveTypeId?: StringWithAggregatesFilter<"LeavePolicy"> | string
    name?: StringWithAggregatesFilter<"LeavePolicy"> | string
    description?: StringNullableWithAggregatesFilter<"LeavePolicy"> | string | null
    maxDaysPerYear?: IntWithAggregatesFilter<"LeavePolicy"> | number
    maxDaysPerRequest?: IntNullableWithAggregatesFilter<"LeavePolicy"> | number | null
    minDaysNotice?: IntWithAggregatesFilter<"LeavePolicy"> | number
    maxCarryForward?: IntWithAggregatesFilter<"LeavePolicy"> | number
    allowNegativeBalance?: BoolWithAggregatesFilter<"LeavePolicy"> | boolean
    requiresApproval?: BoolWithAggregatesFilter<"LeavePolicy"> | boolean
    autoApprove?: BoolWithAggregatesFilter<"LeavePolicy"> | boolean
    accrualRate?: FloatWithAggregatesFilter<"LeavePolicy"> | number
    probationPeriodDays?: IntWithAggregatesFilter<"LeavePolicy"> | number
    isActive?: BoolWithAggregatesFilter<"LeavePolicy"> | boolean
    effectiveDate?: DateTimeWithAggregatesFilter<"LeavePolicy"> | Date | string
    expiryDate?: DateTimeNullableWithAggregatesFilter<"LeavePolicy"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LeavePolicy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LeavePolicy"> | Date | string
    tenantId?: StringWithAggregatesFilter<"LeavePolicy"> | string
  }

  export type LeaveRequestWhereInput = {
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    id?: StringFilter<"LeaveRequest"> | string
    employeeId?: StringFilter<"LeaveRequest"> | string
    branchId?: StringNullableFilter<"LeaveRequest"> | string | null
    leaveTypeId?: StringFilter<"LeaveRequest"> | string
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    totalDays?: IntFilter<"LeaveRequest"> | number
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    appliedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    approvedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    rejectedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    rejectedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    rejectionReason?: StringNullableFilter<"LeaveRequest"> | string | null
    cancelledAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    cancelledBy?: StringNullableFilter<"LeaveRequest"> | string | null
    comments?: StringNullableFilter<"LeaveRequest"> | string | null
    attachments?: StringNullableListFilter<"LeaveRequest">
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    tenantId?: StringFilter<"LeaveRequest"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    leaveType?: XOR<LeaveTypeScalarRelationFilter, LeaveTypeWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type LeaveRequestOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    leaveTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    rejectedAt?: SortOrderInput | SortOrder
    rejectedBy?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    cancelledAt?: SortOrderInput | SortOrder
    cancelledBy?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    leaveType?: LeaveTypeOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type LeaveRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    employeeId?: StringFilter<"LeaveRequest"> | string
    branchId?: StringNullableFilter<"LeaveRequest"> | string | null
    leaveTypeId?: StringFilter<"LeaveRequest"> | string
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    totalDays?: IntFilter<"LeaveRequest"> | number
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    appliedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    approvedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    rejectedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    rejectedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    rejectionReason?: StringNullableFilter<"LeaveRequest"> | string | null
    cancelledAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    cancelledBy?: StringNullableFilter<"LeaveRequest"> | string | null
    comments?: StringNullableFilter<"LeaveRequest"> | string | null
    attachments?: StringNullableListFilter<"LeaveRequest">
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    tenantId?: StringFilter<"LeaveRequest"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    leaveType?: XOR<LeaveTypeScalarRelationFilter, LeaveTypeWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type LeaveRequestOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    leaveTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    rejectedAt?: SortOrderInput | SortOrder
    rejectedBy?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    cancelledAt?: SortOrderInput | SortOrder
    cancelledBy?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: LeaveRequestCountOrderByAggregateInput
    _avg?: LeaveRequestAvgOrderByAggregateInput
    _max?: LeaveRequestMaxOrderByAggregateInput
    _min?: LeaveRequestMinOrderByAggregateInput
    _sum?: LeaveRequestSumOrderByAggregateInput
  }

  export type LeaveRequestScalarWhereWithAggregatesInput = {
    AND?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    OR?: LeaveRequestScalarWhereWithAggregatesInput[]
    NOT?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeaveRequest"> | string
    employeeId?: StringWithAggregatesFilter<"LeaveRequest"> | string
    branchId?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    leaveTypeId?: StringWithAggregatesFilter<"LeaveRequest"> | string
    startDate?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    totalDays?: IntWithAggregatesFilter<"LeaveRequest"> | number
    reason?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    status?: StringWithAggregatesFilter<"LeaveRequest"> | string
    appliedAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    approvedAt?: DateTimeNullableWithAggregatesFilter<"LeaveRequest"> | Date | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    rejectedAt?: DateTimeNullableWithAggregatesFilter<"LeaveRequest"> | Date | string | null
    rejectedBy?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    cancelledAt?: DateTimeNullableWithAggregatesFilter<"LeaveRequest"> | Date | string | null
    cancelledBy?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    comments?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    attachments?: StringNullableListFilter<"LeaveRequest">
    createdAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    tenantId?: StringWithAggregatesFilter<"LeaveRequest"> | string
  }

  export type LeaveBalanceWhereInput = {
    AND?: LeaveBalanceWhereInput | LeaveBalanceWhereInput[]
    OR?: LeaveBalanceWhereInput[]
    NOT?: LeaveBalanceWhereInput | LeaveBalanceWhereInput[]
    id?: StringFilter<"LeaveBalance"> | string
    employeeId?: StringFilter<"LeaveBalance"> | string
    leaveTypeId?: StringFilter<"LeaveBalance"> | string
    year?: IntFilter<"LeaveBalance"> | number
    allocated?: FloatFilter<"LeaveBalance"> | number
    used?: FloatFilter<"LeaveBalance"> | number
    pending?: FloatFilter<"LeaveBalance"> | number
    available?: FloatFilter<"LeaveBalance"> | number
    carriedForward?: FloatFilter<"LeaveBalance"> | number
    accrued?: FloatFilter<"LeaveBalance"> | number
    lastUpdated?: DateTimeFilter<"LeaveBalance"> | Date | string
    createdAt?: DateTimeFilter<"LeaveBalance"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveBalance"> | Date | string
    tenantId?: StringFilter<"LeaveBalance"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    leaveType?: XOR<LeaveTypeScalarRelationFilter, LeaveTypeWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type LeaveBalanceOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveTypeId?: SortOrder
    year?: SortOrder
    allocated?: SortOrder
    used?: SortOrder
    pending?: SortOrder
    available?: SortOrder
    carriedForward?: SortOrder
    accrued?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    leaveType?: LeaveTypeOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type LeaveBalanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeId_leaveTypeId_year?: LeaveBalanceEmployeeIdLeaveTypeIdYearCompoundUniqueInput
    AND?: LeaveBalanceWhereInput | LeaveBalanceWhereInput[]
    OR?: LeaveBalanceWhereInput[]
    NOT?: LeaveBalanceWhereInput | LeaveBalanceWhereInput[]
    employeeId?: StringFilter<"LeaveBalance"> | string
    leaveTypeId?: StringFilter<"LeaveBalance"> | string
    year?: IntFilter<"LeaveBalance"> | number
    allocated?: FloatFilter<"LeaveBalance"> | number
    used?: FloatFilter<"LeaveBalance"> | number
    pending?: FloatFilter<"LeaveBalance"> | number
    available?: FloatFilter<"LeaveBalance"> | number
    carriedForward?: FloatFilter<"LeaveBalance"> | number
    accrued?: FloatFilter<"LeaveBalance"> | number
    lastUpdated?: DateTimeFilter<"LeaveBalance"> | Date | string
    createdAt?: DateTimeFilter<"LeaveBalance"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveBalance"> | Date | string
    tenantId?: StringFilter<"LeaveBalance"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    leaveType?: XOR<LeaveTypeScalarRelationFilter, LeaveTypeWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "employeeId_leaveTypeId_year">

  export type LeaveBalanceOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveTypeId?: SortOrder
    year?: SortOrder
    allocated?: SortOrder
    used?: SortOrder
    pending?: SortOrder
    available?: SortOrder
    carriedForward?: SortOrder
    accrued?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: LeaveBalanceCountOrderByAggregateInput
    _avg?: LeaveBalanceAvgOrderByAggregateInput
    _max?: LeaveBalanceMaxOrderByAggregateInput
    _min?: LeaveBalanceMinOrderByAggregateInput
    _sum?: LeaveBalanceSumOrderByAggregateInput
  }

  export type LeaveBalanceScalarWhereWithAggregatesInput = {
    AND?: LeaveBalanceScalarWhereWithAggregatesInput | LeaveBalanceScalarWhereWithAggregatesInput[]
    OR?: LeaveBalanceScalarWhereWithAggregatesInput[]
    NOT?: LeaveBalanceScalarWhereWithAggregatesInput | LeaveBalanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeaveBalance"> | string
    employeeId?: StringWithAggregatesFilter<"LeaveBalance"> | string
    leaveTypeId?: StringWithAggregatesFilter<"LeaveBalance"> | string
    year?: IntWithAggregatesFilter<"LeaveBalance"> | number
    allocated?: FloatWithAggregatesFilter<"LeaveBalance"> | number
    used?: FloatWithAggregatesFilter<"LeaveBalance"> | number
    pending?: FloatWithAggregatesFilter<"LeaveBalance"> | number
    available?: FloatWithAggregatesFilter<"LeaveBalance"> | number
    carriedForward?: FloatWithAggregatesFilter<"LeaveBalance"> | number
    accrued?: FloatWithAggregatesFilter<"LeaveBalance"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"LeaveBalance"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"LeaveBalance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LeaveBalance"> | Date | string
    tenantId?: StringWithAggregatesFilter<"LeaveBalance"> | string
  }

  export type HolidayWhereInput = {
    AND?: HolidayWhereInput | HolidayWhereInput[]
    OR?: HolidayWhereInput[]
    NOT?: HolidayWhereInput | HolidayWhereInput[]
    id?: StringFilter<"Holiday"> | string
    name?: StringFilter<"Holiday"> | string
    date?: DateTimeFilter<"Holiday"> | Date | string
    type?: StringFilter<"Holiday"> | string
    description?: StringNullableFilter<"Holiday"> | string | null
    isRecurring?: BoolFilter<"Holiday"> | boolean
    isActive?: BoolFilter<"Holiday"> | boolean
    createdAt?: DateTimeFilter<"Holiday"> | Date | string
    updatedAt?: DateTimeFilter<"Holiday"> | Date | string
    tenantId?: StringFilter<"Holiday"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type HolidayOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type HolidayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HolidayWhereInput | HolidayWhereInput[]
    OR?: HolidayWhereInput[]
    NOT?: HolidayWhereInput | HolidayWhereInput[]
    name?: StringFilter<"Holiday"> | string
    date?: DateTimeFilter<"Holiday"> | Date | string
    type?: StringFilter<"Holiday"> | string
    description?: StringNullableFilter<"Holiday"> | string | null
    isRecurring?: BoolFilter<"Holiday"> | boolean
    isActive?: BoolFilter<"Holiday"> | boolean
    createdAt?: DateTimeFilter<"Holiday"> | Date | string
    updatedAt?: DateTimeFilter<"Holiday"> | Date | string
    tenantId?: StringFilter<"Holiday"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type HolidayOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: HolidayCountOrderByAggregateInput
    _max?: HolidayMaxOrderByAggregateInput
    _min?: HolidayMinOrderByAggregateInput
  }

  export type HolidayScalarWhereWithAggregatesInput = {
    AND?: HolidayScalarWhereWithAggregatesInput | HolidayScalarWhereWithAggregatesInput[]
    OR?: HolidayScalarWhereWithAggregatesInput[]
    NOT?: HolidayScalarWhereWithAggregatesInput | HolidayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Holiday"> | string
    name?: StringWithAggregatesFilter<"Holiday"> | string
    date?: DateTimeWithAggregatesFilter<"Holiday"> | Date | string
    type?: StringWithAggregatesFilter<"Holiday"> | string
    description?: StringNullableWithAggregatesFilter<"Holiday"> | string | null
    isRecurring?: BoolWithAggregatesFilter<"Holiday"> | boolean
    isActive?: BoolWithAggregatesFilter<"Holiday"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Holiday"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Holiday"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Holiday"> | string
  }

  export type PerformanceReviewCycleWhereInput = {
    AND?: PerformanceReviewCycleWhereInput | PerformanceReviewCycleWhereInput[]
    OR?: PerformanceReviewCycleWhereInput[]
    NOT?: PerformanceReviewCycleWhereInput | PerformanceReviewCycleWhereInput[]
    id?: StringFilter<"PerformanceReviewCycle"> | string
    name?: StringFilter<"PerformanceReviewCycle"> | string
    description?: StringNullableFilter<"PerformanceReviewCycle"> | string | null
    startDate?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    endDate?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    reviewDeadline?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    status?: StringFilter<"PerformanceReviewCycle"> | string
    isActive?: BoolFilter<"PerformanceReviewCycle"> | boolean
    createdAt?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    tenantId?: StringFilter<"PerformanceReviewCycle"> | string
    performanceGoals?: PerformanceGoalListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    performanceReviews?: PerformanceReviewListRelationFilter
  }

  export type PerformanceReviewCycleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reviewDeadline?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    performanceGoals?: PerformanceGoalOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
    performanceReviews?: PerformanceReviewOrderByRelationAggregateInput
  }

  export type PerformanceReviewCycleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_tenantId?: PerformanceReviewCycleNameTenantIdCompoundUniqueInput
    AND?: PerformanceReviewCycleWhereInput | PerformanceReviewCycleWhereInput[]
    OR?: PerformanceReviewCycleWhereInput[]
    NOT?: PerformanceReviewCycleWhereInput | PerformanceReviewCycleWhereInput[]
    name?: StringFilter<"PerformanceReviewCycle"> | string
    description?: StringNullableFilter<"PerformanceReviewCycle"> | string | null
    startDate?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    endDate?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    reviewDeadline?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    status?: StringFilter<"PerformanceReviewCycle"> | string
    isActive?: BoolFilter<"PerformanceReviewCycle"> | boolean
    createdAt?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    tenantId?: StringFilter<"PerformanceReviewCycle"> | string
    performanceGoals?: PerformanceGoalListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    performanceReviews?: PerformanceReviewListRelationFilter
  }, "id" | "name_tenantId">

  export type PerformanceReviewCycleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reviewDeadline?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PerformanceReviewCycleCountOrderByAggregateInput
    _max?: PerformanceReviewCycleMaxOrderByAggregateInput
    _min?: PerformanceReviewCycleMinOrderByAggregateInput
  }

  export type PerformanceReviewCycleScalarWhereWithAggregatesInput = {
    AND?: PerformanceReviewCycleScalarWhereWithAggregatesInput | PerformanceReviewCycleScalarWhereWithAggregatesInput[]
    OR?: PerformanceReviewCycleScalarWhereWithAggregatesInput[]
    NOT?: PerformanceReviewCycleScalarWhereWithAggregatesInput | PerformanceReviewCycleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerformanceReviewCycle"> | string
    name?: StringWithAggregatesFilter<"PerformanceReviewCycle"> | string
    description?: StringNullableWithAggregatesFilter<"PerformanceReviewCycle"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"PerformanceReviewCycle"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"PerformanceReviewCycle"> | Date | string
    reviewDeadline?: DateTimeWithAggregatesFilter<"PerformanceReviewCycle"> | Date | string
    status?: StringWithAggregatesFilter<"PerformanceReviewCycle"> | string
    isActive?: BoolWithAggregatesFilter<"PerformanceReviewCycle"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PerformanceReviewCycle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerformanceReviewCycle"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PerformanceReviewCycle"> | string
  }

  export type PerformanceReviewWhereInput = {
    AND?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    OR?: PerformanceReviewWhereInput[]
    NOT?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    id?: StringFilter<"PerformanceReview"> | string
    employeeId?: StringFilter<"PerformanceReview"> | string
    reviewCycleId?: StringFilter<"PerformanceReview"> | string
    reviewerId?: StringFilter<"PerformanceReview"> | string
    status?: StringFilter<"PerformanceReview"> | string
    selfAssessmentCompleted?: BoolFilter<"PerformanceReview"> | boolean
    managerReviewCompleted?: BoolFilter<"PerformanceReview"> | boolean
    overallRating?: FloatNullableFilter<"PerformanceReview"> | number | null
    overallComments?: StringNullableFilter<"PerformanceReview"> | string | null
    strengths?: StringNullableFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableFilter<"PerformanceReview"> | string | null
    developmentPlan?: StringNullableFilter<"PerformanceReview"> | string | null
    goals?: StringNullableFilter<"PerformanceReview"> | string | null
    submittedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    approvedBy?: StringNullableFilter<"PerformanceReview"> | string | null
    createdAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    tenantId?: StringFilter<"PerformanceReview"> | string
    performanceFeedback?: PerformanceFeedbackListRelationFilter
    performanceRatings?: PerformanceRatingListRelationFilter
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    reviewCycle?: XOR<PerformanceReviewCycleScalarRelationFilter, PerformanceReviewCycleWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PerformanceReviewOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    reviewerId?: SortOrder
    status?: SortOrder
    selfAssessmentCompleted?: SortOrder
    managerReviewCompleted?: SortOrder
    overallRating?: SortOrderInput | SortOrder
    overallComments?: SortOrderInput | SortOrder
    strengths?: SortOrderInput | SortOrder
    areasForImprovement?: SortOrderInput | SortOrder
    developmentPlan?: SortOrderInput | SortOrder
    goals?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    performanceFeedback?: PerformanceFeedbackOrderByRelationAggregateInput
    performanceRatings?: PerformanceRatingOrderByRelationAggregateInput
    employee?: EmployeeOrderByWithRelationInput
    reviewCycle?: PerformanceReviewCycleOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PerformanceReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeId_reviewCycleId?: PerformanceReviewEmployeeIdReviewCycleIdCompoundUniqueInput
    AND?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    OR?: PerformanceReviewWhereInput[]
    NOT?: PerformanceReviewWhereInput | PerformanceReviewWhereInput[]
    employeeId?: StringFilter<"PerformanceReview"> | string
    reviewCycleId?: StringFilter<"PerformanceReview"> | string
    reviewerId?: StringFilter<"PerformanceReview"> | string
    status?: StringFilter<"PerformanceReview"> | string
    selfAssessmentCompleted?: BoolFilter<"PerformanceReview"> | boolean
    managerReviewCompleted?: BoolFilter<"PerformanceReview"> | boolean
    overallRating?: FloatNullableFilter<"PerformanceReview"> | number | null
    overallComments?: StringNullableFilter<"PerformanceReview"> | string | null
    strengths?: StringNullableFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableFilter<"PerformanceReview"> | string | null
    developmentPlan?: StringNullableFilter<"PerformanceReview"> | string | null
    goals?: StringNullableFilter<"PerformanceReview"> | string | null
    submittedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    approvedBy?: StringNullableFilter<"PerformanceReview"> | string | null
    createdAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    tenantId?: StringFilter<"PerformanceReview"> | string
    performanceFeedback?: PerformanceFeedbackListRelationFilter
    performanceRatings?: PerformanceRatingListRelationFilter
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    reviewCycle?: XOR<PerformanceReviewCycleScalarRelationFilter, PerformanceReviewCycleWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "employeeId_reviewCycleId">

  export type PerformanceReviewOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    reviewerId?: SortOrder
    status?: SortOrder
    selfAssessmentCompleted?: SortOrder
    managerReviewCompleted?: SortOrder
    overallRating?: SortOrderInput | SortOrder
    overallComments?: SortOrderInput | SortOrder
    strengths?: SortOrderInput | SortOrder
    areasForImprovement?: SortOrderInput | SortOrder
    developmentPlan?: SortOrderInput | SortOrder
    goals?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PerformanceReviewCountOrderByAggregateInput
    _avg?: PerformanceReviewAvgOrderByAggregateInput
    _max?: PerformanceReviewMaxOrderByAggregateInput
    _min?: PerformanceReviewMinOrderByAggregateInput
    _sum?: PerformanceReviewSumOrderByAggregateInput
  }

  export type PerformanceReviewScalarWhereWithAggregatesInput = {
    AND?: PerformanceReviewScalarWhereWithAggregatesInput | PerformanceReviewScalarWhereWithAggregatesInput[]
    OR?: PerformanceReviewScalarWhereWithAggregatesInput[]
    NOT?: PerformanceReviewScalarWhereWithAggregatesInput | PerformanceReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerformanceReview"> | string
    employeeId?: StringWithAggregatesFilter<"PerformanceReview"> | string
    reviewCycleId?: StringWithAggregatesFilter<"PerformanceReview"> | string
    reviewerId?: StringWithAggregatesFilter<"PerformanceReview"> | string
    status?: StringWithAggregatesFilter<"PerformanceReview"> | string
    selfAssessmentCompleted?: BoolWithAggregatesFilter<"PerformanceReview"> | boolean
    managerReviewCompleted?: BoolWithAggregatesFilter<"PerformanceReview"> | boolean
    overallRating?: FloatNullableWithAggregatesFilter<"PerformanceReview"> | number | null
    overallComments?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    strengths?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    developmentPlan?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    goals?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    submittedAt?: DateTimeNullableWithAggregatesFilter<"PerformanceReview"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"PerformanceReview"> | Date | string | null
    approvedAt?: DateTimeNullableWithAggregatesFilter<"PerformanceReview"> | Date | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"PerformanceReview"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerformanceReview"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PerformanceReview"> | string
  }

  export type PerformanceGoalWhereInput = {
    AND?: PerformanceGoalWhereInput | PerformanceGoalWhereInput[]
    OR?: PerformanceGoalWhereInput[]
    NOT?: PerformanceGoalWhereInput | PerformanceGoalWhereInput[]
    id?: StringFilter<"PerformanceGoal"> | string
    employeeId?: StringFilter<"PerformanceGoal"> | string
    reviewCycleId?: StringNullableFilter<"PerformanceGoal"> | string | null
    title?: StringFilter<"PerformanceGoal"> | string
    description?: StringFilter<"PerformanceGoal"> | string
    category?: StringFilter<"PerformanceGoal"> | string
    priority?: StringFilter<"PerformanceGoal"> | string
    targetDate?: DateTimeNullableFilter<"PerformanceGoal"> | Date | string | null
    status?: StringFilter<"PerformanceGoal"> | string
    progress?: IntFilter<"PerformanceGoal"> | number
    measurementCriteria?: StringNullableFilter<"PerformanceGoal"> | string | null
    achievedDate?: DateTimeNullableFilter<"PerformanceGoal"> | Date | string | null
    comments?: StringNullableFilter<"PerformanceGoal"> | string | null
    createdBy?: StringFilter<"PerformanceGoal"> | string
    createdAt?: DateTimeFilter<"PerformanceGoal"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceGoal"> | Date | string
    tenantId?: StringFilter<"PerformanceGoal"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    reviewCycle?: XOR<PerformanceReviewCycleNullableScalarRelationFilter, PerformanceReviewCycleWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PerformanceGoalOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    targetDate?: SortOrderInput | SortOrder
    status?: SortOrder
    progress?: SortOrder
    measurementCriteria?: SortOrderInput | SortOrder
    achievedDate?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    reviewCycle?: PerformanceReviewCycleOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PerformanceGoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PerformanceGoalWhereInput | PerformanceGoalWhereInput[]
    OR?: PerformanceGoalWhereInput[]
    NOT?: PerformanceGoalWhereInput | PerformanceGoalWhereInput[]
    employeeId?: StringFilter<"PerformanceGoal"> | string
    reviewCycleId?: StringNullableFilter<"PerformanceGoal"> | string | null
    title?: StringFilter<"PerformanceGoal"> | string
    description?: StringFilter<"PerformanceGoal"> | string
    category?: StringFilter<"PerformanceGoal"> | string
    priority?: StringFilter<"PerformanceGoal"> | string
    targetDate?: DateTimeNullableFilter<"PerformanceGoal"> | Date | string | null
    status?: StringFilter<"PerformanceGoal"> | string
    progress?: IntFilter<"PerformanceGoal"> | number
    measurementCriteria?: StringNullableFilter<"PerformanceGoal"> | string | null
    achievedDate?: DateTimeNullableFilter<"PerformanceGoal"> | Date | string | null
    comments?: StringNullableFilter<"PerformanceGoal"> | string | null
    createdBy?: StringFilter<"PerformanceGoal"> | string
    createdAt?: DateTimeFilter<"PerformanceGoal"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceGoal"> | Date | string
    tenantId?: StringFilter<"PerformanceGoal"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    reviewCycle?: XOR<PerformanceReviewCycleNullableScalarRelationFilter, PerformanceReviewCycleWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type PerformanceGoalOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    targetDate?: SortOrderInput | SortOrder
    status?: SortOrder
    progress?: SortOrder
    measurementCriteria?: SortOrderInput | SortOrder
    achievedDate?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PerformanceGoalCountOrderByAggregateInput
    _avg?: PerformanceGoalAvgOrderByAggregateInput
    _max?: PerformanceGoalMaxOrderByAggregateInput
    _min?: PerformanceGoalMinOrderByAggregateInput
    _sum?: PerformanceGoalSumOrderByAggregateInput
  }

  export type PerformanceGoalScalarWhereWithAggregatesInput = {
    AND?: PerformanceGoalScalarWhereWithAggregatesInput | PerformanceGoalScalarWhereWithAggregatesInput[]
    OR?: PerformanceGoalScalarWhereWithAggregatesInput[]
    NOT?: PerformanceGoalScalarWhereWithAggregatesInput | PerformanceGoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    employeeId?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    reviewCycleId?: StringNullableWithAggregatesFilter<"PerformanceGoal"> | string | null
    title?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    description?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    category?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    priority?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    targetDate?: DateTimeNullableWithAggregatesFilter<"PerformanceGoal"> | Date | string | null
    status?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    progress?: IntWithAggregatesFilter<"PerformanceGoal"> | number
    measurementCriteria?: StringNullableWithAggregatesFilter<"PerformanceGoal"> | string | null
    achievedDate?: DateTimeNullableWithAggregatesFilter<"PerformanceGoal"> | Date | string | null
    comments?: StringNullableWithAggregatesFilter<"PerformanceGoal"> | string | null
    createdBy?: StringWithAggregatesFilter<"PerformanceGoal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PerformanceGoal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerformanceGoal"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PerformanceGoal"> | string
  }

  export type PerformanceRatingWhereInput = {
    AND?: PerformanceRatingWhereInput | PerformanceRatingWhereInput[]
    OR?: PerformanceRatingWhereInput[]
    NOT?: PerformanceRatingWhereInput | PerformanceRatingWhereInput[]
    id?: StringFilter<"PerformanceRating"> | string
    performanceReviewId?: StringFilter<"PerformanceRating"> | string
    competency?: StringFilter<"PerformanceRating"> | string
    rating?: FloatFilter<"PerformanceRating"> | number
    maxRating?: FloatFilter<"PerformanceRating"> | number
    weight?: FloatFilter<"PerformanceRating"> | number
    comments?: StringNullableFilter<"PerformanceRating"> | string | null
    raterType?: StringFilter<"PerformanceRating"> | string
    createdAt?: DateTimeFilter<"PerformanceRating"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceRating"> | Date | string
    tenantId?: StringFilter<"PerformanceRating"> | string
    performanceReview?: XOR<PerformanceReviewScalarRelationFilter, PerformanceReviewWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PerformanceRatingOrderByWithRelationInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    competency?: SortOrder
    rating?: SortOrder
    maxRating?: SortOrder
    weight?: SortOrder
    comments?: SortOrderInput | SortOrder
    raterType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    performanceReview?: PerformanceReviewOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PerformanceRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PerformanceRatingWhereInput | PerformanceRatingWhereInput[]
    OR?: PerformanceRatingWhereInput[]
    NOT?: PerformanceRatingWhereInput | PerformanceRatingWhereInput[]
    performanceReviewId?: StringFilter<"PerformanceRating"> | string
    competency?: StringFilter<"PerformanceRating"> | string
    rating?: FloatFilter<"PerformanceRating"> | number
    maxRating?: FloatFilter<"PerformanceRating"> | number
    weight?: FloatFilter<"PerformanceRating"> | number
    comments?: StringNullableFilter<"PerformanceRating"> | string | null
    raterType?: StringFilter<"PerformanceRating"> | string
    createdAt?: DateTimeFilter<"PerformanceRating"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceRating"> | Date | string
    tenantId?: StringFilter<"PerformanceRating"> | string
    performanceReview?: XOR<PerformanceReviewScalarRelationFilter, PerformanceReviewWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type PerformanceRatingOrderByWithAggregationInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    competency?: SortOrder
    rating?: SortOrder
    maxRating?: SortOrder
    weight?: SortOrder
    comments?: SortOrderInput | SortOrder
    raterType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PerformanceRatingCountOrderByAggregateInput
    _avg?: PerformanceRatingAvgOrderByAggregateInput
    _max?: PerformanceRatingMaxOrderByAggregateInput
    _min?: PerformanceRatingMinOrderByAggregateInput
    _sum?: PerformanceRatingSumOrderByAggregateInput
  }

  export type PerformanceRatingScalarWhereWithAggregatesInput = {
    AND?: PerformanceRatingScalarWhereWithAggregatesInput | PerformanceRatingScalarWhereWithAggregatesInput[]
    OR?: PerformanceRatingScalarWhereWithAggregatesInput[]
    NOT?: PerformanceRatingScalarWhereWithAggregatesInput | PerformanceRatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerformanceRating"> | string
    performanceReviewId?: StringWithAggregatesFilter<"PerformanceRating"> | string
    competency?: StringWithAggregatesFilter<"PerformanceRating"> | string
    rating?: FloatWithAggregatesFilter<"PerformanceRating"> | number
    maxRating?: FloatWithAggregatesFilter<"PerformanceRating"> | number
    weight?: FloatWithAggregatesFilter<"PerformanceRating"> | number
    comments?: StringNullableWithAggregatesFilter<"PerformanceRating"> | string | null
    raterType?: StringWithAggregatesFilter<"PerformanceRating"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PerformanceRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerformanceRating"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PerformanceRating"> | string
  }

  export type PerformanceFeedbackWhereInput = {
    AND?: PerformanceFeedbackWhereInput | PerformanceFeedbackWhereInput[]
    OR?: PerformanceFeedbackWhereInput[]
    NOT?: PerformanceFeedbackWhereInput | PerformanceFeedbackWhereInput[]
    id?: StringFilter<"PerformanceFeedback"> | string
    performanceReviewId?: StringFilter<"PerformanceFeedback"> | string
    feedbackType?: StringFilter<"PerformanceFeedback"> | string
    feedback?: StringFilter<"PerformanceFeedback"> | string
    isPrivate?: BoolFilter<"PerformanceFeedback"> | boolean
    providedBy?: StringFilter<"PerformanceFeedback"> | string
    providedAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    createdAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    tenantId?: StringFilter<"PerformanceFeedback"> | string
    performanceReview?: XOR<PerformanceReviewScalarRelationFilter, PerformanceReviewWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type PerformanceFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    feedbackType?: SortOrder
    feedback?: SortOrder
    isPrivate?: SortOrder
    providedBy?: SortOrder
    providedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    performanceReview?: PerformanceReviewOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PerformanceFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PerformanceFeedbackWhereInput | PerformanceFeedbackWhereInput[]
    OR?: PerformanceFeedbackWhereInput[]
    NOT?: PerformanceFeedbackWhereInput | PerformanceFeedbackWhereInput[]
    performanceReviewId?: StringFilter<"PerformanceFeedback"> | string
    feedbackType?: StringFilter<"PerformanceFeedback"> | string
    feedback?: StringFilter<"PerformanceFeedback"> | string
    isPrivate?: BoolFilter<"PerformanceFeedback"> | boolean
    providedBy?: StringFilter<"PerformanceFeedback"> | string
    providedAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    createdAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    tenantId?: StringFilter<"PerformanceFeedback"> | string
    performanceReview?: XOR<PerformanceReviewScalarRelationFilter, PerformanceReviewWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type PerformanceFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    feedbackType?: SortOrder
    feedback?: SortOrder
    isPrivate?: SortOrder
    providedBy?: SortOrder
    providedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: PerformanceFeedbackCountOrderByAggregateInput
    _max?: PerformanceFeedbackMaxOrderByAggregateInput
    _min?: PerformanceFeedbackMinOrderByAggregateInput
  }

  export type PerformanceFeedbackScalarWhereWithAggregatesInput = {
    AND?: PerformanceFeedbackScalarWhereWithAggregatesInput | PerformanceFeedbackScalarWhereWithAggregatesInput[]
    OR?: PerformanceFeedbackScalarWhereWithAggregatesInput[]
    NOT?: PerformanceFeedbackScalarWhereWithAggregatesInput | PerformanceFeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerformanceFeedback"> | string
    performanceReviewId?: StringWithAggregatesFilter<"PerformanceFeedback"> | string
    feedbackType?: StringWithAggregatesFilter<"PerformanceFeedback"> | string
    feedback?: StringWithAggregatesFilter<"PerformanceFeedback"> | string
    isPrivate?: BoolWithAggregatesFilter<"PerformanceFeedback"> | boolean
    providedBy?: StringWithAggregatesFilter<"PerformanceFeedback"> | string
    providedAt?: DateTimeWithAggregatesFilter<"PerformanceFeedback"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PerformanceFeedback"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PerformanceFeedback"> | Date | string
    tenantId?: StringWithAggregatesFilter<"PerformanceFeedback"> | string
  }

  export type ReportTemplateWhereInput = {
    AND?: ReportTemplateWhereInput | ReportTemplateWhereInput[]
    OR?: ReportTemplateWhereInput[]
    NOT?: ReportTemplateWhereInput | ReportTemplateWhereInput[]
    id?: StringFilter<"ReportTemplate"> | string
    name?: StringFilter<"ReportTemplate"> | string
    description?: StringNullableFilter<"ReportTemplate"> | string | null
    category?: StringFilter<"ReportTemplate"> | string
    type?: StringFilter<"ReportTemplate"> | string
    query?: StringFilter<"ReportTemplate"> | string
    parameters?: JsonNullableFilter<"ReportTemplate">
    columns?: JsonFilter<"ReportTemplate">
    filters?: JsonNullableFilter<"ReportTemplate">
    groupBy?: JsonNullableFilter<"ReportTemplate">
    sortBy?: JsonNullableFilter<"ReportTemplate">
    chartConfig?: JsonNullableFilter<"ReportTemplate">
    isActive?: BoolFilter<"ReportTemplate"> | boolean
    isPublic?: BoolFilter<"ReportTemplate"> | boolean
    createdBy?: StringFilter<"ReportTemplate"> | string
    createdAt?: DateTimeFilter<"ReportTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ReportTemplate"> | Date | string
    tenantId?: StringFilter<"ReportTemplate"> | string
    reportInstances?: ReportInstanceListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type ReportTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    type?: SortOrder
    query?: SortOrder
    parameters?: SortOrderInput | SortOrder
    columns?: SortOrder
    filters?: SortOrderInput | SortOrder
    groupBy?: SortOrderInput | SortOrder
    sortBy?: SortOrderInput | SortOrder
    chartConfig?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    reportInstances?: ReportInstanceOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type ReportTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportTemplateWhereInput | ReportTemplateWhereInput[]
    OR?: ReportTemplateWhereInput[]
    NOT?: ReportTemplateWhereInput | ReportTemplateWhereInput[]
    name?: StringFilter<"ReportTemplate"> | string
    description?: StringNullableFilter<"ReportTemplate"> | string | null
    category?: StringFilter<"ReportTemplate"> | string
    type?: StringFilter<"ReportTemplate"> | string
    query?: StringFilter<"ReportTemplate"> | string
    parameters?: JsonNullableFilter<"ReportTemplate">
    columns?: JsonFilter<"ReportTemplate">
    filters?: JsonNullableFilter<"ReportTemplate">
    groupBy?: JsonNullableFilter<"ReportTemplate">
    sortBy?: JsonNullableFilter<"ReportTemplate">
    chartConfig?: JsonNullableFilter<"ReportTemplate">
    isActive?: BoolFilter<"ReportTemplate"> | boolean
    isPublic?: BoolFilter<"ReportTemplate"> | boolean
    createdBy?: StringFilter<"ReportTemplate"> | string
    createdAt?: DateTimeFilter<"ReportTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ReportTemplate"> | Date | string
    tenantId?: StringFilter<"ReportTemplate"> | string
    reportInstances?: ReportInstanceListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type ReportTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    type?: SortOrder
    query?: SortOrder
    parameters?: SortOrderInput | SortOrder
    columns?: SortOrder
    filters?: SortOrderInput | SortOrder
    groupBy?: SortOrderInput | SortOrder
    sortBy?: SortOrderInput | SortOrder
    chartConfig?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: ReportTemplateCountOrderByAggregateInput
    _max?: ReportTemplateMaxOrderByAggregateInput
    _min?: ReportTemplateMinOrderByAggregateInput
  }

  export type ReportTemplateScalarWhereWithAggregatesInput = {
    AND?: ReportTemplateScalarWhereWithAggregatesInput | ReportTemplateScalarWhereWithAggregatesInput[]
    OR?: ReportTemplateScalarWhereWithAggregatesInput[]
    NOT?: ReportTemplateScalarWhereWithAggregatesInput | ReportTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportTemplate"> | string
    name?: StringWithAggregatesFilter<"ReportTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"ReportTemplate"> | string | null
    category?: StringWithAggregatesFilter<"ReportTemplate"> | string
    type?: StringWithAggregatesFilter<"ReportTemplate"> | string
    query?: StringWithAggregatesFilter<"ReportTemplate"> | string
    parameters?: JsonNullableWithAggregatesFilter<"ReportTemplate">
    columns?: JsonWithAggregatesFilter<"ReportTemplate">
    filters?: JsonNullableWithAggregatesFilter<"ReportTemplate">
    groupBy?: JsonNullableWithAggregatesFilter<"ReportTemplate">
    sortBy?: JsonNullableWithAggregatesFilter<"ReportTemplate">
    chartConfig?: JsonNullableWithAggregatesFilter<"ReportTemplate">
    isActive?: BoolWithAggregatesFilter<"ReportTemplate"> | boolean
    isPublic?: BoolWithAggregatesFilter<"ReportTemplate"> | boolean
    createdBy?: StringWithAggregatesFilter<"ReportTemplate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReportTemplate"> | Date | string
    tenantId?: StringWithAggregatesFilter<"ReportTemplate"> | string
  }

  export type ReportInstanceWhereInput = {
    AND?: ReportInstanceWhereInput | ReportInstanceWhereInput[]
    OR?: ReportInstanceWhereInput[]
    NOT?: ReportInstanceWhereInput | ReportInstanceWhereInput[]
    id?: StringFilter<"ReportInstance"> | string
    templateId?: StringFilter<"ReportInstance"> | string
    name?: StringFilter<"ReportInstance"> | string
    description?: StringNullableFilter<"ReportInstance"> | string | null
    parameters?: JsonNullableFilter<"ReportInstance">
    filters?: JsonNullableFilter<"ReportInstance">
    status?: StringFilter<"ReportInstance"> | string
    data?: JsonNullableFilter<"ReportInstance">
    filePath?: StringNullableFilter<"ReportInstance"> | string | null
    fileFormat?: StringFilter<"ReportInstance"> | string
    fileSize?: IntNullableFilter<"ReportInstance"> | number | null
    recordCount?: IntNullableFilter<"ReportInstance"> | number | null
    generatedBy?: StringFilter<"ReportInstance"> | string
    generatedAt?: DateTimeFilter<"ReportInstance"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ReportInstance"> | Date | string | null
    isScheduled?: BoolFilter<"ReportInstance"> | boolean
    scheduleConfig?: JsonNullableFilter<"ReportInstance">
    error?: StringNullableFilter<"ReportInstance"> | string | null
    createdAt?: DateTimeFilter<"ReportInstance"> | Date | string
    updatedAt?: DateTimeFilter<"ReportInstance"> | Date | string
    tenantId?: StringFilter<"ReportInstance"> | string
    template?: XOR<ReportTemplateScalarRelationFilter, ReportTemplateWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type ReportInstanceOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    filters?: SortOrderInput | SortOrder
    status?: SortOrder
    data?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    fileFormat?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    recordCount?: SortOrderInput | SortOrder
    generatedBy?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isScheduled?: SortOrder
    scheduleConfig?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    template?: ReportTemplateOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type ReportInstanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportInstanceWhereInput | ReportInstanceWhereInput[]
    OR?: ReportInstanceWhereInput[]
    NOT?: ReportInstanceWhereInput | ReportInstanceWhereInput[]
    templateId?: StringFilter<"ReportInstance"> | string
    name?: StringFilter<"ReportInstance"> | string
    description?: StringNullableFilter<"ReportInstance"> | string | null
    parameters?: JsonNullableFilter<"ReportInstance">
    filters?: JsonNullableFilter<"ReportInstance">
    status?: StringFilter<"ReportInstance"> | string
    data?: JsonNullableFilter<"ReportInstance">
    filePath?: StringNullableFilter<"ReportInstance"> | string | null
    fileFormat?: StringFilter<"ReportInstance"> | string
    fileSize?: IntNullableFilter<"ReportInstance"> | number | null
    recordCount?: IntNullableFilter<"ReportInstance"> | number | null
    generatedBy?: StringFilter<"ReportInstance"> | string
    generatedAt?: DateTimeFilter<"ReportInstance"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ReportInstance"> | Date | string | null
    isScheduled?: BoolFilter<"ReportInstance"> | boolean
    scheduleConfig?: JsonNullableFilter<"ReportInstance">
    error?: StringNullableFilter<"ReportInstance"> | string | null
    createdAt?: DateTimeFilter<"ReportInstance"> | Date | string
    updatedAt?: DateTimeFilter<"ReportInstance"> | Date | string
    tenantId?: StringFilter<"ReportInstance"> | string
    template?: XOR<ReportTemplateScalarRelationFilter, ReportTemplateWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type ReportInstanceOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    filters?: SortOrderInput | SortOrder
    status?: SortOrder
    data?: SortOrderInput | SortOrder
    filePath?: SortOrderInput | SortOrder
    fileFormat?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    recordCount?: SortOrderInput | SortOrder
    generatedBy?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isScheduled?: SortOrder
    scheduleConfig?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: ReportInstanceCountOrderByAggregateInput
    _avg?: ReportInstanceAvgOrderByAggregateInput
    _max?: ReportInstanceMaxOrderByAggregateInput
    _min?: ReportInstanceMinOrderByAggregateInput
    _sum?: ReportInstanceSumOrderByAggregateInput
  }

  export type ReportInstanceScalarWhereWithAggregatesInput = {
    AND?: ReportInstanceScalarWhereWithAggregatesInput | ReportInstanceScalarWhereWithAggregatesInput[]
    OR?: ReportInstanceScalarWhereWithAggregatesInput[]
    NOT?: ReportInstanceScalarWhereWithAggregatesInput | ReportInstanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportInstance"> | string
    templateId?: StringWithAggregatesFilter<"ReportInstance"> | string
    name?: StringWithAggregatesFilter<"ReportInstance"> | string
    description?: StringNullableWithAggregatesFilter<"ReportInstance"> | string | null
    parameters?: JsonNullableWithAggregatesFilter<"ReportInstance">
    filters?: JsonNullableWithAggregatesFilter<"ReportInstance">
    status?: StringWithAggregatesFilter<"ReportInstance"> | string
    data?: JsonNullableWithAggregatesFilter<"ReportInstance">
    filePath?: StringNullableWithAggregatesFilter<"ReportInstance"> | string | null
    fileFormat?: StringWithAggregatesFilter<"ReportInstance"> | string
    fileSize?: IntNullableWithAggregatesFilter<"ReportInstance"> | number | null
    recordCount?: IntNullableWithAggregatesFilter<"ReportInstance"> | number | null
    generatedBy?: StringWithAggregatesFilter<"ReportInstance"> | string
    generatedAt?: DateTimeWithAggregatesFilter<"ReportInstance"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ReportInstance"> | Date | string | null
    isScheduled?: BoolWithAggregatesFilter<"ReportInstance"> | boolean
    scheduleConfig?: JsonNullableWithAggregatesFilter<"ReportInstance">
    error?: StringNullableWithAggregatesFilter<"ReportInstance"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ReportInstance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReportInstance"> | Date | string
    tenantId?: StringWithAggregatesFilter<"ReportInstance"> | string
  }

  export type DashboardWhereInput = {
    AND?: DashboardWhereInput | DashboardWhereInput[]
    OR?: DashboardWhereInput[]
    NOT?: DashboardWhereInput | DashboardWhereInput[]
    id?: StringFilter<"Dashboard"> | string
    name?: StringFilter<"Dashboard"> | string
    description?: StringNullableFilter<"Dashboard"> | string | null
    layout?: JsonFilter<"Dashboard">
    widgets?: JsonFilter<"Dashboard">
    filters?: JsonNullableFilter<"Dashboard">
    refreshInterval?: IntNullableFilter<"Dashboard"> | number | null
    isDefault?: BoolFilter<"Dashboard"> | boolean
    isPublic?: BoolFilter<"Dashboard"> | boolean
    allowedRoles?: StringNullableListFilter<"Dashboard">
    createdBy?: StringFilter<"Dashboard"> | string
    createdAt?: DateTimeFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeFilter<"Dashboard"> | Date | string
    tenantId?: StringFilter<"Dashboard"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type DashboardOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    layout?: SortOrder
    widgets?: SortOrder
    filters?: SortOrderInput | SortOrder
    refreshInterval?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    allowedRoles?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type DashboardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DashboardWhereInput | DashboardWhereInput[]
    OR?: DashboardWhereInput[]
    NOT?: DashboardWhereInput | DashboardWhereInput[]
    name?: StringFilter<"Dashboard"> | string
    description?: StringNullableFilter<"Dashboard"> | string | null
    layout?: JsonFilter<"Dashboard">
    widgets?: JsonFilter<"Dashboard">
    filters?: JsonNullableFilter<"Dashboard">
    refreshInterval?: IntNullableFilter<"Dashboard"> | number | null
    isDefault?: BoolFilter<"Dashboard"> | boolean
    isPublic?: BoolFilter<"Dashboard"> | boolean
    allowedRoles?: StringNullableListFilter<"Dashboard">
    createdBy?: StringFilter<"Dashboard"> | string
    createdAt?: DateTimeFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeFilter<"Dashboard"> | Date | string
    tenantId?: StringFilter<"Dashboard"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type DashboardOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    layout?: SortOrder
    widgets?: SortOrder
    filters?: SortOrderInput | SortOrder
    refreshInterval?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    allowedRoles?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: DashboardCountOrderByAggregateInput
    _avg?: DashboardAvgOrderByAggregateInput
    _max?: DashboardMaxOrderByAggregateInput
    _min?: DashboardMinOrderByAggregateInput
    _sum?: DashboardSumOrderByAggregateInput
  }

  export type DashboardScalarWhereWithAggregatesInput = {
    AND?: DashboardScalarWhereWithAggregatesInput | DashboardScalarWhereWithAggregatesInput[]
    OR?: DashboardScalarWhereWithAggregatesInput[]
    NOT?: DashboardScalarWhereWithAggregatesInput | DashboardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dashboard"> | string
    name?: StringWithAggregatesFilter<"Dashboard"> | string
    description?: StringNullableWithAggregatesFilter<"Dashboard"> | string | null
    layout?: JsonWithAggregatesFilter<"Dashboard">
    widgets?: JsonWithAggregatesFilter<"Dashboard">
    filters?: JsonNullableWithAggregatesFilter<"Dashboard">
    refreshInterval?: IntNullableWithAggregatesFilter<"Dashboard"> | number | null
    isDefault?: BoolWithAggregatesFilter<"Dashboard"> | boolean
    isPublic?: BoolWithAggregatesFilter<"Dashboard"> | boolean
    allowedRoles?: StringNullableListFilter<"Dashboard">
    createdBy?: StringWithAggregatesFilter<"Dashboard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Dashboard"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Dashboard"> | string
  }

  export type SalaryAdvancePolicyWhereInput = {
    AND?: SalaryAdvancePolicyWhereInput | SalaryAdvancePolicyWhereInput[]
    OR?: SalaryAdvancePolicyWhereInput[]
    NOT?: SalaryAdvancePolicyWhereInput | SalaryAdvancePolicyWhereInput[]
    id?: StringFilter<"SalaryAdvancePolicy"> | string
    name?: StringFilter<"SalaryAdvancePolicy"> | string
    description?: StringNullableFilter<"SalaryAdvancePolicy"> | string | null
    maxAdvancePercentage?: FloatFilter<"SalaryAdvancePolicy"> | number
    maxAdvanceAmount?: FloatNullableFilter<"SalaryAdvancePolicy"> | number | null
    minServiceMonths?: IntFilter<"SalaryAdvancePolicy"> | number
    maxAdvancesPerYear?: IntFilter<"SalaryAdvancePolicy"> | number
    interestRate?: FloatFilter<"SalaryAdvancePolicy"> | number
    requiresApproval?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    autoApprove?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    isActive?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    effectiveDate?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    expiryDate?: DateTimeNullableFilter<"SalaryAdvancePolicy"> | Date | string | null
    createdAt?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    tenantId?: StringFilter<"SalaryAdvancePolicy"> | string
    monthlyDeductionPercentage?: FloatFilter<"SalaryAdvancePolicy"> | number
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type SalaryAdvancePolicyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    maxAdvancePercentage?: SortOrder
    maxAdvanceAmount?: SortOrderInput | SortOrder
    minServiceMonths?: SortOrder
    maxAdvancesPerYear?: SortOrder
    interestRate?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    monthlyDeductionPercentage?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type SalaryAdvancePolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SalaryAdvancePolicyWhereInput | SalaryAdvancePolicyWhereInput[]
    OR?: SalaryAdvancePolicyWhereInput[]
    NOT?: SalaryAdvancePolicyWhereInput | SalaryAdvancePolicyWhereInput[]
    name?: StringFilter<"SalaryAdvancePolicy"> | string
    description?: StringNullableFilter<"SalaryAdvancePolicy"> | string | null
    maxAdvancePercentage?: FloatFilter<"SalaryAdvancePolicy"> | number
    maxAdvanceAmount?: FloatNullableFilter<"SalaryAdvancePolicy"> | number | null
    minServiceMonths?: IntFilter<"SalaryAdvancePolicy"> | number
    maxAdvancesPerYear?: IntFilter<"SalaryAdvancePolicy"> | number
    interestRate?: FloatFilter<"SalaryAdvancePolicy"> | number
    requiresApproval?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    autoApprove?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    isActive?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    effectiveDate?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    expiryDate?: DateTimeNullableFilter<"SalaryAdvancePolicy"> | Date | string | null
    createdAt?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    tenantId?: StringFilter<"SalaryAdvancePolicy"> | string
    monthlyDeductionPercentage?: FloatFilter<"SalaryAdvancePolicy"> | number
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type SalaryAdvancePolicyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    maxAdvancePercentage?: SortOrder
    maxAdvanceAmount?: SortOrderInput | SortOrder
    minServiceMonths?: SortOrder
    maxAdvancesPerYear?: SortOrder
    interestRate?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    monthlyDeductionPercentage?: SortOrder
    _count?: SalaryAdvancePolicyCountOrderByAggregateInput
    _avg?: SalaryAdvancePolicyAvgOrderByAggregateInput
    _max?: SalaryAdvancePolicyMaxOrderByAggregateInput
    _min?: SalaryAdvancePolicyMinOrderByAggregateInput
    _sum?: SalaryAdvancePolicySumOrderByAggregateInput
  }

  export type SalaryAdvancePolicyScalarWhereWithAggregatesInput = {
    AND?: SalaryAdvancePolicyScalarWhereWithAggregatesInput | SalaryAdvancePolicyScalarWhereWithAggregatesInput[]
    OR?: SalaryAdvancePolicyScalarWhereWithAggregatesInput[]
    NOT?: SalaryAdvancePolicyScalarWhereWithAggregatesInput | SalaryAdvancePolicyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SalaryAdvancePolicy"> | string
    name?: StringWithAggregatesFilter<"SalaryAdvancePolicy"> | string
    description?: StringNullableWithAggregatesFilter<"SalaryAdvancePolicy"> | string | null
    maxAdvancePercentage?: FloatWithAggregatesFilter<"SalaryAdvancePolicy"> | number
    maxAdvanceAmount?: FloatNullableWithAggregatesFilter<"SalaryAdvancePolicy"> | number | null
    minServiceMonths?: IntWithAggregatesFilter<"SalaryAdvancePolicy"> | number
    maxAdvancesPerYear?: IntWithAggregatesFilter<"SalaryAdvancePolicy"> | number
    interestRate?: FloatWithAggregatesFilter<"SalaryAdvancePolicy"> | number
    requiresApproval?: BoolWithAggregatesFilter<"SalaryAdvancePolicy"> | boolean
    autoApprove?: BoolWithAggregatesFilter<"SalaryAdvancePolicy"> | boolean
    isActive?: BoolWithAggregatesFilter<"SalaryAdvancePolicy"> | boolean
    effectiveDate?: DateTimeWithAggregatesFilter<"SalaryAdvancePolicy"> | Date | string
    expiryDate?: DateTimeNullableWithAggregatesFilter<"SalaryAdvancePolicy"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SalaryAdvancePolicy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SalaryAdvancePolicy"> | Date | string
    tenantId?: StringWithAggregatesFilter<"SalaryAdvancePolicy"> | string
    monthlyDeductionPercentage?: FloatWithAggregatesFilter<"SalaryAdvancePolicy"> | number
  }

  export type SalaryAdvanceRequestWhereInput = {
    AND?: SalaryAdvanceRequestWhereInput | SalaryAdvanceRequestWhereInput[]
    OR?: SalaryAdvanceRequestWhereInput[]
    NOT?: SalaryAdvanceRequestWhereInput | SalaryAdvanceRequestWhereInput[]
    id?: StringFilter<"SalaryAdvanceRequest"> | string
    employeeId?: StringFilter<"SalaryAdvanceRequest"> | string
    branchId?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    requestedAmount?: FloatFilter<"SalaryAdvanceRequest"> | number
    approvedAmount?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    reason?: StringFilter<"SalaryAdvanceRequest"> | string
    status?: StringFilter<"SalaryAdvanceRequest"> | string
    requestDate?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    approvedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    rejectedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    rejectedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    rejectionReason?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    disbursedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    disbursedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    repaymentStartDate?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    repaymentEndDate?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    monthlyDeduction?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    totalRepaid?: FloatFilter<"SalaryAdvanceRequest"> | number
    outstandingBalance?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    interestRate?: FloatFilter<"SalaryAdvanceRequest"> | number
    totalInterest?: FloatFilter<"SalaryAdvanceRequest"> | number
    comments?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    attachments?: StringNullableListFilter<"SalaryAdvanceRequest">
    createdAt?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    tenantId?: StringFilter<"SalaryAdvanceRequest"> | string
    repayments?: SalaryAdvanceRepaymentListRelationFilter
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type SalaryAdvanceRequestOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    requestedAmount?: SortOrder
    approvedAmount?: SortOrderInput | SortOrder
    reason?: SortOrder
    status?: SortOrder
    requestDate?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    rejectedAt?: SortOrderInput | SortOrder
    rejectedBy?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    disbursedAt?: SortOrderInput | SortOrder
    disbursedBy?: SortOrderInput | SortOrder
    repaymentStartDate?: SortOrderInput | SortOrder
    repaymentEndDate?: SortOrderInput | SortOrder
    monthlyDeduction?: SortOrderInput | SortOrder
    totalRepaid?: SortOrder
    outstandingBalance?: SortOrderInput | SortOrder
    interestRate?: SortOrder
    totalInterest?: SortOrder
    comments?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    repayments?: SalaryAdvanceRepaymentOrderByRelationAggregateInput
    employee?: EmployeeOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type SalaryAdvanceRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SalaryAdvanceRequestWhereInput | SalaryAdvanceRequestWhereInput[]
    OR?: SalaryAdvanceRequestWhereInput[]
    NOT?: SalaryAdvanceRequestWhereInput | SalaryAdvanceRequestWhereInput[]
    employeeId?: StringFilter<"SalaryAdvanceRequest"> | string
    branchId?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    requestedAmount?: FloatFilter<"SalaryAdvanceRequest"> | number
    approvedAmount?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    reason?: StringFilter<"SalaryAdvanceRequest"> | string
    status?: StringFilter<"SalaryAdvanceRequest"> | string
    requestDate?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    approvedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    rejectedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    rejectedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    rejectionReason?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    disbursedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    disbursedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    repaymentStartDate?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    repaymentEndDate?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    monthlyDeduction?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    totalRepaid?: FloatFilter<"SalaryAdvanceRequest"> | number
    outstandingBalance?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    interestRate?: FloatFilter<"SalaryAdvanceRequest"> | number
    totalInterest?: FloatFilter<"SalaryAdvanceRequest"> | number
    comments?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    attachments?: StringNullableListFilter<"SalaryAdvanceRequest">
    createdAt?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    tenantId?: StringFilter<"SalaryAdvanceRequest"> | string
    repayments?: SalaryAdvanceRepaymentListRelationFilter
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    branch?: XOR<BranchNullableScalarRelationFilter, BranchWhereInput> | null
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type SalaryAdvanceRequestOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrderInput | SortOrder
    requestedAmount?: SortOrder
    approvedAmount?: SortOrderInput | SortOrder
    reason?: SortOrder
    status?: SortOrder
    requestDate?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    rejectedAt?: SortOrderInput | SortOrder
    rejectedBy?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    disbursedAt?: SortOrderInput | SortOrder
    disbursedBy?: SortOrderInput | SortOrder
    repaymentStartDate?: SortOrderInput | SortOrder
    repaymentEndDate?: SortOrderInput | SortOrder
    monthlyDeduction?: SortOrderInput | SortOrder
    totalRepaid?: SortOrder
    outstandingBalance?: SortOrderInput | SortOrder
    interestRate?: SortOrder
    totalInterest?: SortOrder
    comments?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: SalaryAdvanceRequestCountOrderByAggregateInput
    _avg?: SalaryAdvanceRequestAvgOrderByAggregateInput
    _max?: SalaryAdvanceRequestMaxOrderByAggregateInput
    _min?: SalaryAdvanceRequestMinOrderByAggregateInput
    _sum?: SalaryAdvanceRequestSumOrderByAggregateInput
  }

  export type SalaryAdvanceRequestScalarWhereWithAggregatesInput = {
    AND?: SalaryAdvanceRequestScalarWhereWithAggregatesInput | SalaryAdvanceRequestScalarWhereWithAggregatesInput[]
    OR?: SalaryAdvanceRequestScalarWhereWithAggregatesInput[]
    NOT?: SalaryAdvanceRequestScalarWhereWithAggregatesInput | SalaryAdvanceRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SalaryAdvanceRequest"> | string
    employeeId?: StringWithAggregatesFilter<"SalaryAdvanceRequest"> | string
    branchId?: StringNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | string | null
    requestedAmount?: FloatWithAggregatesFilter<"SalaryAdvanceRequest"> | number
    approvedAmount?: FloatNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | number | null
    reason?: StringWithAggregatesFilter<"SalaryAdvanceRequest"> | string
    status?: StringWithAggregatesFilter<"SalaryAdvanceRequest"> | string
    requestDate?: DateTimeWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string
    approvedAt?: DateTimeNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | string | null
    rejectedAt?: DateTimeNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string | null
    rejectedBy?: StringNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | string | null
    disbursedAt?: DateTimeNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string | null
    disbursedBy?: StringNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | string | null
    repaymentStartDate?: DateTimeNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string | null
    repaymentEndDate?: DateTimeNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string | null
    monthlyDeduction?: FloatNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | number | null
    totalRepaid?: FloatWithAggregatesFilter<"SalaryAdvanceRequest"> | number
    outstandingBalance?: FloatNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | number | null
    interestRate?: FloatWithAggregatesFilter<"SalaryAdvanceRequest"> | number
    totalInterest?: FloatWithAggregatesFilter<"SalaryAdvanceRequest"> | number
    comments?: StringNullableWithAggregatesFilter<"SalaryAdvanceRequest"> | string | null
    attachments?: StringNullableListFilter<"SalaryAdvanceRequest">
    createdAt?: DateTimeWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SalaryAdvanceRequest"> | Date | string
    tenantId?: StringWithAggregatesFilter<"SalaryAdvanceRequest"> | string
  }

  export type SalaryAdvanceRepaymentWhereInput = {
    AND?: SalaryAdvanceRepaymentWhereInput | SalaryAdvanceRepaymentWhereInput[]
    OR?: SalaryAdvanceRepaymentWhereInput[]
    NOT?: SalaryAdvanceRepaymentWhereInput | SalaryAdvanceRepaymentWhereInput[]
    id?: StringFilter<"SalaryAdvanceRepayment"> | string
    salaryAdvanceRequestId?: StringFilter<"SalaryAdvanceRepayment"> | string
    payrollPeriodId?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    repaymentDate?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    principalAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    interestAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    totalAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    paymentMethod?: StringFilter<"SalaryAdvanceRepayment"> | string
    reference?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    notes?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    createdAt?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    tenantId?: StringFilter<"SalaryAdvanceRepayment"> | string
    payrollPeriod?: XOR<PayrollPeriodNullableScalarRelationFilter, PayrollPeriodWhereInput> | null
    salaryAdvanceRequest?: XOR<SalaryAdvanceRequestScalarRelationFilter, SalaryAdvanceRequestWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type SalaryAdvanceRepaymentOrderByWithRelationInput = {
    id?: SortOrder
    salaryAdvanceRequestId?: SortOrder
    payrollPeriodId?: SortOrderInput | SortOrder
    repaymentDate?: SortOrder
    principalAmount?: SortOrder
    interestAmount?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    payrollPeriod?: PayrollPeriodOrderByWithRelationInput
    salaryAdvanceRequest?: SalaryAdvanceRequestOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type SalaryAdvanceRepaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SalaryAdvanceRepaymentWhereInput | SalaryAdvanceRepaymentWhereInput[]
    OR?: SalaryAdvanceRepaymentWhereInput[]
    NOT?: SalaryAdvanceRepaymentWhereInput | SalaryAdvanceRepaymentWhereInput[]
    salaryAdvanceRequestId?: StringFilter<"SalaryAdvanceRepayment"> | string
    payrollPeriodId?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    repaymentDate?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    principalAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    interestAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    totalAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    paymentMethod?: StringFilter<"SalaryAdvanceRepayment"> | string
    reference?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    notes?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    createdAt?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    tenantId?: StringFilter<"SalaryAdvanceRepayment"> | string
    payrollPeriod?: XOR<PayrollPeriodNullableScalarRelationFilter, PayrollPeriodWhereInput> | null
    salaryAdvanceRequest?: XOR<SalaryAdvanceRequestScalarRelationFilter, SalaryAdvanceRequestWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type SalaryAdvanceRepaymentOrderByWithAggregationInput = {
    id?: SortOrder
    salaryAdvanceRequestId?: SortOrder
    payrollPeriodId?: SortOrderInput | SortOrder
    repaymentDate?: SortOrder
    principalAmount?: SortOrder
    interestAmount?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: SalaryAdvanceRepaymentCountOrderByAggregateInput
    _avg?: SalaryAdvanceRepaymentAvgOrderByAggregateInput
    _max?: SalaryAdvanceRepaymentMaxOrderByAggregateInput
    _min?: SalaryAdvanceRepaymentMinOrderByAggregateInput
    _sum?: SalaryAdvanceRepaymentSumOrderByAggregateInput
  }

  export type SalaryAdvanceRepaymentScalarWhereWithAggregatesInput = {
    AND?: SalaryAdvanceRepaymentScalarWhereWithAggregatesInput | SalaryAdvanceRepaymentScalarWhereWithAggregatesInput[]
    OR?: SalaryAdvanceRepaymentScalarWhereWithAggregatesInput[]
    NOT?: SalaryAdvanceRepaymentScalarWhereWithAggregatesInput | SalaryAdvanceRepaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SalaryAdvanceRepayment"> | string
    salaryAdvanceRequestId?: StringWithAggregatesFilter<"SalaryAdvanceRepayment"> | string
    payrollPeriodId?: StringNullableWithAggregatesFilter<"SalaryAdvanceRepayment"> | string | null
    repaymentDate?: DateTimeWithAggregatesFilter<"SalaryAdvanceRepayment"> | Date | string
    principalAmount?: FloatWithAggregatesFilter<"SalaryAdvanceRepayment"> | number
    interestAmount?: FloatWithAggregatesFilter<"SalaryAdvanceRepayment"> | number
    totalAmount?: FloatWithAggregatesFilter<"SalaryAdvanceRepayment"> | number
    paymentMethod?: StringWithAggregatesFilter<"SalaryAdvanceRepayment"> | string
    reference?: StringNullableWithAggregatesFilter<"SalaryAdvanceRepayment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"SalaryAdvanceRepayment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SalaryAdvanceRepayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SalaryAdvanceRepayment"> | Date | string
    tenantId?: StringWithAggregatesFilter<"SalaryAdvanceRepayment"> | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    userId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    tenantId?: StringFilter<"AuditLog"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    userId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    tenantId?: StringFilter<"AuditLog"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    details?: JsonNullableWithAggregatesFilter<"AuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    tenantId?: StringWithAggregatesFilter<"AuditLog"> | string
  }

  export type SecurityAlertWhereInput = {
    AND?: SecurityAlertWhereInput | SecurityAlertWhereInput[]
    OR?: SecurityAlertWhereInput[]
    NOT?: SecurityAlertWhereInput | SecurityAlertWhereInput[]
    id?: StringFilter<"SecurityAlert"> | string
    type?: StringFilter<"SecurityAlert"> | string
    title?: StringFilter<"SecurityAlert"> | string
    description?: StringFilter<"SecurityAlert"> | string
    timestamp?: DateTimeFilter<"SecurityAlert"> | Date | string
    tenantId?: StringFilter<"SecurityAlert"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type SecurityAlertOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type SecurityAlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SecurityAlertWhereInput | SecurityAlertWhereInput[]
    OR?: SecurityAlertWhereInput[]
    NOT?: SecurityAlertWhereInput | SecurityAlertWhereInput[]
    type?: StringFilter<"SecurityAlert"> | string
    title?: StringFilter<"SecurityAlert"> | string
    description?: StringFilter<"SecurityAlert"> | string
    timestamp?: DateTimeFilter<"SecurityAlert"> | Date | string
    tenantId?: StringFilter<"SecurityAlert"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type SecurityAlertOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    tenantId?: SortOrder
    _count?: SecurityAlertCountOrderByAggregateInput
    _max?: SecurityAlertMaxOrderByAggregateInput
    _min?: SecurityAlertMinOrderByAggregateInput
  }

  export type SecurityAlertScalarWhereWithAggregatesInput = {
    AND?: SecurityAlertScalarWhereWithAggregatesInput | SecurityAlertScalarWhereWithAggregatesInput[]
    OR?: SecurityAlertScalarWhereWithAggregatesInput[]
    NOT?: SecurityAlertScalarWhereWithAggregatesInput | SecurityAlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SecurityAlert"> | string
    type?: StringWithAggregatesFilter<"SecurityAlert"> | string
    title?: StringWithAggregatesFilter<"SecurityAlert"> | string
    description?: StringWithAggregatesFilter<"SecurityAlert"> | string
    timestamp?: DateTimeWithAggregatesFilter<"SecurityAlert"> | Date | string
    tenantId?: StringWithAggregatesFilter<"SecurityAlert"> | string
  }

  export type SecuritySettingsWhereInput = {
    AND?: SecuritySettingsWhereInput | SecuritySettingsWhereInput[]
    OR?: SecuritySettingsWhereInput[]
    NOT?: SecuritySettingsWhereInput | SecuritySettingsWhereInput[]
    id?: StringFilter<"SecuritySettings"> | string
    tenantId?: StringFilter<"SecuritySettings"> | string
    twoFactorAuth?: BoolFilter<"SecuritySettings"> | boolean
    passwordExpiry?: BoolFilter<"SecuritySettings"> | boolean
    sessionTimeout?: BoolFilter<"SecuritySettings"> | boolean
    ipWhitelist?: BoolFilter<"SecuritySettings"> | boolean
    auditLogging?: BoolFilter<"SecuritySettings"> | boolean
    encryptionAtRest?: BoolFilter<"SecuritySettings"> | boolean
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type SecuritySettingsOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFactorAuth?: SortOrder
    passwordExpiry?: SortOrder
    sessionTimeout?: SortOrder
    ipWhitelist?: SortOrder
    auditLogging?: SortOrder
    encryptionAtRest?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type SecuritySettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId?: string
    AND?: SecuritySettingsWhereInput | SecuritySettingsWhereInput[]
    OR?: SecuritySettingsWhereInput[]
    NOT?: SecuritySettingsWhereInput | SecuritySettingsWhereInput[]
    twoFactorAuth?: BoolFilter<"SecuritySettings"> | boolean
    passwordExpiry?: BoolFilter<"SecuritySettings"> | boolean
    sessionTimeout?: BoolFilter<"SecuritySettings"> | boolean
    ipWhitelist?: BoolFilter<"SecuritySettings"> | boolean
    auditLogging?: BoolFilter<"SecuritySettings"> | boolean
    encryptionAtRest?: BoolFilter<"SecuritySettings"> | boolean
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "tenantId">

  export type SecuritySettingsOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFactorAuth?: SortOrder
    passwordExpiry?: SortOrder
    sessionTimeout?: SortOrder
    ipWhitelist?: SortOrder
    auditLogging?: SortOrder
    encryptionAtRest?: SortOrder
    _count?: SecuritySettingsCountOrderByAggregateInput
    _max?: SecuritySettingsMaxOrderByAggregateInput
    _min?: SecuritySettingsMinOrderByAggregateInput
  }

  export type SecuritySettingsScalarWhereWithAggregatesInput = {
    AND?: SecuritySettingsScalarWhereWithAggregatesInput | SecuritySettingsScalarWhereWithAggregatesInput[]
    OR?: SecuritySettingsScalarWhereWithAggregatesInput[]
    NOT?: SecuritySettingsScalarWhereWithAggregatesInput | SecuritySettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SecuritySettings"> | string
    tenantId?: StringWithAggregatesFilter<"SecuritySettings"> | string
    twoFactorAuth?: BoolWithAggregatesFilter<"SecuritySettings"> | boolean
    passwordExpiry?: BoolWithAggregatesFilter<"SecuritySettings"> | boolean
    sessionTimeout?: BoolWithAggregatesFilter<"SecuritySettings"> | boolean
    ipWhitelist?: BoolWithAggregatesFilter<"SecuritySettings"> | boolean
    auditLogging?: BoolWithAggregatesFilter<"SecuritySettings"> | boolean
    encryptionAtRest?: BoolWithAggregatesFilter<"SecuritySettings"> | boolean
  }

  export type WorkflowTemplateWhereInput = {
    AND?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    OR?: WorkflowTemplateWhereInput[]
    NOT?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    id?: StringFilter<"WorkflowTemplate"> | string
    name?: StringFilter<"WorkflowTemplate"> | string
    description?: StringFilter<"WorkflowTemplate"> | string
    category?: StringFilter<"WorkflowTemplate"> | string
    version?: StringFilter<"WorkflowTemplate"> | string
    isActive?: BoolFilter<"WorkflowTemplate"> | boolean
    steps?: JsonFilter<"WorkflowTemplate">
    triggers?: JsonFilter<"WorkflowTemplate">
    variables?: JsonFilter<"WorkflowTemplate">
    createdBy?: StringFilter<"WorkflowTemplate"> | string
    createdDate?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    lastModified?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    tenantId?: StringFilter<"WorkflowTemplate"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type WorkflowTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    steps?: SortOrder
    triggers?: SortOrder
    variables?: SortOrder
    createdBy?: SortOrder
    createdDate?: SortOrder
    lastModified?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type WorkflowTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    OR?: WorkflowTemplateWhereInput[]
    NOT?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    name?: StringFilter<"WorkflowTemplate"> | string
    description?: StringFilter<"WorkflowTemplate"> | string
    category?: StringFilter<"WorkflowTemplate"> | string
    version?: StringFilter<"WorkflowTemplate"> | string
    isActive?: BoolFilter<"WorkflowTemplate"> | boolean
    steps?: JsonFilter<"WorkflowTemplate">
    triggers?: JsonFilter<"WorkflowTemplate">
    variables?: JsonFilter<"WorkflowTemplate">
    createdBy?: StringFilter<"WorkflowTemplate"> | string
    createdDate?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    lastModified?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    tenantId?: StringFilter<"WorkflowTemplate"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type WorkflowTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    steps?: SortOrder
    triggers?: SortOrder
    variables?: SortOrder
    createdBy?: SortOrder
    createdDate?: SortOrder
    lastModified?: SortOrder
    tenantId?: SortOrder
    _count?: WorkflowTemplateCountOrderByAggregateInput
    _max?: WorkflowTemplateMaxOrderByAggregateInput
    _min?: WorkflowTemplateMinOrderByAggregateInput
  }

  export type WorkflowTemplateScalarWhereWithAggregatesInput = {
    AND?: WorkflowTemplateScalarWhereWithAggregatesInput | WorkflowTemplateScalarWhereWithAggregatesInput[]
    OR?: WorkflowTemplateScalarWhereWithAggregatesInput[]
    NOT?: WorkflowTemplateScalarWhereWithAggregatesInput | WorkflowTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    name?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    description?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    category?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    version?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    isActive?: BoolWithAggregatesFilter<"WorkflowTemplate"> | boolean
    steps?: JsonWithAggregatesFilter<"WorkflowTemplate">
    triggers?: JsonWithAggregatesFilter<"WorkflowTemplate">
    variables?: JsonWithAggregatesFilter<"WorkflowTemplate">
    createdBy?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    createdDate?: DateTimeWithAggregatesFilter<"WorkflowTemplate"> | Date | string
    lastModified?: DateTimeWithAggregatesFilter<"WorkflowTemplate"> | Date | string
    tenantId?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
  }

  export type TrainingWhereInput = {
    AND?: TrainingWhereInput | TrainingWhereInput[]
    OR?: TrainingWhereInput[]
    NOT?: TrainingWhereInput | TrainingWhereInput[]
    id?: StringFilter<"Training"> | string
    tenantId?: StringFilter<"Training"> | string
    title?: StringFilter<"Training"> | string
    description?: StringNullableFilter<"Training"> | string | null
    startDate?: DateTimeFilter<"Training"> | Date | string
    endDate?: DateTimeFilter<"Training"> | Date | string
    status?: StringFilter<"Training"> | string
    capacity?: IntNullableFilter<"Training"> | number | null
    instructor?: StringNullableFilter<"Training"> | string | null
    venue?: StringNullableFilter<"Training"> | string | null
    requirements?: StringNullableListFilter<"Training">
    certification?: BoolFilter<"Training"> | boolean
    cost?: DecimalNullableFilter<"Training"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableFilter<"Training"> | string | null
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
    enrollments?: TrainingEnrollmentListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type TrainingOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    capacity?: SortOrderInput | SortOrder
    instructor?: SortOrderInput | SortOrder
    venue?: SortOrderInput | SortOrder
    requirements?: SortOrder
    certification?: SortOrder
    cost?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    enrollments?: TrainingEnrollmentOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type TrainingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrainingWhereInput | TrainingWhereInput[]
    OR?: TrainingWhereInput[]
    NOT?: TrainingWhereInput | TrainingWhereInput[]
    tenantId?: StringFilter<"Training"> | string
    title?: StringFilter<"Training"> | string
    description?: StringNullableFilter<"Training"> | string | null
    startDate?: DateTimeFilter<"Training"> | Date | string
    endDate?: DateTimeFilter<"Training"> | Date | string
    status?: StringFilter<"Training"> | string
    capacity?: IntNullableFilter<"Training"> | number | null
    instructor?: StringNullableFilter<"Training"> | string | null
    venue?: StringNullableFilter<"Training"> | string | null
    requirements?: StringNullableListFilter<"Training">
    certification?: BoolFilter<"Training"> | boolean
    cost?: DecimalNullableFilter<"Training"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableFilter<"Training"> | string | null
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
    enrollments?: TrainingEnrollmentListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type TrainingOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    capacity?: SortOrderInput | SortOrder
    instructor?: SortOrderInput | SortOrder
    venue?: SortOrderInput | SortOrder
    requirements?: SortOrder
    certification?: SortOrder
    cost?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingCountOrderByAggregateInput
    _avg?: TrainingAvgOrderByAggregateInput
    _max?: TrainingMaxOrderByAggregateInput
    _min?: TrainingMinOrderByAggregateInput
    _sum?: TrainingSumOrderByAggregateInput
  }

  export type TrainingScalarWhereWithAggregatesInput = {
    AND?: TrainingScalarWhereWithAggregatesInput | TrainingScalarWhereWithAggregatesInput[]
    OR?: TrainingScalarWhereWithAggregatesInput[]
    NOT?: TrainingScalarWhereWithAggregatesInput | TrainingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Training"> | string
    tenantId?: StringWithAggregatesFilter<"Training"> | string
    title?: StringWithAggregatesFilter<"Training"> | string
    description?: StringNullableWithAggregatesFilter<"Training"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    status?: StringWithAggregatesFilter<"Training"> | string
    capacity?: IntNullableWithAggregatesFilter<"Training"> | number | null
    instructor?: StringNullableWithAggregatesFilter<"Training"> | string | null
    venue?: StringNullableWithAggregatesFilter<"Training"> | string | null
    requirements?: StringNullableListFilter<"Training">
    certification?: BoolWithAggregatesFilter<"Training"> | boolean
    cost?: DecimalNullableWithAggregatesFilter<"Training"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableWithAggregatesFilter<"Training"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Training"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Training"> | Date | string
  }

  export type TrainingEnrollmentWhereInput = {
    AND?: TrainingEnrollmentWhereInput | TrainingEnrollmentWhereInput[]
    OR?: TrainingEnrollmentWhereInput[]
    NOT?: TrainingEnrollmentWhereInput | TrainingEnrollmentWhereInput[]
    id?: StringFilter<"TrainingEnrollment"> | string
    trainingId?: StringFilter<"TrainingEnrollment"> | string
    employeeId?: StringFilter<"TrainingEnrollment"> | string
    enrollmentDate?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    completionDate?: DateTimeNullableFilter<"TrainingEnrollment"> | Date | string | null
    status?: StringFilter<"TrainingEnrollment"> | string
    progress?: IntFilter<"TrainingEnrollment"> | number
    score?: IntNullableFilter<"TrainingEnrollment"> | number | null
    certificateIssued?: BoolFilter<"TrainingEnrollment"> | boolean
    createdAt?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    training?: XOR<TrainingScalarRelationFilter, TrainingWhereInput>
  }

  export type TrainingEnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    trainingId?: SortOrder
    employeeId?: SortOrder
    enrollmentDate?: SortOrder
    completionDate?: SortOrderInput | SortOrder
    status?: SortOrder
    progress?: SortOrder
    score?: SortOrderInput | SortOrder
    certificateIssued?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    training?: TrainingOrderByWithRelationInput
  }

  export type TrainingEnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    trainingId_employeeId?: TrainingEnrollmentTrainingIdEmployeeIdCompoundUniqueInput
    AND?: TrainingEnrollmentWhereInput | TrainingEnrollmentWhereInput[]
    OR?: TrainingEnrollmentWhereInput[]
    NOT?: TrainingEnrollmentWhereInput | TrainingEnrollmentWhereInput[]
    trainingId?: StringFilter<"TrainingEnrollment"> | string
    employeeId?: StringFilter<"TrainingEnrollment"> | string
    enrollmentDate?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    completionDate?: DateTimeNullableFilter<"TrainingEnrollment"> | Date | string | null
    status?: StringFilter<"TrainingEnrollment"> | string
    progress?: IntFilter<"TrainingEnrollment"> | number
    score?: IntNullableFilter<"TrainingEnrollment"> | number | null
    certificateIssued?: BoolFilter<"TrainingEnrollment"> | boolean
    createdAt?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    training?: XOR<TrainingScalarRelationFilter, TrainingWhereInput>
  }, "id" | "trainingId_employeeId">

  export type TrainingEnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    trainingId?: SortOrder
    employeeId?: SortOrder
    enrollmentDate?: SortOrder
    completionDate?: SortOrderInput | SortOrder
    status?: SortOrder
    progress?: SortOrder
    score?: SortOrderInput | SortOrder
    certificateIssued?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrainingEnrollmentCountOrderByAggregateInput
    _avg?: TrainingEnrollmentAvgOrderByAggregateInput
    _max?: TrainingEnrollmentMaxOrderByAggregateInput
    _min?: TrainingEnrollmentMinOrderByAggregateInput
    _sum?: TrainingEnrollmentSumOrderByAggregateInput
  }

  export type TrainingEnrollmentScalarWhereWithAggregatesInput = {
    AND?: TrainingEnrollmentScalarWhereWithAggregatesInput | TrainingEnrollmentScalarWhereWithAggregatesInput[]
    OR?: TrainingEnrollmentScalarWhereWithAggregatesInput[]
    NOT?: TrainingEnrollmentScalarWhereWithAggregatesInput | TrainingEnrollmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrainingEnrollment"> | string
    trainingId?: StringWithAggregatesFilter<"TrainingEnrollment"> | string
    employeeId?: StringWithAggregatesFilter<"TrainingEnrollment"> | string
    enrollmentDate?: DateTimeWithAggregatesFilter<"TrainingEnrollment"> | Date | string
    completionDate?: DateTimeNullableWithAggregatesFilter<"TrainingEnrollment"> | Date | string | null
    status?: StringWithAggregatesFilter<"TrainingEnrollment"> | string
    progress?: IntWithAggregatesFilter<"TrainingEnrollment"> | number
    score?: IntNullableWithAggregatesFilter<"TrainingEnrollment"> | number | null
    certificateIssued?: BoolWithAggregatesFilter<"TrainingEnrollment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TrainingEnrollment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TrainingEnrollment"> | Date | string
  }

  export type IntegrationWhereInput = {
    AND?: IntegrationWhereInput | IntegrationWhereInput[]
    OR?: IntegrationWhereInput[]
    NOT?: IntegrationWhereInput | IntegrationWhereInput[]
    id?: StringFilter<"Integration"> | string
    name?: StringFilter<"Integration"> | string
    tenantId?: StringFilter<"Integration"> | string
    config?: JsonNullableFilter<"Integration">
    createdAt?: DateTimeFilter<"Integration"> | Date | string
    lastSyncTime?: DateTimeNullableFilter<"Integration"> | Date | string | null
    status?: StringFilter<"Integration"> | string
    successRate?: FloatFilter<"Integration"> | number
    type?: StringFilter<"Integration"> | string
    updatedAt?: DateTimeFilter<"Integration"> | Date | string
    integrationLogs?: IntegrationLogListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type IntegrationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastSyncTime?: SortOrderInput | SortOrder
    status?: SortOrder
    successRate?: SortOrder
    type?: SortOrder
    updatedAt?: SortOrder
    integrationLogs?: IntegrationLogOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type IntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IntegrationWhereInput | IntegrationWhereInput[]
    OR?: IntegrationWhereInput[]
    NOT?: IntegrationWhereInput | IntegrationWhereInput[]
    name?: StringFilter<"Integration"> | string
    tenantId?: StringFilter<"Integration"> | string
    config?: JsonNullableFilter<"Integration">
    createdAt?: DateTimeFilter<"Integration"> | Date | string
    lastSyncTime?: DateTimeNullableFilter<"Integration"> | Date | string | null
    status?: StringFilter<"Integration"> | string
    successRate?: FloatFilter<"Integration"> | number
    type?: StringFilter<"Integration"> | string
    updatedAt?: DateTimeFilter<"Integration"> | Date | string
    integrationLogs?: IntegrationLogListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type IntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastSyncTime?: SortOrderInput | SortOrder
    status?: SortOrder
    successRate?: SortOrder
    type?: SortOrder
    updatedAt?: SortOrder
    _count?: IntegrationCountOrderByAggregateInput
    _avg?: IntegrationAvgOrderByAggregateInput
    _max?: IntegrationMaxOrderByAggregateInput
    _min?: IntegrationMinOrderByAggregateInput
    _sum?: IntegrationSumOrderByAggregateInput
  }

  export type IntegrationScalarWhereWithAggregatesInput = {
    AND?: IntegrationScalarWhereWithAggregatesInput | IntegrationScalarWhereWithAggregatesInput[]
    OR?: IntegrationScalarWhereWithAggregatesInput[]
    NOT?: IntegrationScalarWhereWithAggregatesInput | IntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Integration"> | string
    name?: StringWithAggregatesFilter<"Integration"> | string
    tenantId?: StringWithAggregatesFilter<"Integration"> | string
    config?: JsonNullableWithAggregatesFilter<"Integration">
    createdAt?: DateTimeWithAggregatesFilter<"Integration"> | Date | string
    lastSyncTime?: DateTimeNullableWithAggregatesFilter<"Integration"> | Date | string | null
    status?: StringWithAggregatesFilter<"Integration"> | string
    successRate?: FloatWithAggregatesFilter<"Integration"> | number
    type?: StringWithAggregatesFilter<"Integration"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Integration"> | Date | string
  }

  export type IntegrationLogWhereInput = {
    AND?: IntegrationLogWhereInput | IntegrationLogWhereInput[]
    OR?: IntegrationLogWhereInput[]
    NOT?: IntegrationLogWhereInput | IntegrationLogWhereInput[]
    id?: StringFilter<"IntegrationLog"> | string
    integrationId?: StringFilter<"IntegrationLog"> | string
    message?: StringFilter<"IntegrationLog"> | string
    createdAt?: DateTimeFilter<"IntegrationLog"> | Date | string
    tenantId?: StringFilter<"IntegrationLog"> | string
    details?: JsonNullableFilter<"IntegrationLog">
    event?: StringFilter<"IntegrationLog"> | string
    status?: StringFilter<"IntegrationLog"> | string
    integration?: XOR<IntegrationScalarRelationFilter, IntegrationWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type IntegrationLogOrderByWithRelationInput = {
    id?: SortOrder
    integrationId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    details?: SortOrderInput | SortOrder
    event?: SortOrder
    status?: SortOrder
    integration?: IntegrationOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type IntegrationLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IntegrationLogWhereInput | IntegrationLogWhereInput[]
    OR?: IntegrationLogWhereInput[]
    NOT?: IntegrationLogWhereInput | IntegrationLogWhereInput[]
    integrationId?: StringFilter<"IntegrationLog"> | string
    message?: StringFilter<"IntegrationLog"> | string
    createdAt?: DateTimeFilter<"IntegrationLog"> | Date | string
    tenantId?: StringFilter<"IntegrationLog"> | string
    details?: JsonNullableFilter<"IntegrationLog">
    event?: StringFilter<"IntegrationLog"> | string
    status?: StringFilter<"IntegrationLog"> | string
    integration?: XOR<IntegrationScalarRelationFilter, IntegrationWhereInput>
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type IntegrationLogOrderByWithAggregationInput = {
    id?: SortOrder
    integrationId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    details?: SortOrderInput | SortOrder
    event?: SortOrder
    status?: SortOrder
    _count?: IntegrationLogCountOrderByAggregateInput
    _max?: IntegrationLogMaxOrderByAggregateInput
    _min?: IntegrationLogMinOrderByAggregateInput
  }

  export type IntegrationLogScalarWhereWithAggregatesInput = {
    AND?: IntegrationLogScalarWhereWithAggregatesInput | IntegrationLogScalarWhereWithAggregatesInput[]
    OR?: IntegrationLogScalarWhereWithAggregatesInput[]
    NOT?: IntegrationLogScalarWhereWithAggregatesInput | IntegrationLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IntegrationLog"> | string
    integrationId?: StringWithAggregatesFilter<"IntegrationLog"> | string
    message?: StringWithAggregatesFilter<"IntegrationLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"IntegrationLog"> | Date | string
    tenantId?: StringWithAggregatesFilter<"IntegrationLog"> | string
    details?: JsonNullableWithAggregatesFilter<"IntegrationLog">
    event?: StringWithAggregatesFilter<"IntegrationLog"> | string
    status?: StringWithAggregatesFilter<"IntegrationLog"> | string
  }

  export type WorkflowWhereInput = {
    AND?: WorkflowWhereInput | WorkflowWhereInput[]
    OR?: WorkflowWhereInput[]
    NOT?: WorkflowWhereInput | WorkflowWhereInput[]
    id?: StringFilter<"Workflow"> | string
    name?: StringFilter<"Workflow"> | string
    tenantId?: StringFilter<"Workflow"> | string
    approvals?: ApprovalListRelationFilter
    workflowStats?: WorkflowStatsListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type WorkflowOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    approvals?: ApprovalOrderByRelationAggregateInput
    workflowStats?: WorkflowStatsOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type WorkflowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowWhereInput | WorkflowWhereInput[]
    OR?: WorkflowWhereInput[]
    NOT?: WorkflowWhereInput | WorkflowWhereInput[]
    name?: StringFilter<"Workflow"> | string
    tenantId?: StringFilter<"Workflow"> | string
    approvals?: ApprovalListRelationFilter
    workflowStats?: WorkflowStatsListRelationFilter
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id">

  export type WorkflowOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    _count?: WorkflowCountOrderByAggregateInput
    _max?: WorkflowMaxOrderByAggregateInput
    _min?: WorkflowMinOrderByAggregateInput
  }

  export type WorkflowScalarWhereWithAggregatesInput = {
    AND?: WorkflowScalarWhereWithAggregatesInput | WorkflowScalarWhereWithAggregatesInput[]
    OR?: WorkflowScalarWhereWithAggregatesInput[]
    NOT?: WorkflowScalarWhereWithAggregatesInput | WorkflowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workflow"> | string
    name?: StringWithAggregatesFilter<"Workflow"> | string
    tenantId?: StringWithAggregatesFilter<"Workflow"> | string
  }

  export type WorkflowStatsWhereInput = {
    AND?: WorkflowStatsWhereInput | WorkflowStatsWhereInput[]
    OR?: WorkflowStatsWhereInput[]
    NOT?: WorkflowStatsWhereInput | WorkflowStatsWhereInput[]
    id?: StringFilter<"WorkflowStats"> | string
    workflowId?: StringFilter<"WorkflowStats"> | string
    stats?: JsonFilter<"WorkflowStats">
    createdAt?: DateTimeFilter<"WorkflowStats"> | Date | string
    tenantId?: StringFilter<"WorkflowStats"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    workflow?: XOR<WorkflowScalarRelationFilter, WorkflowWhereInput>
  }

  export type WorkflowStatsOrderByWithRelationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    stats?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    workflow?: WorkflowOrderByWithRelationInput
  }

  export type WorkflowStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowStatsWhereInput | WorkflowStatsWhereInput[]
    OR?: WorkflowStatsWhereInput[]
    NOT?: WorkflowStatsWhereInput | WorkflowStatsWhereInput[]
    workflowId?: StringFilter<"WorkflowStats"> | string
    stats?: JsonFilter<"WorkflowStats">
    createdAt?: DateTimeFilter<"WorkflowStats"> | Date | string
    tenantId?: StringFilter<"WorkflowStats"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    workflow?: XOR<WorkflowScalarRelationFilter, WorkflowWhereInput>
  }, "id">

  export type WorkflowStatsOrderByWithAggregationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    stats?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    _count?: WorkflowStatsCountOrderByAggregateInput
    _max?: WorkflowStatsMaxOrderByAggregateInput
    _min?: WorkflowStatsMinOrderByAggregateInput
  }

  export type WorkflowStatsScalarWhereWithAggregatesInput = {
    AND?: WorkflowStatsScalarWhereWithAggregatesInput | WorkflowStatsScalarWhereWithAggregatesInput[]
    OR?: WorkflowStatsScalarWhereWithAggregatesInput[]
    NOT?: WorkflowStatsScalarWhereWithAggregatesInput | WorkflowStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowStats"> | string
    workflowId?: StringWithAggregatesFilter<"WorkflowStats"> | string
    stats?: JsonWithAggregatesFilter<"WorkflowStats">
    createdAt?: DateTimeWithAggregatesFilter<"WorkflowStats"> | Date | string
    tenantId?: StringWithAggregatesFilter<"WorkflowStats"> | string
  }

  export type ApprovalWhereInput = {
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    id?: StringFilter<"Approval"> | string
    workflowId?: StringFilter<"Approval"> | string
    approverId?: StringFilter<"Approval"> | string
    status?: StringFilter<"Approval"> | string
    comments?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    updatedAt?: DateTimeFilter<"Approval"> | Date | string
    tenantId?: StringFilter<"Approval"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    workflow?: XOR<WorkflowScalarRelationFilter, WorkflowWhereInput>
  }

  export type ApprovalOrderByWithRelationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    workflow?: WorkflowOrderByWithRelationInput
  }

  export type ApprovalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    workflowId?: StringFilter<"Approval"> | string
    approverId?: StringFilter<"Approval"> | string
    status?: StringFilter<"Approval"> | string
    comments?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    updatedAt?: DateTimeFilter<"Approval"> | Date | string
    tenantId?: StringFilter<"Approval"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
    workflow?: XOR<WorkflowScalarRelationFilter, WorkflowWhereInput>
  }, "id">

  export type ApprovalOrderByWithAggregationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: ApprovalCountOrderByAggregateInput
    _max?: ApprovalMaxOrderByAggregateInput
    _min?: ApprovalMinOrderByAggregateInput
  }

  export type ApprovalScalarWhereWithAggregatesInput = {
    AND?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    OR?: ApprovalScalarWhereWithAggregatesInput[]
    NOT?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Approval"> | string
    workflowId?: StringWithAggregatesFilter<"Approval"> | string
    approverId?: StringWithAggregatesFilter<"Approval"> | string
    status?: StringWithAggregatesFilter<"Approval"> | string
    comments?: StringNullableWithAggregatesFilter<"Approval"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Approval"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Approval"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Approval"> | string
  }

  export type ExperimentalFeatureWhereInput = {
    AND?: ExperimentalFeatureWhereInput | ExperimentalFeatureWhereInput[]
    OR?: ExperimentalFeatureWhereInput[]
    NOT?: ExperimentalFeatureWhereInput | ExperimentalFeatureWhereInput[]
    id?: StringFilter<"ExperimentalFeature"> | string
    key?: StringFilter<"ExperimentalFeature"> | string
    name?: StringFilter<"ExperimentalFeature"> | string
    description?: StringNullableFilter<"ExperimentalFeature"> | string | null
    enabled?: BoolFilter<"ExperimentalFeature"> | boolean
    createdAt?: DateTimeFilter<"ExperimentalFeature"> | Date | string
    updatedAt?: DateTimeFilter<"ExperimentalFeature"> | Date | string
    createdBy?: StringNullableFilter<"ExperimentalFeature"> | string | null
    tenantId?: StringFilter<"ExperimentalFeature"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }

  export type ExperimentalFeatureOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type ExperimentalFeatureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: ExperimentalFeatureWhereInput | ExperimentalFeatureWhereInput[]
    OR?: ExperimentalFeatureWhereInput[]
    NOT?: ExperimentalFeatureWhereInput | ExperimentalFeatureWhereInput[]
    name?: StringFilter<"ExperimentalFeature"> | string
    description?: StringNullableFilter<"ExperimentalFeature"> | string | null
    enabled?: BoolFilter<"ExperimentalFeature"> | boolean
    createdAt?: DateTimeFilter<"ExperimentalFeature"> | Date | string
    updatedAt?: DateTimeFilter<"ExperimentalFeature"> | Date | string
    createdBy?: StringNullableFilter<"ExperimentalFeature"> | string | null
    tenantId?: StringFilter<"ExperimentalFeature"> | string
    tenant?: XOR<TenantScalarRelationFilter, TenantWhereInput>
  }, "id" | "key">

  export type ExperimentalFeatureOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    _count?: ExperimentalFeatureCountOrderByAggregateInput
    _max?: ExperimentalFeatureMaxOrderByAggregateInput
    _min?: ExperimentalFeatureMinOrderByAggregateInput
  }

  export type ExperimentalFeatureScalarWhereWithAggregatesInput = {
    AND?: ExperimentalFeatureScalarWhereWithAggregatesInput | ExperimentalFeatureScalarWhereWithAggregatesInput[]
    OR?: ExperimentalFeatureScalarWhereWithAggregatesInput[]
    NOT?: ExperimentalFeatureScalarWhereWithAggregatesInput | ExperimentalFeatureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExperimentalFeature"> | string
    key?: StringWithAggregatesFilter<"ExperimentalFeature"> | string
    name?: StringWithAggregatesFilter<"ExperimentalFeature"> | string
    description?: StringNullableWithAggregatesFilter<"ExperimentalFeature"> | string | null
    enabled?: BoolWithAggregatesFilter<"ExperimentalFeature"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ExperimentalFeature"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExperimentalFeature"> | Date | string
    createdBy?: StringNullableWithAggregatesFilter<"ExperimentalFeature"> | string | null
    tenantId?: StringWithAggregatesFilter<"ExperimentalFeature"> | string
  }

  export type TenantCreateInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
    user: UserCreateNestedOneWithoutNotificationsInput
    tenant: TenantCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
    tenantId: string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
    tenantId: string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUsersInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employeeId?: string | null
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employeeId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSessionCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    description?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branches?: BranchCreateNestedManyWithoutDepartmentInput
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    tenant: TenantCreateNestedOneWithoutDepartmentsInput
    employees?: EmployeeCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    managerId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    branches?: BranchUncheckedCreateNestedManyWithoutDepartmentInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branches?: BranchUpdateManyWithoutDepartmentNestedInput
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutDepartmentsNestedInput
    employees?: EmployeeUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    branches?: BranchUncheckedUpdateManyWithoutDepartmentNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    managerId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type BranchCreateInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutBranchesInput
    tenant: TenantCreateNestedOneWithoutBranchesInput
    employees?: EmployeeCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    departmentId: string
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutBranchesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutBranchesNestedInput
    employees?: EmployeeUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchCreateManyInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    departmentId: string
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type BranchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollPeriodCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStubs?: PayStubCreateNestedManyWithoutPayrollPeriodInput
    tenant: TenantCreateNestedOneWithoutPayrollPeriodsInput
    payrolls?: PayrollCreateNestedManyWithoutPayrollPeriodInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUncheckedCreateInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payStubs?: PayStubUncheckedCreateNestedManyWithoutPayrollPeriodInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutPayrollPeriodInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStubs?: PayStubUpdateManyWithoutPayrollPeriodNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollPeriodsNestedInput
    payrolls?: PayrollUpdateManyWithoutPayrollPeriodNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payStubs?: PayStubUncheckedUpdateManyWithoutPayrollPeriodNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutPayrollPeriodNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodCreateManyInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollPeriodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollPeriodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollCreateInput = {
    id?: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStub?: PayStubCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemCreateNestedManyWithoutPayrollInput
    employee: EmployeeCreateNestedOneWithoutPayrollsInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayrollsInput
    tenant: TenantCreateNestedOneWithoutPayrollsInput
  }

  export type PayrollUncheckedCreateInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payStub?: PayStubUncheckedCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutPayrollInput
  }

  export type PayrollUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStub?: PayStubUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutPayrollNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPayrollsNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayrollsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type PayrollUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payStub?: PayStubUncheckedUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollCreateManyInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollItemCreateInput = {
    id?: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    payroll: PayrollCreateNestedOneWithoutPayrollItemsInput
    tenant: TenantCreateNestedOneWithoutPayrollItemsInput
  }

  export type PayrollItemUncheckedCreateInput = {
    id?: string
    payrollId: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll?: PayrollUpdateOneRequiredWithoutPayrollItemsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollItemsNestedInput
  }

  export type PayrollItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollItemCreateManyInput = {
    id?: string
    payrollId: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TaxBracketCreateInput = {
    id?: string
    name: string
    minAmount: number
    maxAmount?: number | null
    rate: number
    fixedAmount?: number
    isActive?: boolean
    effectiveDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutTaxBracketsInput
  }

  export type TaxBracketUncheckedCreateInput = {
    id?: string
    name: string
    minAmount: number
    maxAmount?: number | null
    rate: number
    fixedAmount?: number
    isActive?: boolean
    effectiveDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type TaxBracketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    minAmount?: FloatFieldUpdateOperationsInput | number
    maxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutTaxBracketsNestedInput
  }

  export type TaxBracketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    minAmount?: FloatFieldUpdateOperationsInput | number
    maxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TaxBracketCreateManyInput = {
    id?: string
    name: string
    minAmount: number
    maxAmount?: number | null
    rate: number
    fixedAmount?: number
    isActive?: boolean
    effectiveDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type TaxBracketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    minAmount?: FloatFieldUpdateOperationsInput | number
    maxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaxBracketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    minAmount?: FloatFieldUpdateOperationsInput | number
    maxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayStubCreateInput = {
    id?: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPayStubsInput
    payroll: PayrollCreateNestedOneWithoutPayStubInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayStubsInput
    tenant: TenantCreateNestedOneWithoutPayStubsInput
  }

  export type PayStubUncheckedCreateInput = {
    id?: string
    employeeId: string
    payrollId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayStubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayStubsNestedInput
    payroll?: PayrollUpdateOneRequiredWithoutPayStubNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayStubsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayStubsNestedInput
  }

  export type PayStubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayStubCreateManyInput = {
    id?: string
    employeeId: string
    payrollId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayStubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayStubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollSettingsCreateInput = {
    id?: string
    companyName?: string | null
    kraPin?: string | null
    nssfNumber?: string | null
    nhifNumber?: string | null
    companyAddress?: string | null
    companyCity?: string | null
    companyPostalCode?: string | null
    personalRelief?: number
    overtimeMultiplier?: number
    workingDaysPerMonth?: number
    workingHoursPerDay?: number
    payFrequency?: string
    payDay?: number
    cutoffDay?: number
    requirePayrollApproval?: boolean
    approvalLevels?: number
    autoApproveThreshold?: number
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: string | null
    accountNumber?: string | null
    branchCode?: string | null
    swiftCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPayrollSettingsInput
  }

  export type PayrollSettingsUncheckedCreateInput = {
    id?: string
    tenantId: string
    companyName?: string | null
    kraPin?: string | null
    nssfNumber?: string | null
    nhifNumber?: string | null
    companyAddress?: string | null
    companyCity?: string | null
    companyPostalCode?: string | null
    personalRelief?: number
    overtimeMultiplier?: number
    workingDaysPerMonth?: number
    workingHoursPerDay?: number
    payFrequency?: string
    payDay?: number
    cutoffDay?: number
    requirePayrollApproval?: boolean
    approvalLevels?: number
    autoApproveThreshold?: number
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: string | null
    accountNumber?: string | null
    branchCode?: string | null
    swiftCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    nssfNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nhifNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    companyCity?: NullableStringFieldUpdateOperationsInput | string | null
    companyPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    personalRelief?: FloatFieldUpdateOperationsInput | number
    overtimeMultiplier?: FloatFieldUpdateOperationsInput | number
    workingDaysPerMonth?: IntFieldUpdateOperationsInput | number
    workingHoursPerDay?: IntFieldUpdateOperationsInput | number
    payFrequency?: StringFieldUpdateOperationsInput | string
    payDay?: IntFieldUpdateOperationsInput | number
    cutoffDay?: IntFieldUpdateOperationsInput | number
    requirePayrollApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalLevels?: IntFieldUpdateOperationsInput | number
    autoApproveThreshold?: FloatFieldUpdateOperationsInput | number
    notifyEmployeesOnPayment?: BoolFieldUpdateOperationsInput | boolean
    sendPayslipsByEmail?: BoolFieldUpdateOperationsInput | boolean
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    branchCode?: NullableStringFieldUpdateOperationsInput | string | null
    swiftCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPayrollSettingsNestedInput
  }

  export type PayrollSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    nssfNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nhifNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    companyCity?: NullableStringFieldUpdateOperationsInput | string | null
    companyPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    personalRelief?: FloatFieldUpdateOperationsInput | number
    overtimeMultiplier?: FloatFieldUpdateOperationsInput | number
    workingDaysPerMonth?: IntFieldUpdateOperationsInput | number
    workingHoursPerDay?: IntFieldUpdateOperationsInput | number
    payFrequency?: StringFieldUpdateOperationsInput | string
    payDay?: IntFieldUpdateOperationsInput | number
    cutoffDay?: IntFieldUpdateOperationsInput | number
    requirePayrollApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalLevels?: IntFieldUpdateOperationsInput | number
    autoApproveThreshold?: FloatFieldUpdateOperationsInput | number
    notifyEmployeesOnPayment?: BoolFieldUpdateOperationsInput | boolean
    sendPayslipsByEmail?: BoolFieldUpdateOperationsInput | boolean
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    branchCode?: NullableStringFieldUpdateOperationsInput | string | null
    swiftCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollSettingsCreateManyInput = {
    id?: string
    tenantId: string
    companyName?: string | null
    kraPin?: string | null
    nssfNumber?: string | null
    nhifNumber?: string | null
    companyAddress?: string | null
    companyCity?: string | null
    companyPostalCode?: string | null
    personalRelief?: number
    overtimeMultiplier?: number
    workingDaysPerMonth?: number
    workingHoursPerDay?: number
    payFrequency?: string
    payDay?: number
    cutoffDay?: number
    requirePayrollApproval?: boolean
    approvalLevels?: number
    autoApproveThreshold?: number
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: string | null
    accountNumber?: string | null
    branchCode?: string | null
    swiftCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    nssfNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nhifNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    companyCity?: NullableStringFieldUpdateOperationsInput | string | null
    companyPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    personalRelief?: FloatFieldUpdateOperationsInput | number
    overtimeMultiplier?: FloatFieldUpdateOperationsInput | number
    workingDaysPerMonth?: IntFieldUpdateOperationsInput | number
    workingHoursPerDay?: IntFieldUpdateOperationsInput | number
    payFrequency?: StringFieldUpdateOperationsInput | string
    payDay?: IntFieldUpdateOperationsInput | number
    cutoffDay?: IntFieldUpdateOperationsInput | number
    requirePayrollApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalLevels?: IntFieldUpdateOperationsInput | number
    autoApproveThreshold?: FloatFieldUpdateOperationsInput | number
    notifyEmployeesOnPayment?: BoolFieldUpdateOperationsInput | boolean
    sendPayslipsByEmail?: BoolFieldUpdateOperationsInput | boolean
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    branchCode?: NullableStringFieldUpdateOperationsInput | string | null
    swiftCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    nssfNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nhifNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    companyCity?: NullableStringFieldUpdateOperationsInput | string | null
    companyPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    personalRelief?: FloatFieldUpdateOperationsInput | number
    overtimeMultiplier?: FloatFieldUpdateOperationsInput | number
    workingDaysPerMonth?: IntFieldUpdateOperationsInput | number
    workingHoursPerDay?: IntFieldUpdateOperationsInput | number
    payFrequency?: StringFieldUpdateOperationsInput | string
    payDay?: IntFieldUpdateOperationsInput | number
    cutoffDay?: IntFieldUpdateOperationsInput | number
    requirePayrollApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalLevels?: IntFieldUpdateOperationsInput | number
    autoApproveThreshold?: FloatFieldUpdateOperationsInput | number
    notifyEmployeesOnPayment?: BoolFieldUpdateOperationsInput | boolean
    sendPayslipsByEmail?: BoolFieldUpdateOperationsInput | boolean
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    branchCode?: NullableStringFieldUpdateOperationsInput | string | null
    swiftCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveTypeCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutLeaveTypeInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutLeaveTypeInput
    tenant: TenantCreateNestedOneWithoutLeaveTypesInput
  }

  export type LeaveTypeUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutLeaveTypeInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutLeaveTypeInput
  }

  export type LeaveTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveBalances?: LeaveBalanceUpdateManyWithoutLeaveTypeNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutLeaveTypeNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveTypesNestedInput
  }

  export type LeaveTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutLeaveTypeNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutLeaveTypeNestedInput
  }

  export type LeaveTypeCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeavePolicyCreateInput = {
    id?: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveType: LeaveTypeCreateNestedOneWithoutLeavePoliciesInput
    tenant: TenantCreateNestedOneWithoutLeavePoliciesInput
  }

  export type LeavePolicyUncheckedCreateInput = {
    id?: string
    leaveTypeId: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeavePolicyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeavePoliciesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeavePoliciesNestedInput
  }

  export type LeavePolicyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeavePolicyCreateManyInput = {
    id?: string
    leaveTypeId: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeavePolicyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePolicyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveRequestsInput
    branch?: BranchCreateNestedOneWithoutLeaveRequestsInput
    leaveType: LeaveTypeCreateNestedOneWithoutLeaveRequestsInput
    tenant: TenantCreateNestedOneWithoutLeaveRequestsInput
  }

  export type LeaveRequestUncheckedCreateInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveRequestsNestedInput
    branch?: BranchUpdateOneWithoutLeaveRequestsNestedInput
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeaveRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveRequestsNestedInput
  }

  export type LeaveRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestCreateManyInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveBalanceCreateInput = {
    id?: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveBalancesInput
    leaveType: LeaveTypeCreateNestedOneWithoutLeaveBalancesInput
    tenant: TenantCreateNestedOneWithoutLeaveBalancesInput
  }

  export type LeaveBalanceUncheckedCreateInput = {
    id?: string
    employeeId: string
    leaveTypeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveBalanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveBalancesNestedInput
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeaveBalancesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveBalancesNestedInput
  }

  export type LeaveBalanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveBalanceCreateManyInput = {
    id?: string
    employeeId: string
    leaveTypeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveBalanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveBalanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type HolidayCreateInput = {
    id?: string
    name: string
    date: Date | string
    type?: string
    description?: string | null
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutHolidaysInput
  }

  export type HolidayUncheckedCreateInput = {
    id?: string
    name: string
    date: Date | string
    type?: string
    description?: string | null
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type HolidayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutHolidaysNestedInput
  }

  export type HolidayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type HolidayCreateManyInput = {
    id?: string
    name: string
    date: Date | string
    type?: string
    description?: string | null
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type HolidayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HolidayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceReviewCycleCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutReviewCycleInput
    tenant: TenantCreateNestedOneWithoutPerformanceReviewCyclesInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutReviewCycleInput
  }

  export type PerformanceReviewCycleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutReviewCycleInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutReviewCycleInput
  }

  export type PerformanceReviewCycleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceGoals?: PerformanceGoalUpdateManyWithoutReviewCycleNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewCyclesNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutReviewCycleNestedInput
  }

  export type PerformanceReviewCycleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutReviewCycleNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutReviewCycleNestedInput
  }

  export type PerformanceReviewCycleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceReviewCycleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceReviewCycleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceReviewCreateInput = {
    id?: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutPerformanceReviewInput
    employee: EmployeeCreateNestedOneWithoutPerformanceReviewsInput
    reviewCycle: PerformanceReviewCycleCreateNestedOneWithoutPerformanceReviewsInput
    tenant: TenantCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateInput = {
    id?: string
    employeeId: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutPerformanceReviewInput
  }

  export type PerformanceReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutPerformanceReviewNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    reviewCycle?: PerformanceReviewCycleUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewNestedInput
  }

  export type PerformanceReviewCreateManyInput = {
    id?: string
    employeeId: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceGoalCreateInput = {
    id?: string
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPerformanceGoalsInput
    reviewCycle?: PerformanceReviewCycleCreateNestedOneWithoutPerformanceGoalsInput
    tenant: TenantCreateNestedOneWithoutPerformanceGoalsInput
  }

  export type PerformanceGoalUncheckedCreateInput = {
    id?: string
    employeeId: string
    reviewCycleId?: string | null
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceGoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceGoalsNestedInput
    reviewCycle?: PerformanceReviewCycleUpdateOneWithoutPerformanceGoalsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceGoalsNestedInput
  }

  export type PerformanceGoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceGoalCreateManyInput = {
    id?: string
    employeeId: string
    reviewCycleId?: string | null
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceGoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceGoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceRatingCreateInput = {
    id?: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceReview: PerformanceReviewCreateNestedOneWithoutPerformanceRatingsInput
    tenant: TenantCreateNestedOneWithoutPerformanceRatingsInput
  }

  export type PerformanceRatingUncheckedCreateInput = {
    id?: string
    performanceReviewId: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceRatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceReview?: PerformanceReviewUpdateOneRequiredWithoutPerformanceRatingsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceRatingsNestedInput
  }

  export type PerformanceRatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceRatingCreateManyInput = {
    id?: string
    performanceReviewId: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceRatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceRatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceFeedbackCreateInput = {
    id?: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceReview: PerformanceReviewCreateNestedOneWithoutPerformanceFeedbackInput
    tenant: TenantCreateNestedOneWithoutPerformanceFeedbackInput
  }

  export type PerformanceFeedbackUncheckedCreateInput = {
    id?: string
    performanceReviewId: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceFeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceReview?: PerformanceReviewUpdateOneRequiredWithoutPerformanceFeedbackNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceFeedbackNestedInput
  }

  export type PerformanceFeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceFeedbackCreateManyInput = {
    id?: string
    performanceReviewId: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceFeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceFeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportInstances?: ReportInstanceCreateNestedManyWithoutTemplateInput
    tenant: TenantCreateNestedOneWithoutReportTemplatesInput
  }

  export type ReportTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type ReportTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportInstances?: ReportInstanceUpdateManyWithoutTemplateNestedInput
    tenant?: TenantUpdateOneRequiredWithoutReportTemplatesNestedInput
  }

  export type ReportTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type ReportTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ReportTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportInstanceCreateInput = {
    id?: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: ReportTemplateCreateNestedOneWithoutReportInstancesInput
    tenant: TenantCreateNestedOneWithoutReportInstancesInput
  }

  export type ReportInstanceUncheckedCreateInput = {
    id?: string
    templateId: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ReportInstanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: ReportTemplateUpdateOneRequiredWithoutReportInstancesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutReportInstancesNestedInput
  }

  export type ReportInstanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportInstanceCreateManyInput = {
    id?: string
    templateId: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ReportInstanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportInstanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type DashboardCreateInput = {
    id?: string
    name: string
    description?: string | null
    layout: JsonNullValueInput | InputJsonValue
    widgets: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: number | null
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: DashboardCreateallowedRolesInput | string[]
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutDashboardsInput
  }

  export type DashboardUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    layout: JsonNullValueInput | InputJsonValue
    widgets: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: number | null
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: DashboardCreateallowedRolesInput | string[]
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type DashboardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    layout?: JsonNullValueInput | InputJsonValue
    widgets?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: NullableIntFieldUpdateOperationsInput | number | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedRoles?: DashboardUpdateallowedRolesInput | string[]
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutDashboardsNestedInput
  }

  export type DashboardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    layout?: JsonNullValueInput | InputJsonValue
    widgets?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: NullableIntFieldUpdateOperationsInput | number | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedRoles?: DashboardUpdateallowedRolesInput | string[]
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type DashboardCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    layout: JsonNullValueInput | InputJsonValue
    widgets: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: number | null
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: DashboardCreateallowedRolesInput | string[]
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type DashboardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    layout?: JsonNullValueInput | InputJsonValue
    widgets?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: NullableIntFieldUpdateOperationsInput | number | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedRoles?: DashboardUpdateallowedRolesInput | string[]
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    layout?: JsonNullValueInput | InputJsonValue
    widgets?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: NullableIntFieldUpdateOperationsInput | number | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedRoles?: DashboardUpdateallowedRolesInput | string[]
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvancePolicyCreateInput = {
    id?: string
    name: string
    description?: string | null
    maxAdvancePercentage?: number
    maxAdvanceAmount?: number | null
    minServiceMonths?: number
    maxAdvancesPerYear?: number
    interestRate?: number
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlyDeductionPercentage?: number
    tenant: TenantCreateNestedOneWithoutSalaryAdvancePoliciesInput
  }

  export type SalaryAdvancePolicyUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    maxAdvancePercentage?: number
    maxAdvanceAmount?: number | null
    minServiceMonths?: number
    maxAdvancesPerYear?: number
    interestRate?: number
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    monthlyDeductionPercentage?: number
  }

  export type SalaryAdvancePolicyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxAdvancePercentage?: FloatFieldUpdateOperationsInput | number
    maxAdvanceAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    minServiceMonths?: IntFieldUpdateOperationsInput | number
    maxAdvancesPerYear?: IntFieldUpdateOperationsInput | number
    interestRate?: FloatFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlyDeductionPercentage?: FloatFieldUpdateOperationsInput | number
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvancePoliciesNestedInput
  }

  export type SalaryAdvancePolicyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxAdvancePercentage?: FloatFieldUpdateOperationsInput | number
    maxAdvanceAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    minServiceMonths?: IntFieldUpdateOperationsInput | number
    maxAdvancesPerYear?: IntFieldUpdateOperationsInput | number
    interestRate?: FloatFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    monthlyDeductionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type SalaryAdvancePolicyCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    maxAdvancePercentage?: number
    maxAdvanceAmount?: number | null
    minServiceMonths?: number
    maxAdvancesPerYear?: number
    interestRate?: number
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    monthlyDeductionPercentage?: number
  }

  export type SalaryAdvancePolicyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxAdvancePercentage?: FloatFieldUpdateOperationsInput | number
    maxAdvanceAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    minServiceMonths?: IntFieldUpdateOperationsInput | number
    maxAdvancesPerYear?: IntFieldUpdateOperationsInput | number
    interestRate?: FloatFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlyDeductionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type SalaryAdvancePolicyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxAdvancePercentage?: FloatFieldUpdateOperationsInput | number
    maxAdvanceAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    minServiceMonths?: IntFieldUpdateOperationsInput | number
    maxAdvancesPerYear?: IntFieldUpdateOperationsInput | number
    interestRate?: FloatFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    monthlyDeductionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type SalaryAdvanceRequestCreateInput = {
    id?: string
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    repayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutSalaryAdvanceRequestInput
    employee: EmployeeCreateNestedOneWithoutSalaryAdvanceRequestsInput
    branch?: BranchCreateNestedOneWithoutSalaryAdvanceRequestsInput
    tenant: TenantCreateNestedOneWithoutSalaryAdvanceRequestsInput
  }

  export type SalaryAdvanceRequestUncheckedCreateInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    repayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutSalaryAdvanceRequestInput
  }

  export type SalaryAdvanceRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repayments?: SalaryAdvanceRepaymentUpdateManyWithoutSalaryAdvanceRequestNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
    branch?: BranchUpdateOneWithoutSalaryAdvanceRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    repayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutSalaryAdvanceRequestNestedInput
  }

  export type SalaryAdvanceRequestCreateManyInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryAdvanceRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRepaymentCreateInput = {
    id?: string
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollPeriod?: PayrollPeriodCreateNestedOneWithoutSalaryAdvanceRepaymentsInput
    salaryAdvanceRequest: SalaryAdvanceRequestCreateNestedOneWithoutRepaymentsInput
    tenant: TenantCreateNestedOneWithoutSalaryAdvanceRepaymentsInput
  }

  export type SalaryAdvanceRepaymentUncheckedCreateInput = {
    id?: string
    salaryAdvanceRequestId: string
    payrollPeriodId?: string | null
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRepaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollPeriod?: PayrollPeriodUpdateOneWithoutSalaryAdvanceRepaymentsNestedInput
    salaryAdvanceRequest?: SalaryAdvanceRequestUpdateOneRequiredWithoutRepaymentsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvanceRepaymentsNestedInput
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    salaryAdvanceRequestId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRepaymentCreateManyInput = {
    id?: string
    salaryAdvanceRequestId: string
    payrollPeriodId?: string | null
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRepaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    salaryAdvanceRequestId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutAuditLogsInput
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    userId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutAuditLogsNestedInput
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    userId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SecurityAlertCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    timestamp?: Date | string
    tenant: TenantCreateNestedOneWithoutSecurityAlertsInput
  }

  export type SecurityAlertUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    timestamp?: Date | string
    tenantId: string
  }

  export type SecurityAlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutSecurityAlertsNestedInput
  }

  export type SecurityAlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SecurityAlertCreateManyInput = {
    id?: string
    type: string
    title: string
    description: string
    timestamp?: Date | string
    tenantId: string
  }

  export type SecurityAlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityAlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SecuritySettingsCreateInput = {
    id?: string
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
    tenant: TenantCreateNestedOneWithoutSecuritySettingsInput
  }

  export type SecuritySettingsUncheckedCreateInput = {
    id?: string
    tenantId: string
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
  }

  export type SecuritySettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    passwordExpiry?: BoolFieldUpdateOperationsInput | boolean
    sessionTimeout?: BoolFieldUpdateOperationsInput | boolean
    ipWhitelist?: BoolFieldUpdateOperationsInput | boolean
    auditLogging?: BoolFieldUpdateOperationsInput | boolean
    encryptionAtRest?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutSecuritySettingsNestedInput
  }

  export type SecuritySettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    passwordExpiry?: BoolFieldUpdateOperationsInput | boolean
    sessionTimeout?: BoolFieldUpdateOperationsInput | boolean
    ipWhitelist?: BoolFieldUpdateOperationsInput | boolean
    auditLogging?: BoolFieldUpdateOperationsInput | boolean
    encryptionAtRest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SecuritySettingsCreateManyInput = {
    id?: string
    tenantId: string
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
  }

  export type SecuritySettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    passwordExpiry?: BoolFieldUpdateOperationsInput | boolean
    sessionTimeout?: BoolFieldUpdateOperationsInput | boolean
    ipWhitelist?: BoolFieldUpdateOperationsInput | boolean
    auditLogging?: BoolFieldUpdateOperationsInput | boolean
    encryptionAtRest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SecuritySettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    passwordExpiry?: BoolFieldUpdateOperationsInput | boolean
    sessionTimeout?: BoolFieldUpdateOperationsInput | boolean
    ipWhitelist?: BoolFieldUpdateOperationsInput | boolean
    auditLogging?: BoolFieldUpdateOperationsInput | boolean
    encryptionAtRest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowTemplateCreateInput = {
    id?: string
    name: string
    description: string
    category: string
    version: string
    isActive: boolean
    steps: JsonNullValueInput | InputJsonValue
    triggers: JsonNullValueInput | InputJsonValue
    variables: JsonNullValueInput | InputJsonValue
    createdBy: string
    createdDate: Date | string
    lastModified: Date | string
    tenant: TenantCreateNestedOneWithoutWorkflowTemplatesInput
  }

  export type WorkflowTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    category: string
    version: string
    isActive: boolean
    steps: JsonNullValueInput | InputJsonValue
    triggers: JsonNullValueInput | InputJsonValue
    variables: JsonNullValueInput | InputJsonValue
    createdBy: string
    createdDate: Date | string
    lastModified: Date | string
    tenantId: string
  }

  export type WorkflowTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    steps?: JsonNullValueInput | InputJsonValue
    triggers?: JsonNullValueInput | InputJsonValue
    variables?: JsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutWorkflowTemplatesNestedInput
  }

  export type WorkflowTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    steps?: JsonNullValueInput | InputJsonValue
    triggers?: JsonNullValueInput | InputJsonValue
    variables?: JsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowTemplateCreateManyInput = {
    id?: string
    name: string
    description: string
    category: string
    version: string
    isActive: boolean
    steps: JsonNullValueInput | InputJsonValue
    triggers: JsonNullValueInput | InputJsonValue
    variables: JsonNullValueInput | InputJsonValue
    createdBy: string
    createdDate: Date | string
    lastModified: Date | string
    tenantId: string
  }

  export type WorkflowTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    steps?: JsonNullValueInput | InputJsonValue
    triggers?: JsonNullValueInput | InputJsonValue
    variables?: JsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    steps?: JsonNullValueInput | InputJsonValue
    triggers?: JsonNullValueInput | InputJsonValue
    variables?: JsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingCreateInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: TrainingEnrollmentCreateNestedManyWithoutTrainingInput
    tenant: TenantCreateNestedOneWithoutTrainingsInput
  }

  export type TrainingUncheckedCreateInput = {
    id?: string
    tenantId: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: TrainingEnrollmentUpdateManyWithoutTrainingNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTrainingsNestedInput
  }

  export type TrainingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingCreateManyInput = {
    id?: string
    tenantId: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingEnrollmentCreateInput = {
    id?: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTrainingEnrollmentsInput
    training: TrainingCreateNestedOneWithoutEnrollmentsInput
  }

  export type TrainingEnrollmentUncheckedCreateInput = {
    id?: string
    trainingId: string
    employeeId: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingEnrollmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTrainingEnrollmentsNestedInput
    training?: TrainingUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type TrainingEnrollmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingEnrollmentCreateManyInput = {
    id?: string
    trainingId: string
    employeeId: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingEnrollmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingEnrollmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationCreateInput = {
    id?: string
    name: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
    integrationLogs?: IntegrationLogCreateNestedManyWithoutIntegrationInput
    tenant: TenantCreateNestedOneWithoutIntegrationsInput
  }

  export type IntegrationUncheckedCreateInput = {
    id?: string
    name: string
    tenantId: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrationLogs?: IntegrationLogUpdateManyWithoutIntegrationNestedInput
    tenant?: TenantUpdateOneRequiredWithoutIntegrationsNestedInput
  }

  export type IntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationCreateManyInput = {
    id?: string
    name: string
    tenantId: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
  }

  export type IntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationLogCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
    integration: IntegrationCreateNestedOneWithoutIntegrationLogsInput
    tenant: TenantCreateNestedOneWithoutIntegrationLogsInput
  }

  export type IntegrationLogUncheckedCreateInput = {
    id?: string
    integrationId: string
    message: string
    createdAt?: Date | string
    tenantId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
  }

  export type IntegrationLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutIntegrationLogsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutIntegrationLogsNestedInput
  }

  export type IntegrationLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationLogCreateManyInput = {
    id?: string
    integrationId: string
    message: string
    createdAt?: Date | string
    tenantId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
  }

  export type IntegrationLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowCreateInput = {
    id?: string
    name: string
    approvals?: ApprovalCreateNestedManyWithoutWorkflowInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutWorkflowInput
    tenant: TenantCreateNestedOneWithoutWorkflowsInput
  }

  export type WorkflowUncheckedCreateInput = {
    id?: string
    name: string
    tenantId: string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutWorkflowInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    approvals?: ApprovalUpdateManyWithoutWorkflowNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutWorkflowNestedInput
    tenant?: TenantUpdateOneRequiredWithoutWorkflowsNestedInput
  }

  export type WorkflowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    approvals?: ApprovalUncheckedUpdateManyWithoutWorkflowNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowCreateManyInput = {
    id?: string
    name: string
    tenantId: string
  }

  export type WorkflowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowStatsCreateInput = {
    id?: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutWorkflowStatsInput
    workflow: WorkflowCreateNestedOneWithoutWorkflowStatsInput
  }

  export type WorkflowStatsUncheckedCreateInput = {
    id?: string
    workflowId: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type WorkflowStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutWorkflowStatsNestedInput
    workflow?: WorkflowUpdateOneRequiredWithoutWorkflowStatsNestedInput
  }

  export type WorkflowStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowStatsCreateManyInput = {
    id?: string
    workflowId: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type WorkflowStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalCreateInput = {
    id?: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutApprovalsInput
    workflow: WorkflowCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateInput = {
    id?: string
    workflowId: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ApprovalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutApprovalsNestedInput
    workflow?: WorkflowUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalCreateManyInput = {
    id?: string
    workflowId: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ApprovalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ExperimentalFeatureCreateInput = {
    id?: string
    key: string
    name: string
    description?: string | null
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
    tenant: TenantCreateNestedOneWithoutExperimentalFeaturesInput
  }

  export type ExperimentalFeatureUncheckedCreateInput = {
    id?: string
    key: string
    name: string
    description?: string | null
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
    tenantId: string
  }

  export type ExperimentalFeatureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    tenant?: TenantUpdateOneRequiredWithoutExperimentalFeaturesNestedInput
  }

  export type ExperimentalFeatureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ExperimentalFeatureCreateManyInput = {
    id?: string
    key: string
    name: string
    description?: string | null
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
    tenantId: string
  }

  export type ExperimentalFeatureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExperimentalFeatureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ApprovalListRelationFilter = {
    every?: ApprovalWhereInput
    some?: ApprovalWhereInput
    none?: ApprovalWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type BranchListRelationFilter = {
    every?: BranchWhereInput
    some?: BranchWhereInput
    none?: BranchWhereInput
  }

  export type DashboardListRelationFilter = {
    every?: DashboardWhereInput
    some?: DashboardWhereInput
    none?: DashboardWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type ExperimentalFeatureListRelationFilter = {
    every?: ExperimentalFeatureWhereInput
    some?: ExperimentalFeatureWhereInput
    none?: ExperimentalFeatureWhereInput
  }

  export type HolidayListRelationFilter = {
    every?: HolidayWhereInput
    some?: HolidayWhereInput
    none?: HolidayWhereInput
  }

  export type IntegrationLogListRelationFilter = {
    every?: IntegrationLogWhereInput
    some?: IntegrationLogWhereInput
    none?: IntegrationLogWhereInput
  }

  export type IntegrationListRelationFilter = {
    every?: IntegrationWhereInput
    some?: IntegrationWhereInput
    none?: IntegrationWhereInput
  }

  export type LeaveBalanceListRelationFilter = {
    every?: LeaveBalanceWhereInput
    some?: LeaveBalanceWhereInput
    none?: LeaveBalanceWhereInput
  }

  export type LeavePolicyListRelationFilter = {
    every?: LeavePolicyWhereInput
    some?: LeavePolicyWhereInput
    none?: LeavePolicyWhereInput
  }

  export type LeaveRequestListRelationFilter = {
    every?: LeaveRequestWhereInput
    some?: LeaveRequestWhereInput
    none?: LeaveRequestWhereInput
  }

  export type LeaveTypeListRelationFilter = {
    every?: LeaveTypeWhereInput
    some?: LeaveTypeWhereInput
    none?: LeaveTypeWhereInput
  }

  export type PayStubListRelationFilter = {
    every?: PayStubWhereInput
    some?: PayStubWhereInput
    none?: PayStubWhereInput
  }

  export type PayrollItemListRelationFilter = {
    every?: PayrollItemWhereInput
    some?: PayrollItemWhereInput
    none?: PayrollItemWhereInput
  }

  export type PayrollPeriodListRelationFilter = {
    every?: PayrollPeriodWhereInput
    some?: PayrollPeriodWhereInput
    none?: PayrollPeriodWhereInput
  }

  export type PayrollSettingsNullableScalarRelationFilter = {
    is?: PayrollSettingsWhereInput | null
    isNot?: PayrollSettingsWhereInput | null
  }

  export type PayrollListRelationFilter = {
    every?: PayrollWhereInput
    some?: PayrollWhereInput
    none?: PayrollWhereInput
  }

  export type PerformanceFeedbackListRelationFilter = {
    every?: PerformanceFeedbackWhereInput
    some?: PerformanceFeedbackWhereInput
    none?: PerformanceFeedbackWhereInput
  }

  export type PerformanceGoalListRelationFilter = {
    every?: PerformanceGoalWhereInput
    some?: PerformanceGoalWhereInput
    none?: PerformanceGoalWhereInput
  }

  export type PerformanceRatingListRelationFilter = {
    every?: PerformanceRatingWhereInput
    some?: PerformanceRatingWhereInput
    none?: PerformanceRatingWhereInput
  }

  export type PerformanceReviewCycleListRelationFilter = {
    every?: PerformanceReviewCycleWhereInput
    some?: PerformanceReviewCycleWhereInput
    none?: PerformanceReviewCycleWhereInput
  }

  export type PerformanceReviewListRelationFilter = {
    every?: PerformanceReviewWhereInput
    some?: PerformanceReviewWhereInput
    none?: PerformanceReviewWhereInput
  }

  export type ReportInstanceListRelationFilter = {
    every?: ReportInstanceWhereInput
    some?: ReportInstanceWhereInput
    none?: ReportInstanceWhereInput
  }

  export type ReportTemplateListRelationFilter = {
    every?: ReportTemplateWhereInput
    some?: ReportTemplateWhereInput
    none?: ReportTemplateWhereInput
  }

  export type SalaryAdvancePolicyListRelationFilter = {
    every?: SalaryAdvancePolicyWhereInput
    some?: SalaryAdvancePolicyWhereInput
    none?: SalaryAdvancePolicyWhereInput
  }

  export type SalaryAdvanceRepaymentListRelationFilter = {
    every?: SalaryAdvanceRepaymentWhereInput
    some?: SalaryAdvanceRepaymentWhereInput
    none?: SalaryAdvanceRepaymentWhereInput
  }

  export type SalaryAdvanceRequestListRelationFilter = {
    every?: SalaryAdvanceRequestWhereInput
    some?: SalaryAdvanceRequestWhereInput
    none?: SalaryAdvanceRequestWhereInput
  }

  export type SecurityAlertListRelationFilter = {
    every?: SecurityAlertWhereInput
    some?: SecurityAlertWhereInput
    none?: SecurityAlertWhereInput
  }

  export type SecuritySettingsNullableScalarRelationFilter = {
    is?: SecuritySettingsWhereInput | null
    isNot?: SecuritySettingsWhereInput | null
  }

  export type TaxBracketListRelationFilter = {
    every?: TaxBracketWhereInput
    some?: TaxBracketWhereInput
    none?: TaxBracketWhereInput
  }

  export type TrainingListRelationFilter = {
    every?: TrainingWhereInput
    some?: TrainingWhereInput
    none?: TrainingWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type WorkflowStatsListRelationFilter = {
    every?: WorkflowStatsWhereInput
    some?: WorkflowStatsWhereInput
    none?: WorkflowStatsWhereInput
  }

  export type WorkflowTemplateListRelationFilter = {
    every?: WorkflowTemplateWhereInput
    some?: WorkflowTemplateWhereInput
    none?: WorkflowTemplateWhereInput
  }

  export type WorkflowListRelationFilter = {
    every?: WorkflowWhereInput
    some?: WorkflowWhereInput
    none?: WorkflowWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BranchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DashboardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExperimentalFeatureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HolidayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveBalanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeavePolicyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayStubOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollPeriodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformanceFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformanceGoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformanceRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformanceReviewCycleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformanceReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportInstanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalaryAdvancePolicyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalaryAdvanceRepaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalaryAdvanceRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SecurityAlertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaxBracketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowStatsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    domain?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TenantScalarRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    read?: SortOrder
    actionUrl?: SortOrder
    actionLabel?: SortOrder
    module?: SortOrder
    tenantId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    read?: SortOrder
    actionUrl?: SortOrder
    actionLabel?: SortOrder
    module?: SortOrder
    tenantId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    read?: SortOrder
    actionUrl?: SortOrder
    actionLabel?: SortOrder
    module?: SortOrder
    tenantId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type EmployeeNullableScalarRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    employeeId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type DepartmentNameTenantIdCompoundUniqueInput = {
    name: string
    tenantId: string
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    managerId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    employeeCount?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    managerId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    managerId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    employeeCount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type BranchNameTenantIdCompoundUniqueInput = {
    name: string
    tenantId: string
  }

  export type BranchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    address?: SortOrder
    managerId?: SortOrder
    managerUserId?: SortOrder
    departmentId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type BranchAvgOrderByAggregateInput = {
    employeeCount?: SortOrder
  }

  export type BranchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    address?: SortOrder
    managerId?: SortOrder
    managerUserId?: SortOrder
    departmentId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type BranchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    address?: SortOrder
    managerId?: SortOrder
    managerUserId?: SortOrder
    departmentId?: SortOrder
    employeeCount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type BranchSumOrderByAggregateInput = {
    employeeCount?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BranchNullableScalarRelationFilter = {
    is?: BranchWhereInput | null
    isNot?: BranchWhereInput | null
  }

  export type TrainingEnrollmentListRelationFilter = {
    every?: TrainingEnrollmentWhereInput
    some?: TrainingEnrollmentWhereInput
    none?: TrainingEnrollmentWhereInput
  }

  export type TrainingEnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    employeeNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    branchId?: SortOrder
    salary?: SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    salary?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    branchId?: SortOrder
    salary?: SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    employeeNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    branchId?: SortOrder
    salary?: SortOrder
    hireDate?: SortOrder
    terminationDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    salary?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PayrollPeriodNameTenantIdCompoundUniqueInput = {
    name: string
    tenantId: string
  }

  export type PayrollPeriodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollPeriodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollPeriodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PayStubNullableScalarRelationFilter = {
    is?: PayStubWhereInput | null
    isNot?: PayStubWhereInput | null
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type PayrollPeriodScalarRelationFilter = {
    is?: PayrollPeriodWhereInput
    isNot?: PayrollPeriodWhereInput
  }

  export type PayrollEmployeeIdPayrollPeriodIdCompoundUniqueInput = {
    employeeId: string
    payrollPeriodId: string
  }

  export type PayrollCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    basicSalary?: SortOrder
    grossSalary?: SortOrder
    totalDeductions?: SortOrder
    netSalary?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollAvgOrderByAggregateInput = {
    basicSalary?: SortOrder
    grossSalary?: SortOrder
    totalDeductions?: SortOrder
    netSalary?: SortOrder
  }

  export type PayrollMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    basicSalary?: SortOrder
    grossSalary?: SortOrder
    totalDeductions?: SortOrder
    netSalary?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    basicSalary?: SortOrder
    grossSalary?: SortOrder
    totalDeductions?: SortOrder
    netSalary?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollSumOrderByAggregateInput = {
    basicSalary?: SortOrder
    grossSalary?: SortOrder
    totalDeductions?: SortOrder
    netSalary?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PayrollScalarRelationFilter = {
    is?: PayrollWhereInput
    isNot?: PayrollWhereInput
  }

  export type PayrollItemCountOrderByAggregateInput = {
    id?: SortOrder
    payrollId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    isStatutory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollItemAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PayrollItemMaxOrderByAggregateInput = {
    id?: SortOrder
    payrollId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    isStatutory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollItemMinOrderByAggregateInput = {
    id?: SortOrder
    payrollId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    isStatutory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollItemSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TaxBracketCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type TaxBracketAvgOrderByAggregateInput = {
    minAmount?: SortOrder
    maxAmount?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
  }

  export type TaxBracketMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type TaxBracketMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type TaxBracketSumOrderByAggregateInput = {
    minAmount?: SortOrder
    maxAmount?: SortOrder
    rate?: SortOrder
    fixedAmount?: SortOrder
  }

  export type PayStubCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollId?: SortOrder
    payrollPeriodId?: SortOrder
    stubNumber?: SortOrder
    generatedAt?: SortOrder
    pdfPath?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayStubMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollId?: SortOrder
    payrollPeriodId?: SortOrder
    stubNumber?: SortOrder
    generatedAt?: SortOrder
    pdfPath?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayStubMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollId?: SortOrder
    payrollPeriodId?: SortOrder
    stubNumber?: SortOrder
    generatedAt?: SortOrder
    pdfPath?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PayrollSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    companyName?: SortOrder
    kraPin?: SortOrder
    nssfNumber?: SortOrder
    nhifNumber?: SortOrder
    companyAddress?: SortOrder
    companyCity?: SortOrder
    companyPostalCode?: SortOrder
    personalRelief?: SortOrder
    overtimeMultiplier?: SortOrder
    workingDaysPerMonth?: SortOrder
    workingHoursPerDay?: SortOrder
    payFrequency?: SortOrder
    payDay?: SortOrder
    cutoffDay?: SortOrder
    requirePayrollApproval?: SortOrder
    approvalLevels?: SortOrder
    autoApproveThreshold?: SortOrder
    notifyEmployeesOnPayment?: SortOrder
    sendPayslipsByEmail?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    branchCode?: SortOrder
    swiftCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayrollSettingsAvgOrderByAggregateInput = {
    personalRelief?: SortOrder
    overtimeMultiplier?: SortOrder
    workingDaysPerMonth?: SortOrder
    workingHoursPerDay?: SortOrder
    payDay?: SortOrder
    cutoffDay?: SortOrder
    approvalLevels?: SortOrder
    autoApproveThreshold?: SortOrder
  }

  export type PayrollSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    companyName?: SortOrder
    kraPin?: SortOrder
    nssfNumber?: SortOrder
    nhifNumber?: SortOrder
    companyAddress?: SortOrder
    companyCity?: SortOrder
    companyPostalCode?: SortOrder
    personalRelief?: SortOrder
    overtimeMultiplier?: SortOrder
    workingDaysPerMonth?: SortOrder
    workingHoursPerDay?: SortOrder
    payFrequency?: SortOrder
    payDay?: SortOrder
    cutoffDay?: SortOrder
    requirePayrollApproval?: SortOrder
    approvalLevels?: SortOrder
    autoApproveThreshold?: SortOrder
    notifyEmployeesOnPayment?: SortOrder
    sendPayslipsByEmail?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    branchCode?: SortOrder
    swiftCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayrollSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    companyName?: SortOrder
    kraPin?: SortOrder
    nssfNumber?: SortOrder
    nhifNumber?: SortOrder
    companyAddress?: SortOrder
    companyCity?: SortOrder
    companyPostalCode?: SortOrder
    personalRelief?: SortOrder
    overtimeMultiplier?: SortOrder
    workingDaysPerMonth?: SortOrder
    workingHoursPerDay?: SortOrder
    payFrequency?: SortOrder
    payDay?: SortOrder
    cutoffDay?: SortOrder
    requirePayrollApproval?: SortOrder
    approvalLevels?: SortOrder
    autoApproveThreshold?: SortOrder
    notifyEmployeesOnPayment?: SortOrder
    sendPayslipsByEmail?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    branchCode?: SortOrder
    swiftCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayrollSettingsSumOrderByAggregateInput = {
    personalRelief?: SortOrder
    overtimeMultiplier?: SortOrder
    workingDaysPerMonth?: SortOrder
    workingHoursPerDay?: SortOrder
    payDay?: SortOrder
    cutoffDay?: SortOrder
    approvalLevels?: SortOrder
    autoApproveThreshold?: SortOrder
  }

  export type LeaveTypeCodeTenantIdCompoundUniqueInput = {
    code: string
    tenantId: string
  }

  export type LeaveTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type LeaveTypeScalarRelationFilter = {
    is?: LeaveTypeWhereInput
    isNot?: LeaveTypeWhereInput
  }

  export type LeavePolicyCountOrderByAggregateInput = {
    id?: SortOrder
    leaveTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxDaysPerYear?: SortOrder
    maxDaysPerRequest?: SortOrder
    minDaysNotice?: SortOrder
    maxCarryForward?: SortOrder
    allowNegativeBalance?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    accrualRate?: SortOrder
    probationPeriodDays?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeavePolicyAvgOrderByAggregateInput = {
    maxDaysPerYear?: SortOrder
    maxDaysPerRequest?: SortOrder
    minDaysNotice?: SortOrder
    maxCarryForward?: SortOrder
    accrualRate?: SortOrder
    probationPeriodDays?: SortOrder
  }

  export type LeavePolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    leaveTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxDaysPerYear?: SortOrder
    maxDaysPerRequest?: SortOrder
    minDaysNotice?: SortOrder
    maxCarryForward?: SortOrder
    allowNegativeBalance?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    accrualRate?: SortOrder
    probationPeriodDays?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeavePolicyMinOrderByAggregateInput = {
    id?: SortOrder
    leaveTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxDaysPerYear?: SortOrder
    maxDaysPerRequest?: SortOrder
    minDaysNotice?: SortOrder
    maxCarryForward?: SortOrder
    allowNegativeBalance?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    accrualRate?: SortOrder
    probationPeriodDays?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeavePolicySumOrderByAggregateInput = {
    maxDaysPerYear?: SortOrder
    maxDaysPerRequest?: SortOrder
    minDaysNotice?: SortOrder
    maxCarryForward?: SortOrder
    accrualRate?: SortOrder
    probationPeriodDays?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type LeaveRequestCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    leaveTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    rejectedAt?: SortOrder
    rejectedBy?: SortOrder
    rejectionReason?: SortOrder
    cancelledAt?: SortOrder
    cancelledBy?: SortOrder
    comments?: SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveRequestAvgOrderByAggregateInput = {
    totalDays?: SortOrder
  }

  export type LeaveRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    leaveTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    rejectedAt?: SortOrder
    rejectedBy?: SortOrder
    rejectionReason?: SortOrder
    cancelledAt?: SortOrder
    cancelledBy?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveRequestMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    leaveTypeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalDays?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    appliedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    rejectedAt?: SortOrder
    rejectedBy?: SortOrder
    rejectionReason?: SortOrder
    cancelledAt?: SortOrder
    cancelledBy?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveRequestSumOrderByAggregateInput = {
    totalDays?: SortOrder
  }

  export type LeaveBalanceEmployeeIdLeaveTypeIdYearCompoundUniqueInput = {
    employeeId: string
    leaveTypeId: string
    year: number
  }

  export type LeaveBalanceCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveTypeId?: SortOrder
    year?: SortOrder
    allocated?: SortOrder
    used?: SortOrder
    pending?: SortOrder
    available?: SortOrder
    carriedForward?: SortOrder
    accrued?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveBalanceAvgOrderByAggregateInput = {
    year?: SortOrder
    allocated?: SortOrder
    used?: SortOrder
    pending?: SortOrder
    available?: SortOrder
    carriedForward?: SortOrder
    accrued?: SortOrder
  }

  export type LeaveBalanceMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveTypeId?: SortOrder
    year?: SortOrder
    allocated?: SortOrder
    used?: SortOrder
    pending?: SortOrder
    available?: SortOrder
    carriedForward?: SortOrder
    accrued?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveBalanceMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveTypeId?: SortOrder
    year?: SortOrder
    allocated?: SortOrder
    used?: SortOrder
    pending?: SortOrder
    available?: SortOrder
    carriedForward?: SortOrder
    accrued?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type LeaveBalanceSumOrderByAggregateInput = {
    year?: SortOrder
    allocated?: SortOrder
    used?: SortOrder
    pending?: SortOrder
    available?: SortOrder
    carriedForward?: SortOrder
    accrued?: SortOrder
  }

  export type HolidayCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isRecurring?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type HolidayMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isRecurring?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type HolidayMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    type?: SortOrder
    description?: SortOrder
    isRecurring?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceReviewCycleNameTenantIdCompoundUniqueInput = {
    name: string
    tenantId: string
  }

  export type PerformanceReviewCycleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reviewDeadline?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceReviewCycleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reviewDeadline?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceReviewCycleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reviewDeadline?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceReviewCycleScalarRelationFilter = {
    is?: PerformanceReviewCycleWhereInput
    isNot?: PerformanceReviewCycleWhereInput
  }

  export type PerformanceReviewEmployeeIdReviewCycleIdCompoundUniqueInput = {
    employeeId: string
    reviewCycleId: string
  }

  export type PerformanceReviewCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    reviewerId?: SortOrder
    status?: SortOrder
    selfAssessmentCompleted?: SortOrder
    managerReviewCompleted?: SortOrder
    overallRating?: SortOrder
    overallComments?: SortOrder
    strengths?: SortOrder
    areasForImprovement?: SortOrder
    developmentPlan?: SortOrder
    goals?: SortOrder
    submittedAt?: SortOrder
    completedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceReviewAvgOrderByAggregateInput = {
    overallRating?: SortOrder
  }

  export type PerformanceReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    reviewerId?: SortOrder
    status?: SortOrder
    selfAssessmentCompleted?: SortOrder
    managerReviewCompleted?: SortOrder
    overallRating?: SortOrder
    overallComments?: SortOrder
    strengths?: SortOrder
    areasForImprovement?: SortOrder
    developmentPlan?: SortOrder
    goals?: SortOrder
    submittedAt?: SortOrder
    completedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceReviewMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    reviewerId?: SortOrder
    status?: SortOrder
    selfAssessmentCompleted?: SortOrder
    managerReviewCompleted?: SortOrder
    overallRating?: SortOrder
    overallComments?: SortOrder
    strengths?: SortOrder
    areasForImprovement?: SortOrder
    developmentPlan?: SortOrder
    goals?: SortOrder
    submittedAt?: SortOrder
    completedAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceReviewSumOrderByAggregateInput = {
    overallRating?: SortOrder
  }

  export type PerformanceReviewCycleNullableScalarRelationFilter = {
    is?: PerformanceReviewCycleWhereInput | null
    isNot?: PerformanceReviewCycleWhereInput | null
  }

  export type PerformanceGoalCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    measurementCriteria?: SortOrder
    achievedDate?: SortOrder
    comments?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceGoalAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type PerformanceGoalMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    measurementCriteria?: SortOrder
    achievedDate?: SortOrder
    comments?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceGoalMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewCycleId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    measurementCriteria?: SortOrder
    achievedDate?: SortOrder
    comments?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceGoalSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type PerformanceReviewScalarRelationFilter = {
    is?: PerformanceReviewWhereInput
    isNot?: PerformanceReviewWhereInput
  }

  export type PerformanceRatingCountOrderByAggregateInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    competency?: SortOrder
    rating?: SortOrder
    maxRating?: SortOrder
    weight?: SortOrder
    comments?: SortOrder
    raterType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceRatingAvgOrderByAggregateInput = {
    rating?: SortOrder
    maxRating?: SortOrder
    weight?: SortOrder
  }

  export type PerformanceRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    competency?: SortOrder
    rating?: SortOrder
    maxRating?: SortOrder
    weight?: SortOrder
    comments?: SortOrder
    raterType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceRatingMinOrderByAggregateInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    competency?: SortOrder
    rating?: SortOrder
    maxRating?: SortOrder
    weight?: SortOrder
    comments?: SortOrder
    raterType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceRatingSumOrderByAggregateInput = {
    rating?: SortOrder
    maxRating?: SortOrder
    weight?: SortOrder
  }

  export type PerformanceFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    feedbackType?: SortOrder
    feedback?: SortOrder
    isPrivate?: SortOrder
    providedBy?: SortOrder
    providedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    feedbackType?: SortOrder
    feedback?: SortOrder
    isPrivate?: SortOrder
    providedBy?: SortOrder
    providedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type PerformanceFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    performanceReviewId?: SortOrder
    feedbackType?: SortOrder
    feedback?: SortOrder
    isPrivate?: SortOrder
    providedBy?: SortOrder
    providedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ReportTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    query?: SortOrder
    parameters?: SortOrder
    columns?: SortOrder
    filters?: SortOrder
    groupBy?: SortOrder
    sortBy?: SortOrder
    chartConfig?: SortOrder
    isActive?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ReportTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    query?: SortOrder
    isActive?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ReportTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    query?: SortOrder
    isActive?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ReportTemplateScalarRelationFilter = {
    is?: ReportTemplateWhereInput
    isNot?: ReportTemplateWhereInput
  }

  export type ReportInstanceCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    parameters?: SortOrder
    filters?: SortOrder
    status?: SortOrder
    data?: SortOrder
    filePath?: SortOrder
    fileFormat?: SortOrder
    fileSize?: SortOrder
    recordCount?: SortOrder
    generatedBy?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrder
    isScheduled?: SortOrder
    scheduleConfig?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ReportInstanceAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    recordCount?: SortOrder
  }

  export type ReportInstanceMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    filePath?: SortOrder
    fileFormat?: SortOrder
    fileSize?: SortOrder
    recordCount?: SortOrder
    generatedBy?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrder
    isScheduled?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ReportInstanceMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    filePath?: SortOrder
    fileFormat?: SortOrder
    fileSize?: SortOrder
    recordCount?: SortOrder
    generatedBy?: SortOrder
    generatedAt?: SortOrder
    expiresAt?: SortOrder
    isScheduled?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ReportInstanceSumOrderByAggregateInput = {
    fileSize?: SortOrder
    recordCount?: SortOrder
  }

  export type DashboardCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    layout?: SortOrder
    widgets?: SortOrder
    filters?: SortOrder
    refreshInterval?: SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    allowedRoles?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DashboardAvgOrderByAggregateInput = {
    refreshInterval?: SortOrder
  }

  export type DashboardMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    refreshInterval?: SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DashboardMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    refreshInterval?: SortOrder
    isDefault?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DashboardSumOrderByAggregateInput = {
    refreshInterval?: SortOrder
  }

  export type SalaryAdvancePolicyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxAdvancePercentage?: SortOrder
    maxAdvanceAmount?: SortOrder
    minServiceMonths?: SortOrder
    maxAdvancesPerYear?: SortOrder
    interestRate?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    monthlyDeductionPercentage?: SortOrder
  }

  export type SalaryAdvancePolicyAvgOrderByAggregateInput = {
    maxAdvancePercentage?: SortOrder
    maxAdvanceAmount?: SortOrder
    minServiceMonths?: SortOrder
    maxAdvancesPerYear?: SortOrder
    interestRate?: SortOrder
    monthlyDeductionPercentage?: SortOrder
  }

  export type SalaryAdvancePolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxAdvancePercentage?: SortOrder
    maxAdvanceAmount?: SortOrder
    minServiceMonths?: SortOrder
    maxAdvancesPerYear?: SortOrder
    interestRate?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    monthlyDeductionPercentage?: SortOrder
  }

  export type SalaryAdvancePolicyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxAdvancePercentage?: SortOrder
    maxAdvanceAmount?: SortOrder
    minServiceMonths?: SortOrder
    maxAdvancesPerYear?: SortOrder
    interestRate?: SortOrder
    requiresApproval?: SortOrder
    autoApprove?: SortOrder
    isActive?: SortOrder
    effectiveDate?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    monthlyDeductionPercentage?: SortOrder
  }

  export type SalaryAdvancePolicySumOrderByAggregateInput = {
    maxAdvancePercentage?: SortOrder
    maxAdvanceAmount?: SortOrder
    minServiceMonths?: SortOrder
    maxAdvancesPerYear?: SortOrder
    interestRate?: SortOrder
    monthlyDeductionPercentage?: SortOrder
  }

  export type SalaryAdvanceRequestCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    requestedAmount?: SortOrder
    approvedAmount?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    requestDate?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    rejectedAt?: SortOrder
    rejectedBy?: SortOrder
    rejectionReason?: SortOrder
    disbursedAt?: SortOrder
    disbursedBy?: SortOrder
    repaymentStartDate?: SortOrder
    repaymentEndDate?: SortOrder
    monthlyDeduction?: SortOrder
    totalRepaid?: SortOrder
    outstandingBalance?: SortOrder
    interestRate?: SortOrder
    totalInterest?: SortOrder
    comments?: SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type SalaryAdvanceRequestAvgOrderByAggregateInput = {
    requestedAmount?: SortOrder
    approvedAmount?: SortOrder
    monthlyDeduction?: SortOrder
    totalRepaid?: SortOrder
    outstandingBalance?: SortOrder
    interestRate?: SortOrder
    totalInterest?: SortOrder
  }

  export type SalaryAdvanceRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    requestedAmount?: SortOrder
    approvedAmount?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    requestDate?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    rejectedAt?: SortOrder
    rejectedBy?: SortOrder
    rejectionReason?: SortOrder
    disbursedAt?: SortOrder
    disbursedBy?: SortOrder
    repaymentStartDate?: SortOrder
    repaymentEndDate?: SortOrder
    monthlyDeduction?: SortOrder
    totalRepaid?: SortOrder
    outstandingBalance?: SortOrder
    interestRate?: SortOrder
    totalInterest?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type SalaryAdvanceRequestMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    requestedAmount?: SortOrder
    approvedAmount?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    requestDate?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    rejectedAt?: SortOrder
    rejectedBy?: SortOrder
    rejectionReason?: SortOrder
    disbursedAt?: SortOrder
    disbursedBy?: SortOrder
    repaymentStartDate?: SortOrder
    repaymentEndDate?: SortOrder
    monthlyDeduction?: SortOrder
    totalRepaid?: SortOrder
    outstandingBalance?: SortOrder
    interestRate?: SortOrder
    totalInterest?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type SalaryAdvanceRequestSumOrderByAggregateInput = {
    requestedAmount?: SortOrder
    approvedAmount?: SortOrder
    monthlyDeduction?: SortOrder
    totalRepaid?: SortOrder
    outstandingBalance?: SortOrder
    interestRate?: SortOrder
    totalInterest?: SortOrder
  }

  export type PayrollPeriodNullableScalarRelationFilter = {
    is?: PayrollPeriodWhereInput | null
    isNot?: PayrollPeriodWhereInput | null
  }

  export type SalaryAdvanceRequestScalarRelationFilter = {
    is?: SalaryAdvanceRequestWhereInput
    isNot?: SalaryAdvanceRequestWhereInput
  }

  export type SalaryAdvanceRepaymentCountOrderByAggregateInput = {
    id?: SortOrder
    salaryAdvanceRequestId?: SortOrder
    payrollPeriodId?: SortOrder
    repaymentDate?: SortOrder
    principalAmount?: SortOrder
    interestAmount?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type SalaryAdvanceRepaymentAvgOrderByAggregateInput = {
    principalAmount?: SortOrder
    interestAmount?: SortOrder
    totalAmount?: SortOrder
  }

  export type SalaryAdvanceRepaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    salaryAdvanceRequestId?: SortOrder
    payrollPeriodId?: SortOrder
    repaymentDate?: SortOrder
    principalAmount?: SortOrder
    interestAmount?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type SalaryAdvanceRepaymentMinOrderByAggregateInput = {
    id?: SortOrder
    salaryAdvanceRequestId?: SortOrder
    payrollPeriodId?: SortOrder
    repaymentDate?: SortOrder
    principalAmount?: SortOrder
    interestAmount?: SortOrder
    totalAmount?: SortOrder
    paymentMethod?: SortOrder
    reference?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type SalaryAdvanceRepaymentSumOrderByAggregateInput = {
    principalAmount?: SortOrder
    interestAmount?: SortOrder
    totalAmount?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
  }

  export type SecurityAlertCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    tenantId?: SortOrder
  }

  export type SecurityAlertMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    tenantId?: SortOrder
  }

  export type SecurityAlertMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    tenantId?: SortOrder
  }

  export type SecuritySettingsCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFactorAuth?: SortOrder
    passwordExpiry?: SortOrder
    sessionTimeout?: SortOrder
    ipWhitelist?: SortOrder
    auditLogging?: SortOrder
    encryptionAtRest?: SortOrder
  }

  export type SecuritySettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFactorAuth?: SortOrder
    passwordExpiry?: SortOrder
    sessionTimeout?: SortOrder
    ipWhitelist?: SortOrder
    auditLogging?: SortOrder
    encryptionAtRest?: SortOrder
  }

  export type SecuritySettingsMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    twoFactorAuth?: SortOrder
    passwordExpiry?: SortOrder
    sessionTimeout?: SortOrder
    ipWhitelist?: SortOrder
    auditLogging?: SortOrder
    encryptionAtRest?: SortOrder
  }

  export type WorkflowTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    steps?: SortOrder
    triggers?: SortOrder
    variables?: SortOrder
    createdBy?: SortOrder
    createdDate?: SortOrder
    lastModified?: SortOrder
    tenantId?: SortOrder
  }

  export type WorkflowTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdDate?: SortOrder
    lastModified?: SortOrder
    tenantId?: SortOrder
  }

  export type WorkflowTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdDate?: SortOrder
    lastModified?: SortOrder
    tenantId?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type TrainingCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    instructor?: SortOrder
    venue?: SortOrder
    requirements?: SortOrder
    certification?: SortOrder
    cost?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingAvgOrderByAggregateInput = {
    capacity?: SortOrder
    cost?: SortOrder
  }

  export type TrainingMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    instructor?: SortOrder
    venue?: SortOrder
    certification?: SortOrder
    cost?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    capacity?: SortOrder
    instructor?: SortOrder
    venue?: SortOrder
    certification?: SortOrder
    cost?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingSumOrderByAggregateInput = {
    capacity?: SortOrder
    cost?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type TrainingScalarRelationFilter = {
    is?: TrainingWhereInput
    isNot?: TrainingWhereInput
  }

  export type TrainingEnrollmentTrainingIdEmployeeIdCompoundUniqueInput = {
    trainingId: string
    employeeId: string
  }

  export type TrainingEnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    trainingId?: SortOrder
    employeeId?: SortOrder
    enrollmentDate?: SortOrder
    completionDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    score?: SortOrder
    certificateIssued?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingEnrollmentAvgOrderByAggregateInput = {
    progress?: SortOrder
    score?: SortOrder
  }

  export type TrainingEnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    trainingId?: SortOrder
    employeeId?: SortOrder
    enrollmentDate?: SortOrder
    completionDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    score?: SortOrder
    certificateIssued?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingEnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    trainingId?: SortOrder
    employeeId?: SortOrder
    enrollmentDate?: SortOrder
    completionDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    score?: SortOrder
    certificateIssued?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrainingEnrollmentSumOrderByAggregateInput = {
    progress?: SortOrder
    score?: SortOrder
  }

  export type IntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    config?: SortOrder
    createdAt?: SortOrder
    lastSyncTime?: SortOrder
    status?: SortOrder
    successRate?: SortOrder
    type?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntegrationAvgOrderByAggregateInput = {
    successRate?: SortOrder
  }

  export type IntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    lastSyncTime?: SortOrder
    status?: SortOrder
    successRate?: SortOrder
    type?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    lastSyncTime?: SortOrder
    status?: SortOrder
    successRate?: SortOrder
    type?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntegrationSumOrderByAggregateInput = {
    successRate?: SortOrder
  }

  export type IntegrationScalarRelationFilter = {
    is?: IntegrationWhereInput
    isNot?: IntegrationWhereInput
  }

  export type IntegrationLogCountOrderByAggregateInput = {
    id?: SortOrder
    integrationId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    details?: SortOrder
    event?: SortOrder
    status?: SortOrder
  }

  export type IntegrationLogMaxOrderByAggregateInput = {
    id?: SortOrder
    integrationId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    event?: SortOrder
    status?: SortOrder
  }

  export type IntegrationLogMinOrderByAggregateInput = {
    id?: SortOrder
    integrationId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
    event?: SortOrder
    status?: SortOrder
  }

  export type WorkflowCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
  }

  export type WorkflowMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
  }

  export type WorkflowMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
  }

  export type WorkflowScalarRelationFilter = {
    is?: WorkflowWhereInput
    isNot?: WorkflowWhereInput
  }

  export type WorkflowStatsCountOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    stats?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
  }

  export type WorkflowStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
  }

  export type WorkflowStatsMinOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    createdAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ApprovalCountOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ApprovalMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ApprovalMinOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ExperimentalFeatureCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    description?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    tenantId?: SortOrder
  }

  export type ExperimentalFeatureMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    description?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    tenantId?: SortOrder
  }

  export type ExperimentalFeatureMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    description?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    tenantId?: SortOrder
  }

  export type ApprovalCreateNestedManyWithoutTenantInput = {
    create?: XOR<ApprovalCreateWithoutTenantInput, ApprovalUncheckedCreateWithoutTenantInput> | ApprovalCreateWithoutTenantInput[] | ApprovalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutTenantInput | ApprovalCreateOrConnectWithoutTenantInput[]
    createMany?: ApprovalCreateManyTenantInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutTenantInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutTenantInput = {
    create?: XOR<AuditLogCreateWithoutTenantInput, AuditLogUncheckedCreateWithoutTenantInput> | AuditLogCreateWithoutTenantInput[] | AuditLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTenantInput | AuditLogCreateOrConnectWithoutTenantInput[]
    createMany?: AuditLogCreateManyTenantInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type BranchCreateNestedManyWithoutTenantInput = {
    create?: XOR<BranchCreateWithoutTenantInput, BranchUncheckedCreateWithoutTenantInput> | BranchCreateWithoutTenantInput[] | BranchUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutTenantInput | BranchCreateOrConnectWithoutTenantInput[]
    createMany?: BranchCreateManyTenantInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type DashboardCreateNestedManyWithoutTenantInput = {
    create?: XOR<DashboardCreateWithoutTenantInput, DashboardUncheckedCreateWithoutTenantInput> | DashboardCreateWithoutTenantInput[] | DashboardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutTenantInput | DashboardCreateOrConnectWithoutTenantInput[]
    createMany?: DashboardCreateManyTenantInputEnvelope
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutTenantInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type EmployeeCreateNestedManyWithoutTenantInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type ExperimentalFeatureCreateNestedManyWithoutTenantInput = {
    create?: XOR<ExperimentalFeatureCreateWithoutTenantInput, ExperimentalFeatureUncheckedCreateWithoutTenantInput> | ExperimentalFeatureCreateWithoutTenantInput[] | ExperimentalFeatureUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ExperimentalFeatureCreateOrConnectWithoutTenantInput | ExperimentalFeatureCreateOrConnectWithoutTenantInput[]
    createMany?: ExperimentalFeatureCreateManyTenantInputEnvelope
    connect?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
  }

  export type HolidayCreateNestedManyWithoutTenantInput = {
    create?: XOR<HolidayCreateWithoutTenantInput, HolidayUncheckedCreateWithoutTenantInput> | HolidayCreateWithoutTenantInput[] | HolidayUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: HolidayCreateOrConnectWithoutTenantInput | HolidayCreateOrConnectWithoutTenantInput[]
    createMany?: HolidayCreateManyTenantInputEnvelope
    connect?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
  }

  export type IntegrationLogCreateNestedManyWithoutTenantInput = {
    create?: XOR<IntegrationLogCreateWithoutTenantInput, IntegrationLogUncheckedCreateWithoutTenantInput> | IntegrationLogCreateWithoutTenantInput[] | IntegrationLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutTenantInput | IntegrationLogCreateOrConnectWithoutTenantInput[]
    createMany?: IntegrationLogCreateManyTenantInputEnvelope
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
  }

  export type IntegrationCreateNestedManyWithoutTenantInput = {
    create?: XOR<IntegrationCreateWithoutTenantInput, IntegrationUncheckedCreateWithoutTenantInput> | IntegrationCreateWithoutTenantInput[] | IntegrationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutTenantInput | IntegrationCreateOrConnectWithoutTenantInput[]
    createMany?: IntegrationCreateManyTenantInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type LeaveBalanceCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaveBalanceCreateWithoutTenantInput, LeaveBalanceUncheckedCreateWithoutTenantInput> | LeaveBalanceCreateWithoutTenantInput[] | LeaveBalanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutTenantInput | LeaveBalanceCreateOrConnectWithoutTenantInput[]
    createMany?: LeaveBalanceCreateManyTenantInputEnvelope
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
  }

  export type LeavePolicyCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeavePolicyCreateWithoutTenantInput, LeavePolicyUncheckedCreateWithoutTenantInput> | LeavePolicyCreateWithoutTenantInput[] | LeavePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutTenantInput | LeavePolicyCreateOrConnectWithoutTenantInput[]
    createMany?: LeavePolicyCreateManyTenantInputEnvelope
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaveRequestCreateWithoutTenantInput, LeaveRequestUncheckedCreateWithoutTenantInput> | LeaveRequestCreateWithoutTenantInput[] | LeaveRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutTenantInput | LeaveRequestCreateOrConnectWithoutTenantInput[]
    createMany?: LeaveRequestCreateManyTenantInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveTypeCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaveTypeCreateWithoutTenantInput, LeaveTypeUncheckedCreateWithoutTenantInput> | LeaveTypeCreateWithoutTenantInput[] | LeaveTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutTenantInput | LeaveTypeCreateOrConnectWithoutTenantInput[]
    createMany?: LeaveTypeCreateManyTenantInputEnvelope
    connect?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
  }

  export type PayStubCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayStubCreateWithoutTenantInput, PayStubUncheckedCreateWithoutTenantInput> | PayStubCreateWithoutTenantInput[] | PayStubUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutTenantInput | PayStubCreateOrConnectWithoutTenantInput[]
    createMany?: PayStubCreateManyTenantInputEnvelope
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
  }

  export type PayrollItemCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayrollItemCreateWithoutTenantInput, PayrollItemUncheckedCreateWithoutTenantInput> | PayrollItemCreateWithoutTenantInput[] | PayrollItemUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutTenantInput | PayrollItemCreateOrConnectWithoutTenantInput[]
    createMany?: PayrollItemCreateManyTenantInputEnvelope
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
  }

  export type PayrollPeriodCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayrollPeriodCreateWithoutTenantInput, PayrollPeriodUncheckedCreateWithoutTenantInput> | PayrollPeriodCreateWithoutTenantInput[] | PayrollPeriodUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutTenantInput | PayrollPeriodCreateOrConnectWithoutTenantInput[]
    createMany?: PayrollPeriodCreateManyTenantInputEnvelope
    connect?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
  }

  export type PayrollSettingsCreateNestedOneWithoutTenantInput = {
    create?: XOR<PayrollSettingsCreateWithoutTenantInput, PayrollSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: PayrollSettingsCreateOrConnectWithoutTenantInput
    connect?: PayrollSettingsWhereUniqueInput
  }

  export type PayrollCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayrollCreateWithoutTenantInput, PayrollUncheckedCreateWithoutTenantInput> | PayrollCreateWithoutTenantInput[] | PayrollUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutTenantInput | PayrollCreateOrConnectWithoutTenantInput[]
    createMany?: PayrollCreateManyTenantInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type PerformanceFeedbackCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutTenantInput, PerformanceFeedbackUncheckedCreateWithoutTenantInput> | PerformanceFeedbackCreateWithoutTenantInput[] | PerformanceFeedbackUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutTenantInput | PerformanceFeedbackCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceFeedbackCreateManyTenantInputEnvelope
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
  }

  export type PerformanceGoalCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceGoalCreateWithoutTenantInput, PerformanceGoalUncheckedCreateWithoutTenantInput> | PerformanceGoalCreateWithoutTenantInput[] | PerformanceGoalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutTenantInput | PerformanceGoalCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceGoalCreateManyTenantInputEnvelope
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
  }

  export type PerformanceRatingCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceRatingCreateWithoutTenantInput, PerformanceRatingUncheckedCreateWithoutTenantInput> | PerformanceRatingCreateWithoutTenantInput[] | PerformanceRatingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutTenantInput | PerformanceRatingCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceRatingCreateManyTenantInputEnvelope
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
  }

  export type PerformanceReviewCycleCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutTenantInput, PerformanceReviewCycleUncheckedCreateWithoutTenantInput> | PerformanceReviewCycleCreateWithoutTenantInput[] | PerformanceReviewCycleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutTenantInput | PerformanceReviewCycleCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceReviewCycleCreateManyTenantInputEnvelope
    connect?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
  }

  export type PerformanceReviewCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceReviewCreateWithoutTenantInput, PerformanceReviewUncheckedCreateWithoutTenantInput> | PerformanceReviewCreateWithoutTenantInput[] | PerformanceReviewUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutTenantInput | PerformanceReviewCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceReviewCreateManyTenantInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type ReportInstanceCreateNestedManyWithoutTenantInput = {
    create?: XOR<ReportInstanceCreateWithoutTenantInput, ReportInstanceUncheckedCreateWithoutTenantInput> | ReportInstanceCreateWithoutTenantInput[] | ReportInstanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTenantInput | ReportInstanceCreateOrConnectWithoutTenantInput[]
    createMany?: ReportInstanceCreateManyTenantInputEnvelope
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
  }

  export type ReportTemplateCreateNestedManyWithoutTenantInput = {
    create?: XOR<ReportTemplateCreateWithoutTenantInput, ReportTemplateUncheckedCreateWithoutTenantInput> | ReportTemplateCreateWithoutTenantInput[] | ReportTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportTemplateCreateOrConnectWithoutTenantInput | ReportTemplateCreateOrConnectWithoutTenantInput[]
    createMany?: ReportTemplateCreateManyTenantInputEnvelope
    connect?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
  }

  export type SalaryAdvancePolicyCreateNestedManyWithoutTenantInput = {
    create?: XOR<SalaryAdvancePolicyCreateWithoutTenantInput, SalaryAdvancePolicyUncheckedCreateWithoutTenantInput> | SalaryAdvancePolicyCreateWithoutTenantInput[] | SalaryAdvancePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvancePolicyCreateOrConnectWithoutTenantInput | SalaryAdvancePolicyCreateOrConnectWithoutTenantInput[]
    createMany?: SalaryAdvancePolicyCreateManyTenantInputEnvelope
    connect?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
  }

  export type SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput> | SalaryAdvanceRepaymentCreateWithoutTenantInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput | SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyTenantInputEnvelope
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
  }

  export type SalaryAdvanceRequestCreateNestedManyWithoutTenantInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutTenantInput, SalaryAdvanceRequestUncheckedCreateWithoutTenantInput> | SalaryAdvanceRequestCreateWithoutTenantInput[] | SalaryAdvanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutTenantInput | SalaryAdvanceRequestCreateOrConnectWithoutTenantInput[]
    createMany?: SalaryAdvanceRequestCreateManyTenantInputEnvelope
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
  }

  export type SecurityAlertCreateNestedManyWithoutTenantInput = {
    create?: XOR<SecurityAlertCreateWithoutTenantInput, SecurityAlertUncheckedCreateWithoutTenantInput> | SecurityAlertCreateWithoutTenantInput[] | SecurityAlertUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SecurityAlertCreateOrConnectWithoutTenantInput | SecurityAlertCreateOrConnectWithoutTenantInput[]
    createMany?: SecurityAlertCreateManyTenantInputEnvelope
    connect?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
  }

  export type SecuritySettingsCreateNestedOneWithoutTenantInput = {
    create?: XOR<SecuritySettingsCreateWithoutTenantInput, SecuritySettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingsCreateOrConnectWithoutTenantInput
    connect?: SecuritySettingsWhereUniqueInput
  }

  export type TaxBracketCreateNestedManyWithoutTenantInput = {
    create?: XOR<TaxBracketCreateWithoutTenantInput, TaxBracketUncheckedCreateWithoutTenantInput> | TaxBracketCreateWithoutTenantInput[] | TaxBracketUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TaxBracketCreateOrConnectWithoutTenantInput | TaxBracketCreateOrConnectWithoutTenantInput[]
    createMany?: TaxBracketCreateManyTenantInputEnvelope
    connect?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
  }

  export type TrainingCreateNestedManyWithoutTenantInput = {
    create?: XOR<TrainingCreateWithoutTenantInput, TrainingUncheckedCreateWithoutTenantInput> | TrainingCreateWithoutTenantInput[] | TrainingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTenantInput | TrainingCreateOrConnectWithoutTenantInput[]
    createMany?: TrainingCreateManyTenantInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type WorkflowStatsCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkflowStatsCreateWithoutTenantInput, WorkflowStatsUncheckedCreateWithoutTenantInput> | WorkflowStatsCreateWithoutTenantInput[] | WorkflowStatsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutTenantInput | WorkflowStatsCreateOrConnectWithoutTenantInput[]
    createMany?: WorkflowStatsCreateManyTenantInputEnvelope
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
  }

  export type WorkflowTemplateCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkflowTemplateCreateWithoutTenantInput, WorkflowTemplateUncheckedCreateWithoutTenantInput> | WorkflowTemplateCreateWithoutTenantInput[] | WorkflowTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutTenantInput | WorkflowTemplateCreateOrConnectWithoutTenantInput[]
    createMany?: WorkflowTemplateCreateManyTenantInputEnvelope
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
  }

  export type WorkflowCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkflowCreateWithoutTenantInput, WorkflowUncheckedCreateWithoutTenantInput> | WorkflowCreateWithoutTenantInput[] | WorkflowUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutTenantInput | WorkflowCreateOrConnectWithoutTenantInput[]
    createMany?: WorkflowCreateManyTenantInputEnvelope
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<ApprovalCreateWithoutTenantInput, ApprovalUncheckedCreateWithoutTenantInput> | ApprovalCreateWithoutTenantInput[] | ApprovalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutTenantInput | ApprovalCreateOrConnectWithoutTenantInput[]
    createMany?: ApprovalCreateManyTenantInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<AuditLogCreateWithoutTenantInput, AuditLogUncheckedCreateWithoutTenantInput> | AuditLogCreateWithoutTenantInput[] | AuditLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTenantInput | AuditLogCreateOrConnectWithoutTenantInput[]
    createMany?: AuditLogCreateManyTenantInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type BranchUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<BranchCreateWithoutTenantInput, BranchUncheckedCreateWithoutTenantInput> | BranchCreateWithoutTenantInput[] | BranchUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutTenantInput | BranchCreateOrConnectWithoutTenantInput[]
    createMany?: BranchCreateManyTenantInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type DashboardUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<DashboardCreateWithoutTenantInput, DashboardUncheckedCreateWithoutTenantInput> | DashboardCreateWithoutTenantInput[] | DashboardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutTenantInput | DashboardCreateOrConnectWithoutTenantInput[]
    createMany?: DashboardCreateManyTenantInputEnvelope
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<ExperimentalFeatureCreateWithoutTenantInput, ExperimentalFeatureUncheckedCreateWithoutTenantInput> | ExperimentalFeatureCreateWithoutTenantInput[] | ExperimentalFeatureUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ExperimentalFeatureCreateOrConnectWithoutTenantInput | ExperimentalFeatureCreateOrConnectWithoutTenantInput[]
    createMany?: ExperimentalFeatureCreateManyTenantInputEnvelope
    connect?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
  }

  export type HolidayUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<HolidayCreateWithoutTenantInput, HolidayUncheckedCreateWithoutTenantInput> | HolidayCreateWithoutTenantInput[] | HolidayUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: HolidayCreateOrConnectWithoutTenantInput | HolidayCreateOrConnectWithoutTenantInput[]
    createMany?: HolidayCreateManyTenantInputEnvelope
    connect?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
  }

  export type IntegrationLogUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<IntegrationLogCreateWithoutTenantInput, IntegrationLogUncheckedCreateWithoutTenantInput> | IntegrationLogCreateWithoutTenantInput[] | IntegrationLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutTenantInput | IntegrationLogCreateOrConnectWithoutTenantInput[]
    createMany?: IntegrationLogCreateManyTenantInputEnvelope
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
  }

  export type IntegrationUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<IntegrationCreateWithoutTenantInput, IntegrationUncheckedCreateWithoutTenantInput> | IntegrationCreateWithoutTenantInput[] | IntegrationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutTenantInput | IntegrationCreateOrConnectWithoutTenantInput[]
    createMany?: IntegrationCreateManyTenantInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaveBalanceCreateWithoutTenantInput, LeaveBalanceUncheckedCreateWithoutTenantInput> | LeaveBalanceCreateWithoutTenantInput[] | LeaveBalanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutTenantInput | LeaveBalanceCreateOrConnectWithoutTenantInput[]
    createMany?: LeaveBalanceCreateManyTenantInputEnvelope
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
  }

  export type LeavePolicyUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeavePolicyCreateWithoutTenantInput, LeavePolicyUncheckedCreateWithoutTenantInput> | LeavePolicyCreateWithoutTenantInput[] | LeavePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutTenantInput | LeavePolicyCreateOrConnectWithoutTenantInput[]
    createMany?: LeavePolicyCreateManyTenantInputEnvelope
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaveRequestCreateWithoutTenantInput, LeaveRequestUncheckedCreateWithoutTenantInput> | LeaveRequestCreateWithoutTenantInput[] | LeaveRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutTenantInput | LeaveRequestCreateOrConnectWithoutTenantInput[]
    createMany?: LeaveRequestCreateManyTenantInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveTypeUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaveTypeCreateWithoutTenantInput, LeaveTypeUncheckedCreateWithoutTenantInput> | LeaveTypeCreateWithoutTenantInput[] | LeaveTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutTenantInput | LeaveTypeCreateOrConnectWithoutTenantInput[]
    createMany?: LeaveTypeCreateManyTenantInputEnvelope
    connect?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
  }

  export type PayStubUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayStubCreateWithoutTenantInput, PayStubUncheckedCreateWithoutTenantInput> | PayStubCreateWithoutTenantInput[] | PayStubUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutTenantInput | PayStubCreateOrConnectWithoutTenantInput[]
    createMany?: PayStubCreateManyTenantInputEnvelope
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
  }

  export type PayrollItemUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayrollItemCreateWithoutTenantInput, PayrollItemUncheckedCreateWithoutTenantInput> | PayrollItemCreateWithoutTenantInput[] | PayrollItemUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutTenantInput | PayrollItemCreateOrConnectWithoutTenantInput[]
    createMany?: PayrollItemCreateManyTenantInputEnvelope
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
  }

  export type PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayrollPeriodCreateWithoutTenantInput, PayrollPeriodUncheckedCreateWithoutTenantInput> | PayrollPeriodCreateWithoutTenantInput[] | PayrollPeriodUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutTenantInput | PayrollPeriodCreateOrConnectWithoutTenantInput[]
    createMany?: PayrollPeriodCreateManyTenantInputEnvelope
    connect?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
  }

  export type PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<PayrollSettingsCreateWithoutTenantInput, PayrollSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: PayrollSettingsCreateOrConnectWithoutTenantInput
    connect?: PayrollSettingsWhereUniqueInput
  }

  export type PayrollUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PayrollCreateWithoutTenantInput, PayrollUncheckedCreateWithoutTenantInput> | PayrollCreateWithoutTenantInput[] | PayrollUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutTenantInput | PayrollCreateOrConnectWithoutTenantInput[]
    createMany?: PayrollCreateManyTenantInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutTenantInput, PerformanceFeedbackUncheckedCreateWithoutTenantInput> | PerformanceFeedbackCreateWithoutTenantInput[] | PerformanceFeedbackUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutTenantInput | PerformanceFeedbackCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceFeedbackCreateManyTenantInputEnvelope
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
  }

  export type PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceGoalCreateWithoutTenantInput, PerformanceGoalUncheckedCreateWithoutTenantInput> | PerformanceGoalCreateWithoutTenantInput[] | PerformanceGoalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutTenantInput | PerformanceGoalCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceGoalCreateManyTenantInputEnvelope
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
  }

  export type PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceRatingCreateWithoutTenantInput, PerformanceRatingUncheckedCreateWithoutTenantInput> | PerformanceRatingCreateWithoutTenantInput[] | PerformanceRatingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutTenantInput | PerformanceRatingCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceRatingCreateManyTenantInputEnvelope
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
  }

  export type PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutTenantInput, PerformanceReviewCycleUncheckedCreateWithoutTenantInput> | PerformanceReviewCycleCreateWithoutTenantInput[] | PerformanceReviewCycleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutTenantInput | PerformanceReviewCycleCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceReviewCycleCreateManyTenantInputEnvelope
    connect?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
  }

  export type PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PerformanceReviewCreateWithoutTenantInput, PerformanceReviewUncheckedCreateWithoutTenantInput> | PerformanceReviewCreateWithoutTenantInput[] | PerformanceReviewUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutTenantInput | PerformanceReviewCreateOrConnectWithoutTenantInput[]
    createMany?: PerformanceReviewCreateManyTenantInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type ReportInstanceUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<ReportInstanceCreateWithoutTenantInput, ReportInstanceUncheckedCreateWithoutTenantInput> | ReportInstanceCreateWithoutTenantInput[] | ReportInstanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTenantInput | ReportInstanceCreateOrConnectWithoutTenantInput[]
    createMany?: ReportInstanceCreateManyTenantInputEnvelope
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
  }

  export type ReportTemplateUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<ReportTemplateCreateWithoutTenantInput, ReportTemplateUncheckedCreateWithoutTenantInput> | ReportTemplateCreateWithoutTenantInput[] | ReportTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportTemplateCreateOrConnectWithoutTenantInput | ReportTemplateCreateOrConnectWithoutTenantInput[]
    createMany?: ReportTemplateCreateManyTenantInputEnvelope
    connect?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
  }

  export type SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<SalaryAdvancePolicyCreateWithoutTenantInput, SalaryAdvancePolicyUncheckedCreateWithoutTenantInput> | SalaryAdvancePolicyCreateWithoutTenantInput[] | SalaryAdvancePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvancePolicyCreateOrConnectWithoutTenantInput | SalaryAdvancePolicyCreateOrConnectWithoutTenantInput[]
    createMany?: SalaryAdvancePolicyCreateManyTenantInputEnvelope
    connect?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
  }

  export type SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput> | SalaryAdvanceRepaymentCreateWithoutTenantInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput | SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyTenantInputEnvelope
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
  }

  export type SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutTenantInput, SalaryAdvanceRequestUncheckedCreateWithoutTenantInput> | SalaryAdvanceRequestCreateWithoutTenantInput[] | SalaryAdvanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutTenantInput | SalaryAdvanceRequestCreateOrConnectWithoutTenantInput[]
    createMany?: SalaryAdvanceRequestCreateManyTenantInputEnvelope
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
  }

  export type SecurityAlertUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<SecurityAlertCreateWithoutTenantInput, SecurityAlertUncheckedCreateWithoutTenantInput> | SecurityAlertCreateWithoutTenantInput[] | SecurityAlertUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SecurityAlertCreateOrConnectWithoutTenantInput | SecurityAlertCreateOrConnectWithoutTenantInput[]
    createMany?: SecurityAlertCreateManyTenantInputEnvelope
    connect?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
  }

  export type SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<SecuritySettingsCreateWithoutTenantInput, SecuritySettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingsCreateOrConnectWithoutTenantInput
    connect?: SecuritySettingsWhereUniqueInput
  }

  export type TaxBracketUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<TaxBracketCreateWithoutTenantInput, TaxBracketUncheckedCreateWithoutTenantInput> | TaxBracketCreateWithoutTenantInput[] | TaxBracketUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TaxBracketCreateOrConnectWithoutTenantInput | TaxBracketCreateOrConnectWithoutTenantInput[]
    createMany?: TaxBracketCreateManyTenantInputEnvelope
    connect?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
  }

  export type TrainingUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<TrainingCreateWithoutTenantInput, TrainingUncheckedCreateWithoutTenantInput> | TrainingCreateWithoutTenantInput[] | TrainingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTenantInput | TrainingCreateOrConnectWithoutTenantInput[]
    createMany?: TrainingCreateManyTenantInputEnvelope
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkflowStatsCreateWithoutTenantInput, WorkflowStatsUncheckedCreateWithoutTenantInput> | WorkflowStatsCreateWithoutTenantInput[] | WorkflowStatsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutTenantInput | WorkflowStatsCreateOrConnectWithoutTenantInput[]
    createMany?: WorkflowStatsCreateManyTenantInputEnvelope
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
  }

  export type WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkflowTemplateCreateWithoutTenantInput, WorkflowTemplateUncheckedCreateWithoutTenantInput> | WorkflowTemplateCreateWithoutTenantInput[] | WorkflowTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutTenantInput | WorkflowTemplateCreateOrConnectWithoutTenantInput[]
    createMany?: WorkflowTemplateCreateManyTenantInputEnvelope
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
  }

  export type WorkflowUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<WorkflowCreateWithoutTenantInput, WorkflowUncheckedCreateWithoutTenantInput> | WorkflowCreateWithoutTenantInput[] | WorkflowUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutTenantInput | WorkflowCreateOrConnectWithoutTenantInput[]
    createMany?: WorkflowCreateManyTenantInputEnvelope
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ApprovalUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ApprovalCreateWithoutTenantInput, ApprovalUncheckedCreateWithoutTenantInput> | ApprovalCreateWithoutTenantInput[] | ApprovalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutTenantInput | ApprovalCreateOrConnectWithoutTenantInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutTenantInput | ApprovalUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ApprovalCreateManyTenantInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutTenantInput | ApprovalUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutTenantInput | ApprovalUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutTenantNestedInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTenantInput | NotificationUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTenantInput | NotificationUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTenantInput | NotificationUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AuditLogCreateWithoutTenantInput, AuditLogUncheckedCreateWithoutTenantInput> | AuditLogCreateWithoutTenantInput[] | AuditLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTenantInput | AuditLogCreateOrConnectWithoutTenantInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutTenantInput | AuditLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AuditLogCreateManyTenantInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutTenantInput | AuditLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutTenantInput | AuditLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type BranchUpdateManyWithoutTenantNestedInput = {
    create?: XOR<BranchCreateWithoutTenantInput, BranchUncheckedCreateWithoutTenantInput> | BranchCreateWithoutTenantInput[] | BranchUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutTenantInput | BranchCreateOrConnectWithoutTenantInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutTenantInput | BranchUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: BranchCreateManyTenantInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutTenantInput | BranchUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutTenantInput | BranchUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type DashboardUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DashboardCreateWithoutTenantInput, DashboardUncheckedCreateWithoutTenantInput> | DashboardCreateWithoutTenantInput[] | DashboardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutTenantInput | DashboardCreateOrConnectWithoutTenantInput[]
    upsert?: DashboardUpsertWithWhereUniqueWithoutTenantInput | DashboardUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DashboardCreateManyTenantInputEnvelope
    set?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    disconnect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    delete?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    update?: DashboardUpdateWithWhereUniqueWithoutTenantInput | DashboardUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DashboardUpdateManyWithWhereWithoutTenantInput | DashboardUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTenantInput | DepartmentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTenantInput | DepartmentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTenantInput | DepartmentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type EmployeeUpdateManyWithoutTenantNestedInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTenantInput | EmployeeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTenantInput | EmployeeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTenantInput | EmployeeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type ExperimentalFeatureUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ExperimentalFeatureCreateWithoutTenantInput, ExperimentalFeatureUncheckedCreateWithoutTenantInput> | ExperimentalFeatureCreateWithoutTenantInput[] | ExperimentalFeatureUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ExperimentalFeatureCreateOrConnectWithoutTenantInput | ExperimentalFeatureCreateOrConnectWithoutTenantInput[]
    upsert?: ExperimentalFeatureUpsertWithWhereUniqueWithoutTenantInput | ExperimentalFeatureUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ExperimentalFeatureCreateManyTenantInputEnvelope
    set?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    disconnect?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    delete?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    connect?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    update?: ExperimentalFeatureUpdateWithWhereUniqueWithoutTenantInput | ExperimentalFeatureUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ExperimentalFeatureUpdateManyWithWhereWithoutTenantInput | ExperimentalFeatureUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ExperimentalFeatureScalarWhereInput | ExperimentalFeatureScalarWhereInput[]
  }

  export type HolidayUpdateManyWithoutTenantNestedInput = {
    create?: XOR<HolidayCreateWithoutTenantInput, HolidayUncheckedCreateWithoutTenantInput> | HolidayCreateWithoutTenantInput[] | HolidayUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: HolidayCreateOrConnectWithoutTenantInput | HolidayCreateOrConnectWithoutTenantInput[]
    upsert?: HolidayUpsertWithWhereUniqueWithoutTenantInput | HolidayUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: HolidayCreateManyTenantInputEnvelope
    set?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    disconnect?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    delete?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    connect?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    update?: HolidayUpdateWithWhereUniqueWithoutTenantInput | HolidayUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: HolidayUpdateManyWithWhereWithoutTenantInput | HolidayUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: HolidayScalarWhereInput | HolidayScalarWhereInput[]
  }

  export type IntegrationLogUpdateManyWithoutTenantNestedInput = {
    create?: XOR<IntegrationLogCreateWithoutTenantInput, IntegrationLogUncheckedCreateWithoutTenantInput> | IntegrationLogCreateWithoutTenantInput[] | IntegrationLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutTenantInput | IntegrationLogCreateOrConnectWithoutTenantInput[]
    upsert?: IntegrationLogUpsertWithWhereUniqueWithoutTenantInput | IntegrationLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: IntegrationLogCreateManyTenantInputEnvelope
    set?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    disconnect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    delete?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    update?: IntegrationLogUpdateWithWhereUniqueWithoutTenantInput | IntegrationLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: IntegrationLogUpdateManyWithWhereWithoutTenantInput | IntegrationLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: IntegrationLogScalarWhereInput | IntegrationLogScalarWhereInput[]
  }

  export type IntegrationUpdateManyWithoutTenantNestedInput = {
    create?: XOR<IntegrationCreateWithoutTenantInput, IntegrationUncheckedCreateWithoutTenantInput> | IntegrationCreateWithoutTenantInput[] | IntegrationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutTenantInput | IntegrationCreateOrConnectWithoutTenantInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutTenantInput | IntegrationUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: IntegrationCreateManyTenantInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutTenantInput | IntegrationUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutTenantInput | IntegrationUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type LeaveBalanceUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaveBalanceCreateWithoutTenantInput, LeaveBalanceUncheckedCreateWithoutTenantInput> | LeaveBalanceCreateWithoutTenantInput[] | LeaveBalanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutTenantInput | LeaveBalanceCreateOrConnectWithoutTenantInput[]
    upsert?: LeaveBalanceUpsertWithWhereUniqueWithoutTenantInput | LeaveBalanceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaveBalanceCreateManyTenantInputEnvelope
    set?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    disconnect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    delete?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    update?: LeaveBalanceUpdateWithWhereUniqueWithoutTenantInput | LeaveBalanceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaveBalanceUpdateManyWithWhereWithoutTenantInput | LeaveBalanceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
  }

  export type LeavePolicyUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeavePolicyCreateWithoutTenantInput, LeavePolicyUncheckedCreateWithoutTenantInput> | LeavePolicyCreateWithoutTenantInput[] | LeavePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutTenantInput | LeavePolicyCreateOrConnectWithoutTenantInput[]
    upsert?: LeavePolicyUpsertWithWhereUniqueWithoutTenantInput | LeavePolicyUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeavePolicyCreateManyTenantInputEnvelope
    set?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    disconnect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    delete?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    update?: LeavePolicyUpdateWithWhereUniqueWithoutTenantInput | LeavePolicyUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeavePolicyUpdateManyWithWhereWithoutTenantInput | LeavePolicyUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeavePolicyScalarWhereInput | LeavePolicyScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutTenantInput, LeaveRequestUncheckedCreateWithoutTenantInput> | LeaveRequestCreateWithoutTenantInput[] | LeaveRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutTenantInput | LeaveRequestCreateOrConnectWithoutTenantInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutTenantInput | LeaveRequestUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaveRequestCreateManyTenantInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutTenantInput | LeaveRequestUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutTenantInput | LeaveRequestUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveTypeUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaveTypeCreateWithoutTenantInput, LeaveTypeUncheckedCreateWithoutTenantInput> | LeaveTypeCreateWithoutTenantInput[] | LeaveTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutTenantInput | LeaveTypeCreateOrConnectWithoutTenantInput[]
    upsert?: LeaveTypeUpsertWithWhereUniqueWithoutTenantInput | LeaveTypeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaveTypeCreateManyTenantInputEnvelope
    set?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    disconnect?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    delete?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    connect?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    update?: LeaveTypeUpdateWithWhereUniqueWithoutTenantInput | LeaveTypeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaveTypeUpdateManyWithWhereWithoutTenantInput | LeaveTypeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaveTypeScalarWhereInput | LeaveTypeScalarWhereInput[]
  }

  export type PayStubUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayStubCreateWithoutTenantInput, PayStubUncheckedCreateWithoutTenantInput> | PayStubCreateWithoutTenantInput[] | PayStubUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutTenantInput | PayStubCreateOrConnectWithoutTenantInput[]
    upsert?: PayStubUpsertWithWhereUniqueWithoutTenantInput | PayStubUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayStubCreateManyTenantInputEnvelope
    set?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    disconnect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    delete?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    update?: PayStubUpdateWithWhereUniqueWithoutTenantInput | PayStubUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayStubUpdateManyWithWhereWithoutTenantInput | PayStubUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
  }

  export type PayrollItemUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayrollItemCreateWithoutTenantInput, PayrollItemUncheckedCreateWithoutTenantInput> | PayrollItemCreateWithoutTenantInput[] | PayrollItemUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutTenantInput | PayrollItemCreateOrConnectWithoutTenantInput[]
    upsert?: PayrollItemUpsertWithWhereUniqueWithoutTenantInput | PayrollItemUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayrollItemCreateManyTenantInputEnvelope
    set?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    disconnect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    delete?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    update?: PayrollItemUpdateWithWhereUniqueWithoutTenantInput | PayrollItemUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayrollItemUpdateManyWithWhereWithoutTenantInput | PayrollItemUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayrollItemScalarWhereInput | PayrollItemScalarWhereInput[]
  }

  export type PayrollPeriodUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayrollPeriodCreateWithoutTenantInput, PayrollPeriodUncheckedCreateWithoutTenantInput> | PayrollPeriodCreateWithoutTenantInput[] | PayrollPeriodUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutTenantInput | PayrollPeriodCreateOrConnectWithoutTenantInput[]
    upsert?: PayrollPeriodUpsertWithWhereUniqueWithoutTenantInput | PayrollPeriodUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayrollPeriodCreateManyTenantInputEnvelope
    set?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    disconnect?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    delete?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    connect?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    update?: PayrollPeriodUpdateWithWhereUniqueWithoutTenantInput | PayrollPeriodUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayrollPeriodUpdateManyWithWhereWithoutTenantInput | PayrollPeriodUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayrollPeriodScalarWhereInput | PayrollPeriodScalarWhereInput[]
  }

  export type PayrollSettingsUpdateOneWithoutTenantNestedInput = {
    create?: XOR<PayrollSettingsCreateWithoutTenantInput, PayrollSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: PayrollSettingsCreateOrConnectWithoutTenantInput
    upsert?: PayrollSettingsUpsertWithoutTenantInput
    disconnect?: PayrollSettingsWhereInput | boolean
    delete?: PayrollSettingsWhereInput | boolean
    connect?: PayrollSettingsWhereUniqueInput
    update?: XOR<XOR<PayrollSettingsUpdateToOneWithWhereWithoutTenantInput, PayrollSettingsUpdateWithoutTenantInput>, PayrollSettingsUncheckedUpdateWithoutTenantInput>
  }

  export type PayrollUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayrollCreateWithoutTenantInput, PayrollUncheckedCreateWithoutTenantInput> | PayrollCreateWithoutTenantInput[] | PayrollUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutTenantInput | PayrollCreateOrConnectWithoutTenantInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutTenantInput | PayrollUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayrollCreateManyTenantInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutTenantInput | PayrollUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutTenantInput | PayrollUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type PerformanceFeedbackUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutTenantInput, PerformanceFeedbackUncheckedCreateWithoutTenantInput> | PerformanceFeedbackCreateWithoutTenantInput[] | PerformanceFeedbackUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutTenantInput | PerformanceFeedbackCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceFeedbackUpsertWithWhereUniqueWithoutTenantInput | PerformanceFeedbackUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceFeedbackCreateManyTenantInputEnvelope
    set?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    disconnect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    delete?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    update?: PerformanceFeedbackUpdateWithWhereUniqueWithoutTenantInput | PerformanceFeedbackUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceFeedbackUpdateManyWithWhereWithoutTenantInput | PerformanceFeedbackUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceFeedbackScalarWhereInput | PerformanceFeedbackScalarWhereInput[]
  }

  export type PerformanceGoalUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceGoalCreateWithoutTenantInput, PerformanceGoalUncheckedCreateWithoutTenantInput> | PerformanceGoalCreateWithoutTenantInput[] | PerformanceGoalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutTenantInput | PerformanceGoalCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceGoalUpsertWithWhereUniqueWithoutTenantInput | PerformanceGoalUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceGoalCreateManyTenantInputEnvelope
    set?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    disconnect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    delete?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    update?: PerformanceGoalUpdateWithWhereUniqueWithoutTenantInput | PerformanceGoalUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceGoalUpdateManyWithWhereWithoutTenantInput | PerformanceGoalUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
  }

  export type PerformanceRatingUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceRatingCreateWithoutTenantInput, PerformanceRatingUncheckedCreateWithoutTenantInput> | PerformanceRatingCreateWithoutTenantInput[] | PerformanceRatingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutTenantInput | PerformanceRatingCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceRatingUpsertWithWhereUniqueWithoutTenantInput | PerformanceRatingUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceRatingCreateManyTenantInputEnvelope
    set?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    disconnect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    delete?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    update?: PerformanceRatingUpdateWithWhereUniqueWithoutTenantInput | PerformanceRatingUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceRatingUpdateManyWithWhereWithoutTenantInput | PerformanceRatingUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceRatingScalarWhereInput | PerformanceRatingScalarWhereInput[]
  }

  export type PerformanceReviewCycleUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutTenantInput, PerformanceReviewCycleUncheckedCreateWithoutTenantInput> | PerformanceReviewCycleCreateWithoutTenantInput[] | PerformanceReviewCycleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutTenantInput | PerformanceReviewCycleCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceReviewCycleUpsertWithWhereUniqueWithoutTenantInput | PerformanceReviewCycleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceReviewCycleCreateManyTenantInputEnvelope
    set?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    disconnect?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    delete?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    connect?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    update?: PerformanceReviewCycleUpdateWithWhereUniqueWithoutTenantInput | PerformanceReviewCycleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceReviewCycleUpdateManyWithWhereWithoutTenantInput | PerformanceReviewCycleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceReviewCycleScalarWhereInput | PerformanceReviewCycleScalarWhereInput[]
  }

  export type PerformanceReviewUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutTenantInput, PerformanceReviewUncheckedCreateWithoutTenantInput> | PerformanceReviewCreateWithoutTenantInput[] | PerformanceReviewUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutTenantInput | PerformanceReviewCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutTenantInput | PerformanceReviewUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceReviewCreateManyTenantInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutTenantInput | PerformanceReviewUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutTenantInput | PerformanceReviewUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type ReportInstanceUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ReportInstanceCreateWithoutTenantInput, ReportInstanceUncheckedCreateWithoutTenantInput> | ReportInstanceCreateWithoutTenantInput[] | ReportInstanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTenantInput | ReportInstanceCreateOrConnectWithoutTenantInput[]
    upsert?: ReportInstanceUpsertWithWhereUniqueWithoutTenantInput | ReportInstanceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ReportInstanceCreateManyTenantInputEnvelope
    set?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    disconnect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    delete?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    update?: ReportInstanceUpdateWithWhereUniqueWithoutTenantInput | ReportInstanceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ReportInstanceUpdateManyWithWhereWithoutTenantInput | ReportInstanceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ReportInstanceScalarWhereInput | ReportInstanceScalarWhereInput[]
  }

  export type ReportTemplateUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ReportTemplateCreateWithoutTenantInput, ReportTemplateUncheckedCreateWithoutTenantInput> | ReportTemplateCreateWithoutTenantInput[] | ReportTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportTemplateCreateOrConnectWithoutTenantInput | ReportTemplateCreateOrConnectWithoutTenantInput[]
    upsert?: ReportTemplateUpsertWithWhereUniqueWithoutTenantInput | ReportTemplateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ReportTemplateCreateManyTenantInputEnvelope
    set?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    disconnect?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    delete?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    connect?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    update?: ReportTemplateUpdateWithWhereUniqueWithoutTenantInput | ReportTemplateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ReportTemplateUpdateManyWithWhereWithoutTenantInput | ReportTemplateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ReportTemplateScalarWhereInput | ReportTemplateScalarWhereInput[]
  }

  export type SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SalaryAdvancePolicyCreateWithoutTenantInput, SalaryAdvancePolicyUncheckedCreateWithoutTenantInput> | SalaryAdvancePolicyCreateWithoutTenantInput[] | SalaryAdvancePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvancePolicyCreateOrConnectWithoutTenantInput | SalaryAdvancePolicyCreateOrConnectWithoutTenantInput[]
    upsert?: SalaryAdvancePolicyUpsertWithWhereUniqueWithoutTenantInput | SalaryAdvancePolicyUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SalaryAdvancePolicyCreateManyTenantInputEnvelope
    set?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    disconnect?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    delete?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    connect?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    update?: SalaryAdvancePolicyUpdateWithWhereUniqueWithoutTenantInput | SalaryAdvancePolicyUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SalaryAdvancePolicyUpdateManyWithWhereWithoutTenantInput | SalaryAdvancePolicyUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SalaryAdvancePolicyScalarWhereInput | SalaryAdvancePolicyScalarWhereInput[]
  }

  export type SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput> | SalaryAdvanceRepaymentCreateWithoutTenantInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput | SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput[]
    upsert?: SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutTenantInput | SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyTenantInputEnvelope
    set?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    disconnect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    delete?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    update?: SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutTenantInput | SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SalaryAdvanceRepaymentUpdateManyWithWhereWithoutTenantInput | SalaryAdvanceRepaymentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
  }

  export type SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutTenantInput, SalaryAdvanceRequestUncheckedCreateWithoutTenantInput> | SalaryAdvanceRequestCreateWithoutTenantInput[] | SalaryAdvanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutTenantInput | SalaryAdvanceRequestCreateOrConnectWithoutTenantInput[]
    upsert?: SalaryAdvanceRequestUpsertWithWhereUniqueWithoutTenantInput | SalaryAdvanceRequestUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SalaryAdvanceRequestCreateManyTenantInputEnvelope
    set?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    disconnect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    delete?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    update?: SalaryAdvanceRequestUpdateWithWhereUniqueWithoutTenantInput | SalaryAdvanceRequestUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SalaryAdvanceRequestUpdateManyWithWhereWithoutTenantInput | SalaryAdvanceRequestUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
  }

  export type SecurityAlertUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SecurityAlertCreateWithoutTenantInput, SecurityAlertUncheckedCreateWithoutTenantInput> | SecurityAlertCreateWithoutTenantInput[] | SecurityAlertUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SecurityAlertCreateOrConnectWithoutTenantInput | SecurityAlertCreateOrConnectWithoutTenantInput[]
    upsert?: SecurityAlertUpsertWithWhereUniqueWithoutTenantInput | SecurityAlertUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SecurityAlertCreateManyTenantInputEnvelope
    set?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    disconnect?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    delete?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    connect?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    update?: SecurityAlertUpdateWithWhereUniqueWithoutTenantInput | SecurityAlertUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SecurityAlertUpdateManyWithWhereWithoutTenantInput | SecurityAlertUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SecurityAlertScalarWhereInput | SecurityAlertScalarWhereInput[]
  }

  export type SecuritySettingsUpdateOneWithoutTenantNestedInput = {
    create?: XOR<SecuritySettingsCreateWithoutTenantInput, SecuritySettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingsCreateOrConnectWithoutTenantInput
    upsert?: SecuritySettingsUpsertWithoutTenantInput
    disconnect?: SecuritySettingsWhereInput | boolean
    delete?: SecuritySettingsWhereInput | boolean
    connect?: SecuritySettingsWhereUniqueInput
    update?: XOR<XOR<SecuritySettingsUpdateToOneWithWhereWithoutTenantInput, SecuritySettingsUpdateWithoutTenantInput>, SecuritySettingsUncheckedUpdateWithoutTenantInput>
  }

  export type TaxBracketUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TaxBracketCreateWithoutTenantInput, TaxBracketUncheckedCreateWithoutTenantInput> | TaxBracketCreateWithoutTenantInput[] | TaxBracketUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TaxBracketCreateOrConnectWithoutTenantInput | TaxBracketCreateOrConnectWithoutTenantInput[]
    upsert?: TaxBracketUpsertWithWhereUniqueWithoutTenantInput | TaxBracketUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TaxBracketCreateManyTenantInputEnvelope
    set?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    disconnect?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    delete?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    connect?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    update?: TaxBracketUpdateWithWhereUniqueWithoutTenantInput | TaxBracketUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TaxBracketUpdateManyWithWhereWithoutTenantInput | TaxBracketUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TaxBracketScalarWhereInput | TaxBracketScalarWhereInput[]
  }

  export type TrainingUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TrainingCreateWithoutTenantInput, TrainingUncheckedCreateWithoutTenantInput> | TrainingCreateWithoutTenantInput[] | TrainingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTenantInput | TrainingCreateOrConnectWithoutTenantInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutTenantInput | TrainingUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TrainingCreateManyTenantInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutTenantInput | TrainingUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutTenantInput | TrainingUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WorkflowStatsUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkflowStatsCreateWithoutTenantInput, WorkflowStatsUncheckedCreateWithoutTenantInput> | WorkflowStatsCreateWithoutTenantInput[] | WorkflowStatsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutTenantInput | WorkflowStatsCreateOrConnectWithoutTenantInput[]
    upsert?: WorkflowStatsUpsertWithWhereUniqueWithoutTenantInput | WorkflowStatsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkflowStatsCreateManyTenantInputEnvelope
    set?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    disconnect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    delete?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    update?: WorkflowStatsUpdateWithWhereUniqueWithoutTenantInput | WorkflowStatsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkflowStatsUpdateManyWithWhereWithoutTenantInput | WorkflowStatsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkflowStatsScalarWhereInput | WorkflowStatsScalarWhereInput[]
  }

  export type WorkflowTemplateUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutTenantInput, WorkflowTemplateUncheckedCreateWithoutTenantInput> | WorkflowTemplateCreateWithoutTenantInput[] | WorkflowTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutTenantInput | WorkflowTemplateCreateOrConnectWithoutTenantInput[]
    upsert?: WorkflowTemplateUpsertWithWhereUniqueWithoutTenantInput | WorkflowTemplateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkflowTemplateCreateManyTenantInputEnvelope
    set?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    disconnect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    delete?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    update?: WorkflowTemplateUpdateWithWhereUniqueWithoutTenantInput | WorkflowTemplateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkflowTemplateUpdateManyWithWhereWithoutTenantInput | WorkflowTemplateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
  }

  export type WorkflowUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkflowCreateWithoutTenantInput, WorkflowUncheckedCreateWithoutTenantInput> | WorkflowCreateWithoutTenantInput[] | WorkflowUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutTenantInput | WorkflowCreateOrConnectWithoutTenantInput[]
    upsert?: WorkflowUpsertWithWhereUniqueWithoutTenantInput | WorkflowUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkflowCreateManyTenantInputEnvelope
    set?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    disconnect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    delete?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    update?: WorkflowUpdateWithWhereUniqueWithoutTenantInput | WorkflowUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkflowUpdateManyWithWhereWithoutTenantInput | WorkflowUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ApprovalCreateWithoutTenantInput, ApprovalUncheckedCreateWithoutTenantInput> | ApprovalCreateWithoutTenantInput[] | ApprovalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutTenantInput | ApprovalCreateOrConnectWithoutTenantInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutTenantInput | ApprovalUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ApprovalCreateManyTenantInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutTenantInput | ApprovalUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutTenantInput | ApprovalUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTenantInput | NotificationUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTenantInput | NotificationUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTenantInput | NotificationUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<AuditLogCreateWithoutTenantInput, AuditLogUncheckedCreateWithoutTenantInput> | AuditLogCreateWithoutTenantInput[] | AuditLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutTenantInput | AuditLogCreateOrConnectWithoutTenantInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutTenantInput | AuditLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: AuditLogCreateManyTenantInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutTenantInput | AuditLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutTenantInput | AuditLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type BranchUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<BranchCreateWithoutTenantInput, BranchUncheckedCreateWithoutTenantInput> | BranchCreateWithoutTenantInput[] | BranchUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutTenantInput | BranchCreateOrConnectWithoutTenantInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutTenantInput | BranchUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: BranchCreateManyTenantInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutTenantInput | BranchUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutTenantInput | BranchUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type DashboardUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DashboardCreateWithoutTenantInput, DashboardUncheckedCreateWithoutTenantInput> | DashboardCreateWithoutTenantInput[] | DashboardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutTenantInput | DashboardCreateOrConnectWithoutTenantInput[]
    upsert?: DashboardUpsertWithWhereUniqueWithoutTenantInput | DashboardUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DashboardCreateManyTenantInputEnvelope
    set?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    disconnect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    delete?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    update?: DashboardUpdateWithWhereUniqueWithoutTenantInput | DashboardUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DashboardUpdateManyWithWhereWithoutTenantInput | DashboardUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTenantInput | DepartmentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTenantInput | DepartmentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTenantInput | DepartmentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput> | EmployeeCreateWithoutTenantInput[] | EmployeeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutTenantInput | EmployeeCreateOrConnectWithoutTenantInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutTenantInput | EmployeeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: EmployeeCreateManyTenantInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutTenantInput | EmployeeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutTenantInput | EmployeeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ExperimentalFeatureCreateWithoutTenantInput, ExperimentalFeatureUncheckedCreateWithoutTenantInput> | ExperimentalFeatureCreateWithoutTenantInput[] | ExperimentalFeatureUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ExperimentalFeatureCreateOrConnectWithoutTenantInput | ExperimentalFeatureCreateOrConnectWithoutTenantInput[]
    upsert?: ExperimentalFeatureUpsertWithWhereUniqueWithoutTenantInput | ExperimentalFeatureUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ExperimentalFeatureCreateManyTenantInputEnvelope
    set?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    disconnect?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    delete?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    connect?: ExperimentalFeatureWhereUniqueInput | ExperimentalFeatureWhereUniqueInput[]
    update?: ExperimentalFeatureUpdateWithWhereUniqueWithoutTenantInput | ExperimentalFeatureUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ExperimentalFeatureUpdateManyWithWhereWithoutTenantInput | ExperimentalFeatureUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ExperimentalFeatureScalarWhereInput | ExperimentalFeatureScalarWhereInput[]
  }

  export type HolidayUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<HolidayCreateWithoutTenantInput, HolidayUncheckedCreateWithoutTenantInput> | HolidayCreateWithoutTenantInput[] | HolidayUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: HolidayCreateOrConnectWithoutTenantInput | HolidayCreateOrConnectWithoutTenantInput[]
    upsert?: HolidayUpsertWithWhereUniqueWithoutTenantInput | HolidayUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: HolidayCreateManyTenantInputEnvelope
    set?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    disconnect?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    delete?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    connect?: HolidayWhereUniqueInput | HolidayWhereUniqueInput[]
    update?: HolidayUpdateWithWhereUniqueWithoutTenantInput | HolidayUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: HolidayUpdateManyWithWhereWithoutTenantInput | HolidayUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: HolidayScalarWhereInput | HolidayScalarWhereInput[]
  }

  export type IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<IntegrationLogCreateWithoutTenantInput, IntegrationLogUncheckedCreateWithoutTenantInput> | IntegrationLogCreateWithoutTenantInput[] | IntegrationLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutTenantInput | IntegrationLogCreateOrConnectWithoutTenantInput[]
    upsert?: IntegrationLogUpsertWithWhereUniqueWithoutTenantInput | IntegrationLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: IntegrationLogCreateManyTenantInputEnvelope
    set?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    disconnect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    delete?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    update?: IntegrationLogUpdateWithWhereUniqueWithoutTenantInput | IntegrationLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: IntegrationLogUpdateManyWithWhereWithoutTenantInput | IntegrationLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: IntegrationLogScalarWhereInput | IntegrationLogScalarWhereInput[]
  }

  export type IntegrationUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<IntegrationCreateWithoutTenantInput, IntegrationUncheckedCreateWithoutTenantInput> | IntegrationCreateWithoutTenantInput[] | IntegrationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutTenantInput | IntegrationCreateOrConnectWithoutTenantInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutTenantInput | IntegrationUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: IntegrationCreateManyTenantInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutTenantInput | IntegrationUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutTenantInput | IntegrationUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaveBalanceCreateWithoutTenantInput, LeaveBalanceUncheckedCreateWithoutTenantInput> | LeaveBalanceCreateWithoutTenantInput[] | LeaveBalanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutTenantInput | LeaveBalanceCreateOrConnectWithoutTenantInput[]
    upsert?: LeaveBalanceUpsertWithWhereUniqueWithoutTenantInput | LeaveBalanceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaveBalanceCreateManyTenantInputEnvelope
    set?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    disconnect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    delete?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    update?: LeaveBalanceUpdateWithWhereUniqueWithoutTenantInput | LeaveBalanceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaveBalanceUpdateManyWithWhereWithoutTenantInput | LeaveBalanceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
  }

  export type LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeavePolicyCreateWithoutTenantInput, LeavePolicyUncheckedCreateWithoutTenantInput> | LeavePolicyCreateWithoutTenantInput[] | LeavePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutTenantInput | LeavePolicyCreateOrConnectWithoutTenantInput[]
    upsert?: LeavePolicyUpsertWithWhereUniqueWithoutTenantInput | LeavePolicyUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeavePolicyCreateManyTenantInputEnvelope
    set?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    disconnect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    delete?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    update?: LeavePolicyUpdateWithWhereUniqueWithoutTenantInput | LeavePolicyUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeavePolicyUpdateManyWithWhereWithoutTenantInput | LeavePolicyUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeavePolicyScalarWhereInput | LeavePolicyScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutTenantInput, LeaveRequestUncheckedCreateWithoutTenantInput> | LeaveRequestCreateWithoutTenantInput[] | LeaveRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutTenantInput | LeaveRequestCreateOrConnectWithoutTenantInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutTenantInput | LeaveRequestUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaveRequestCreateManyTenantInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutTenantInput | LeaveRequestUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutTenantInput | LeaveRequestUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaveTypeCreateWithoutTenantInput, LeaveTypeUncheckedCreateWithoutTenantInput> | LeaveTypeCreateWithoutTenantInput[] | LeaveTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutTenantInput | LeaveTypeCreateOrConnectWithoutTenantInput[]
    upsert?: LeaveTypeUpsertWithWhereUniqueWithoutTenantInput | LeaveTypeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaveTypeCreateManyTenantInputEnvelope
    set?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    disconnect?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    delete?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    connect?: LeaveTypeWhereUniqueInput | LeaveTypeWhereUniqueInput[]
    update?: LeaveTypeUpdateWithWhereUniqueWithoutTenantInput | LeaveTypeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaveTypeUpdateManyWithWhereWithoutTenantInput | LeaveTypeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaveTypeScalarWhereInput | LeaveTypeScalarWhereInput[]
  }

  export type PayStubUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayStubCreateWithoutTenantInput, PayStubUncheckedCreateWithoutTenantInput> | PayStubCreateWithoutTenantInput[] | PayStubUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutTenantInput | PayStubCreateOrConnectWithoutTenantInput[]
    upsert?: PayStubUpsertWithWhereUniqueWithoutTenantInput | PayStubUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayStubCreateManyTenantInputEnvelope
    set?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    disconnect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    delete?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    update?: PayStubUpdateWithWhereUniqueWithoutTenantInput | PayStubUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayStubUpdateManyWithWhereWithoutTenantInput | PayStubUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
  }

  export type PayrollItemUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayrollItemCreateWithoutTenantInput, PayrollItemUncheckedCreateWithoutTenantInput> | PayrollItemCreateWithoutTenantInput[] | PayrollItemUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutTenantInput | PayrollItemCreateOrConnectWithoutTenantInput[]
    upsert?: PayrollItemUpsertWithWhereUniqueWithoutTenantInput | PayrollItemUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayrollItemCreateManyTenantInputEnvelope
    set?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    disconnect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    delete?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    update?: PayrollItemUpdateWithWhereUniqueWithoutTenantInput | PayrollItemUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayrollItemUpdateManyWithWhereWithoutTenantInput | PayrollItemUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayrollItemScalarWhereInput | PayrollItemScalarWhereInput[]
  }

  export type PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayrollPeriodCreateWithoutTenantInput, PayrollPeriodUncheckedCreateWithoutTenantInput> | PayrollPeriodCreateWithoutTenantInput[] | PayrollPeriodUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutTenantInput | PayrollPeriodCreateOrConnectWithoutTenantInput[]
    upsert?: PayrollPeriodUpsertWithWhereUniqueWithoutTenantInput | PayrollPeriodUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayrollPeriodCreateManyTenantInputEnvelope
    set?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    disconnect?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    delete?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    connect?: PayrollPeriodWhereUniqueInput | PayrollPeriodWhereUniqueInput[]
    update?: PayrollPeriodUpdateWithWhereUniqueWithoutTenantInput | PayrollPeriodUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayrollPeriodUpdateManyWithWhereWithoutTenantInput | PayrollPeriodUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayrollPeriodScalarWhereInput | PayrollPeriodScalarWhereInput[]
  }

  export type PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<PayrollSettingsCreateWithoutTenantInput, PayrollSettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: PayrollSettingsCreateOrConnectWithoutTenantInput
    upsert?: PayrollSettingsUpsertWithoutTenantInput
    disconnect?: PayrollSettingsWhereInput | boolean
    delete?: PayrollSettingsWhereInput | boolean
    connect?: PayrollSettingsWhereUniqueInput
    update?: XOR<XOR<PayrollSettingsUpdateToOneWithWhereWithoutTenantInput, PayrollSettingsUpdateWithoutTenantInput>, PayrollSettingsUncheckedUpdateWithoutTenantInput>
  }

  export type PayrollUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PayrollCreateWithoutTenantInput, PayrollUncheckedCreateWithoutTenantInput> | PayrollCreateWithoutTenantInput[] | PayrollUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutTenantInput | PayrollCreateOrConnectWithoutTenantInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutTenantInput | PayrollUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PayrollCreateManyTenantInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutTenantInput | PayrollUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutTenantInput | PayrollUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutTenantInput, PerformanceFeedbackUncheckedCreateWithoutTenantInput> | PerformanceFeedbackCreateWithoutTenantInput[] | PerformanceFeedbackUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutTenantInput | PerformanceFeedbackCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceFeedbackUpsertWithWhereUniqueWithoutTenantInput | PerformanceFeedbackUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceFeedbackCreateManyTenantInputEnvelope
    set?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    disconnect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    delete?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    update?: PerformanceFeedbackUpdateWithWhereUniqueWithoutTenantInput | PerformanceFeedbackUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceFeedbackUpdateManyWithWhereWithoutTenantInput | PerformanceFeedbackUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceFeedbackScalarWhereInput | PerformanceFeedbackScalarWhereInput[]
  }

  export type PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceGoalCreateWithoutTenantInput, PerformanceGoalUncheckedCreateWithoutTenantInput> | PerformanceGoalCreateWithoutTenantInput[] | PerformanceGoalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutTenantInput | PerformanceGoalCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceGoalUpsertWithWhereUniqueWithoutTenantInput | PerformanceGoalUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceGoalCreateManyTenantInputEnvelope
    set?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    disconnect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    delete?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    update?: PerformanceGoalUpdateWithWhereUniqueWithoutTenantInput | PerformanceGoalUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceGoalUpdateManyWithWhereWithoutTenantInput | PerformanceGoalUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
  }

  export type PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceRatingCreateWithoutTenantInput, PerformanceRatingUncheckedCreateWithoutTenantInput> | PerformanceRatingCreateWithoutTenantInput[] | PerformanceRatingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutTenantInput | PerformanceRatingCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceRatingUpsertWithWhereUniqueWithoutTenantInput | PerformanceRatingUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceRatingCreateManyTenantInputEnvelope
    set?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    disconnect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    delete?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    update?: PerformanceRatingUpdateWithWhereUniqueWithoutTenantInput | PerformanceRatingUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceRatingUpdateManyWithWhereWithoutTenantInput | PerformanceRatingUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceRatingScalarWhereInput | PerformanceRatingScalarWhereInput[]
  }

  export type PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutTenantInput, PerformanceReviewCycleUncheckedCreateWithoutTenantInput> | PerformanceReviewCycleCreateWithoutTenantInput[] | PerformanceReviewCycleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutTenantInput | PerformanceReviewCycleCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceReviewCycleUpsertWithWhereUniqueWithoutTenantInput | PerformanceReviewCycleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceReviewCycleCreateManyTenantInputEnvelope
    set?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    disconnect?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    delete?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    connect?: PerformanceReviewCycleWhereUniqueInput | PerformanceReviewCycleWhereUniqueInput[]
    update?: PerformanceReviewCycleUpdateWithWhereUniqueWithoutTenantInput | PerformanceReviewCycleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceReviewCycleUpdateManyWithWhereWithoutTenantInput | PerformanceReviewCycleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceReviewCycleScalarWhereInput | PerformanceReviewCycleScalarWhereInput[]
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutTenantInput, PerformanceReviewUncheckedCreateWithoutTenantInput> | PerformanceReviewCreateWithoutTenantInput[] | PerformanceReviewUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutTenantInput | PerformanceReviewCreateOrConnectWithoutTenantInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutTenantInput | PerformanceReviewUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PerformanceReviewCreateManyTenantInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutTenantInput | PerformanceReviewUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutTenantInput | PerformanceReviewUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ReportInstanceCreateWithoutTenantInput, ReportInstanceUncheckedCreateWithoutTenantInput> | ReportInstanceCreateWithoutTenantInput[] | ReportInstanceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTenantInput | ReportInstanceCreateOrConnectWithoutTenantInput[]
    upsert?: ReportInstanceUpsertWithWhereUniqueWithoutTenantInput | ReportInstanceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ReportInstanceCreateManyTenantInputEnvelope
    set?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    disconnect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    delete?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    update?: ReportInstanceUpdateWithWhereUniqueWithoutTenantInput | ReportInstanceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ReportInstanceUpdateManyWithWhereWithoutTenantInput | ReportInstanceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ReportInstanceScalarWhereInput | ReportInstanceScalarWhereInput[]
  }

  export type ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<ReportTemplateCreateWithoutTenantInput, ReportTemplateUncheckedCreateWithoutTenantInput> | ReportTemplateCreateWithoutTenantInput[] | ReportTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: ReportTemplateCreateOrConnectWithoutTenantInput | ReportTemplateCreateOrConnectWithoutTenantInput[]
    upsert?: ReportTemplateUpsertWithWhereUniqueWithoutTenantInput | ReportTemplateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: ReportTemplateCreateManyTenantInputEnvelope
    set?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    disconnect?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    delete?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    connect?: ReportTemplateWhereUniqueInput | ReportTemplateWhereUniqueInput[]
    update?: ReportTemplateUpdateWithWhereUniqueWithoutTenantInput | ReportTemplateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: ReportTemplateUpdateManyWithWhereWithoutTenantInput | ReportTemplateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: ReportTemplateScalarWhereInput | ReportTemplateScalarWhereInput[]
  }

  export type SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SalaryAdvancePolicyCreateWithoutTenantInput, SalaryAdvancePolicyUncheckedCreateWithoutTenantInput> | SalaryAdvancePolicyCreateWithoutTenantInput[] | SalaryAdvancePolicyUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvancePolicyCreateOrConnectWithoutTenantInput | SalaryAdvancePolicyCreateOrConnectWithoutTenantInput[]
    upsert?: SalaryAdvancePolicyUpsertWithWhereUniqueWithoutTenantInput | SalaryAdvancePolicyUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SalaryAdvancePolicyCreateManyTenantInputEnvelope
    set?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    disconnect?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    delete?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    connect?: SalaryAdvancePolicyWhereUniqueInput | SalaryAdvancePolicyWhereUniqueInput[]
    update?: SalaryAdvancePolicyUpdateWithWhereUniqueWithoutTenantInput | SalaryAdvancePolicyUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SalaryAdvancePolicyUpdateManyWithWhereWithoutTenantInput | SalaryAdvancePolicyUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SalaryAdvancePolicyScalarWhereInput | SalaryAdvancePolicyScalarWhereInput[]
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput> | SalaryAdvanceRepaymentCreateWithoutTenantInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput | SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput[]
    upsert?: SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutTenantInput | SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyTenantInputEnvelope
    set?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    disconnect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    delete?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    update?: SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutTenantInput | SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SalaryAdvanceRepaymentUpdateManyWithWhereWithoutTenantInput | SalaryAdvanceRepaymentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
  }

  export type SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutTenantInput, SalaryAdvanceRequestUncheckedCreateWithoutTenantInput> | SalaryAdvanceRequestCreateWithoutTenantInput[] | SalaryAdvanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutTenantInput | SalaryAdvanceRequestCreateOrConnectWithoutTenantInput[]
    upsert?: SalaryAdvanceRequestUpsertWithWhereUniqueWithoutTenantInput | SalaryAdvanceRequestUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SalaryAdvanceRequestCreateManyTenantInputEnvelope
    set?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    disconnect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    delete?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    update?: SalaryAdvanceRequestUpdateWithWhereUniqueWithoutTenantInput | SalaryAdvanceRequestUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SalaryAdvanceRequestUpdateManyWithWhereWithoutTenantInput | SalaryAdvanceRequestUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
  }

  export type SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SecurityAlertCreateWithoutTenantInput, SecurityAlertUncheckedCreateWithoutTenantInput> | SecurityAlertCreateWithoutTenantInput[] | SecurityAlertUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SecurityAlertCreateOrConnectWithoutTenantInput | SecurityAlertCreateOrConnectWithoutTenantInput[]
    upsert?: SecurityAlertUpsertWithWhereUniqueWithoutTenantInput | SecurityAlertUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SecurityAlertCreateManyTenantInputEnvelope
    set?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    disconnect?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    delete?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    connect?: SecurityAlertWhereUniqueInput | SecurityAlertWhereUniqueInput[]
    update?: SecurityAlertUpdateWithWhereUniqueWithoutTenantInput | SecurityAlertUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SecurityAlertUpdateManyWithWhereWithoutTenantInput | SecurityAlertUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SecurityAlertScalarWhereInput | SecurityAlertScalarWhereInput[]
  }

  export type SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<SecuritySettingsCreateWithoutTenantInput, SecuritySettingsUncheckedCreateWithoutTenantInput>
    connectOrCreate?: SecuritySettingsCreateOrConnectWithoutTenantInput
    upsert?: SecuritySettingsUpsertWithoutTenantInput
    disconnect?: SecuritySettingsWhereInput | boolean
    delete?: SecuritySettingsWhereInput | boolean
    connect?: SecuritySettingsWhereUniqueInput
    update?: XOR<XOR<SecuritySettingsUpdateToOneWithWhereWithoutTenantInput, SecuritySettingsUpdateWithoutTenantInput>, SecuritySettingsUncheckedUpdateWithoutTenantInput>
  }

  export type TaxBracketUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TaxBracketCreateWithoutTenantInput, TaxBracketUncheckedCreateWithoutTenantInput> | TaxBracketCreateWithoutTenantInput[] | TaxBracketUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TaxBracketCreateOrConnectWithoutTenantInput | TaxBracketCreateOrConnectWithoutTenantInput[]
    upsert?: TaxBracketUpsertWithWhereUniqueWithoutTenantInput | TaxBracketUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TaxBracketCreateManyTenantInputEnvelope
    set?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    disconnect?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    delete?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    connect?: TaxBracketWhereUniqueInput | TaxBracketWhereUniqueInput[]
    update?: TaxBracketUpdateWithWhereUniqueWithoutTenantInput | TaxBracketUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TaxBracketUpdateManyWithWhereWithoutTenantInput | TaxBracketUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TaxBracketScalarWhereInput | TaxBracketScalarWhereInput[]
  }

  export type TrainingUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TrainingCreateWithoutTenantInput, TrainingUncheckedCreateWithoutTenantInput> | TrainingCreateWithoutTenantInput[] | TrainingUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TrainingCreateOrConnectWithoutTenantInput | TrainingCreateOrConnectWithoutTenantInput[]
    upsert?: TrainingUpsertWithWhereUniqueWithoutTenantInput | TrainingUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TrainingCreateManyTenantInputEnvelope
    set?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    disconnect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    delete?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    connect?: TrainingWhereUniqueInput | TrainingWhereUniqueInput[]
    update?: TrainingUpdateWithWhereUniqueWithoutTenantInput | TrainingUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TrainingUpdateManyWithWhereWithoutTenantInput | TrainingUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkflowStatsCreateWithoutTenantInput, WorkflowStatsUncheckedCreateWithoutTenantInput> | WorkflowStatsCreateWithoutTenantInput[] | WorkflowStatsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutTenantInput | WorkflowStatsCreateOrConnectWithoutTenantInput[]
    upsert?: WorkflowStatsUpsertWithWhereUniqueWithoutTenantInput | WorkflowStatsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkflowStatsCreateManyTenantInputEnvelope
    set?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    disconnect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    delete?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    update?: WorkflowStatsUpdateWithWhereUniqueWithoutTenantInput | WorkflowStatsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkflowStatsUpdateManyWithWhereWithoutTenantInput | WorkflowStatsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkflowStatsScalarWhereInput | WorkflowStatsScalarWhereInput[]
  }

  export type WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutTenantInput, WorkflowTemplateUncheckedCreateWithoutTenantInput> | WorkflowTemplateCreateWithoutTenantInput[] | WorkflowTemplateUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutTenantInput | WorkflowTemplateCreateOrConnectWithoutTenantInput[]
    upsert?: WorkflowTemplateUpsertWithWhereUniqueWithoutTenantInput | WorkflowTemplateUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkflowTemplateCreateManyTenantInputEnvelope
    set?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    disconnect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    delete?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    update?: WorkflowTemplateUpdateWithWhereUniqueWithoutTenantInput | WorkflowTemplateUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkflowTemplateUpdateManyWithWhereWithoutTenantInput | WorkflowTemplateUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
  }

  export type WorkflowUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<WorkflowCreateWithoutTenantInput, WorkflowUncheckedCreateWithoutTenantInput> | WorkflowCreateWithoutTenantInput[] | WorkflowUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: WorkflowCreateOrConnectWithoutTenantInput | WorkflowCreateOrConnectWithoutTenantInput[]
    upsert?: WorkflowUpsertWithWhereUniqueWithoutTenantInput | WorkflowUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: WorkflowCreateManyTenantInputEnvelope
    set?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    disconnect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    delete?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    connect?: WorkflowWhereUniqueInput | WorkflowWhereUniqueInput[]
    update?: WorkflowUpdateWithWhereUniqueWithoutTenantInput | WorkflowUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: WorkflowUpdateManyWithWhereWithoutTenantInput | WorkflowUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNotificationsInput
    connect?: TenantWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type TenantUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNotificationsInput
    upsert?: TenantUpsertWithoutNotificationsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutNotificationsInput, TenantUpdateWithoutNotificationsInput>, TenantUncheckedUpdateWithoutNotificationsInput>
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutManagerInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutUsersInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    connect?: TenantWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutManagerInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutManagerNestedInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutManagerInput | DepartmentUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutManagerInput | DepartmentUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutManagerInput | DepartmentUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type EmployeeUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type TenantUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    upsert?: TenantUpsertWithoutUsersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUsersInput, TenantUpdateWithoutUsersInput>, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutManagerNestedInput = {
    create?: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput> | DepartmentCreateWithoutManagerInput[] | DepartmentUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutManagerInput | DepartmentCreateOrConnectWithoutManagerInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutManagerInput | DepartmentUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: DepartmentCreateManyManagerInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutManagerInput | DepartmentUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutManagerInput | DepartmentUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type BranchCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<BranchCreateWithoutDepartmentInput, BranchUncheckedCreateWithoutDepartmentInput> | BranchCreateWithoutDepartmentInput[] | BranchUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutDepartmentInput | BranchCreateOrConnectWithoutDepartmentInput[]
    createMany?: BranchCreateManyDepartmentInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutManagedDepartmentsInput = {
    create?: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<TenantCreateWithoutDepartmentsInput, TenantUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDepartmentsInput
    connect?: TenantWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentInput, EmployeeUncheckedCreateWithoutDepartmentInput> | EmployeeCreateWithoutDepartmentInput[] | EmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentInput | EmployeeCreateOrConnectWithoutDepartmentInput[]
    createMany?: EmployeeCreateManyDepartmentInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type BranchUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<BranchCreateWithoutDepartmentInput, BranchUncheckedCreateWithoutDepartmentInput> | BranchCreateWithoutDepartmentInput[] | BranchUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutDepartmentInput | BranchCreateOrConnectWithoutDepartmentInput[]
    createMany?: BranchCreateManyDepartmentInputEnvelope
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentInput, EmployeeUncheckedCreateWithoutDepartmentInput> | EmployeeCreateWithoutDepartmentInput[] | EmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentInput | EmployeeCreateOrConnectWithoutDepartmentInput[]
    createMany?: EmployeeCreateManyDepartmentInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BranchUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<BranchCreateWithoutDepartmentInput, BranchUncheckedCreateWithoutDepartmentInput> | BranchCreateWithoutDepartmentInput[] | BranchUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutDepartmentInput | BranchCreateOrConnectWithoutDepartmentInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutDepartmentInput | BranchUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: BranchCreateManyDepartmentInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutDepartmentInput | BranchUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutDepartmentInput | BranchUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type UserUpdateOneWithoutManagedDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedDepartmentsInput
    upsert?: UserUpsertWithoutManagedDepartmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagedDepartmentsInput, UserUpdateWithoutManagedDepartmentsInput>, UserUncheckedUpdateWithoutManagedDepartmentsInput>
  }

  export type TenantUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<TenantCreateWithoutDepartmentsInput, TenantUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDepartmentsInput
    upsert?: TenantUpsertWithoutDepartmentsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutDepartmentsInput, TenantUpdateWithoutDepartmentsInput>, TenantUncheckedUpdateWithoutDepartmentsInput>
  }

  export type EmployeeUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentInput, EmployeeUncheckedCreateWithoutDepartmentInput> | EmployeeCreateWithoutDepartmentInput[] | EmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentInput | EmployeeCreateOrConnectWithoutDepartmentInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutDepartmentInput | EmployeeUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: EmployeeCreateManyDepartmentInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutDepartmentInput | EmployeeUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutDepartmentInput | EmployeeUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type BranchUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<BranchCreateWithoutDepartmentInput, BranchUncheckedCreateWithoutDepartmentInput> | BranchCreateWithoutDepartmentInput[] | BranchUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: BranchCreateOrConnectWithoutDepartmentInput | BranchCreateOrConnectWithoutDepartmentInput[]
    upsert?: BranchUpsertWithWhereUniqueWithoutDepartmentInput | BranchUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: BranchCreateManyDepartmentInputEnvelope
    set?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    disconnect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    delete?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    connect?: BranchWhereUniqueInput | BranchWhereUniqueInput[]
    update?: BranchUpdateWithWhereUniqueWithoutDepartmentInput | BranchUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: BranchUpdateManyWithWhereWithoutDepartmentInput | BranchUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: BranchScalarWhereInput | BranchScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentInput, EmployeeUncheckedCreateWithoutDepartmentInput> | EmployeeCreateWithoutDepartmentInput[] | EmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentInput | EmployeeCreateOrConnectWithoutDepartmentInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutDepartmentInput | EmployeeUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: EmployeeCreateManyDepartmentInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutDepartmentInput | EmployeeUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutDepartmentInput | EmployeeUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutBranchesInput = {
    create?: XOR<DepartmentCreateWithoutBranchesInput, DepartmentUncheckedCreateWithoutBranchesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutBranchesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutBranchesInput = {
    create?: XOR<TenantCreateWithoutBranchesInput, TenantUncheckedCreateWithoutBranchesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutBranchesInput
    connect?: TenantWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutBranchInput = {
    create?: XOR<EmployeeCreateWithoutBranchInput, EmployeeUncheckedCreateWithoutBranchInput> | EmployeeCreateWithoutBranchInput[] | EmployeeUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutBranchInput | EmployeeCreateOrConnectWithoutBranchInput[]
    createMany?: EmployeeCreateManyBranchInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutBranchInput = {
    create?: XOR<LeaveRequestCreateWithoutBranchInput, LeaveRequestUncheckedCreateWithoutBranchInput> | LeaveRequestCreateWithoutBranchInput[] | LeaveRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutBranchInput | LeaveRequestCreateOrConnectWithoutBranchInput[]
    createMany?: LeaveRequestCreateManyBranchInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type SalaryAdvanceRequestCreateNestedManyWithoutBranchInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutBranchInput, SalaryAdvanceRequestUncheckedCreateWithoutBranchInput> | SalaryAdvanceRequestCreateWithoutBranchInput[] | SalaryAdvanceRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutBranchInput | SalaryAdvanceRequestCreateOrConnectWithoutBranchInput[]
    createMany?: SalaryAdvanceRequestCreateManyBranchInputEnvelope
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<EmployeeCreateWithoutBranchInput, EmployeeUncheckedCreateWithoutBranchInput> | EmployeeCreateWithoutBranchInput[] | EmployeeUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutBranchInput | EmployeeCreateOrConnectWithoutBranchInput[]
    createMany?: EmployeeCreateManyBranchInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<LeaveRequestCreateWithoutBranchInput, LeaveRequestUncheckedCreateWithoutBranchInput> | LeaveRequestCreateWithoutBranchInput[] | LeaveRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutBranchInput | LeaveRequestCreateOrConnectWithoutBranchInput[]
    createMany?: LeaveRequestCreateManyBranchInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type SalaryAdvanceRequestUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutBranchInput, SalaryAdvanceRequestUncheckedCreateWithoutBranchInput> | SalaryAdvanceRequestCreateWithoutBranchInput[] | SalaryAdvanceRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutBranchInput | SalaryAdvanceRequestCreateOrConnectWithoutBranchInput[]
    createMany?: SalaryAdvanceRequestCreateManyBranchInputEnvelope
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
  }

  export type DepartmentUpdateOneRequiredWithoutBranchesNestedInput = {
    create?: XOR<DepartmentCreateWithoutBranchesInput, DepartmentUncheckedCreateWithoutBranchesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutBranchesInput
    upsert?: DepartmentUpsertWithoutBranchesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutBranchesInput, DepartmentUpdateWithoutBranchesInput>, DepartmentUncheckedUpdateWithoutBranchesInput>
  }

  export type TenantUpdateOneRequiredWithoutBranchesNestedInput = {
    create?: XOR<TenantCreateWithoutBranchesInput, TenantUncheckedCreateWithoutBranchesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutBranchesInput
    upsert?: TenantUpsertWithoutBranchesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutBranchesInput, TenantUpdateWithoutBranchesInput>, TenantUncheckedUpdateWithoutBranchesInput>
  }

  export type EmployeeUpdateManyWithoutBranchNestedInput = {
    create?: XOR<EmployeeCreateWithoutBranchInput, EmployeeUncheckedCreateWithoutBranchInput> | EmployeeCreateWithoutBranchInput[] | EmployeeUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutBranchInput | EmployeeCreateOrConnectWithoutBranchInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutBranchInput | EmployeeUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: EmployeeCreateManyBranchInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutBranchInput | EmployeeUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutBranchInput | EmployeeUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutBranchNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutBranchInput, LeaveRequestUncheckedCreateWithoutBranchInput> | LeaveRequestCreateWithoutBranchInput[] | LeaveRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutBranchInput | LeaveRequestCreateOrConnectWithoutBranchInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutBranchInput | LeaveRequestUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: LeaveRequestCreateManyBranchInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutBranchInput | LeaveRequestUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutBranchInput | LeaveRequestUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type SalaryAdvanceRequestUpdateManyWithoutBranchNestedInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutBranchInput, SalaryAdvanceRequestUncheckedCreateWithoutBranchInput> | SalaryAdvanceRequestCreateWithoutBranchInput[] | SalaryAdvanceRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutBranchInput | SalaryAdvanceRequestCreateOrConnectWithoutBranchInput[]
    upsert?: SalaryAdvanceRequestUpsertWithWhereUniqueWithoutBranchInput | SalaryAdvanceRequestUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: SalaryAdvanceRequestCreateManyBranchInputEnvelope
    set?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    disconnect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    delete?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    update?: SalaryAdvanceRequestUpdateWithWhereUniqueWithoutBranchInput | SalaryAdvanceRequestUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: SalaryAdvanceRequestUpdateManyWithWhereWithoutBranchInput | SalaryAdvanceRequestUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<EmployeeCreateWithoutBranchInput, EmployeeUncheckedCreateWithoutBranchInput> | EmployeeCreateWithoutBranchInput[] | EmployeeUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutBranchInput | EmployeeCreateOrConnectWithoutBranchInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutBranchInput | EmployeeUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: EmployeeCreateManyBranchInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutBranchInput | EmployeeUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutBranchInput | EmployeeUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutBranchInput, LeaveRequestUncheckedCreateWithoutBranchInput> | LeaveRequestCreateWithoutBranchInput[] | LeaveRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutBranchInput | LeaveRequestCreateOrConnectWithoutBranchInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutBranchInput | LeaveRequestUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: LeaveRequestCreateManyBranchInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutBranchInput | LeaveRequestUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutBranchInput | LeaveRequestUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutBranchInput, SalaryAdvanceRequestUncheckedCreateWithoutBranchInput> | SalaryAdvanceRequestCreateWithoutBranchInput[] | SalaryAdvanceRequestUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutBranchInput | SalaryAdvanceRequestCreateOrConnectWithoutBranchInput[]
    upsert?: SalaryAdvanceRequestUpsertWithWhereUniqueWithoutBranchInput | SalaryAdvanceRequestUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: SalaryAdvanceRequestCreateManyBranchInputEnvelope
    set?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    disconnect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    delete?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    update?: SalaryAdvanceRequestUpdateWithWhereUniqueWithoutBranchInput | SalaryAdvanceRequestUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: SalaryAdvanceRequestUpdateManyWithWhereWithoutBranchInput | SalaryAdvanceRequestUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
  }

  export type BranchCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<BranchCreateWithoutEmployeesInput, BranchUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutEmployeesInput
    connect?: BranchWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEmployeesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutEmployeesInput
    connect?: TenantWhereUniqueInput
  }

  export type LeaveBalanceCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveBalanceCreateWithoutEmployeeInput, LeaveBalanceUncheckedCreateWithoutEmployeeInput> | LeaveBalanceCreateWithoutEmployeeInput[] | LeaveBalanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutEmployeeInput | LeaveBalanceCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveBalanceCreateManyEmployeeInputEnvelope
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type PayStubCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayStubCreateWithoutEmployeeInput, PayStubUncheckedCreateWithoutEmployeeInput> | PayStubCreateWithoutEmployeeInput[] | PayStubUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutEmployeeInput | PayStubCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayStubCreateManyEmployeeInputEnvelope
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
  }

  export type PayrollCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type PerformanceGoalCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PerformanceGoalCreateWithoutEmployeeInput, PerformanceGoalUncheckedCreateWithoutEmployeeInput> | PerformanceGoalCreateWithoutEmployeeInput[] | PerformanceGoalUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutEmployeeInput | PerformanceGoalCreateOrConnectWithoutEmployeeInput[]
    createMany?: PerformanceGoalCreateManyEmployeeInputEnvelope
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
  }

  export type PerformanceReviewCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PerformanceReviewCreateWithoutEmployeeInput, PerformanceReviewUncheckedCreateWithoutEmployeeInput> | PerformanceReviewCreateWithoutEmployeeInput[] | PerformanceReviewUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutEmployeeInput | PerformanceReviewCreateOrConnectWithoutEmployeeInput[]
    createMany?: PerformanceReviewCreateManyEmployeeInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput> | SalaryAdvanceRequestCreateWithoutEmployeeInput[] | SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput | SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: SalaryAdvanceRequestCreateManyEmployeeInputEnvelope
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
  }

  export type TrainingEnrollmentCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutEmployeeInput, TrainingEnrollmentUncheckedCreateWithoutEmployeeInput> | TrainingEnrollmentCreateWithoutEmployeeInput[] | TrainingEnrollmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutEmployeeInput | TrainingEnrollmentCreateOrConnectWithoutEmployeeInput[]
    createMany?: TrainingEnrollmentCreateManyEmployeeInputEnvelope
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveBalanceCreateWithoutEmployeeInput, LeaveBalanceUncheckedCreateWithoutEmployeeInput> | LeaveBalanceCreateWithoutEmployeeInput[] | LeaveBalanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutEmployeeInput | LeaveBalanceCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveBalanceCreateManyEmployeeInputEnvelope
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type PayStubUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayStubCreateWithoutEmployeeInput, PayStubUncheckedCreateWithoutEmployeeInput> | PayStubCreateWithoutEmployeeInput[] | PayStubUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutEmployeeInput | PayStubCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayStubCreateManyEmployeeInputEnvelope
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
  }

  export type PayrollUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PerformanceGoalCreateWithoutEmployeeInput, PerformanceGoalUncheckedCreateWithoutEmployeeInput> | PerformanceGoalCreateWithoutEmployeeInput[] | PerformanceGoalUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutEmployeeInput | PerformanceGoalCreateOrConnectWithoutEmployeeInput[]
    createMany?: PerformanceGoalCreateManyEmployeeInputEnvelope
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
  }

  export type PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PerformanceReviewCreateWithoutEmployeeInput, PerformanceReviewUncheckedCreateWithoutEmployeeInput> | PerformanceReviewCreateWithoutEmployeeInput[] | PerformanceReviewUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutEmployeeInput | PerformanceReviewCreateOrConnectWithoutEmployeeInput[]
    createMany?: PerformanceReviewCreateManyEmployeeInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput> | SalaryAdvanceRequestCreateWithoutEmployeeInput[] | SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput | SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: SalaryAdvanceRequestCreateManyEmployeeInputEnvelope
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
  }

  export type TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutEmployeeInput, TrainingEnrollmentUncheckedCreateWithoutEmployeeInput> | TrainingEnrollmentCreateWithoutEmployeeInput[] | TrainingEnrollmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutEmployeeInput | TrainingEnrollmentCreateOrConnectWithoutEmployeeInput[]
    createMany?: TrainingEnrollmentCreateManyEmployeeInputEnvelope
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BranchUpdateOneWithoutEmployeesNestedInput = {
    create?: XOR<BranchCreateWithoutEmployeesInput, BranchUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: BranchCreateOrConnectWithoutEmployeesInput
    upsert?: BranchUpsertWithoutEmployeesInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutEmployeesInput, BranchUpdateWithoutEmployeesInput>, BranchUncheckedUpdateWithoutEmployeesInput>
  }

  export type DepartmentUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEmployeesInput
    upsert?: DepartmentUpsertWithoutEmployeesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutEmployeesInput, DepartmentUpdateWithoutEmployeesInput>, DepartmentUncheckedUpdateWithoutEmployeesInput>
  }

  export type TenantUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutEmployeesInput
    upsert?: TenantUpsertWithoutEmployeesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutEmployeesInput, TenantUpdateWithoutEmployeesInput>, TenantUncheckedUpdateWithoutEmployeesInput>
  }

  export type LeaveBalanceUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveBalanceCreateWithoutEmployeeInput, LeaveBalanceUncheckedCreateWithoutEmployeeInput> | LeaveBalanceCreateWithoutEmployeeInput[] | LeaveBalanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutEmployeeInput | LeaveBalanceCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveBalanceUpsertWithWhereUniqueWithoutEmployeeInput | LeaveBalanceUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveBalanceCreateManyEmployeeInputEnvelope
    set?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    disconnect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    delete?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    update?: LeaveBalanceUpdateWithWhereUniqueWithoutEmployeeInput | LeaveBalanceUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveBalanceUpdateManyWithWhereWithoutEmployeeInput | LeaveBalanceUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutEmployeeInput | LeaveRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type PayStubUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayStubCreateWithoutEmployeeInput, PayStubUncheckedCreateWithoutEmployeeInput> | PayStubCreateWithoutEmployeeInput[] | PayStubUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutEmployeeInput | PayStubCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayStubUpsertWithWhereUniqueWithoutEmployeeInput | PayStubUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayStubCreateManyEmployeeInputEnvelope
    set?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    disconnect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    delete?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    update?: PayStubUpdateWithWhereUniqueWithoutEmployeeInput | PayStubUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayStubUpdateManyWithWhereWithoutEmployeeInput | PayStubUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
  }

  export type PayrollUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutEmployeeInput | PayrollUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutEmployeeInput | PayrollUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutEmployeeInput | PayrollUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type PerformanceGoalUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PerformanceGoalCreateWithoutEmployeeInput, PerformanceGoalUncheckedCreateWithoutEmployeeInput> | PerformanceGoalCreateWithoutEmployeeInput[] | PerformanceGoalUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutEmployeeInput | PerformanceGoalCreateOrConnectWithoutEmployeeInput[]
    upsert?: PerformanceGoalUpsertWithWhereUniqueWithoutEmployeeInput | PerformanceGoalUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PerformanceGoalCreateManyEmployeeInputEnvelope
    set?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    disconnect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    delete?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    update?: PerformanceGoalUpdateWithWhereUniqueWithoutEmployeeInput | PerformanceGoalUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PerformanceGoalUpdateManyWithWhereWithoutEmployeeInput | PerformanceGoalUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
  }

  export type PerformanceReviewUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutEmployeeInput, PerformanceReviewUncheckedCreateWithoutEmployeeInput> | PerformanceReviewCreateWithoutEmployeeInput[] | PerformanceReviewUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutEmployeeInput | PerformanceReviewCreateOrConnectWithoutEmployeeInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInput | PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PerformanceReviewCreateManyEmployeeInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInput | PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutEmployeeInput | PerformanceReviewUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput> | SalaryAdvanceRequestCreateWithoutEmployeeInput[] | SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput | SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: SalaryAdvanceRequestUpsertWithWhereUniqueWithoutEmployeeInput | SalaryAdvanceRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: SalaryAdvanceRequestCreateManyEmployeeInputEnvelope
    set?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    disconnect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    delete?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    update?: SalaryAdvanceRequestUpdateWithWhereUniqueWithoutEmployeeInput | SalaryAdvanceRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: SalaryAdvanceRequestUpdateManyWithWhereWithoutEmployeeInput | SalaryAdvanceRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
  }

  export type TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutEmployeeInput, TrainingEnrollmentUncheckedCreateWithoutEmployeeInput> | TrainingEnrollmentCreateWithoutEmployeeInput[] | TrainingEnrollmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutEmployeeInput | TrainingEnrollmentCreateOrConnectWithoutEmployeeInput[]
    upsert?: TrainingEnrollmentUpsertWithWhereUniqueWithoutEmployeeInput | TrainingEnrollmentUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: TrainingEnrollmentCreateManyEmployeeInputEnvelope
    set?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    disconnect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    delete?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    update?: TrainingEnrollmentUpdateWithWhereUniqueWithoutEmployeeInput | TrainingEnrollmentUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: TrainingEnrollmentUpdateManyWithWhereWithoutEmployeeInput | TrainingEnrollmentUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: TrainingEnrollmentScalarWhereInput | TrainingEnrollmentScalarWhereInput[]
  }

  export type UserUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveBalanceCreateWithoutEmployeeInput, LeaveBalanceUncheckedCreateWithoutEmployeeInput> | LeaveBalanceCreateWithoutEmployeeInput[] | LeaveBalanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutEmployeeInput | LeaveBalanceCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveBalanceUpsertWithWhereUniqueWithoutEmployeeInput | LeaveBalanceUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveBalanceCreateManyEmployeeInputEnvelope
    set?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    disconnect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    delete?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    update?: LeaveBalanceUpdateWithWhereUniqueWithoutEmployeeInput | LeaveBalanceUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveBalanceUpdateManyWithWhereWithoutEmployeeInput | LeaveBalanceUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutEmployeeInput | LeaveRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type PayStubUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayStubCreateWithoutEmployeeInput, PayStubUncheckedCreateWithoutEmployeeInput> | PayStubCreateWithoutEmployeeInput[] | PayStubUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutEmployeeInput | PayStubCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayStubUpsertWithWhereUniqueWithoutEmployeeInput | PayStubUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayStubCreateManyEmployeeInputEnvelope
    set?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    disconnect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    delete?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    update?: PayStubUpdateWithWhereUniqueWithoutEmployeeInput | PayStubUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayStubUpdateManyWithWhereWithoutEmployeeInput | PayStubUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
  }

  export type PayrollUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutEmployeeInput | PayrollUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutEmployeeInput | PayrollUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutEmployeeInput | PayrollUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PerformanceGoalCreateWithoutEmployeeInput, PerformanceGoalUncheckedCreateWithoutEmployeeInput> | PerformanceGoalCreateWithoutEmployeeInput[] | PerformanceGoalUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutEmployeeInput | PerformanceGoalCreateOrConnectWithoutEmployeeInput[]
    upsert?: PerformanceGoalUpsertWithWhereUniqueWithoutEmployeeInput | PerformanceGoalUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PerformanceGoalCreateManyEmployeeInputEnvelope
    set?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    disconnect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    delete?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    update?: PerformanceGoalUpdateWithWhereUniqueWithoutEmployeeInput | PerformanceGoalUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PerformanceGoalUpdateManyWithWhereWithoutEmployeeInput | PerformanceGoalUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutEmployeeInput, PerformanceReviewUncheckedCreateWithoutEmployeeInput> | PerformanceReviewCreateWithoutEmployeeInput[] | PerformanceReviewUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutEmployeeInput | PerformanceReviewCreateOrConnectWithoutEmployeeInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInput | PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PerformanceReviewCreateManyEmployeeInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInput | PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutEmployeeInput | PerformanceReviewUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput> | SalaryAdvanceRequestCreateWithoutEmployeeInput[] | SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput | SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: SalaryAdvanceRequestUpsertWithWhereUniqueWithoutEmployeeInput | SalaryAdvanceRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: SalaryAdvanceRequestCreateManyEmployeeInputEnvelope
    set?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    disconnect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    delete?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    connect?: SalaryAdvanceRequestWhereUniqueInput | SalaryAdvanceRequestWhereUniqueInput[]
    update?: SalaryAdvanceRequestUpdateWithWhereUniqueWithoutEmployeeInput | SalaryAdvanceRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: SalaryAdvanceRequestUpdateManyWithWhereWithoutEmployeeInput | SalaryAdvanceRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
  }

  export type TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutEmployeeInput, TrainingEnrollmentUncheckedCreateWithoutEmployeeInput> | TrainingEnrollmentCreateWithoutEmployeeInput[] | TrainingEnrollmentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutEmployeeInput | TrainingEnrollmentCreateOrConnectWithoutEmployeeInput[]
    upsert?: TrainingEnrollmentUpsertWithWhereUniqueWithoutEmployeeInput | TrainingEnrollmentUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: TrainingEnrollmentCreateManyEmployeeInputEnvelope
    set?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    disconnect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    delete?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    update?: TrainingEnrollmentUpdateWithWhereUniqueWithoutEmployeeInput | TrainingEnrollmentUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: TrainingEnrollmentUpdateManyWithWhereWithoutEmployeeInput | TrainingEnrollmentUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: TrainingEnrollmentScalarWhereInput | TrainingEnrollmentScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type PayStubCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<PayStubCreateWithoutPayrollPeriodInput, PayStubUncheckedCreateWithoutPayrollPeriodInput> | PayStubCreateWithoutPayrollPeriodInput[] | PayStubUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollPeriodInput | PayStubCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: PayStubCreateManyPayrollPeriodInputEnvelope
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutPayrollPeriodsInput = {
    create?: XOR<TenantCreateWithoutPayrollPeriodsInput, TenantUncheckedCreateWithoutPayrollPeriodsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollPeriodsInput
    connect?: TenantWhereUniqueInput
  }

  export type PayrollCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<PayrollCreateWithoutPayrollPeriodInput, PayrollUncheckedCreateWithoutPayrollPeriodInput> | PayrollCreateWithoutPayrollPeriodInput[] | PayrollUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutPayrollPeriodInput | PayrollCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: PayrollCreateManyPayrollPeriodInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type SalaryAdvanceRepaymentCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput> | SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput | SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyPayrollPeriodInputEnvelope
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
  }

  export type PayStubUncheckedCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<PayStubCreateWithoutPayrollPeriodInput, PayStubUncheckedCreateWithoutPayrollPeriodInput> | PayStubCreateWithoutPayrollPeriodInput[] | PayStubUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollPeriodInput | PayStubCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: PayStubCreateManyPayrollPeriodInputEnvelope
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
  }

  export type PayrollUncheckedCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<PayrollCreateWithoutPayrollPeriodInput, PayrollUncheckedCreateWithoutPayrollPeriodInput> | PayrollCreateWithoutPayrollPeriodInput[] | PayrollUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutPayrollPeriodInput | PayrollCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: PayrollCreateManyPayrollPeriodInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput> | SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput | SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyPayrollPeriodInputEnvelope
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
  }

  export type PayStubUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<PayStubCreateWithoutPayrollPeriodInput, PayStubUncheckedCreateWithoutPayrollPeriodInput> | PayStubCreateWithoutPayrollPeriodInput[] | PayStubUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollPeriodInput | PayStubCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: PayStubUpsertWithWhereUniqueWithoutPayrollPeriodInput | PayStubUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: PayStubCreateManyPayrollPeriodInputEnvelope
    set?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    disconnect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    delete?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    update?: PayStubUpdateWithWhereUniqueWithoutPayrollPeriodInput | PayStubUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: PayStubUpdateManyWithWhereWithoutPayrollPeriodInput | PayStubUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutPayrollPeriodsNestedInput = {
    create?: XOR<TenantCreateWithoutPayrollPeriodsInput, TenantUncheckedCreateWithoutPayrollPeriodsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollPeriodsInput
    upsert?: TenantUpsertWithoutPayrollPeriodsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPayrollPeriodsInput, TenantUpdateWithoutPayrollPeriodsInput>, TenantUncheckedUpdateWithoutPayrollPeriodsInput>
  }

  export type PayrollUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<PayrollCreateWithoutPayrollPeriodInput, PayrollUncheckedCreateWithoutPayrollPeriodInput> | PayrollCreateWithoutPayrollPeriodInput[] | PayrollUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutPayrollPeriodInput | PayrollCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutPayrollPeriodInput | PayrollUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: PayrollCreateManyPayrollPeriodInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutPayrollPeriodInput | PayrollUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutPayrollPeriodInput | PayrollUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type SalaryAdvanceRepaymentUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput> | SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput | SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutPayrollPeriodInput | SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyPayrollPeriodInputEnvelope
    set?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    disconnect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    delete?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    update?: SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutPayrollPeriodInput | SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: SalaryAdvanceRepaymentUpdateManyWithWhereWithoutPayrollPeriodInput | SalaryAdvanceRepaymentUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
  }

  export type PayStubUncheckedUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<PayStubCreateWithoutPayrollPeriodInput, PayStubUncheckedCreateWithoutPayrollPeriodInput> | PayStubCreateWithoutPayrollPeriodInput[] | PayStubUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollPeriodInput | PayStubCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: PayStubUpsertWithWhereUniqueWithoutPayrollPeriodInput | PayStubUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: PayStubCreateManyPayrollPeriodInputEnvelope
    set?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    disconnect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    delete?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    connect?: PayStubWhereUniqueInput | PayStubWhereUniqueInput[]
    update?: PayStubUpdateWithWhereUniqueWithoutPayrollPeriodInput | PayStubUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: PayStubUpdateManyWithWhereWithoutPayrollPeriodInput | PayStubUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
  }

  export type PayrollUncheckedUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<PayrollCreateWithoutPayrollPeriodInput, PayrollUncheckedCreateWithoutPayrollPeriodInput> | PayrollCreateWithoutPayrollPeriodInput[] | PayrollUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutPayrollPeriodInput | PayrollCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutPayrollPeriodInput | PayrollUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: PayrollCreateManyPayrollPeriodInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutPayrollPeriodInput | PayrollUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutPayrollPeriodInput | PayrollUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput> | SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput | SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutPayrollPeriodInput | SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: SalaryAdvanceRepaymentCreateManyPayrollPeriodInputEnvelope
    set?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    disconnect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    delete?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    update?: SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutPayrollPeriodInput | SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: SalaryAdvanceRepaymentUpdateManyWithWhereWithoutPayrollPeriodInput | SalaryAdvanceRepaymentUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
  }

  export type PayStubCreateNestedOneWithoutPayrollInput = {
    create?: XOR<PayStubCreateWithoutPayrollInput, PayStubUncheckedCreateWithoutPayrollInput>
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollInput
    connect?: PayStubWhereUniqueInput
  }

  export type PayrollItemCreateNestedManyWithoutPayrollInput = {
    create?: XOR<PayrollItemCreateWithoutPayrollInput, PayrollItemUncheckedCreateWithoutPayrollInput> | PayrollItemCreateWithoutPayrollInput[] | PayrollItemUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutPayrollInput | PayrollItemCreateOrConnectWithoutPayrollInput[]
    createMany?: PayrollItemCreateManyPayrollInputEnvelope
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutPayrollsInput = {
    create?: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayrollsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PayrollPeriodCreateNestedOneWithoutPayrollsInput = {
    create?: XOR<PayrollPeriodCreateWithoutPayrollsInput, PayrollPeriodUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutPayrollsInput
    connect?: PayrollPeriodWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPayrollsInput = {
    create?: XOR<TenantCreateWithoutPayrollsInput, TenantUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollsInput
    connect?: TenantWhereUniqueInput
  }

  export type PayStubUncheckedCreateNestedOneWithoutPayrollInput = {
    create?: XOR<PayStubCreateWithoutPayrollInput, PayStubUncheckedCreateWithoutPayrollInput>
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollInput
    connect?: PayStubWhereUniqueInput
  }

  export type PayrollItemUncheckedCreateNestedManyWithoutPayrollInput = {
    create?: XOR<PayrollItemCreateWithoutPayrollInput, PayrollItemUncheckedCreateWithoutPayrollInput> | PayrollItemCreateWithoutPayrollInput[] | PayrollItemUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutPayrollInput | PayrollItemCreateOrConnectWithoutPayrollInput[]
    createMany?: PayrollItemCreateManyPayrollInputEnvelope
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PayStubUpdateOneWithoutPayrollNestedInput = {
    create?: XOR<PayStubCreateWithoutPayrollInput, PayStubUncheckedCreateWithoutPayrollInput>
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollInput
    upsert?: PayStubUpsertWithoutPayrollInput
    disconnect?: PayStubWhereInput | boolean
    delete?: PayStubWhereInput | boolean
    connect?: PayStubWhereUniqueInput
    update?: XOR<XOR<PayStubUpdateToOneWithWhereWithoutPayrollInput, PayStubUpdateWithoutPayrollInput>, PayStubUncheckedUpdateWithoutPayrollInput>
  }

  export type PayrollItemUpdateManyWithoutPayrollNestedInput = {
    create?: XOR<PayrollItemCreateWithoutPayrollInput, PayrollItemUncheckedCreateWithoutPayrollInput> | PayrollItemCreateWithoutPayrollInput[] | PayrollItemUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutPayrollInput | PayrollItemCreateOrConnectWithoutPayrollInput[]
    upsert?: PayrollItemUpsertWithWhereUniqueWithoutPayrollInput | PayrollItemUpsertWithWhereUniqueWithoutPayrollInput[]
    createMany?: PayrollItemCreateManyPayrollInputEnvelope
    set?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    disconnect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    delete?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    update?: PayrollItemUpdateWithWhereUniqueWithoutPayrollInput | PayrollItemUpdateWithWhereUniqueWithoutPayrollInput[]
    updateMany?: PayrollItemUpdateManyWithWhereWithoutPayrollInput | PayrollItemUpdateManyWithWhereWithoutPayrollInput[]
    deleteMany?: PayrollItemScalarWhereInput | PayrollItemScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutPayrollsNestedInput = {
    create?: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayrollsInput
    upsert?: EmployeeUpsertWithoutPayrollsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPayrollsInput, EmployeeUpdateWithoutPayrollsInput>, EmployeeUncheckedUpdateWithoutPayrollsInput>
  }

  export type PayrollPeriodUpdateOneRequiredWithoutPayrollsNestedInput = {
    create?: XOR<PayrollPeriodCreateWithoutPayrollsInput, PayrollPeriodUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutPayrollsInput
    upsert?: PayrollPeriodUpsertWithoutPayrollsInput
    connect?: PayrollPeriodWhereUniqueInput
    update?: XOR<XOR<PayrollPeriodUpdateToOneWithWhereWithoutPayrollsInput, PayrollPeriodUpdateWithoutPayrollsInput>, PayrollPeriodUncheckedUpdateWithoutPayrollsInput>
  }

  export type TenantUpdateOneRequiredWithoutPayrollsNestedInput = {
    create?: XOR<TenantCreateWithoutPayrollsInput, TenantUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollsInput
    upsert?: TenantUpsertWithoutPayrollsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPayrollsInput, TenantUpdateWithoutPayrollsInput>, TenantUncheckedUpdateWithoutPayrollsInput>
  }

  export type PayStubUncheckedUpdateOneWithoutPayrollNestedInput = {
    create?: XOR<PayStubCreateWithoutPayrollInput, PayStubUncheckedCreateWithoutPayrollInput>
    connectOrCreate?: PayStubCreateOrConnectWithoutPayrollInput
    upsert?: PayStubUpsertWithoutPayrollInput
    disconnect?: PayStubWhereInput | boolean
    delete?: PayStubWhereInput | boolean
    connect?: PayStubWhereUniqueInput
    update?: XOR<XOR<PayStubUpdateToOneWithWhereWithoutPayrollInput, PayStubUpdateWithoutPayrollInput>, PayStubUncheckedUpdateWithoutPayrollInput>
  }

  export type PayrollItemUncheckedUpdateManyWithoutPayrollNestedInput = {
    create?: XOR<PayrollItemCreateWithoutPayrollInput, PayrollItemUncheckedCreateWithoutPayrollInput> | PayrollItemCreateWithoutPayrollInput[] | PayrollItemUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollItemCreateOrConnectWithoutPayrollInput | PayrollItemCreateOrConnectWithoutPayrollInput[]
    upsert?: PayrollItemUpsertWithWhereUniqueWithoutPayrollInput | PayrollItemUpsertWithWhereUniqueWithoutPayrollInput[]
    createMany?: PayrollItemCreateManyPayrollInputEnvelope
    set?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    disconnect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    delete?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    connect?: PayrollItemWhereUniqueInput | PayrollItemWhereUniqueInput[]
    update?: PayrollItemUpdateWithWhereUniqueWithoutPayrollInput | PayrollItemUpdateWithWhereUniqueWithoutPayrollInput[]
    updateMany?: PayrollItemUpdateManyWithWhereWithoutPayrollInput | PayrollItemUpdateManyWithWhereWithoutPayrollInput[]
    deleteMany?: PayrollItemScalarWhereInput | PayrollItemScalarWhereInput[]
  }

  export type PayrollCreateNestedOneWithoutPayrollItemsInput = {
    create?: XOR<PayrollCreateWithoutPayrollItemsInput, PayrollUncheckedCreateWithoutPayrollItemsInput>
    connectOrCreate?: PayrollCreateOrConnectWithoutPayrollItemsInput
    connect?: PayrollWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPayrollItemsInput = {
    create?: XOR<TenantCreateWithoutPayrollItemsInput, TenantUncheckedCreateWithoutPayrollItemsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollItemsInput
    connect?: TenantWhereUniqueInput
  }

  export type PayrollUpdateOneRequiredWithoutPayrollItemsNestedInput = {
    create?: XOR<PayrollCreateWithoutPayrollItemsInput, PayrollUncheckedCreateWithoutPayrollItemsInput>
    connectOrCreate?: PayrollCreateOrConnectWithoutPayrollItemsInput
    upsert?: PayrollUpsertWithoutPayrollItemsInput
    connect?: PayrollWhereUniqueInput
    update?: XOR<XOR<PayrollUpdateToOneWithWhereWithoutPayrollItemsInput, PayrollUpdateWithoutPayrollItemsInput>, PayrollUncheckedUpdateWithoutPayrollItemsInput>
  }

  export type TenantUpdateOneRequiredWithoutPayrollItemsNestedInput = {
    create?: XOR<TenantCreateWithoutPayrollItemsInput, TenantUncheckedCreateWithoutPayrollItemsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollItemsInput
    upsert?: TenantUpsertWithoutPayrollItemsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPayrollItemsInput, TenantUpdateWithoutPayrollItemsInput>, TenantUncheckedUpdateWithoutPayrollItemsInput>
  }

  export type TenantCreateNestedOneWithoutTaxBracketsInput = {
    create?: XOR<TenantCreateWithoutTaxBracketsInput, TenantUncheckedCreateWithoutTaxBracketsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTaxBracketsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutTaxBracketsNestedInput = {
    create?: XOR<TenantCreateWithoutTaxBracketsInput, TenantUncheckedCreateWithoutTaxBracketsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTaxBracketsInput
    upsert?: TenantUpsertWithoutTaxBracketsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutTaxBracketsInput, TenantUpdateWithoutTaxBracketsInput>, TenantUncheckedUpdateWithoutTaxBracketsInput>
  }

  export type EmployeeCreateNestedOneWithoutPayStubsInput = {
    create?: XOR<EmployeeCreateWithoutPayStubsInput, EmployeeUncheckedCreateWithoutPayStubsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayStubsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PayrollCreateNestedOneWithoutPayStubInput = {
    create?: XOR<PayrollCreateWithoutPayStubInput, PayrollUncheckedCreateWithoutPayStubInput>
    connectOrCreate?: PayrollCreateOrConnectWithoutPayStubInput
    connect?: PayrollWhereUniqueInput
  }

  export type PayrollPeriodCreateNestedOneWithoutPayStubsInput = {
    create?: XOR<PayrollPeriodCreateWithoutPayStubsInput, PayrollPeriodUncheckedCreateWithoutPayStubsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutPayStubsInput
    connect?: PayrollPeriodWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPayStubsInput = {
    create?: XOR<TenantCreateWithoutPayStubsInput, TenantUncheckedCreateWithoutPayStubsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayStubsInput
    connect?: TenantWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutPayStubsNestedInput = {
    create?: XOR<EmployeeCreateWithoutPayStubsInput, EmployeeUncheckedCreateWithoutPayStubsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayStubsInput
    upsert?: EmployeeUpsertWithoutPayStubsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPayStubsInput, EmployeeUpdateWithoutPayStubsInput>, EmployeeUncheckedUpdateWithoutPayStubsInput>
  }

  export type PayrollUpdateOneRequiredWithoutPayStubNestedInput = {
    create?: XOR<PayrollCreateWithoutPayStubInput, PayrollUncheckedCreateWithoutPayStubInput>
    connectOrCreate?: PayrollCreateOrConnectWithoutPayStubInput
    upsert?: PayrollUpsertWithoutPayStubInput
    connect?: PayrollWhereUniqueInput
    update?: XOR<XOR<PayrollUpdateToOneWithWhereWithoutPayStubInput, PayrollUpdateWithoutPayStubInput>, PayrollUncheckedUpdateWithoutPayStubInput>
  }

  export type PayrollPeriodUpdateOneRequiredWithoutPayStubsNestedInput = {
    create?: XOR<PayrollPeriodCreateWithoutPayStubsInput, PayrollPeriodUncheckedCreateWithoutPayStubsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutPayStubsInput
    upsert?: PayrollPeriodUpsertWithoutPayStubsInput
    connect?: PayrollPeriodWhereUniqueInput
    update?: XOR<XOR<PayrollPeriodUpdateToOneWithWhereWithoutPayStubsInput, PayrollPeriodUpdateWithoutPayStubsInput>, PayrollPeriodUncheckedUpdateWithoutPayStubsInput>
  }

  export type TenantUpdateOneRequiredWithoutPayStubsNestedInput = {
    create?: XOR<TenantCreateWithoutPayStubsInput, TenantUncheckedCreateWithoutPayStubsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayStubsInput
    upsert?: TenantUpsertWithoutPayStubsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPayStubsInput, TenantUpdateWithoutPayStubsInput>, TenantUncheckedUpdateWithoutPayStubsInput>
  }

  export type TenantCreateNestedOneWithoutPayrollSettingsInput = {
    create?: XOR<TenantCreateWithoutPayrollSettingsInput, TenantUncheckedCreateWithoutPayrollSettingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollSettingsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutPayrollSettingsNestedInput = {
    create?: XOR<TenantCreateWithoutPayrollSettingsInput, TenantUncheckedCreateWithoutPayrollSettingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPayrollSettingsInput
    upsert?: TenantUpsertWithoutPayrollSettingsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPayrollSettingsInput, TenantUpdateWithoutPayrollSettingsInput>, TenantUncheckedUpdateWithoutPayrollSettingsInput>
  }

  export type LeaveBalanceCreateNestedManyWithoutLeaveTypeInput = {
    create?: XOR<LeaveBalanceCreateWithoutLeaveTypeInput, LeaveBalanceUncheckedCreateWithoutLeaveTypeInput> | LeaveBalanceCreateWithoutLeaveTypeInput[] | LeaveBalanceUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutLeaveTypeInput | LeaveBalanceCreateOrConnectWithoutLeaveTypeInput[]
    createMany?: LeaveBalanceCreateManyLeaveTypeInputEnvelope
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
  }

  export type LeavePolicyCreateNestedManyWithoutLeaveTypeInput = {
    create?: XOR<LeavePolicyCreateWithoutLeaveTypeInput, LeavePolicyUncheckedCreateWithoutLeaveTypeInput> | LeavePolicyCreateWithoutLeaveTypeInput[] | LeavePolicyUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutLeaveTypeInput | LeavePolicyCreateOrConnectWithoutLeaveTypeInput[]
    createMany?: LeavePolicyCreateManyLeaveTypeInputEnvelope
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutLeaveTypeInput = {
    create?: XOR<LeaveRequestCreateWithoutLeaveTypeInput, LeaveRequestUncheckedCreateWithoutLeaveTypeInput> | LeaveRequestCreateWithoutLeaveTypeInput[] | LeaveRequestUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutLeaveTypeInput | LeaveRequestCreateOrConnectWithoutLeaveTypeInput[]
    createMany?: LeaveRequestCreateManyLeaveTypeInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutLeaveTypesInput = {
    create?: XOR<TenantCreateWithoutLeaveTypesInput, TenantUncheckedCreateWithoutLeaveTypesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeaveTypesInput
    connect?: TenantWhereUniqueInput
  }

  export type LeaveBalanceUncheckedCreateNestedManyWithoutLeaveTypeInput = {
    create?: XOR<LeaveBalanceCreateWithoutLeaveTypeInput, LeaveBalanceUncheckedCreateWithoutLeaveTypeInput> | LeaveBalanceCreateWithoutLeaveTypeInput[] | LeaveBalanceUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutLeaveTypeInput | LeaveBalanceCreateOrConnectWithoutLeaveTypeInput[]
    createMany?: LeaveBalanceCreateManyLeaveTypeInputEnvelope
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
  }

  export type LeavePolicyUncheckedCreateNestedManyWithoutLeaveTypeInput = {
    create?: XOR<LeavePolicyCreateWithoutLeaveTypeInput, LeavePolicyUncheckedCreateWithoutLeaveTypeInput> | LeavePolicyCreateWithoutLeaveTypeInput[] | LeavePolicyUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutLeaveTypeInput | LeavePolicyCreateOrConnectWithoutLeaveTypeInput[]
    createMany?: LeavePolicyCreateManyLeaveTypeInputEnvelope
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutLeaveTypeInput = {
    create?: XOR<LeaveRequestCreateWithoutLeaveTypeInput, LeaveRequestUncheckedCreateWithoutLeaveTypeInput> | LeaveRequestCreateWithoutLeaveTypeInput[] | LeaveRequestUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutLeaveTypeInput | LeaveRequestCreateOrConnectWithoutLeaveTypeInput[]
    createMany?: LeaveRequestCreateManyLeaveTypeInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveBalanceUpdateManyWithoutLeaveTypeNestedInput = {
    create?: XOR<LeaveBalanceCreateWithoutLeaveTypeInput, LeaveBalanceUncheckedCreateWithoutLeaveTypeInput> | LeaveBalanceCreateWithoutLeaveTypeInput[] | LeaveBalanceUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutLeaveTypeInput | LeaveBalanceCreateOrConnectWithoutLeaveTypeInput[]
    upsert?: LeaveBalanceUpsertWithWhereUniqueWithoutLeaveTypeInput | LeaveBalanceUpsertWithWhereUniqueWithoutLeaveTypeInput[]
    createMany?: LeaveBalanceCreateManyLeaveTypeInputEnvelope
    set?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    disconnect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    delete?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    update?: LeaveBalanceUpdateWithWhereUniqueWithoutLeaveTypeInput | LeaveBalanceUpdateWithWhereUniqueWithoutLeaveTypeInput[]
    updateMany?: LeaveBalanceUpdateManyWithWhereWithoutLeaveTypeInput | LeaveBalanceUpdateManyWithWhereWithoutLeaveTypeInput[]
    deleteMany?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
  }

  export type LeavePolicyUpdateManyWithoutLeaveTypeNestedInput = {
    create?: XOR<LeavePolicyCreateWithoutLeaveTypeInput, LeavePolicyUncheckedCreateWithoutLeaveTypeInput> | LeavePolicyCreateWithoutLeaveTypeInput[] | LeavePolicyUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutLeaveTypeInput | LeavePolicyCreateOrConnectWithoutLeaveTypeInput[]
    upsert?: LeavePolicyUpsertWithWhereUniqueWithoutLeaveTypeInput | LeavePolicyUpsertWithWhereUniqueWithoutLeaveTypeInput[]
    createMany?: LeavePolicyCreateManyLeaveTypeInputEnvelope
    set?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    disconnect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    delete?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    update?: LeavePolicyUpdateWithWhereUniqueWithoutLeaveTypeInput | LeavePolicyUpdateWithWhereUniqueWithoutLeaveTypeInput[]
    updateMany?: LeavePolicyUpdateManyWithWhereWithoutLeaveTypeInput | LeavePolicyUpdateManyWithWhereWithoutLeaveTypeInput[]
    deleteMany?: LeavePolicyScalarWhereInput | LeavePolicyScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutLeaveTypeNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutLeaveTypeInput, LeaveRequestUncheckedCreateWithoutLeaveTypeInput> | LeaveRequestCreateWithoutLeaveTypeInput[] | LeaveRequestUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutLeaveTypeInput | LeaveRequestCreateOrConnectWithoutLeaveTypeInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutLeaveTypeInput | LeaveRequestUpsertWithWhereUniqueWithoutLeaveTypeInput[]
    createMany?: LeaveRequestCreateManyLeaveTypeInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutLeaveTypeInput | LeaveRequestUpdateWithWhereUniqueWithoutLeaveTypeInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutLeaveTypeInput | LeaveRequestUpdateManyWithWhereWithoutLeaveTypeInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutLeaveTypesNestedInput = {
    create?: XOR<TenantCreateWithoutLeaveTypesInput, TenantUncheckedCreateWithoutLeaveTypesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeaveTypesInput
    upsert?: TenantUpsertWithoutLeaveTypesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutLeaveTypesInput, TenantUpdateWithoutLeaveTypesInput>, TenantUncheckedUpdateWithoutLeaveTypesInput>
  }

  export type LeaveBalanceUncheckedUpdateManyWithoutLeaveTypeNestedInput = {
    create?: XOR<LeaveBalanceCreateWithoutLeaveTypeInput, LeaveBalanceUncheckedCreateWithoutLeaveTypeInput> | LeaveBalanceCreateWithoutLeaveTypeInput[] | LeaveBalanceUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveBalanceCreateOrConnectWithoutLeaveTypeInput | LeaveBalanceCreateOrConnectWithoutLeaveTypeInput[]
    upsert?: LeaveBalanceUpsertWithWhereUniqueWithoutLeaveTypeInput | LeaveBalanceUpsertWithWhereUniqueWithoutLeaveTypeInput[]
    createMany?: LeaveBalanceCreateManyLeaveTypeInputEnvelope
    set?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    disconnect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    delete?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    connect?: LeaveBalanceWhereUniqueInput | LeaveBalanceWhereUniqueInput[]
    update?: LeaveBalanceUpdateWithWhereUniqueWithoutLeaveTypeInput | LeaveBalanceUpdateWithWhereUniqueWithoutLeaveTypeInput[]
    updateMany?: LeaveBalanceUpdateManyWithWhereWithoutLeaveTypeInput | LeaveBalanceUpdateManyWithWhereWithoutLeaveTypeInput[]
    deleteMany?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
  }

  export type LeavePolicyUncheckedUpdateManyWithoutLeaveTypeNestedInput = {
    create?: XOR<LeavePolicyCreateWithoutLeaveTypeInput, LeavePolicyUncheckedCreateWithoutLeaveTypeInput> | LeavePolicyCreateWithoutLeaveTypeInput[] | LeavePolicyUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeavePolicyCreateOrConnectWithoutLeaveTypeInput | LeavePolicyCreateOrConnectWithoutLeaveTypeInput[]
    upsert?: LeavePolicyUpsertWithWhereUniqueWithoutLeaveTypeInput | LeavePolicyUpsertWithWhereUniqueWithoutLeaveTypeInput[]
    createMany?: LeavePolicyCreateManyLeaveTypeInputEnvelope
    set?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    disconnect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    delete?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    connect?: LeavePolicyWhereUniqueInput | LeavePolicyWhereUniqueInput[]
    update?: LeavePolicyUpdateWithWhereUniqueWithoutLeaveTypeInput | LeavePolicyUpdateWithWhereUniqueWithoutLeaveTypeInput[]
    updateMany?: LeavePolicyUpdateManyWithWhereWithoutLeaveTypeInput | LeavePolicyUpdateManyWithWhereWithoutLeaveTypeInput[]
    deleteMany?: LeavePolicyScalarWhereInput | LeavePolicyScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutLeaveTypeNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutLeaveTypeInput, LeaveRequestUncheckedCreateWithoutLeaveTypeInput> | LeaveRequestCreateWithoutLeaveTypeInput[] | LeaveRequestUncheckedCreateWithoutLeaveTypeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutLeaveTypeInput | LeaveRequestCreateOrConnectWithoutLeaveTypeInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutLeaveTypeInput | LeaveRequestUpsertWithWhereUniqueWithoutLeaveTypeInput[]
    createMany?: LeaveRequestCreateManyLeaveTypeInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutLeaveTypeInput | LeaveRequestUpdateWithWhereUniqueWithoutLeaveTypeInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutLeaveTypeInput | LeaveRequestUpdateManyWithWhereWithoutLeaveTypeInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveTypeCreateNestedOneWithoutLeavePoliciesInput = {
    create?: XOR<LeaveTypeCreateWithoutLeavePoliciesInput, LeaveTypeUncheckedCreateWithoutLeavePoliciesInput>
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutLeavePoliciesInput
    connect?: LeaveTypeWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutLeavePoliciesInput = {
    create?: XOR<TenantCreateWithoutLeavePoliciesInput, TenantUncheckedCreateWithoutLeavePoliciesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeavePoliciesInput
    connect?: TenantWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LeaveTypeUpdateOneRequiredWithoutLeavePoliciesNestedInput = {
    create?: XOR<LeaveTypeCreateWithoutLeavePoliciesInput, LeaveTypeUncheckedCreateWithoutLeavePoliciesInput>
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutLeavePoliciesInput
    upsert?: LeaveTypeUpsertWithoutLeavePoliciesInput
    connect?: LeaveTypeWhereUniqueInput
    update?: XOR<XOR<LeaveTypeUpdateToOneWithWhereWithoutLeavePoliciesInput, LeaveTypeUpdateWithoutLeavePoliciesInput>, LeaveTypeUncheckedUpdateWithoutLeavePoliciesInput>
  }

  export type TenantUpdateOneRequiredWithoutLeavePoliciesNestedInput = {
    create?: XOR<TenantCreateWithoutLeavePoliciesInput, TenantUncheckedCreateWithoutLeavePoliciesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeavePoliciesInput
    upsert?: TenantUpsertWithoutLeavePoliciesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutLeavePoliciesInput, TenantUpdateWithoutLeavePoliciesInput>, TenantUncheckedUpdateWithoutLeavePoliciesInput>
  }

  export type LeaveRequestCreateattachmentsInput = {
    set: string[]
  }

  export type EmployeeCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<EmployeeCreateWithoutLeaveRequestsInput, EmployeeUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveRequestsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<BranchCreateWithoutLeaveRequestsInput, BranchUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutLeaveRequestsInput
    connect?: BranchWhereUniqueInput
  }

  export type LeaveTypeCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<LeaveTypeCreateWithoutLeaveRequestsInput, LeaveTypeUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutLeaveRequestsInput
    connect?: LeaveTypeWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<TenantCreateWithoutLeaveRequestsInput, TenantUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeaveRequestsInput
    connect?: TenantWhereUniqueInput
  }

  export type LeaveRequestUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmployeeUpdateOneRequiredWithoutLeaveRequestsNestedInput = {
    create?: XOR<EmployeeCreateWithoutLeaveRequestsInput, EmployeeUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveRequestsInput
    upsert?: EmployeeUpsertWithoutLeaveRequestsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutLeaveRequestsInput, EmployeeUpdateWithoutLeaveRequestsInput>, EmployeeUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type BranchUpdateOneWithoutLeaveRequestsNestedInput = {
    create?: XOR<BranchCreateWithoutLeaveRequestsInput, BranchUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutLeaveRequestsInput
    upsert?: BranchUpsertWithoutLeaveRequestsInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutLeaveRequestsInput, BranchUpdateWithoutLeaveRequestsInput>, BranchUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type LeaveTypeUpdateOneRequiredWithoutLeaveRequestsNestedInput = {
    create?: XOR<LeaveTypeCreateWithoutLeaveRequestsInput, LeaveTypeUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutLeaveRequestsInput
    upsert?: LeaveTypeUpsertWithoutLeaveRequestsInput
    connect?: LeaveTypeWhereUniqueInput
    update?: XOR<XOR<LeaveTypeUpdateToOneWithWhereWithoutLeaveRequestsInput, LeaveTypeUpdateWithoutLeaveRequestsInput>, LeaveTypeUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type TenantUpdateOneRequiredWithoutLeaveRequestsNestedInput = {
    create?: XOR<TenantCreateWithoutLeaveRequestsInput, TenantUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeaveRequestsInput
    upsert?: TenantUpsertWithoutLeaveRequestsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutLeaveRequestsInput, TenantUpdateWithoutLeaveRequestsInput>, TenantUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type EmployeeCreateNestedOneWithoutLeaveBalancesInput = {
    create?: XOR<EmployeeCreateWithoutLeaveBalancesInput, EmployeeUncheckedCreateWithoutLeaveBalancesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveBalancesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type LeaveTypeCreateNestedOneWithoutLeaveBalancesInput = {
    create?: XOR<LeaveTypeCreateWithoutLeaveBalancesInput, LeaveTypeUncheckedCreateWithoutLeaveBalancesInput>
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutLeaveBalancesInput
    connect?: LeaveTypeWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutLeaveBalancesInput = {
    create?: XOR<TenantCreateWithoutLeaveBalancesInput, TenantUncheckedCreateWithoutLeaveBalancesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeaveBalancesInput
    connect?: TenantWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutLeaveBalancesNestedInput = {
    create?: XOR<EmployeeCreateWithoutLeaveBalancesInput, EmployeeUncheckedCreateWithoutLeaveBalancesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveBalancesInput
    upsert?: EmployeeUpsertWithoutLeaveBalancesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutLeaveBalancesInput, EmployeeUpdateWithoutLeaveBalancesInput>, EmployeeUncheckedUpdateWithoutLeaveBalancesInput>
  }

  export type LeaveTypeUpdateOneRequiredWithoutLeaveBalancesNestedInput = {
    create?: XOR<LeaveTypeCreateWithoutLeaveBalancesInput, LeaveTypeUncheckedCreateWithoutLeaveBalancesInput>
    connectOrCreate?: LeaveTypeCreateOrConnectWithoutLeaveBalancesInput
    upsert?: LeaveTypeUpsertWithoutLeaveBalancesInput
    connect?: LeaveTypeWhereUniqueInput
    update?: XOR<XOR<LeaveTypeUpdateToOneWithWhereWithoutLeaveBalancesInput, LeaveTypeUpdateWithoutLeaveBalancesInput>, LeaveTypeUncheckedUpdateWithoutLeaveBalancesInput>
  }

  export type TenantUpdateOneRequiredWithoutLeaveBalancesNestedInput = {
    create?: XOR<TenantCreateWithoutLeaveBalancesInput, TenantUncheckedCreateWithoutLeaveBalancesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeaveBalancesInput
    upsert?: TenantUpsertWithoutLeaveBalancesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutLeaveBalancesInput, TenantUpdateWithoutLeaveBalancesInput>, TenantUncheckedUpdateWithoutLeaveBalancesInput>
  }

  export type TenantCreateNestedOneWithoutHolidaysInput = {
    create?: XOR<TenantCreateWithoutHolidaysInput, TenantUncheckedCreateWithoutHolidaysInput>
    connectOrCreate?: TenantCreateOrConnectWithoutHolidaysInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutHolidaysNestedInput = {
    create?: XOR<TenantCreateWithoutHolidaysInput, TenantUncheckedCreateWithoutHolidaysInput>
    connectOrCreate?: TenantCreateOrConnectWithoutHolidaysInput
    upsert?: TenantUpsertWithoutHolidaysInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutHolidaysInput, TenantUpdateWithoutHolidaysInput>, TenantUncheckedUpdateWithoutHolidaysInput>
  }

  export type PerformanceGoalCreateNestedManyWithoutReviewCycleInput = {
    create?: XOR<PerformanceGoalCreateWithoutReviewCycleInput, PerformanceGoalUncheckedCreateWithoutReviewCycleInput> | PerformanceGoalCreateWithoutReviewCycleInput[] | PerformanceGoalUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutReviewCycleInput | PerformanceGoalCreateOrConnectWithoutReviewCycleInput[]
    createMany?: PerformanceGoalCreateManyReviewCycleInputEnvelope
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutPerformanceReviewCyclesInput = {
    create?: XOR<TenantCreateWithoutPerformanceReviewCyclesInput, TenantUncheckedCreateWithoutPerformanceReviewCyclesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceReviewCyclesInput
    connect?: TenantWhereUniqueInput
  }

  export type PerformanceReviewCreateNestedManyWithoutReviewCycleInput = {
    create?: XOR<PerformanceReviewCreateWithoutReviewCycleInput, PerformanceReviewUncheckedCreateWithoutReviewCycleInput> | PerformanceReviewCreateWithoutReviewCycleInput[] | PerformanceReviewUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutReviewCycleInput | PerformanceReviewCreateOrConnectWithoutReviewCycleInput[]
    createMany?: PerformanceReviewCreateManyReviewCycleInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type PerformanceGoalUncheckedCreateNestedManyWithoutReviewCycleInput = {
    create?: XOR<PerformanceGoalCreateWithoutReviewCycleInput, PerformanceGoalUncheckedCreateWithoutReviewCycleInput> | PerformanceGoalCreateWithoutReviewCycleInput[] | PerformanceGoalUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutReviewCycleInput | PerformanceGoalCreateOrConnectWithoutReviewCycleInput[]
    createMany?: PerformanceGoalCreateManyReviewCycleInputEnvelope
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
  }

  export type PerformanceReviewUncheckedCreateNestedManyWithoutReviewCycleInput = {
    create?: XOR<PerformanceReviewCreateWithoutReviewCycleInput, PerformanceReviewUncheckedCreateWithoutReviewCycleInput> | PerformanceReviewCreateWithoutReviewCycleInput[] | PerformanceReviewUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutReviewCycleInput | PerformanceReviewCreateOrConnectWithoutReviewCycleInput[]
    createMany?: PerformanceReviewCreateManyReviewCycleInputEnvelope
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
  }

  export type PerformanceGoalUpdateManyWithoutReviewCycleNestedInput = {
    create?: XOR<PerformanceGoalCreateWithoutReviewCycleInput, PerformanceGoalUncheckedCreateWithoutReviewCycleInput> | PerformanceGoalCreateWithoutReviewCycleInput[] | PerformanceGoalUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutReviewCycleInput | PerformanceGoalCreateOrConnectWithoutReviewCycleInput[]
    upsert?: PerformanceGoalUpsertWithWhereUniqueWithoutReviewCycleInput | PerformanceGoalUpsertWithWhereUniqueWithoutReviewCycleInput[]
    createMany?: PerformanceGoalCreateManyReviewCycleInputEnvelope
    set?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    disconnect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    delete?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    update?: PerformanceGoalUpdateWithWhereUniqueWithoutReviewCycleInput | PerformanceGoalUpdateWithWhereUniqueWithoutReviewCycleInput[]
    updateMany?: PerformanceGoalUpdateManyWithWhereWithoutReviewCycleInput | PerformanceGoalUpdateManyWithWhereWithoutReviewCycleInput[]
    deleteMany?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutPerformanceReviewCyclesNestedInput = {
    create?: XOR<TenantCreateWithoutPerformanceReviewCyclesInput, TenantUncheckedCreateWithoutPerformanceReviewCyclesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceReviewCyclesInput
    upsert?: TenantUpsertWithoutPerformanceReviewCyclesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPerformanceReviewCyclesInput, TenantUpdateWithoutPerformanceReviewCyclesInput>, TenantUncheckedUpdateWithoutPerformanceReviewCyclesInput>
  }

  export type PerformanceReviewUpdateManyWithoutReviewCycleNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutReviewCycleInput, PerformanceReviewUncheckedCreateWithoutReviewCycleInput> | PerformanceReviewCreateWithoutReviewCycleInput[] | PerformanceReviewUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutReviewCycleInput | PerformanceReviewCreateOrConnectWithoutReviewCycleInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutReviewCycleInput | PerformanceReviewUpsertWithWhereUniqueWithoutReviewCycleInput[]
    createMany?: PerformanceReviewCreateManyReviewCycleInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutReviewCycleInput | PerformanceReviewUpdateWithWhereUniqueWithoutReviewCycleInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutReviewCycleInput | PerformanceReviewUpdateManyWithWhereWithoutReviewCycleInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type PerformanceGoalUncheckedUpdateManyWithoutReviewCycleNestedInput = {
    create?: XOR<PerformanceGoalCreateWithoutReviewCycleInput, PerformanceGoalUncheckedCreateWithoutReviewCycleInput> | PerformanceGoalCreateWithoutReviewCycleInput[] | PerformanceGoalUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceGoalCreateOrConnectWithoutReviewCycleInput | PerformanceGoalCreateOrConnectWithoutReviewCycleInput[]
    upsert?: PerformanceGoalUpsertWithWhereUniqueWithoutReviewCycleInput | PerformanceGoalUpsertWithWhereUniqueWithoutReviewCycleInput[]
    createMany?: PerformanceGoalCreateManyReviewCycleInputEnvelope
    set?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    disconnect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    delete?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    connect?: PerformanceGoalWhereUniqueInput | PerformanceGoalWhereUniqueInput[]
    update?: PerformanceGoalUpdateWithWhereUniqueWithoutReviewCycleInput | PerformanceGoalUpdateWithWhereUniqueWithoutReviewCycleInput[]
    updateMany?: PerformanceGoalUpdateManyWithWhereWithoutReviewCycleInput | PerformanceGoalUpdateManyWithWhereWithoutReviewCycleInput[]
    deleteMany?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutReviewCycleNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutReviewCycleInput, PerformanceReviewUncheckedCreateWithoutReviewCycleInput> | PerformanceReviewCreateWithoutReviewCycleInput[] | PerformanceReviewUncheckedCreateWithoutReviewCycleInput[]
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutReviewCycleInput | PerformanceReviewCreateOrConnectWithoutReviewCycleInput[]
    upsert?: PerformanceReviewUpsertWithWhereUniqueWithoutReviewCycleInput | PerformanceReviewUpsertWithWhereUniqueWithoutReviewCycleInput[]
    createMany?: PerformanceReviewCreateManyReviewCycleInputEnvelope
    set?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    disconnect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    delete?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    connect?: PerformanceReviewWhereUniqueInput | PerformanceReviewWhereUniqueInput[]
    update?: PerformanceReviewUpdateWithWhereUniqueWithoutReviewCycleInput | PerformanceReviewUpdateWithWhereUniqueWithoutReviewCycleInput[]
    updateMany?: PerformanceReviewUpdateManyWithWhereWithoutReviewCycleInput | PerformanceReviewUpdateManyWithWhereWithoutReviewCycleInput[]
    deleteMany?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
  }

  export type PerformanceFeedbackCreateNestedManyWithoutPerformanceReviewInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput> | PerformanceFeedbackCreateWithoutPerformanceReviewInput[] | PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput | PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput[]
    createMany?: PerformanceFeedbackCreateManyPerformanceReviewInputEnvelope
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
  }

  export type PerformanceRatingCreateNestedManyWithoutPerformanceReviewInput = {
    create?: XOR<PerformanceRatingCreateWithoutPerformanceReviewInput, PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput> | PerformanceRatingCreateWithoutPerformanceReviewInput[] | PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput | PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput[]
    createMany?: PerformanceRatingCreateManyPerformanceReviewInputEnvelope
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutPerformanceReviewsInput = {
    create?: XOR<EmployeeCreateWithoutPerformanceReviewsInput, EmployeeUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPerformanceReviewsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PerformanceReviewCycleCreateNestedOneWithoutPerformanceReviewsInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutPerformanceReviewsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutPerformanceReviewsInput
    connect?: PerformanceReviewCycleWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPerformanceReviewsInput = {
    create?: XOR<TenantCreateWithoutPerformanceReviewsInput, TenantUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceReviewsInput
    connect?: TenantWhereUniqueInput
  }

  export type PerformanceFeedbackUncheckedCreateNestedManyWithoutPerformanceReviewInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput> | PerformanceFeedbackCreateWithoutPerformanceReviewInput[] | PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput | PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput[]
    createMany?: PerformanceFeedbackCreateManyPerformanceReviewInputEnvelope
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
  }

  export type PerformanceRatingUncheckedCreateNestedManyWithoutPerformanceReviewInput = {
    create?: XOR<PerformanceRatingCreateWithoutPerformanceReviewInput, PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput> | PerformanceRatingCreateWithoutPerformanceReviewInput[] | PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput | PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput[]
    createMany?: PerformanceRatingCreateManyPerformanceReviewInputEnvelope
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
  }

  export type PerformanceFeedbackUpdateManyWithoutPerformanceReviewNestedInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput> | PerformanceFeedbackCreateWithoutPerformanceReviewInput[] | PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput | PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput[]
    upsert?: PerformanceFeedbackUpsertWithWhereUniqueWithoutPerformanceReviewInput | PerformanceFeedbackUpsertWithWhereUniqueWithoutPerformanceReviewInput[]
    createMany?: PerformanceFeedbackCreateManyPerformanceReviewInputEnvelope
    set?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    disconnect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    delete?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    update?: PerformanceFeedbackUpdateWithWhereUniqueWithoutPerformanceReviewInput | PerformanceFeedbackUpdateWithWhereUniqueWithoutPerformanceReviewInput[]
    updateMany?: PerformanceFeedbackUpdateManyWithWhereWithoutPerformanceReviewInput | PerformanceFeedbackUpdateManyWithWhereWithoutPerformanceReviewInput[]
    deleteMany?: PerformanceFeedbackScalarWhereInput | PerformanceFeedbackScalarWhereInput[]
  }

  export type PerformanceRatingUpdateManyWithoutPerformanceReviewNestedInput = {
    create?: XOR<PerformanceRatingCreateWithoutPerformanceReviewInput, PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput> | PerformanceRatingCreateWithoutPerformanceReviewInput[] | PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput | PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput[]
    upsert?: PerformanceRatingUpsertWithWhereUniqueWithoutPerformanceReviewInput | PerformanceRatingUpsertWithWhereUniqueWithoutPerformanceReviewInput[]
    createMany?: PerformanceRatingCreateManyPerformanceReviewInputEnvelope
    set?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    disconnect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    delete?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    update?: PerformanceRatingUpdateWithWhereUniqueWithoutPerformanceReviewInput | PerformanceRatingUpdateWithWhereUniqueWithoutPerformanceReviewInput[]
    updateMany?: PerformanceRatingUpdateManyWithWhereWithoutPerformanceReviewInput | PerformanceRatingUpdateManyWithWhereWithoutPerformanceReviewInput[]
    deleteMany?: PerformanceRatingScalarWhereInput | PerformanceRatingScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInput = {
    create?: XOR<EmployeeCreateWithoutPerformanceReviewsInput, EmployeeUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPerformanceReviewsInput
    upsert?: EmployeeUpsertWithoutPerformanceReviewsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPerformanceReviewsInput, EmployeeUpdateWithoutPerformanceReviewsInput>, EmployeeUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type PerformanceReviewCycleUpdateOneRequiredWithoutPerformanceReviewsNestedInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutPerformanceReviewsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutPerformanceReviewsInput
    upsert?: PerformanceReviewCycleUpsertWithoutPerformanceReviewsInput
    connect?: PerformanceReviewCycleWhereUniqueInput
    update?: XOR<XOR<PerformanceReviewCycleUpdateToOneWithWhereWithoutPerformanceReviewsInput, PerformanceReviewCycleUpdateWithoutPerformanceReviewsInput>, PerformanceReviewCycleUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type TenantUpdateOneRequiredWithoutPerformanceReviewsNestedInput = {
    create?: XOR<TenantCreateWithoutPerformanceReviewsInput, TenantUncheckedCreateWithoutPerformanceReviewsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceReviewsInput
    upsert?: TenantUpsertWithoutPerformanceReviewsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPerformanceReviewsInput, TenantUpdateWithoutPerformanceReviewsInput>, TenantUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewNestedInput = {
    create?: XOR<PerformanceFeedbackCreateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput> | PerformanceFeedbackCreateWithoutPerformanceReviewInput[] | PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput | PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput[]
    upsert?: PerformanceFeedbackUpsertWithWhereUniqueWithoutPerformanceReviewInput | PerformanceFeedbackUpsertWithWhereUniqueWithoutPerformanceReviewInput[]
    createMany?: PerformanceFeedbackCreateManyPerformanceReviewInputEnvelope
    set?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    disconnect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    delete?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    connect?: PerformanceFeedbackWhereUniqueInput | PerformanceFeedbackWhereUniqueInput[]
    update?: PerformanceFeedbackUpdateWithWhereUniqueWithoutPerformanceReviewInput | PerformanceFeedbackUpdateWithWhereUniqueWithoutPerformanceReviewInput[]
    updateMany?: PerformanceFeedbackUpdateManyWithWhereWithoutPerformanceReviewInput | PerformanceFeedbackUpdateManyWithWhereWithoutPerformanceReviewInput[]
    deleteMany?: PerformanceFeedbackScalarWhereInput | PerformanceFeedbackScalarWhereInput[]
  }

  export type PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewNestedInput = {
    create?: XOR<PerformanceRatingCreateWithoutPerformanceReviewInput, PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput> | PerformanceRatingCreateWithoutPerformanceReviewInput[] | PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput[]
    connectOrCreate?: PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput | PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput[]
    upsert?: PerformanceRatingUpsertWithWhereUniqueWithoutPerformanceReviewInput | PerformanceRatingUpsertWithWhereUniqueWithoutPerformanceReviewInput[]
    createMany?: PerformanceRatingCreateManyPerformanceReviewInputEnvelope
    set?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    disconnect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    delete?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    connect?: PerformanceRatingWhereUniqueInput | PerformanceRatingWhereUniqueInput[]
    update?: PerformanceRatingUpdateWithWhereUniqueWithoutPerformanceReviewInput | PerformanceRatingUpdateWithWhereUniqueWithoutPerformanceReviewInput[]
    updateMany?: PerformanceRatingUpdateManyWithWhereWithoutPerformanceReviewInput | PerformanceRatingUpdateManyWithWhereWithoutPerformanceReviewInput[]
    deleteMany?: PerformanceRatingScalarWhereInput | PerformanceRatingScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutPerformanceGoalsInput = {
    create?: XOR<EmployeeCreateWithoutPerformanceGoalsInput, EmployeeUncheckedCreateWithoutPerformanceGoalsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPerformanceGoalsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PerformanceReviewCycleCreateNestedOneWithoutPerformanceGoalsInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutPerformanceGoalsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceGoalsInput>
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutPerformanceGoalsInput
    connect?: PerformanceReviewCycleWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPerformanceGoalsInput = {
    create?: XOR<TenantCreateWithoutPerformanceGoalsInput, TenantUncheckedCreateWithoutPerformanceGoalsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceGoalsInput
    connect?: TenantWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutPerformanceGoalsNestedInput = {
    create?: XOR<EmployeeCreateWithoutPerformanceGoalsInput, EmployeeUncheckedCreateWithoutPerformanceGoalsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPerformanceGoalsInput
    upsert?: EmployeeUpsertWithoutPerformanceGoalsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPerformanceGoalsInput, EmployeeUpdateWithoutPerformanceGoalsInput>, EmployeeUncheckedUpdateWithoutPerformanceGoalsInput>
  }

  export type PerformanceReviewCycleUpdateOneWithoutPerformanceGoalsNestedInput = {
    create?: XOR<PerformanceReviewCycleCreateWithoutPerformanceGoalsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceGoalsInput>
    connectOrCreate?: PerformanceReviewCycleCreateOrConnectWithoutPerformanceGoalsInput
    upsert?: PerformanceReviewCycleUpsertWithoutPerformanceGoalsInput
    disconnect?: PerformanceReviewCycleWhereInput | boolean
    delete?: PerformanceReviewCycleWhereInput | boolean
    connect?: PerformanceReviewCycleWhereUniqueInput
    update?: XOR<XOR<PerformanceReviewCycleUpdateToOneWithWhereWithoutPerformanceGoalsInput, PerformanceReviewCycleUpdateWithoutPerformanceGoalsInput>, PerformanceReviewCycleUncheckedUpdateWithoutPerformanceGoalsInput>
  }

  export type TenantUpdateOneRequiredWithoutPerformanceGoalsNestedInput = {
    create?: XOR<TenantCreateWithoutPerformanceGoalsInput, TenantUncheckedCreateWithoutPerformanceGoalsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceGoalsInput
    upsert?: TenantUpsertWithoutPerformanceGoalsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPerformanceGoalsInput, TenantUpdateWithoutPerformanceGoalsInput>, TenantUncheckedUpdateWithoutPerformanceGoalsInput>
  }

  export type PerformanceReviewCreateNestedOneWithoutPerformanceRatingsInput = {
    create?: XOR<PerformanceReviewCreateWithoutPerformanceRatingsInput, PerformanceReviewUncheckedCreateWithoutPerformanceRatingsInput>
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutPerformanceRatingsInput
    connect?: PerformanceReviewWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPerformanceRatingsInput = {
    create?: XOR<TenantCreateWithoutPerformanceRatingsInput, TenantUncheckedCreateWithoutPerformanceRatingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceRatingsInput
    connect?: TenantWhereUniqueInput
  }

  export type PerformanceReviewUpdateOneRequiredWithoutPerformanceRatingsNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutPerformanceRatingsInput, PerformanceReviewUncheckedCreateWithoutPerformanceRatingsInput>
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutPerformanceRatingsInput
    upsert?: PerformanceReviewUpsertWithoutPerformanceRatingsInput
    connect?: PerformanceReviewWhereUniqueInput
    update?: XOR<XOR<PerformanceReviewUpdateToOneWithWhereWithoutPerformanceRatingsInput, PerformanceReviewUpdateWithoutPerformanceRatingsInput>, PerformanceReviewUncheckedUpdateWithoutPerformanceRatingsInput>
  }

  export type TenantUpdateOneRequiredWithoutPerformanceRatingsNestedInput = {
    create?: XOR<TenantCreateWithoutPerformanceRatingsInput, TenantUncheckedCreateWithoutPerformanceRatingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceRatingsInput
    upsert?: TenantUpsertWithoutPerformanceRatingsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPerformanceRatingsInput, TenantUpdateWithoutPerformanceRatingsInput>, TenantUncheckedUpdateWithoutPerformanceRatingsInput>
  }

  export type PerformanceReviewCreateNestedOneWithoutPerformanceFeedbackInput = {
    create?: XOR<PerformanceReviewCreateWithoutPerformanceFeedbackInput, PerformanceReviewUncheckedCreateWithoutPerformanceFeedbackInput>
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutPerformanceFeedbackInput
    connect?: PerformanceReviewWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPerformanceFeedbackInput = {
    create?: XOR<TenantCreateWithoutPerformanceFeedbackInput, TenantUncheckedCreateWithoutPerformanceFeedbackInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceFeedbackInput
    connect?: TenantWhereUniqueInput
  }

  export type PerformanceReviewUpdateOneRequiredWithoutPerformanceFeedbackNestedInput = {
    create?: XOR<PerformanceReviewCreateWithoutPerformanceFeedbackInput, PerformanceReviewUncheckedCreateWithoutPerformanceFeedbackInput>
    connectOrCreate?: PerformanceReviewCreateOrConnectWithoutPerformanceFeedbackInput
    upsert?: PerformanceReviewUpsertWithoutPerformanceFeedbackInput
    connect?: PerformanceReviewWhereUniqueInput
    update?: XOR<XOR<PerformanceReviewUpdateToOneWithWhereWithoutPerformanceFeedbackInput, PerformanceReviewUpdateWithoutPerformanceFeedbackInput>, PerformanceReviewUncheckedUpdateWithoutPerformanceFeedbackInput>
  }

  export type TenantUpdateOneRequiredWithoutPerformanceFeedbackNestedInput = {
    create?: XOR<TenantCreateWithoutPerformanceFeedbackInput, TenantUncheckedCreateWithoutPerformanceFeedbackInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPerformanceFeedbackInput
    upsert?: TenantUpsertWithoutPerformanceFeedbackInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPerformanceFeedbackInput, TenantUpdateWithoutPerformanceFeedbackInput>, TenantUncheckedUpdateWithoutPerformanceFeedbackInput>
  }

  export type ReportInstanceCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ReportInstanceCreateWithoutTemplateInput, ReportInstanceUncheckedCreateWithoutTemplateInput> | ReportInstanceCreateWithoutTemplateInput[] | ReportInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTemplateInput | ReportInstanceCreateOrConnectWithoutTemplateInput[]
    createMany?: ReportInstanceCreateManyTemplateInputEnvelope
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutReportTemplatesInput = {
    create?: XOR<TenantCreateWithoutReportTemplatesInput, TenantUncheckedCreateWithoutReportTemplatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutReportTemplatesInput
    connect?: TenantWhereUniqueInput
  }

  export type ReportInstanceUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ReportInstanceCreateWithoutTemplateInput, ReportInstanceUncheckedCreateWithoutTemplateInput> | ReportInstanceCreateWithoutTemplateInput[] | ReportInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTemplateInput | ReportInstanceCreateOrConnectWithoutTemplateInput[]
    createMany?: ReportInstanceCreateManyTemplateInputEnvelope
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
  }

  export type ReportInstanceUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ReportInstanceCreateWithoutTemplateInput, ReportInstanceUncheckedCreateWithoutTemplateInput> | ReportInstanceCreateWithoutTemplateInput[] | ReportInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTemplateInput | ReportInstanceCreateOrConnectWithoutTemplateInput[]
    upsert?: ReportInstanceUpsertWithWhereUniqueWithoutTemplateInput | ReportInstanceUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ReportInstanceCreateManyTemplateInputEnvelope
    set?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    disconnect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    delete?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    update?: ReportInstanceUpdateWithWhereUniqueWithoutTemplateInput | ReportInstanceUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ReportInstanceUpdateManyWithWhereWithoutTemplateInput | ReportInstanceUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ReportInstanceScalarWhereInput | ReportInstanceScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutReportTemplatesNestedInput = {
    create?: XOR<TenantCreateWithoutReportTemplatesInput, TenantUncheckedCreateWithoutReportTemplatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutReportTemplatesInput
    upsert?: TenantUpsertWithoutReportTemplatesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutReportTemplatesInput, TenantUpdateWithoutReportTemplatesInput>, TenantUncheckedUpdateWithoutReportTemplatesInput>
  }

  export type ReportInstanceUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ReportInstanceCreateWithoutTemplateInput, ReportInstanceUncheckedCreateWithoutTemplateInput> | ReportInstanceCreateWithoutTemplateInput[] | ReportInstanceUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportInstanceCreateOrConnectWithoutTemplateInput | ReportInstanceCreateOrConnectWithoutTemplateInput[]
    upsert?: ReportInstanceUpsertWithWhereUniqueWithoutTemplateInput | ReportInstanceUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ReportInstanceCreateManyTemplateInputEnvelope
    set?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    disconnect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    delete?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    connect?: ReportInstanceWhereUniqueInput | ReportInstanceWhereUniqueInput[]
    update?: ReportInstanceUpdateWithWhereUniqueWithoutTemplateInput | ReportInstanceUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ReportInstanceUpdateManyWithWhereWithoutTemplateInput | ReportInstanceUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ReportInstanceScalarWhereInput | ReportInstanceScalarWhereInput[]
  }

  export type ReportTemplateCreateNestedOneWithoutReportInstancesInput = {
    create?: XOR<ReportTemplateCreateWithoutReportInstancesInput, ReportTemplateUncheckedCreateWithoutReportInstancesInput>
    connectOrCreate?: ReportTemplateCreateOrConnectWithoutReportInstancesInput
    connect?: ReportTemplateWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutReportInstancesInput = {
    create?: XOR<TenantCreateWithoutReportInstancesInput, TenantUncheckedCreateWithoutReportInstancesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutReportInstancesInput
    connect?: TenantWhereUniqueInput
  }

  export type ReportTemplateUpdateOneRequiredWithoutReportInstancesNestedInput = {
    create?: XOR<ReportTemplateCreateWithoutReportInstancesInput, ReportTemplateUncheckedCreateWithoutReportInstancesInput>
    connectOrCreate?: ReportTemplateCreateOrConnectWithoutReportInstancesInput
    upsert?: ReportTemplateUpsertWithoutReportInstancesInput
    connect?: ReportTemplateWhereUniqueInput
    update?: XOR<XOR<ReportTemplateUpdateToOneWithWhereWithoutReportInstancesInput, ReportTemplateUpdateWithoutReportInstancesInput>, ReportTemplateUncheckedUpdateWithoutReportInstancesInput>
  }

  export type TenantUpdateOneRequiredWithoutReportInstancesNestedInput = {
    create?: XOR<TenantCreateWithoutReportInstancesInput, TenantUncheckedCreateWithoutReportInstancesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutReportInstancesInput
    upsert?: TenantUpsertWithoutReportInstancesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutReportInstancesInput, TenantUpdateWithoutReportInstancesInput>, TenantUncheckedUpdateWithoutReportInstancesInput>
  }

  export type DashboardCreateallowedRolesInput = {
    set: string[]
  }

  export type TenantCreateNestedOneWithoutDashboardsInput = {
    create?: XOR<TenantCreateWithoutDashboardsInput, TenantUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDashboardsInput
    connect?: TenantWhereUniqueInput
  }

  export type DashboardUpdateallowedRolesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TenantUpdateOneRequiredWithoutDashboardsNestedInput = {
    create?: XOR<TenantCreateWithoutDashboardsInput, TenantUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutDashboardsInput
    upsert?: TenantUpsertWithoutDashboardsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutDashboardsInput, TenantUpdateWithoutDashboardsInput>, TenantUncheckedUpdateWithoutDashboardsInput>
  }

  export type TenantCreateNestedOneWithoutSalaryAdvancePoliciesInput = {
    create?: XOR<TenantCreateWithoutSalaryAdvancePoliciesInput, TenantUncheckedCreateWithoutSalaryAdvancePoliciesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSalaryAdvancePoliciesInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutSalaryAdvancePoliciesNestedInput = {
    create?: XOR<TenantCreateWithoutSalaryAdvancePoliciesInput, TenantUncheckedCreateWithoutSalaryAdvancePoliciesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSalaryAdvancePoliciesInput
    upsert?: TenantUpsertWithoutSalaryAdvancePoliciesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSalaryAdvancePoliciesInput, TenantUpdateWithoutSalaryAdvancePoliciesInput>, TenantUncheckedUpdateWithoutSalaryAdvancePoliciesInput>
  }

  export type SalaryAdvanceRequestCreateattachmentsInput = {
    set: string[]
  }

  export type SalaryAdvanceRepaymentCreateNestedManyWithoutSalaryAdvanceRequestInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput> | SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput[]
    createMany?: SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInputEnvelope
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutSalaryAdvanceRequestsInput = {
    create?: XOR<EmployeeCreateWithoutSalaryAdvanceRequestsInput, EmployeeUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSalaryAdvanceRequestsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutSalaryAdvanceRequestsInput = {
    create?: XOR<BranchCreateWithoutSalaryAdvanceRequestsInput, BranchUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutSalaryAdvanceRequestsInput
    connect?: BranchWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutSalaryAdvanceRequestsInput = {
    create?: XOR<TenantCreateWithoutSalaryAdvanceRequestsInput, TenantUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSalaryAdvanceRequestsInput
    connect?: TenantWhereUniqueInput
  }

  export type SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutSalaryAdvanceRequestInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput> | SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput[]
    createMany?: SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInputEnvelope
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
  }

  export type SalaryAdvanceRequestUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SalaryAdvanceRepaymentUpdateManyWithoutSalaryAdvanceRequestNestedInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput> | SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput[]
    upsert?: SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutSalaryAdvanceRequestInput[]
    createMany?: SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInputEnvelope
    set?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    disconnect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    delete?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    update?: SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutSalaryAdvanceRequestInput[]
    updateMany?: SalaryAdvanceRepaymentUpdateManyWithWhereWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentUpdateManyWithWhereWithoutSalaryAdvanceRequestInput[]
    deleteMany?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput = {
    create?: XOR<EmployeeCreateWithoutSalaryAdvanceRequestsInput, EmployeeUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSalaryAdvanceRequestsInput
    upsert?: EmployeeUpsertWithoutSalaryAdvanceRequestsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutSalaryAdvanceRequestsInput, EmployeeUpdateWithoutSalaryAdvanceRequestsInput>, EmployeeUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
  }

  export type BranchUpdateOneWithoutSalaryAdvanceRequestsNestedInput = {
    create?: XOR<BranchCreateWithoutSalaryAdvanceRequestsInput, BranchUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutSalaryAdvanceRequestsInput
    upsert?: BranchUpsertWithoutSalaryAdvanceRequestsInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutSalaryAdvanceRequestsInput, BranchUpdateWithoutSalaryAdvanceRequestsInput>, BranchUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
  }

  export type TenantUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput = {
    create?: XOR<TenantCreateWithoutSalaryAdvanceRequestsInput, TenantUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSalaryAdvanceRequestsInput
    upsert?: TenantUpsertWithoutSalaryAdvanceRequestsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSalaryAdvanceRequestsInput, TenantUpdateWithoutSalaryAdvanceRequestsInput>, TenantUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateManyWithoutSalaryAdvanceRequestNestedInput = {
    create?: XOR<SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput> | SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput[] | SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput[]
    connectOrCreate?: SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput[]
    upsert?: SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutSalaryAdvanceRequestInput[]
    createMany?: SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInputEnvelope
    set?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    disconnect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    delete?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    connect?: SalaryAdvanceRepaymentWhereUniqueInput | SalaryAdvanceRepaymentWhereUniqueInput[]
    update?: SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutSalaryAdvanceRequestInput[]
    updateMany?: SalaryAdvanceRepaymentUpdateManyWithWhereWithoutSalaryAdvanceRequestInput | SalaryAdvanceRepaymentUpdateManyWithWhereWithoutSalaryAdvanceRequestInput[]
    deleteMany?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
  }

  export type PayrollPeriodCreateNestedOneWithoutSalaryAdvanceRepaymentsInput = {
    create?: XOR<PayrollPeriodCreateWithoutSalaryAdvanceRepaymentsInput, PayrollPeriodUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutSalaryAdvanceRepaymentsInput
    connect?: PayrollPeriodWhereUniqueInput
  }

  export type SalaryAdvanceRequestCreateNestedOneWithoutRepaymentsInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutRepaymentsInput, SalaryAdvanceRequestUncheckedCreateWithoutRepaymentsInput>
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutRepaymentsInput
    connect?: SalaryAdvanceRequestWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutSalaryAdvanceRepaymentsInput = {
    create?: XOR<TenantCreateWithoutSalaryAdvanceRepaymentsInput, TenantUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSalaryAdvanceRepaymentsInput
    connect?: TenantWhereUniqueInput
  }

  export type PayrollPeriodUpdateOneWithoutSalaryAdvanceRepaymentsNestedInput = {
    create?: XOR<PayrollPeriodCreateWithoutSalaryAdvanceRepaymentsInput, PayrollPeriodUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutSalaryAdvanceRepaymentsInput
    upsert?: PayrollPeriodUpsertWithoutSalaryAdvanceRepaymentsInput
    disconnect?: PayrollPeriodWhereInput | boolean
    delete?: PayrollPeriodWhereInput | boolean
    connect?: PayrollPeriodWhereUniqueInput
    update?: XOR<XOR<PayrollPeriodUpdateToOneWithWhereWithoutSalaryAdvanceRepaymentsInput, PayrollPeriodUpdateWithoutSalaryAdvanceRepaymentsInput>, PayrollPeriodUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput>
  }

  export type SalaryAdvanceRequestUpdateOneRequiredWithoutRepaymentsNestedInput = {
    create?: XOR<SalaryAdvanceRequestCreateWithoutRepaymentsInput, SalaryAdvanceRequestUncheckedCreateWithoutRepaymentsInput>
    connectOrCreate?: SalaryAdvanceRequestCreateOrConnectWithoutRepaymentsInput
    upsert?: SalaryAdvanceRequestUpsertWithoutRepaymentsInput
    connect?: SalaryAdvanceRequestWhereUniqueInput
    update?: XOR<XOR<SalaryAdvanceRequestUpdateToOneWithWhereWithoutRepaymentsInput, SalaryAdvanceRequestUpdateWithoutRepaymentsInput>, SalaryAdvanceRequestUncheckedUpdateWithoutRepaymentsInput>
  }

  export type TenantUpdateOneRequiredWithoutSalaryAdvanceRepaymentsNestedInput = {
    create?: XOR<TenantCreateWithoutSalaryAdvanceRepaymentsInput, TenantUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSalaryAdvanceRepaymentsInput
    upsert?: TenantUpsertWithoutSalaryAdvanceRepaymentsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSalaryAdvanceRepaymentsInput, TenantUpdateWithoutSalaryAdvanceRepaymentsInput>, TenantUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput>
  }

  export type TenantCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<TenantCreateWithoutAuditLogsInput, TenantUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAuditLogsInput
    connect?: TenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<TenantCreateWithoutAuditLogsInput, TenantUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAuditLogsInput
    upsert?: TenantUpsertWithoutAuditLogsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutAuditLogsInput, TenantUpdateWithoutAuditLogsInput>, TenantUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type TenantCreateNestedOneWithoutSecurityAlertsInput = {
    create?: XOR<TenantCreateWithoutSecurityAlertsInput, TenantUncheckedCreateWithoutSecurityAlertsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSecurityAlertsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutSecurityAlertsNestedInput = {
    create?: XOR<TenantCreateWithoutSecurityAlertsInput, TenantUncheckedCreateWithoutSecurityAlertsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSecurityAlertsInput
    upsert?: TenantUpsertWithoutSecurityAlertsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSecurityAlertsInput, TenantUpdateWithoutSecurityAlertsInput>, TenantUncheckedUpdateWithoutSecurityAlertsInput>
  }

  export type TenantCreateNestedOneWithoutSecuritySettingsInput = {
    create?: XOR<TenantCreateWithoutSecuritySettingsInput, TenantUncheckedCreateWithoutSecuritySettingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSecuritySettingsInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutSecuritySettingsNestedInput = {
    create?: XOR<TenantCreateWithoutSecuritySettingsInput, TenantUncheckedCreateWithoutSecuritySettingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSecuritySettingsInput
    upsert?: TenantUpsertWithoutSecuritySettingsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSecuritySettingsInput, TenantUpdateWithoutSecuritySettingsInput>, TenantUncheckedUpdateWithoutSecuritySettingsInput>
  }

  export type TenantCreateNestedOneWithoutWorkflowTemplatesInput = {
    create?: XOR<TenantCreateWithoutWorkflowTemplatesInput, TenantUncheckedCreateWithoutWorkflowTemplatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkflowTemplatesInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutWorkflowTemplatesNestedInput = {
    create?: XOR<TenantCreateWithoutWorkflowTemplatesInput, TenantUncheckedCreateWithoutWorkflowTemplatesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkflowTemplatesInput
    upsert?: TenantUpsertWithoutWorkflowTemplatesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutWorkflowTemplatesInput, TenantUpdateWithoutWorkflowTemplatesInput>, TenantUncheckedUpdateWithoutWorkflowTemplatesInput>
  }

  export type TrainingCreaterequirementsInput = {
    set: string[]
  }

  export type TrainingEnrollmentCreateNestedManyWithoutTrainingInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutTrainingInput, TrainingEnrollmentUncheckedCreateWithoutTrainingInput> | TrainingEnrollmentCreateWithoutTrainingInput[] | TrainingEnrollmentUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutTrainingInput | TrainingEnrollmentCreateOrConnectWithoutTrainingInput[]
    createMany?: TrainingEnrollmentCreateManyTrainingInputEnvelope
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutTrainingsInput = {
    create?: XOR<TenantCreateWithoutTrainingsInput, TenantUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTrainingsInput
    connect?: TenantWhereUniqueInput
  }

  export type TrainingEnrollmentUncheckedCreateNestedManyWithoutTrainingInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutTrainingInput, TrainingEnrollmentUncheckedCreateWithoutTrainingInput> | TrainingEnrollmentCreateWithoutTrainingInput[] | TrainingEnrollmentUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutTrainingInput | TrainingEnrollmentCreateOrConnectWithoutTrainingInput[]
    createMany?: TrainingEnrollmentCreateManyTrainingInputEnvelope
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
  }

  export type TrainingUpdaterequirementsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type TrainingEnrollmentUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutTrainingInput, TrainingEnrollmentUncheckedCreateWithoutTrainingInput> | TrainingEnrollmentCreateWithoutTrainingInput[] | TrainingEnrollmentUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutTrainingInput | TrainingEnrollmentCreateOrConnectWithoutTrainingInput[]
    upsert?: TrainingEnrollmentUpsertWithWhereUniqueWithoutTrainingInput | TrainingEnrollmentUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: TrainingEnrollmentCreateManyTrainingInputEnvelope
    set?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    disconnect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    delete?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    update?: TrainingEnrollmentUpdateWithWhereUniqueWithoutTrainingInput | TrainingEnrollmentUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: TrainingEnrollmentUpdateManyWithWhereWithoutTrainingInput | TrainingEnrollmentUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: TrainingEnrollmentScalarWhereInput | TrainingEnrollmentScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutTrainingsNestedInput = {
    create?: XOR<TenantCreateWithoutTrainingsInput, TenantUncheckedCreateWithoutTrainingsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTrainingsInput
    upsert?: TenantUpsertWithoutTrainingsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutTrainingsInput, TenantUpdateWithoutTrainingsInput>, TenantUncheckedUpdateWithoutTrainingsInput>
  }

  export type TrainingEnrollmentUncheckedUpdateManyWithoutTrainingNestedInput = {
    create?: XOR<TrainingEnrollmentCreateWithoutTrainingInput, TrainingEnrollmentUncheckedCreateWithoutTrainingInput> | TrainingEnrollmentCreateWithoutTrainingInput[] | TrainingEnrollmentUncheckedCreateWithoutTrainingInput[]
    connectOrCreate?: TrainingEnrollmentCreateOrConnectWithoutTrainingInput | TrainingEnrollmentCreateOrConnectWithoutTrainingInput[]
    upsert?: TrainingEnrollmentUpsertWithWhereUniqueWithoutTrainingInput | TrainingEnrollmentUpsertWithWhereUniqueWithoutTrainingInput[]
    createMany?: TrainingEnrollmentCreateManyTrainingInputEnvelope
    set?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    disconnect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    delete?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    connect?: TrainingEnrollmentWhereUniqueInput | TrainingEnrollmentWhereUniqueInput[]
    update?: TrainingEnrollmentUpdateWithWhereUniqueWithoutTrainingInput | TrainingEnrollmentUpdateWithWhereUniqueWithoutTrainingInput[]
    updateMany?: TrainingEnrollmentUpdateManyWithWhereWithoutTrainingInput | TrainingEnrollmentUpdateManyWithWhereWithoutTrainingInput[]
    deleteMany?: TrainingEnrollmentScalarWhereInput | TrainingEnrollmentScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutTrainingEnrollmentsInput = {
    create?: XOR<EmployeeCreateWithoutTrainingEnrollmentsInput, EmployeeUncheckedCreateWithoutTrainingEnrollmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTrainingEnrollmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type TrainingCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<TrainingCreateWithoutEnrollmentsInput, TrainingUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutEnrollmentsInput
    connect?: TrainingWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutTrainingEnrollmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutTrainingEnrollmentsInput, EmployeeUncheckedCreateWithoutTrainingEnrollmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutTrainingEnrollmentsInput
    upsert?: EmployeeUpsertWithoutTrainingEnrollmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutTrainingEnrollmentsInput, EmployeeUpdateWithoutTrainingEnrollmentsInput>, EmployeeUncheckedUpdateWithoutTrainingEnrollmentsInput>
  }

  export type TrainingUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<TrainingCreateWithoutEnrollmentsInput, TrainingUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: TrainingCreateOrConnectWithoutEnrollmentsInput
    upsert?: TrainingUpsertWithoutEnrollmentsInput
    connect?: TrainingWhereUniqueInput
    update?: XOR<XOR<TrainingUpdateToOneWithWhereWithoutEnrollmentsInput, TrainingUpdateWithoutEnrollmentsInput>, TrainingUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type IntegrationLogCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<IntegrationLogCreateWithoutIntegrationInput, IntegrationLogUncheckedCreateWithoutIntegrationInput> | IntegrationLogCreateWithoutIntegrationInput[] | IntegrationLogUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutIntegrationInput | IntegrationLogCreateOrConnectWithoutIntegrationInput[]
    createMany?: IntegrationLogCreateManyIntegrationInputEnvelope
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutIntegrationsInput = {
    create?: XOR<TenantCreateWithoutIntegrationsInput, TenantUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIntegrationsInput
    connect?: TenantWhereUniqueInput
  }

  export type IntegrationLogUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<IntegrationLogCreateWithoutIntegrationInput, IntegrationLogUncheckedCreateWithoutIntegrationInput> | IntegrationLogCreateWithoutIntegrationInput[] | IntegrationLogUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutIntegrationInput | IntegrationLogCreateOrConnectWithoutIntegrationInput[]
    createMany?: IntegrationLogCreateManyIntegrationInputEnvelope
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
  }

  export type IntegrationLogUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<IntegrationLogCreateWithoutIntegrationInput, IntegrationLogUncheckedCreateWithoutIntegrationInput> | IntegrationLogCreateWithoutIntegrationInput[] | IntegrationLogUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutIntegrationInput | IntegrationLogCreateOrConnectWithoutIntegrationInput[]
    upsert?: IntegrationLogUpsertWithWhereUniqueWithoutIntegrationInput | IntegrationLogUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: IntegrationLogCreateManyIntegrationInputEnvelope
    set?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    disconnect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    delete?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    update?: IntegrationLogUpdateWithWhereUniqueWithoutIntegrationInput | IntegrationLogUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: IntegrationLogUpdateManyWithWhereWithoutIntegrationInput | IntegrationLogUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: IntegrationLogScalarWhereInput | IntegrationLogScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutIntegrationsNestedInput = {
    create?: XOR<TenantCreateWithoutIntegrationsInput, TenantUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIntegrationsInput
    upsert?: TenantUpsertWithoutIntegrationsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutIntegrationsInput, TenantUpdateWithoutIntegrationsInput>, TenantUncheckedUpdateWithoutIntegrationsInput>
  }

  export type IntegrationLogUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<IntegrationLogCreateWithoutIntegrationInput, IntegrationLogUncheckedCreateWithoutIntegrationInput> | IntegrationLogCreateWithoutIntegrationInput[] | IntegrationLogUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: IntegrationLogCreateOrConnectWithoutIntegrationInput | IntegrationLogCreateOrConnectWithoutIntegrationInput[]
    upsert?: IntegrationLogUpsertWithWhereUniqueWithoutIntegrationInput | IntegrationLogUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: IntegrationLogCreateManyIntegrationInputEnvelope
    set?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    disconnect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    delete?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    connect?: IntegrationLogWhereUniqueInput | IntegrationLogWhereUniqueInput[]
    update?: IntegrationLogUpdateWithWhereUniqueWithoutIntegrationInput | IntegrationLogUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: IntegrationLogUpdateManyWithWhereWithoutIntegrationInput | IntegrationLogUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: IntegrationLogScalarWhereInput | IntegrationLogScalarWhereInput[]
  }

  export type IntegrationCreateNestedOneWithoutIntegrationLogsInput = {
    create?: XOR<IntegrationCreateWithoutIntegrationLogsInput, IntegrationUncheckedCreateWithoutIntegrationLogsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutIntegrationLogsInput
    connect?: IntegrationWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutIntegrationLogsInput = {
    create?: XOR<TenantCreateWithoutIntegrationLogsInput, TenantUncheckedCreateWithoutIntegrationLogsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIntegrationLogsInput
    connect?: TenantWhereUniqueInput
  }

  export type IntegrationUpdateOneRequiredWithoutIntegrationLogsNestedInput = {
    create?: XOR<IntegrationCreateWithoutIntegrationLogsInput, IntegrationUncheckedCreateWithoutIntegrationLogsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutIntegrationLogsInput
    upsert?: IntegrationUpsertWithoutIntegrationLogsInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<XOR<IntegrationUpdateToOneWithWhereWithoutIntegrationLogsInput, IntegrationUpdateWithoutIntegrationLogsInput>, IntegrationUncheckedUpdateWithoutIntegrationLogsInput>
  }

  export type TenantUpdateOneRequiredWithoutIntegrationLogsNestedInput = {
    create?: XOR<TenantCreateWithoutIntegrationLogsInput, TenantUncheckedCreateWithoutIntegrationLogsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutIntegrationLogsInput
    upsert?: TenantUpsertWithoutIntegrationLogsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutIntegrationLogsInput, TenantUpdateWithoutIntegrationLogsInput>, TenantUncheckedUpdateWithoutIntegrationLogsInput>
  }

  export type ApprovalCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<ApprovalCreateWithoutWorkflowInput, ApprovalUncheckedCreateWithoutWorkflowInput> | ApprovalCreateWithoutWorkflowInput[] | ApprovalUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutWorkflowInput | ApprovalCreateOrConnectWithoutWorkflowInput[]
    createMany?: ApprovalCreateManyWorkflowInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type WorkflowStatsCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowStatsCreateWithoutWorkflowInput, WorkflowStatsUncheckedCreateWithoutWorkflowInput> | WorkflowStatsCreateWithoutWorkflowInput[] | WorkflowStatsUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutWorkflowInput | WorkflowStatsCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowStatsCreateManyWorkflowInputEnvelope
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutWorkflowsInput = {
    create?: XOR<TenantCreateWithoutWorkflowsInput, TenantUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkflowsInput
    connect?: TenantWhereUniqueInput
  }

  export type ApprovalUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<ApprovalCreateWithoutWorkflowInput, ApprovalUncheckedCreateWithoutWorkflowInput> | ApprovalCreateWithoutWorkflowInput[] | ApprovalUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutWorkflowInput | ApprovalCreateOrConnectWithoutWorkflowInput[]
    createMany?: ApprovalCreateManyWorkflowInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type WorkflowStatsUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<WorkflowStatsCreateWithoutWorkflowInput, WorkflowStatsUncheckedCreateWithoutWorkflowInput> | WorkflowStatsCreateWithoutWorkflowInput[] | WorkflowStatsUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutWorkflowInput | WorkflowStatsCreateOrConnectWithoutWorkflowInput[]
    createMany?: WorkflowStatsCreateManyWorkflowInputEnvelope
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
  }

  export type ApprovalUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<ApprovalCreateWithoutWorkflowInput, ApprovalUncheckedCreateWithoutWorkflowInput> | ApprovalCreateWithoutWorkflowInput[] | ApprovalUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutWorkflowInput | ApprovalCreateOrConnectWithoutWorkflowInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutWorkflowInput | ApprovalUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: ApprovalCreateManyWorkflowInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutWorkflowInput | ApprovalUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutWorkflowInput | ApprovalUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type WorkflowStatsUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowStatsCreateWithoutWorkflowInput, WorkflowStatsUncheckedCreateWithoutWorkflowInput> | WorkflowStatsCreateWithoutWorkflowInput[] | WorkflowStatsUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutWorkflowInput | WorkflowStatsCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowStatsUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowStatsUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowStatsCreateManyWorkflowInputEnvelope
    set?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    disconnect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    delete?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    update?: WorkflowStatsUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowStatsUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowStatsUpdateManyWithWhereWithoutWorkflowInput | WorkflowStatsUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowStatsScalarWhereInput | WorkflowStatsScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutWorkflowsNestedInput = {
    create?: XOR<TenantCreateWithoutWorkflowsInput, TenantUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkflowsInput
    upsert?: TenantUpsertWithoutWorkflowsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutWorkflowsInput, TenantUpdateWithoutWorkflowsInput>, TenantUncheckedUpdateWithoutWorkflowsInput>
  }

  export type ApprovalUncheckedUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<ApprovalCreateWithoutWorkflowInput, ApprovalUncheckedCreateWithoutWorkflowInput> | ApprovalCreateWithoutWorkflowInput[] | ApprovalUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutWorkflowInput | ApprovalCreateOrConnectWithoutWorkflowInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutWorkflowInput | ApprovalUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: ApprovalCreateManyWorkflowInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutWorkflowInput | ApprovalUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutWorkflowInput | ApprovalUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type WorkflowStatsUncheckedUpdateManyWithoutWorkflowNestedInput = {
    create?: XOR<WorkflowStatsCreateWithoutWorkflowInput, WorkflowStatsUncheckedCreateWithoutWorkflowInput> | WorkflowStatsCreateWithoutWorkflowInput[] | WorkflowStatsUncheckedCreateWithoutWorkflowInput[]
    connectOrCreate?: WorkflowStatsCreateOrConnectWithoutWorkflowInput | WorkflowStatsCreateOrConnectWithoutWorkflowInput[]
    upsert?: WorkflowStatsUpsertWithWhereUniqueWithoutWorkflowInput | WorkflowStatsUpsertWithWhereUniqueWithoutWorkflowInput[]
    createMany?: WorkflowStatsCreateManyWorkflowInputEnvelope
    set?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    disconnect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    delete?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    connect?: WorkflowStatsWhereUniqueInput | WorkflowStatsWhereUniqueInput[]
    update?: WorkflowStatsUpdateWithWhereUniqueWithoutWorkflowInput | WorkflowStatsUpdateWithWhereUniqueWithoutWorkflowInput[]
    updateMany?: WorkflowStatsUpdateManyWithWhereWithoutWorkflowInput | WorkflowStatsUpdateManyWithWhereWithoutWorkflowInput[]
    deleteMany?: WorkflowStatsScalarWhereInput | WorkflowStatsScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutWorkflowStatsInput = {
    create?: XOR<TenantCreateWithoutWorkflowStatsInput, TenantUncheckedCreateWithoutWorkflowStatsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkflowStatsInput
    connect?: TenantWhereUniqueInput
  }

  export type WorkflowCreateNestedOneWithoutWorkflowStatsInput = {
    create?: XOR<WorkflowCreateWithoutWorkflowStatsInput, WorkflowUncheckedCreateWithoutWorkflowStatsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutWorkflowStatsInput
    connect?: WorkflowWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutWorkflowStatsNestedInput = {
    create?: XOR<TenantCreateWithoutWorkflowStatsInput, TenantUncheckedCreateWithoutWorkflowStatsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutWorkflowStatsInput
    upsert?: TenantUpsertWithoutWorkflowStatsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutWorkflowStatsInput, TenantUpdateWithoutWorkflowStatsInput>, TenantUncheckedUpdateWithoutWorkflowStatsInput>
  }

  export type WorkflowUpdateOneRequiredWithoutWorkflowStatsNestedInput = {
    create?: XOR<WorkflowCreateWithoutWorkflowStatsInput, WorkflowUncheckedCreateWithoutWorkflowStatsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutWorkflowStatsInput
    upsert?: WorkflowUpsertWithoutWorkflowStatsInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<XOR<WorkflowUpdateToOneWithWhereWithoutWorkflowStatsInput, WorkflowUpdateWithoutWorkflowStatsInput>, WorkflowUncheckedUpdateWithoutWorkflowStatsInput>
  }

  export type TenantCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<TenantCreateWithoutApprovalsInput, TenantUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutApprovalsInput
    connect?: TenantWhereUniqueInput
  }

  export type WorkflowCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<WorkflowCreateWithoutApprovalsInput, WorkflowUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutApprovalsInput
    connect?: WorkflowWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<TenantCreateWithoutApprovalsInput, TenantUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutApprovalsInput
    upsert?: TenantUpsertWithoutApprovalsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutApprovalsInput, TenantUpdateWithoutApprovalsInput>, TenantUncheckedUpdateWithoutApprovalsInput>
  }

  export type WorkflowUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<WorkflowCreateWithoutApprovalsInput, WorkflowUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutApprovalsInput
    upsert?: WorkflowUpsertWithoutApprovalsInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<XOR<WorkflowUpdateToOneWithWhereWithoutApprovalsInput, WorkflowUpdateWithoutApprovalsInput>, WorkflowUncheckedUpdateWithoutApprovalsInput>
  }

  export type TenantCreateNestedOneWithoutExperimentalFeaturesInput = {
    create?: XOR<TenantCreateWithoutExperimentalFeaturesInput, TenantUncheckedCreateWithoutExperimentalFeaturesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutExperimentalFeaturesInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutExperimentalFeaturesNestedInput = {
    create?: XOR<TenantCreateWithoutExperimentalFeaturesInput, TenantUncheckedCreateWithoutExperimentalFeaturesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutExperimentalFeaturesInput
    upsert?: TenantUpsertWithoutExperimentalFeaturesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutExperimentalFeaturesInput, TenantUpdateWithoutExperimentalFeaturesInput>, TenantUncheckedUpdateWithoutExperimentalFeaturesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type ApprovalCreateWithoutTenantInput = {
    id?: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutTenantInput = {
    id?: string
    workflowId: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutTenantInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutTenantInput, ApprovalUncheckedCreateWithoutTenantInput>
  }

  export type ApprovalCreateManyTenantInputEnvelope = {
    data: ApprovalCreateManyTenantInput | ApprovalCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutTenantInput = {
    id?: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutTenantInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
  }

  export type NotificationCreateOrConnectWithoutTenantInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput>
  }

  export type NotificationCreateManyTenantInputEnvelope = {
    data: NotificationCreateManyTenantInput | NotificationCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutTenantInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutTenantInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    userId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutTenantInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutTenantInput, AuditLogUncheckedCreateWithoutTenantInput>
  }

  export type AuditLogCreateManyTenantInputEnvelope = {
    data: AuditLogCreateManyTenantInput | AuditLogCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type BranchCreateWithoutTenantInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutBranchesInput
    employees?: EmployeeCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    departmentId: string
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutTenantInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutTenantInput, BranchUncheckedCreateWithoutTenantInput>
  }

  export type BranchCreateManyTenantInputEnvelope = {
    data: BranchCreateManyTenantInput | BranchCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type DashboardCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    layout: JsonNullValueInput | InputJsonValue
    widgets: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: number | null
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: DashboardCreateallowedRolesInput | string[]
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DashboardUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    layout: JsonNullValueInput | InputJsonValue
    widgets: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: number | null
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: DashboardCreateallowedRolesInput | string[]
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DashboardCreateOrConnectWithoutTenantInput = {
    where: DashboardWhereUniqueInput
    create: XOR<DashboardCreateWithoutTenantInput, DashboardUncheckedCreateWithoutTenantInput>
  }

  export type DashboardCreateManyTenantInputEnvelope = {
    data: DashboardCreateManyTenantInput | DashboardCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branches?: BranchCreateNestedManyWithoutDepartmentInput
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    employees?: EmployeeCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    managerId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branches?: BranchUncheckedCreateNestedManyWithoutDepartmentInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTenantInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput>
  }

  export type DepartmentCreateManyTenantInputEnvelope = {
    data: DepartmentCreateManyTenantInput | DepartmentCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutTenantInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTenantInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput>
  }

  export type EmployeeCreateManyTenantInputEnvelope = {
    data: EmployeeCreateManyTenantInput | EmployeeCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type ExperimentalFeatureCreateWithoutTenantInput = {
    id?: string
    key: string
    name: string
    description?: string | null
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
  }

  export type ExperimentalFeatureUncheckedCreateWithoutTenantInput = {
    id?: string
    key: string
    name: string
    description?: string | null
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
  }

  export type ExperimentalFeatureCreateOrConnectWithoutTenantInput = {
    where: ExperimentalFeatureWhereUniqueInput
    create: XOR<ExperimentalFeatureCreateWithoutTenantInput, ExperimentalFeatureUncheckedCreateWithoutTenantInput>
  }

  export type ExperimentalFeatureCreateManyTenantInputEnvelope = {
    data: ExperimentalFeatureCreateManyTenantInput | ExperimentalFeatureCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type HolidayCreateWithoutTenantInput = {
    id?: string
    name: string
    date: Date | string
    type?: string
    description?: string | null
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HolidayUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    date: Date | string
    type?: string
    description?: string | null
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HolidayCreateOrConnectWithoutTenantInput = {
    where: HolidayWhereUniqueInput
    create: XOR<HolidayCreateWithoutTenantInput, HolidayUncheckedCreateWithoutTenantInput>
  }

  export type HolidayCreateManyTenantInputEnvelope = {
    data: HolidayCreateManyTenantInput | HolidayCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationLogCreateWithoutTenantInput = {
    id?: string
    message: string
    createdAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
    integration: IntegrationCreateNestedOneWithoutIntegrationLogsInput
  }

  export type IntegrationLogUncheckedCreateWithoutTenantInput = {
    id?: string
    integrationId: string
    message: string
    createdAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
  }

  export type IntegrationLogCreateOrConnectWithoutTenantInput = {
    where: IntegrationLogWhereUniqueInput
    create: XOR<IntegrationLogCreateWithoutTenantInput, IntegrationLogUncheckedCreateWithoutTenantInput>
  }

  export type IntegrationLogCreateManyTenantInputEnvelope = {
    data: IntegrationLogCreateManyTenantInput | IntegrationLogCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationCreateWithoutTenantInput = {
    id?: string
    name: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
    integrationLogs?: IntegrationLogCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutTenantInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutTenantInput, IntegrationUncheckedCreateWithoutTenantInput>
  }

  export type IntegrationCreateManyTenantInputEnvelope = {
    data: IntegrationCreateManyTenantInput | IntegrationCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type LeaveBalanceCreateWithoutTenantInput = {
    id?: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveBalancesInput
    leaveType: LeaveTypeCreateNestedOneWithoutLeaveBalancesInput
  }

  export type LeaveBalanceUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeId: string
    leaveTypeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveBalanceCreateOrConnectWithoutTenantInput = {
    where: LeaveBalanceWhereUniqueInput
    create: XOR<LeaveBalanceCreateWithoutTenantInput, LeaveBalanceUncheckedCreateWithoutTenantInput>
  }

  export type LeaveBalanceCreateManyTenantInputEnvelope = {
    data: LeaveBalanceCreateManyTenantInput | LeaveBalanceCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type LeavePolicyCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveType: LeaveTypeCreateNestedOneWithoutLeavePoliciesInput
  }

  export type LeavePolicyUncheckedCreateWithoutTenantInput = {
    id?: string
    leaveTypeId: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeavePolicyCreateOrConnectWithoutTenantInput = {
    where: LeavePolicyWhereUniqueInput
    create: XOR<LeavePolicyCreateWithoutTenantInput, LeavePolicyUncheckedCreateWithoutTenantInput>
  }

  export type LeavePolicyCreateManyTenantInputEnvelope = {
    data: LeavePolicyCreateManyTenantInput | LeavePolicyCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestCreateWithoutTenantInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveRequestsInput
    branch?: BranchCreateNestedOneWithoutLeaveRequestsInput
    leaveType: LeaveTypeCreateNestedOneWithoutLeaveRequestsInput
  }

  export type LeaveRequestUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveRequestCreateOrConnectWithoutTenantInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutTenantInput, LeaveRequestUncheckedCreateWithoutTenantInput>
  }

  export type LeaveRequestCreateManyTenantInputEnvelope = {
    data: LeaveRequestCreateManyTenantInput | LeaveRequestCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type LeaveTypeCreateWithoutTenantInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutLeaveTypeInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutLeaveTypeInput
  }

  export type LeaveTypeUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutLeaveTypeInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutLeaveTypeInput
  }

  export type LeaveTypeCreateOrConnectWithoutTenantInput = {
    where: LeaveTypeWhereUniqueInput
    create: XOR<LeaveTypeCreateWithoutTenantInput, LeaveTypeUncheckedCreateWithoutTenantInput>
  }

  export type LeaveTypeCreateManyTenantInputEnvelope = {
    data: LeaveTypeCreateManyTenantInput | LeaveTypeCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PayStubCreateWithoutTenantInput = {
    id?: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPayStubsInput
    payroll: PayrollCreateNestedOneWithoutPayStubInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayStubsInput
  }

  export type PayStubUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeId: string
    payrollId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayStubCreateOrConnectWithoutTenantInput = {
    where: PayStubWhereUniqueInput
    create: XOR<PayStubCreateWithoutTenantInput, PayStubUncheckedCreateWithoutTenantInput>
  }

  export type PayStubCreateManyTenantInputEnvelope = {
    data: PayStubCreateManyTenantInput | PayStubCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PayrollItemCreateWithoutTenantInput = {
    id?: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    payroll: PayrollCreateNestedOneWithoutPayrollItemsInput
  }

  export type PayrollItemUncheckedCreateWithoutTenantInput = {
    id?: string
    payrollId: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollItemCreateOrConnectWithoutTenantInput = {
    where: PayrollItemWhereUniqueInput
    create: XOR<PayrollItemCreateWithoutTenantInput, PayrollItemUncheckedCreateWithoutTenantInput>
  }

  export type PayrollItemCreateManyTenantInputEnvelope = {
    data: PayrollItemCreateManyTenantInput | PayrollItemCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PayrollPeriodCreateWithoutTenantInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStubs?: PayStubCreateNestedManyWithoutPayrollPeriodInput
    payrolls?: PayrollCreateNestedManyWithoutPayrollPeriodInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStubs?: PayStubUncheckedCreateNestedManyWithoutPayrollPeriodInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutPayrollPeriodInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodCreateOrConnectWithoutTenantInput = {
    where: PayrollPeriodWhereUniqueInput
    create: XOR<PayrollPeriodCreateWithoutTenantInput, PayrollPeriodUncheckedCreateWithoutTenantInput>
  }

  export type PayrollPeriodCreateManyTenantInputEnvelope = {
    data: PayrollPeriodCreateManyTenantInput | PayrollPeriodCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PayrollSettingsCreateWithoutTenantInput = {
    id?: string
    companyName?: string | null
    kraPin?: string | null
    nssfNumber?: string | null
    nhifNumber?: string | null
    companyAddress?: string | null
    companyCity?: string | null
    companyPostalCode?: string | null
    personalRelief?: number
    overtimeMultiplier?: number
    workingDaysPerMonth?: number
    workingHoursPerDay?: number
    payFrequency?: string
    payDay?: number
    cutoffDay?: number
    requirePayrollApproval?: boolean
    approvalLevels?: number
    autoApproveThreshold?: number
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: string | null
    accountNumber?: string | null
    branchCode?: string | null
    swiftCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollSettingsUncheckedCreateWithoutTenantInput = {
    id?: string
    companyName?: string | null
    kraPin?: string | null
    nssfNumber?: string | null
    nhifNumber?: string | null
    companyAddress?: string | null
    companyCity?: string | null
    companyPostalCode?: string | null
    personalRelief?: number
    overtimeMultiplier?: number
    workingDaysPerMonth?: number
    workingHoursPerDay?: number
    payFrequency?: string
    payDay?: number
    cutoffDay?: number
    requirePayrollApproval?: boolean
    approvalLevels?: number
    autoApproveThreshold?: number
    notifyEmployeesOnPayment?: boolean
    sendPayslipsByEmail?: boolean
    bankName?: string | null
    accountNumber?: string | null
    branchCode?: string | null
    swiftCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollSettingsCreateOrConnectWithoutTenantInput = {
    where: PayrollSettingsWhereUniqueInput
    create: XOR<PayrollSettingsCreateWithoutTenantInput, PayrollSettingsUncheckedCreateWithoutTenantInput>
  }

  export type PayrollCreateWithoutTenantInput = {
    id?: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStub?: PayStubCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemCreateNestedManyWithoutPayrollInput
    employee: EmployeeCreateNestedOneWithoutPayrollsInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayrollsInput
  }

  export type PayrollUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStub?: PayStubUncheckedCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutPayrollInput
  }

  export type PayrollCreateOrConnectWithoutTenantInput = {
    where: PayrollWhereUniqueInput
    create: XOR<PayrollCreateWithoutTenantInput, PayrollUncheckedCreateWithoutTenantInput>
  }

  export type PayrollCreateManyTenantInputEnvelope = {
    data: PayrollCreateManyTenantInput | PayrollCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceFeedbackCreateWithoutTenantInput = {
    id?: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceReview: PerformanceReviewCreateNestedOneWithoutPerformanceFeedbackInput
  }

  export type PerformanceFeedbackUncheckedCreateWithoutTenantInput = {
    id?: string
    performanceReviewId: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceFeedbackCreateOrConnectWithoutTenantInput = {
    where: PerformanceFeedbackWhereUniqueInput
    create: XOR<PerformanceFeedbackCreateWithoutTenantInput, PerformanceFeedbackUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceFeedbackCreateManyTenantInputEnvelope = {
    data: PerformanceFeedbackCreateManyTenantInput | PerformanceFeedbackCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceGoalCreateWithoutTenantInput = {
    id?: string
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPerformanceGoalsInput
    reviewCycle?: PerformanceReviewCycleCreateNestedOneWithoutPerformanceGoalsInput
  }

  export type PerformanceGoalUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeId: string
    reviewCycleId?: string | null
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceGoalCreateOrConnectWithoutTenantInput = {
    where: PerformanceGoalWhereUniqueInput
    create: XOR<PerformanceGoalCreateWithoutTenantInput, PerformanceGoalUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceGoalCreateManyTenantInputEnvelope = {
    data: PerformanceGoalCreateManyTenantInput | PerformanceGoalCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceRatingCreateWithoutTenantInput = {
    id?: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceReview: PerformanceReviewCreateNestedOneWithoutPerformanceRatingsInput
  }

  export type PerformanceRatingUncheckedCreateWithoutTenantInput = {
    id?: string
    performanceReviewId: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceRatingCreateOrConnectWithoutTenantInput = {
    where: PerformanceRatingWhereUniqueInput
    create: XOR<PerformanceRatingCreateWithoutTenantInput, PerformanceRatingUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceRatingCreateManyTenantInputEnvelope = {
    data: PerformanceRatingCreateManyTenantInput | PerformanceRatingCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceReviewCycleCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutReviewCycleInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutReviewCycleInput
  }

  export type PerformanceReviewCycleUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutReviewCycleInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutReviewCycleInput
  }

  export type PerformanceReviewCycleCreateOrConnectWithoutTenantInput = {
    where: PerformanceReviewCycleWhereUniqueInput
    create: XOR<PerformanceReviewCycleCreateWithoutTenantInput, PerformanceReviewCycleUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceReviewCycleCreateManyTenantInputEnvelope = {
    data: PerformanceReviewCycleCreateManyTenantInput | PerformanceReviewCycleCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceReviewCreateWithoutTenantInput = {
    id?: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutPerformanceReviewInput
    employee: EmployeeCreateNestedOneWithoutPerformanceReviewsInput
    reviewCycle: PerformanceReviewCycleCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeId: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutPerformanceReviewInput
  }

  export type PerformanceReviewCreateOrConnectWithoutTenantInput = {
    where: PerformanceReviewWhereUniqueInput
    create: XOR<PerformanceReviewCreateWithoutTenantInput, PerformanceReviewUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceReviewCreateManyTenantInputEnvelope = {
    data: PerformanceReviewCreateManyTenantInput | PerformanceReviewCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type ReportInstanceCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: ReportTemplateCreateNestedOneWithoutReportInstancesInput
  }

  export type ReportInstanceUncheckedCreateWithoutTenantInput = {
    id?: string
    templateId: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportInstanceCreateOrConnectWithoutTenantInput = {
    where: ReportInstanceWhereUniqueInput
    create: XOR<ReportInstanceCreateWithoutTenantInput, ReportInstanceUncheckedCreateWithoutTenantInput>
  }

  export type ReportInstanceCreateManyTenantInputEnvelope = {
    data: ReportInstanceCreateManyTenantInput | ReportInstanceCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type ReportTemplateCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportInstances?: ReportInstanceCreateNestedManyWithoutTemplateInput
  }

  export type ReportTemplateUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type ReportTemplateCreateOrConnectWithoutTenantInput = {
    where: ReportTemplateWhereUniqueInput
    create: XOR<ReportTemplateCreateWithoutTenantInput, ReportTemplateUncheckedCreateWithoutTenantInput>
  }

  export type ReportTemplateCreateManyTenantInputEnvelope = {
    data: ReportTemplateCreateManyTenantInput | ReportTemplateCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type SalaryAdvancePolicyCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    maxAdvancePercentage?: number
    maxAdvanceAmount?: number | null
    minServiceMonths?: number
    maxAdvancesPerYear?: number
    interestRate?: number
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlyDeductionPercentage?: number
  }

  export type SalaryAdvancePolicyUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    maxAdvancePercentage?: number
    maxAdvanceAmount?: number | null
    minServiceMonths?: number
    maxAdvancesPerYear?: number
    interestRate?: number
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlyDeductionPercentage?: number
  }

  export type SalaryAdvancePolicyCreateOrConnectWithoutTenantInput = {
    where: SalaryAdvancePolicyWhereUniqueInput
    create: XOR<SalaryAdvancePolicyCreateWithoutTenantInput, SalaryAdvancePolicyUncheckedCreateWithoutTenantInput>
  }

  export type SalaryAdvancePolicyCreateManyTenantInputEnvelope = {
    data: SalaryAdvancePolicyCreateManyTenantInput | SalaryAdvancePolicyCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type SalaryAdvanceRepaymentCreateWithoutTenantInput = {
    id?: string
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollPeriod?: PayrollPeriodCreateNestedOneWithoutSalaryAdvanceRepaymentsInput
    salaryAdvanceRequest: SalaryAdvanceRequestCreateNestedOneWithoutRepaymentsInput
  }

  export type SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput = {
    id?: string
    salaryAdvanceRequestId: string
    payrollPeriodId?: string | null
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalaryAdvanceRepaymentCreateOrConnectWithoutTenantInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    create: XOR<SalaryAdvanceRepaymentCreateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput>
  }

  export type SalaryAdvanceRepaymentCreateManyTenantInputEnvelope = {
    data: SalaryAdvanceRepaymentCreateManyTenantInput | SalaryAdvanceRepaymentCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type SalaryAdvanceRequestCreateWithoutTenantInput = {
    id?: string
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    repayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutSalaryAdvanceRequestInput
    employee: EmployeeCreateNestedOneWithoutSalaryAdvanceRequestsInput
    branch?: BranchCreateNestedOneWithoutSalaryAdvanceRequestsInput
  }

  export type SalaryAdvanceRequestUncheckedCreateWithoutTenantInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    repayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutSalaryAdvanceRequestInput
  }

  export type SalaryAdvanceRequestCreateOrConnectWithoutTenantInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    create: XOR<SalaryAdvanceRequestCreateWithoutTenantInput, SalaryAdvanceRequestUncheckedCreateWithoutTenantInput>
  }

  export type SalaryAdvanceRequestCreateManyTenantInputEnvelope = {
    data: SalaryAdvanceRequestCreateManyTenantInput | SalaryAdvanceRequestCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type SecurityAlertCreateWithoutTenantInput = {
    id?: string
    type: string
    title: string
    description: string
    timestamp?: Date | string
  }

  export type SecurityAlertUncheckedCreateWithoutTenantInput = {
    id?: string
    type: string
    title: string
    description: string
    timestamp?: Date | string
  }

  export type SecurityAlertCreateOrConnectWithoutTenantInput = {
    where: SecurityAlertWhereUniqueInput
    create: XOR<SecurityAlertCreateWithoutTenantInput, SecurityAlertUncheckedCreateWithoutTenantInput>
  }

  export type SecurityAlertCreateManyTenantInputEnvelope = {
    data: SecurityAlertCreateManyTenantInput | SecurityAlertCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type SecuritySettingsCreateWithoutTenantInput = {
    id?: string
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
  }

  export type SecuritySettingsUncheckedCreateWithoutTenantInput = {
    id?: string
    twoFactorAuth?: boolean
    passwordExpiry?: boolean
    sessionTimeout?: boolean
    ipWhitelist?: boolean
    auditLogging?: boolean
    encryptionAtRest?: boolean
  }

  export type SecuritySettingsCreateOrConnectWithoutTenantInput = {
    where: SecuritySettingsWhereUniqueInput
    create: XOR<SecuritySettingsCreateWithoutTenantInput, SecuritySettingsUncheckedCreateWithoutTenantInput>
  }

  export type TaxBracketCreateWithoutTenantInput = {
    id?: string
    name: string
    minAmount: number
    maxAmount?: number | null
    rate: number
    fixedAmount?: number
    isActive?: boolean
    effectiveDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaxBracketUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    minAmount: number
    maxAmount?: number | null
    rate: number
    fixedAmount?: number
    isActive?: boolean
    effectiveDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaxBracketCreateOrConnectWithoutTenantInput = {
    where: TaxBracketWhereUniqueInput
    create: XOR<TaxBracketCreateWithoutTenantInput, TaxBracketUncheckedCreateWithoutTenantInput>
  }

  export type TaxBracketCreateManyTenantInputEnvelope = {
    data: TaxBracketCreateManyTenantInput | TaxBracketCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type TrainingCreateWithoutTenantInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: TrainingEnrollmentCreateNestedManyWithoutTrainingInput
  }

  export type TrainingUncheckedCreateWithoutTenantInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutTrainingInput
  }

  export type TrainingCreateOrConnectWithoutTenantInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutTenantInput, TrainingUncheckedCreateWithoutTenantInput>
  }

  export type TrainingCreateManyTenantInputEnvelope = {
    data: TrainingCreateManyTenantInput | TrainingCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutTenantInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: string | null
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowStatsCreateWithoutTenantInput = {
    id?: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    workflow: WorkflowCreateNestedOneWithoutWorkflowStatsInput
  }

  export type WorkflowStatsUncheckedCreateWithoutTenantInput = {
    id?: string
    workflowId: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type WorkflowStatsCreateOrConnectWithoutTenantInput = {
    where: WorkflowStatsWhereUniqueInput
    create: XOR<WorkflowStatsCreateWithoutTenantInput, WorkflowStatsUncheckedCreateWithoutTenantInput>
  }

  export type WorkflowStatsCreateManyTenantInputEnvelope = {
    data: WorkflowStatsCreateManyTenantInput | WorkflowStatsCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowTemplateCreateWithoutTenantInput = {
    id?: string
    name: string
    description: string
    category: string
    version: string
    isActive: boolean
    steps: JsonNullValueInput | InputJsonValue
    triggers: JsonNullValueInput | InputJsonValue
    variables: JsonNullValueInput | InputJsonValue
    createdBy: string
    createdDate: Date | string
    lastModified: Date | string
  }

  export type WorkflowTemplateUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description: string
    category: string
    version: string
    isActive: boolean
    steps: JsonNullValueInput | InputJsonValue
    triggers: JsonNullValueInput | InputJsonValue
    variables: JsonNullValueInput | InputJsonValue
    createdBy: string
    createdDate: Date | string
    lastModified: Date | string
  }

  export type WorkflowTemplateCreateOrConnectWithoutTenantInput = {
    where: WorkflowTemplateWhereUniqueInput
    create: XOR<WorkflowTemplateCreateWithoutTenantInput, WorkflowTemplateUncheckedCreateWithoutTenantInput>
  }

  export type WorkflowTemplateCreateManyTenantInputEnvelope = {
    data: WorkflowTemplateCreateManyTenantInput | WorkflowTemplateCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowCreateWithoutTenantInput = {
    id?: string
    name: string
    approvals?: ApprovalCreateNestedManyWithoutWorkflowInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutWorkflowInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutTenantInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutTenantInput, WorkflowUncheckedCreateWithoutTenantInput>
  }

  export type WorkflowCreateManyTenantInputEnvelope = {
    data: WorkflowCreateManyTenantInput | WorkflowCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type ApprovalUpsertWithWhereUniqueWithoutTenantInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutTenantInput, ApprovalUncheckedUpdateWithoutTenantInput>
    create: XOR<ApprovalCreateWithoutTenantInput, ApprovalUncheckedCreateWithoutTenantInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutTenantInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutTenantInput, ApprovalUncheckedUpdateWithoutTenantInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutTenantInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutTenantInput>
  }

  export type ApprovalScalarWhereInput = {
    AND?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    OR?: ApprovalScalarWhereInput[]
    NOT?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    id?: StringFilter<"Approval"> | string
    workflowId?: StringFilter<"Approval"> | string
    approverId?: StringFilter<"Approval"> | string
    status?: StringFilter<"Approval"> | string
    comments?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    updatedAt?: DateTimeFilter<"Approval"> | Date | string
    tenantId?: StringFilter<"Approval"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutTenantInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutTenantInput, NotificationUncheckedUpdateWithoutTenantInput>
    create: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutTenantInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutTenantInput, NotificationUncheckedUpdateWithoutTenantInput>
  }

  export type NotificationUpdateManyWithWhereWithoutTenantInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutTenantInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    timestamp?: DateTimeFilter<"Notification"> | Date | string
    read?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    actionLabel?: StringNullableFilter<"Notification"> | string | null
    module?: StringNullableFilter<"Notification"> | string | null
    tenantId?: StringFilter<"Notification"> | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutTenantInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutTenantInput, AuditLogUncheckedUpdateWithoutTenantInput>
    create: XOR<AuditLogCreateWithoutTenantInput, AuditLogUncheckedCreateWithoutTenantInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutTenantInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutTenantInput, AuditLogUncheckedUpdateWithoutTenantInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutTenantInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutTenantInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    userId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    tenantId?: StringFilter<"AuditLog"> | string
  }

  export type BranchUpsertWithWhereUniqueWithoutTenantInput = {
    where: BranchWhereUniqueInput
    update: XOR<BranchUpdateWithoutTenantInput, BranchUncheckedUpdateWithoutTenantInput>
    create: XOR<BranchCreateWithoutTenantInput, BranchUncheckedCreateWithoutTenantInput>
  }

  export type BranchUpdateWithWhereUniqueWithoutTenantInput = {
    where: BranchWhereUniqueInput
    data: XOR<BranchUpdateWithoutTenantInput, BranchUncheckedUpdateWithoutTenantInput>
  }

  export type BranchUpdateManyWithWhereWithoutTenantInput = {
    where: BranchScalarWhereInput
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyWithoutTenantInput>
  }

  export type BranchScalarWhereInput = {
    AND?: BranchScalarWhereInput | BranchScalarWhereInput[]
    OR?: BranchScalarWhereInput[]
    NOT?: BranchScalarWhereInput | BranchScalarWhereInput[]
    id?: StringFilter<"Branch"> | string
    name?: StringFilter<"Branch"> | string
    location?: StringNullableFilter<"Branch"> | string | null
    address?: StringNullableFilter<"Branch"> | string | null
    managerId?: StringNullableFilter<"Branch"> | string | null
    managerUserId?: StringNullableFilter<"Branch"> | string | null
    departmentId?: StringFilter<"Branch"> | string
    employeeCount?: IntFilter<"Branch"> | number
    status?: StringFilter<"Branch"> | string
    createdAt?: DateTimeFilter<"Branch"> | Date | string
    updatedAt?: DateTimeFilter<"Branch"> | Date | string
    tenantId?: StringFilter<"Branch"> | string
  }

  export type DashboardUpsertWithWhereUniqueWithoutTenantInput = {
    where: DashboardWhereUniqueInput
    update: XOR<DashboardUpdateWithoutTenantInput, DashboardUncheckedUpdateWithoutTenantInput>
    create: XOR<DashboardCreateWithoutTenantInput, DashboardUncheckedCreateWithoutTenantInput>
  }

  export type DashboardUpdateWithWhereUniqueWithoutTenantInput = {
    where: DashboardWhereUniqueInput
    data: XOR<DashboardUpdateWithoutTenantInput, DashboardUncheckedUpdateWithoutTenantInput>
  }

  export type DashboardUpdateManyWithWhereWithoutTenantInput = {
    where: DashboardScalarWhereInput
    data: XOR<DashboardUpdateManyMutationInput, DashboardUncheckedUpdateManyWithoutTenantInput>
  }

  export type DashboardScalarWhereInput = {
    AND?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
    OR?: DashboardScalarWhereInput[]
    NOT?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
    id?: StringFilter<"Dashboard"> | string
    name?: StringFilter<"Dashboard"> | string
    description?: StringNullableFilter<"Dashboard"> | string | null
    layout?: JsonFilter<"Dashboard">
    widgets?: JsonFilter<"Dashboard">
    filters?: JsonNullableFilter<"Dashboard">
    refreshInterval?: IntNullableFilter<"Dashboard"> | number | null
    isDefault?: BoolFilter<"Dashboard"> | boolean
    isPublic?: BoolFilter<"Dashboard"> | boolean
    allowedRoles?: StringNullableListFilter<"Dashboard">
    createdBy?: StringFilter<"Dashboard"> | string
    createdAt?: DateTimeFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeFilter<"Dashboard"> | Date | string
    tenantId?: StringFilter<"Dashboard"> | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutTenantInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutTenantInput, DepartmentUncheckedUpdateWithoutTenantInput>
    create: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutTenantInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutTenantInput, DepartmentUncheckedUpdateWithoutTenantInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutTenantInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutTenantInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    managerId?: StringNullableFilter<"Department"> | string | null
    employeeCount?: IntFilter<"Department"> | number
    status?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    tenantId?: StringFilter<"Department"> | string
  }

  export type EmployeeUpsertWithWhereUniqueWithoutTenantInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutTenantInput, EmployeeUncheckedUpdateWithoutTenantInput>
    create: XOR<EmployeeCreateWithoutTenantInput, EmployeeUncheckedCreateWithoutTenantInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutTenantInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutTenantInput, EmployeeUncheckedUpdateWithoutTenantInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutTenantInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutTenantInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: StringFilter<"Employee"> | string
    employeeNumber?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    phone?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    position?: StringFilter<"Employee"> | string
    departmentId?: StringFilter<"Employee"> | string
    branchId?: StringNullableFilter<"Employee"> | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    hireDate?: DateTimeFilter<"Employee"> | Date | string
    terminationDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    status?: StringFilter<"Employee"> | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    tenantId?: StringFilter<"Employee"> | string
  }

  export type ExperimentalFeatureUpsertWithWhereUniqueWithoutTenantInput = {
    where: ExperimentalFeatureWhereUniqueInput
    update: XOR<ExperimentalFeatureUpdateWithoutTenantInput, ExperimentalFeatureUncheckedUpdateWithoutTenantInput>
    create: XOR<ExperimentalFeatureCreateWithoutTenantInput, ExperimentalFeatureUncheckedCreateWithoutTenantInput>
  }

  export type ExperimentalFeatureUpdateWithWhereUniqueWithoutTenantInput = {
    where: ExperimentalFeatureWhereUniqueInput
    data: XOR<ExperimentalFeatureUpdateWithoutTenantInput, ExperimentalFeatureUncheckedUpdateWithoutTenantInput>
  }

  export type ExperimentalFeatureUpdateManyWithWhereWithoutTenantInput = {
    where: ExperimentalFeatureScalarWhereInput
    data: XOR<ExperimentalFeatureUpdateManyMutationInput, ExperimentalFeatureUncheckedUpdateManyWithoutTenantInput>
  }

  export type ExperimentalFeatureScalarWhereInput = {
    AND?: ExperimentalFeatureScalarWhereInput | ExperimentalFeatureScalarWhereInput[]
    OR?: ExperimentalFeatureScalarWhereInput[]
    NOT?: ExperimentalFeatureScalarWhereInput | ExperimentalFeatureScalarWhereInput[]
    id?: StringFilter<"ExperimentalFeature"> | string
    key?: StringFilter<"ExperimentalFeature"> | string
    name?: StringFilter<"ExperimentalFeature"> | string
    description?: StringNullableFilter<"ExperimentalFeature"> | string | null
    enabled?: BoolFilter<"ExperimentalFeature"> | boolean
    createdAt?: DateTimeFilter<"ExperimentalFeature"> | Date | string
    updatedAt?: DateTimeFilter<"ExperimentalFeature"> | Date | string
    createdBy?: StringNullableFilter<"ExperimentalFeature"> | string | null
    tenantId?: StringFilter<"ExperimentalFeature"> | string
  }

  export type HolidayUpsertWithWhereUniqueWithoutTenantInput = {
    where: HolidayWhereUniqueInput
    update: XOR<HolidayUpdateWithoutTenantInput, HolidayUncheckedUpdateWithoutTenantInput>
    create: XOR<HolidayCreateWithoutTenantInput, HolidayUncheckedCreateWithoutTenantInput>
  }

  export type HolidayUpdateWithWhereUniqueWithoutTenantInput = {
    where: HolidayWhereUniqueInput
    data: XOR<HolidayUpdateWithoutTenantInput, HolidayUncheckedUpdateWithoutTenantInput>
  }

  export type HolidayUpdateManyWithWhereWithoutTenantInput = {
    where: HolidayScalarWhereInput
    data: XOR<HolidayUpdateManyMutationInput, HolidayUncheckedUpdateManyWithoutTenantInput>
  }

  export type HolidayScalarWhereInput = {
    AND?: HolidayScalarWhereInput | HolidayScalarWhereInput[]
    OR?: HolidayScalarWhereInput[]
    NOT?: HolidayScalarWhereInput | HolidayScalarWhereInput[]
    id?: StringFilter<"Holiday"> | string
    name?: StringFilter<"Holiday"> | string
    date?: DateTimeFilter<"Holiday"> | Date | string
    type?: StringFilter<"Holiday"> | string
    description?: StringNullableFilter<"Holiday"> | string | null
    isRecurring?: BoolFilter<"Holiday"> | boolean
    isActive?: BoolFilter<"Holiday"> | boolean
    createdAt?: DateTimeFilter<"Holiday"> | Date | string
    updatedAt?: DateTimeFilter<"Holiday"> | Date | string
    tenantId?: StringFilter<"Holiday"> | string
  }

  export type IntegrationLogUpsertWithWhereUniqueWithoutTenantInput = {
    where: IntegrationLogWhereUniqueInput
    update: XOR<IntegrationLogUpdateWithoutTenantInput, IntegrationLogUncheckedUpdateWithoutTenantInput>
    create: XOR<IntegrationLogCreateWithoutTenantInput, IntegrationLogUncheckedCreateWithoutTenantInput>
  }

  export type IntegrationLogUpdateWithWhereUniqueWithoutTenantInput = {
    where: IntegrationLogWhereUniqueInput
    data: XOR<IntegrationLogUpdateWithoutTenantInput, IntegrationLogUncheckedUpdateWithoutTenantInput>
  }

  export type IntegrationLogUpdateManyWithWhereWithoutTenantInput = {
    where: IntegrationLogScalarWhereInput
    data: XOR<IntegrationLogUpdateManyMutationInput, IntegrationLogUncheckedUpdateManyWithoutTenantInput>
  }

  export type IntegrationLogScalarWhereInput = {
    AND?: IntegrationLogScalarWhereInput | IntegrationLogScalarWhereInput[]
    OR?: IntegrationLogScalarWhereInput[]
    NOT?: IntegrationLogScalarWhereInput | IntegrationLogScalarWhereInput[]
    id?: StringFilter<"IntegrationLog"> | string
    integrationId?: StringFilter<"IntegrationLog"> | string
    message?: StringFilter<"IntegrationLog"> | string
    createdAt?: DateTimeFilter<"IntegrationLog"> | Date | string
    tenantId?: StringFilter<"IntegrationLog"> | string
    details?: JsonNullableFilter<"IntegrationLog">
    event?: StringFilter<"IntegrationLog"> | string
    status?: StringFilter<"IntegrationLog"> | string
  }

  export type IntegrationUpsertWithWhereUniqueWithoutTenantInput = {
    where: IntegrationWhereUniqueInput
    update: XOR<IntegrationUpdateWithoutTenantInput, IntegrationUncheckedUpdateWithoutTenantInput>
    create: XOR<IntegrationCreateWithoutTenantInput, IntegrationUncheckedCreateWithoutTenantInput>
  }

  export type IntegrationUpdateWithWhereUniqueWithoutTenantInput = {
    where: IntegrationWhereUniqueInput
    data: XOR<IntegrationUpdateWithoutTenantInput, IntegrationUncheckedUpdateWithoutTenantInput>
  }

  export type IntegrationUpdateManyWithWhereWithoutTenantInput = {
    where: IntegrationScalarWhereInput
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyWithoutTenantInput>
  }

  export type IntegrationScalarWhereInput = {
    AND?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
    OR?: IntegrationScalarWhereInput[]
    NOT?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
    id?: StringFilter<"Integration"> | string
    name?: StringFilter<"Integration"> | string
    tenantId?: StringFilter<"Integration"> | string
    config?: JsonNullableFilter<"Integration">
    createdAt?: DateTimeFilter<"Integration"> | Date | string
    lastSyncTime?: DateTimeNullableFilter<"Integration"> | Date | string | null
    status?: StringFilter<"Integration"> | string
    successRate?: FloatFilter<"Integration"> | number
    type?: StringFilter<"Integration"> | string
    updatedAt?: DateTimeFilter<"Integration"> | Date | string
  }

  export type LeaveBalanceUpsertWithWhereUniqueWithoutTenantInput = {
    where: LeaveBalanceWhereUniqueInput
    update: XOR<LeaveBalanceUpdateWithoutTenantInput, LeaveBalanceUncheckedUpdateWithoutTenantInput>
    create: XOR<LeaveBalanceCreateWithoutTenantInput, LeaveBalanceUncheckedCreateWithoutTenantInput>
  }

  export type LeaveBalanceUpdateWithWhereUniqueWithoutTenantInput = {
    where: LeaveBalanceWhereUniqueInput
    data: XOR<LeaveBalanceUpdateWithoutTenantInput, LeaveBalanceUncheckedUpdateWithoutTenantInput>
  }

  export type LeaveBalanceUpdateManyWithWhereWithoutTenantInput = {
    where: LeaveBalanceScalarWhereInput
    data: XOR<LeaveBalanceUpdateManyMutationInput, LeaveBalanceUncheckedUpdateManyWithoutTenantInput>
  }

  export type LeaveBalanceScalarWhereInput = {
    AND?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
    OR?: LeaveBalanceScalarWhereInput[]
    NOT?: LeaveBalanceScalarWhereInput | LeaveBalanceScalarWhereInput[]
    id?: StringFilter<"LeaveBalance"> | string
    employeeId?: StringFilter<"LeaveBalance"> | string
    leaveTypeId?: StringFilter<"LeaveBalance"> | string
    year?: IntFilter<"LeaveBalance"> | number
    allocated?: FloatFilter<"LeaveBalance"> | number
    used?: FloatFilter<"LeaveBalance"> | number
    pending?: FloatFilter<"LeaveBalance"> | number
    available?: FloatFilter<"LeaveBalance"> | number
    carriedForward?: FloatFilter<"LeaveBalance"> | number
    accrued?: FloatFilter<"LeaveBalance"> | number
    lastUpdated?: DateTimeFilter<"LeaveBalance"> | Date | string
    createdAt?: DateTimeFilter<"LeaveBalance"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveBalance"> | Date | string
    tenantId?: StringFilter<"LeaveBalance"> | string
  }

  export type LeavePolicyUpsertWithWhereUniqueWithoutTenantInput = {
    where: LeavePolicyWhereUniqueInput
    update: XOR<LeavePolicyUpdateWithoutTenantInput, LeavePolicyUncheckedUpdateWithoutTenantInput>
    create: XOR<LeavePolicyCreateWithoutTenantInput, LeavePolicyUncheckedCreateWithoutTenantInput>
  }

  export type LeavePolicyUpdateWithWhereUniqueWithoutTenantInput = {
    where: LeavePolicyWhereUniqueInput
    data: XOR<LeavePolicyUpdateWithoutTenantInput, LeavePolicyUncheckedUpdateWithoutTenantInput>
  }

  export type LeavePolicyUpdateManyWithWhereWithoutTenantInput = {
    where: LeavePolicyScalarWhereInput
    data: XOR<LeavePolicyUpdateManyMutationInput, LeavePolicyUncheckedUpdateManyWithoutTenantInput>
  }

  export type LeavePolicyScalarWhereInput = {
    AND?: LeavePolicyScalarWhereInput | LeavePolicyScalarWhereInput[]
    OR?: LeavePolicyScalarWhereInput[]
    NOT?: LeavePolicyScalarWhereInput | LeavePolicyScalarWhereInput[]
    id?: StringFilter<"LeavePolicy"> | string
    leaveTypeId?: StringFilter<"LeavePolicy"> | string
    name?: StringFilter<"LeavePolicy"> | string
    description?: StringNullableFilter<"LeavePolicy"> | string | null
    maxDaysPerYear?: IntFilter<"LeavePolicy"> | number
    maxDaysPerRequest?: IntNullableFilter<"LeavePolicy"> | number | null
    minDaysNotice?: IntFilter<"LeavePolicy"> | number
    maxCarryForward?: IntFilter<"LeavePolicy"> | number
    allowNegativeBalance?: BoolFilter<"LeavePolicy"> | boolean
    requiresApproval?: BoolFilter<"LeavePolicy"> | boolean
    autoApprove?: BoolFilter<"LeavePolicy"> | boolean
    accrualRate?: FloatFilter<"LeavePolicy"> | number
    probationPeriodDays?: IntFilter<"LeavePolicy"> | number
    isActive?: BoolFilter<"LeavePolicy"> | boolean
    effectiveDate?: DateTimeFilter<"LeavePolicy"> | Date | string
    expiryDate?: DateTimeNullableFilter<"LeavePolicy"> | Date | string | null
    createdAt?: DateTimeFilter<"LeavePolicy"> | Date | string
    updatedAt?: DateTimeFilter<"LeavePolicy"> | Date | string
    tenantId?: StringFilter<"LeavePolicy"> | string
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutTenantInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutTenantInput, LeaveRequestUncheckedUpdateWithoutTenantInput>
    create: XOR<LeaveRequestCreateWithoutTenantInput, LeaveRequestUncheckedCreateWithoutTenantInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutTenantInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutTenantInput, LeaveRequestUncheckedUpdateWithoutTenantInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutTenantInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutTenantInput>
  }

  export type LeaveRequestScalarWhereInput = {
    AND?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    OR?: LeaveRequestScalarWhereInput[]
    NOT?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    id?: StringFilter<"LeaveRequest"> | string
    employeeId?: StringFilter<"LeaveRequest"> | string
    branchId?: StringNullableFilter<"LeaveRequest"> | string | null
    leaveTypeId?: StringFilter<"LeaveRequest"> | string
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    totalDays?: IntFilter<"LeaveRequest"> | number
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: StringFilter<"LeaveRequest"> | string
    appliedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    approvedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    rejectedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    rejectedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    rejectionReason?: StringNullableFilter<"LeaveRequest"> | string | null
    cancelledAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    cancelledBy?: StringNullableFilter<"LeaveRequest"> | string | null
    comments?: StringNullableFilter<"LeaveRequest"> | string | null
    attachments?: StringNullableListFilter<"LeaveRequest">
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    tenantId?: StringFilter<"LeaveRequest"> | string
  }

  export type LeaveTypeUpsertWithWhereUniqueWithoutTenantInput = {
    where: LeaveTypeWhereUniqueInput
    update: XOR<LeaveTypeUpdateWithoutTenantInput, LeaveTypeUncheckedUpdateWithoutTenantInput>
    create: XOR<LeaveTypeCreateWithoutTenantInput, LeaveTypeUncheckedCreateWithoutTenantInput>
  }

  export type LeaveTypeUpdateWithWhereUniqueWithoutTenantInput = {
    where: LeaveTypeWhereUniqueInput
    data: XOR<LeaveTypeUpdateWithoutTenantInput, LeaveTypeUncheckedUpdateWithoutTenantInput>
  }

  export type LeaveTypeUpdateManyWithWhereWithoutTenantInput = {
    where: LeaveTypeScalarWhereInput
    data: XOR<LeaveTypeUpdateManyMutationInput, LeaveTypeUncheckedUpdateManyWithoutTenantInput>
  }

  export type LeaveTypeScalarWhereInput = {
    AND?: LeaveTypeScalarWhereInput | LeaveTypeScalarWhereInput[]
    OR?: LeaveTypeScalarWhereInput[]
    NOT?: LeaveTypeScalarWhereInput | LeaveTypeScalarWhereInput[]
    id?: StringFilter<"LeaveType"> | string
    name?: StringFilter<"LeaveType"> | string
    code?: StringFilter<"LeaveType"> | string
    description?: StringNullableFilter<"LeaveType"> | string | null
    color?: StringNullableFilter<"LeaveType"> | string | null
    isActive?: BoolFilter<"LeaveType"> | boolean
    createdAt?: DateTimeFilter<"LeaveType"> | Date | string
    updatedAt?: DateTimeFilter<"LeaveType"> | Date | string
    tenantId?: StringFilter<"LeaveType"> | string
  }

  export type PayStubUpsertWithWhereUniqueWithoutTenantInput = {
    where: PayStubWhereUniqueInput
    update: XOR<PayStubUpdateWithoutTenantInput, PayStubUncheckedUpdateWithoutTenantInput>
    create: XOR<PayStubCreateWithoutTenantInput, PayStubUncheckedCreateWithoutTenantInput>
  }

  export type PayStubUpdateWithWhereUniqueWithoutTenantInput = {
    where: PayStubWhereUniqueInput
    data: XOR<PayStubUpdateWithoutTenantInput, PayStubUncheckedUpdateWithoutTenantInput>
  }

  export type PayStubUpdateManyWithWhereWithoutTenantInput = {
    where: PayStubScalarWhereInput
    data: XOR<PayStubUpdateManyMutationInput, PayStubUncheckedUpdateManyWithoutTenantInput>
  }

  export type PayStubScalarWhereInput = {
    AND?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
    OR?: PayStubScalarWhereInput[]
    NOT?: PayStubScalarWhereInput | PayStubScalarWhereInput[]
    id?: StringFilter<"PayStub"> | string
    employeeId?: StringFilter<"PayStub"> | string
    payrollId?: StringFilter<"PayStub"> | string
    payrollPeriodId?: StringFilter<"PayStub"> | string
    stubNumber?: StringFilter<"PayStub"> | string
    generatedAt?: DateTimeFilter<"PayStub"> | Date | string
    pdfPath?: StringNullableFilter<"PayStub"> | string | null
    status?: StringFilter<"PayStub"> | string
    createdAt?: DateTimeFilter<"PayStub"> | Date | string
    updatedAt?: DateTimeFilter<"PayStub"> | Date | string
    tenantId?: StringFilter<"PayStub"> | string
  }

  export type PayrollItemUpsertWithWhereUniqueWithoutTenantInput = {
    where: PayrollItemWhereUniqueInput
    update: XOR<PayrollItemUpdateWithoutTenantInput, PayrollItemUncheckedUpdateWithoutTenantInput>
    create: XOR<PayrollItemCreateWithoutTenantInput, PayrollItemUncheckedCreateWithoutTenantInput>
  }

  export type PayrollItemUpdateWithWhereUniqueWithoutTenantInput = {
    where: PayrollItemWhereUniqueInput
    data: XOR<PayrollItemUpdateWithoutTenantInput, PayrollItemUncheckedUpdateWithoutTenantInput>
  }

  export type PayrollItemUpdateManyWithWhereWithoutTenantInput = {
    where: PayrollItemScalarWhereInput
    data: XOR<PayrollItemUpdateManyMutationInput, PayrollItemUncheckedUpdateManyWithoutTenantInput>
  }

  export type PayrollItemScalarWhereInput = {
    AND?: PayrollItemScalarWhereInput | PayrollItemScalarWhereInput[]
    OR?: PayrollItemScalarWhereInput[]
    NOT?: PayrollItemScalarWhereInput | PayrollItemScalarWhereInput[]
    id?: StringFilter<"PayrollItem"> | string
    payrollId?: StringFilter<"PayrollItem"> | string
    type?: StringFilter<"PayrollItem"> | string
    category?: StringFilter<"PayrollItem"> | string
    name?: StringFilter<"PayrollItem"> | string
    amount?: FloatFilter<"PayrollItem"> | number
    isStatutory?: BoolFilter<"PayrollItem"> | boolean
    createdAt?: DateTimeFilter<"PayrollItem"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollItem"> | Date | string
    tenantId?: StringFilter<"PayrollItem"> | string
  }

  export type PayrollPeriodUpsertWithWhereUniqueWithoutTenantInput = {
    where: PayrollPeriodWhereUniqueInput
    update: XOR<PayrollPeriodUpdateWithoutTenantInput, PayrollPeriodUncheckedUpdateWithoutTenantInput>
    create: XOR<PayrollPeriodCreateWithoutTenantInput, PayrollPeriodUncheckedCreateWithoutTenantInput>
  }

  export type PayrollPeriodUpdateWithWhereUniqueWithoutTenantInput = {
    where: PayrollPeriodWhereUniqueInput
    data: XOR<PayrollPeriodUpdateWithoutTenantInput, PayrollPeriodUncheckedUpdateWithoutTenantInput>
  }

  export type PayrollPeriodUpdateManyWithWhereWithoutTenantInput = {
    where: PayrollPeriodScalarWhereInput
    data: XOR<PayrollPeriodUpdateManyMutationInput, PayrollPeriodUncheckedUpdateManyWithoutTenantInput>
  }

  export type PayrollPeriodScalarWhereInput = {
    AND?: PayrollPeriodScalarWhereInput | PayrollPeriodScalarWhereInput[]
    OR?: PayrollPeriodScalarWhereInput[]
    NOT?: PayrollPeriodScalarWhereInput | PayrollPeriodScalarWhereInput[]
    id?: StringFilter<"PayrollPeriod"> | string
    name?: StringFilter<"PayrollPeriod"> | string
    startDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    endDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    payDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    status?: StringFilter<"PayrollPeriod"> | string
    description?: StringNullableFilter<"PayrollPeriod"> | string | null
    createdAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    tenantId?: StringFilter<"PayrollPeriod"> | string
  }

  export type PayrollSettingsUpsertWithoutTenantInput = {
    update: XOR<PayrollSettingsUpdateWithoutTenantInput, PayrollSettingsUncheckedUpdateWithoutTenantInput>
    create: XOR<PayrollSettingsCreateWithoutTenantInput, PayrollSettingsUncheckedCreateWithoutTenantInput>
    where?: PayrollSettingsWhereInput
  }

  export type PayrollSettingsUpdateToOneWithWhereWithoutTenantInput = {
    where?: PayrollSettingsWhereInput
    data: XOR<PayrollSettingsUpdateWithoutTenantInput, PayrollSettingsUncheckedUpdateWithoutTenantInput>
  }

  export type PayrollSettingsUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    nssfNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nhifNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    companyCity?: NullableStringFieldUpdateOperationsInput | string | null
    companyPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    personalRelief?: FloatFieldUpdateOperationsInput | number
    overtimeMultiplier?: FloatFieldUpdateOperationsInput | number
    workingDaysPerMonth?: IntFieldUpdateOperationsInput | number
    workingHoursPerDay?: IntFieldUpdateOperationsInput | number
    payFrequency?: StringFieldUpdateOperationsInput | string
    payDay?: IntFieldUpdateOperationsInput | number
    cutoffDay?: IntFieldUpdateOperationsInput | number
    requirePayrollApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalLevels?: IntFieldUpdateOperationsInput | number
    autoApproveThreshold?: FloatFieldUpdateOperationsInput | number
    notifyEmployeesOnPayment?: BoolFieldUpdateOperationsInput | boolean
    sendPayslipsByEmail?: BoolFieldUpdateOperationsInput | boolean
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    branchCode?: NullableStringFieldUpdateOperationsInput | string | null
    swiftCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollSettingsUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    nssfNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nhifNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyAddress?: NullableStringFieldUpdateOperationsInput | string | null
    companyCity?: NullableStringFieldUpdateOperationsInput | string | null
    companyPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    personalRelief?: FloatFieldUpdateOperationsInput | number
    overtimeMultiplier?: FloatFieldUpdateOperationsInput | number
    workingDaysPerMonth?: IntFieldUpdateOperationsInput | number
    workingHoursPerDay?: IntFieldUpdateOperationsInput | number
    payFrequency?: StringFieldUpdateOperationsInput | string
    payDay?: IntFieldUpdateOperationsInput | number
    cutoffDay?: IntFieldUpdateOperationsInput | number
    requirePayrollApproval?: BoolFieldUpdateOperationsInput | boolean
    approvalLevels?: IntFieldUpdateOperationsInput | number
    autoApproveThreshold?: FloatFieldUpdateOperationsInput | number
    notifyEmployeesOnPayment?: BoolFieldUpdateOperationsInput | boolean
    sendPayslipsByEmail?: BoolFieldUpdateOperationsInput | boolean
    bankName?: NullableStringFieldUpdateOperationsInput | string | null
    accountNumber?: NullableStringFieldUpdateOperationsInput | string | null
    branchCode?: NullableStringFieldUpdateOperationsInput | string | null
    swiftCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollUpsertWithWhereUniqueWithoutTenantInput = {
    where: PayrollWhereUniqueInput
    update: XOR<PayrollUpdateWithoutTenantInput, PayrollUncheckedUpdateWithoutTenantInput>
    create: XOR<PayrollCreateWithoutTenantInput, PayrollUncheckedCreateWithoutTenantInput>
  }

  export type PayrollUpdateWithWhereUniqueWithoutTenantInput = {
    where: PayrollWhereUniqueInput
    data: XOR<PayrollUpdateWithoutTenantInput, PayrollUncheckedUpdateWithoutTenantInput>
  }

  export type PayrollUpdateManyWithWhereWithoutTenantInput = {
    where: PayrollScalarWhereInput
    data: XOR<PayrollUpdateManyMutationInput, PayrollUncheckedUpdateManyWithoutTenantInput>
  }

  export type PayrollScalarWhereInput = {
    AND?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
    OR?: PayrollScalarWhereInput[]
    NOT?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
    id?: StringFilter<"Payroll"> | string
    employeeId?: StringFilter<"Payroll"> | string
    payrollPeriodId?: StringFilter<"Payroll"> | string
    basicSalary?: FloatFilter<"Payroll"> | number
    grossSalary?: FloatFilter<"Payroll"> | number
    totalDeductions?: FloatFilter<"Payroll"> | number
    netSalary?: FloatFilter<"Payroll"> | number
    status?: StringFilter<"Payroll"> | string
    processedAt?: DateTimeNullableFilter<"Payroll"> | Date | string | null
    createdAt?: DateTimeFilter<"Payroll"> | Date | string
    updatedAt?: DateTimeFilter<"Payroll"> | Date | string
    tenantId?: StringFilter<"Payroll"> | string
  }

  export type PerformanceFeedbackUpsertWithWhereUniqueWithoutTenantInput = {
    where: PerformanceFeedbackWhereUniqueInput
    update: XOR<PerformanceFeedbackUpdateWithoutTenantInput, PerformanceFeedbackUncheckedUpdateWithoutTenantInput>
    create: XOR<PerformanceFeedbackCreateWithoutTenantInput, PerformanceFeedbackUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceFeedbackUpdateWithWhereUniqueWithoutTenantInput = {
    where: PerformanceFeedbackWhereUniqueInput
    data: XOR<PerformanceFeedbackUpdateWithoutTenantInput, PerformanceFeedbackUncheckedUpdateWithoutTenantInput>
  }

  export type PerformanceFeedbackUpdateManyWithWhereWithoutTenantInput = {
    where: PerformanceFeedbackScalarWhereInput
    data: XOR<PerformanceFeedbackUpdateManyMutationInput, PerformanceFeedbackUncheckedUpdateManyWithoutTenantInput>
  }

  export type PerformanceFeedbackScalarWhereInput = {
    AND?: PerformanceFeedbackScalarWhereInput | PerformanceFeedbackScalarWhereInput[]
    OR?: PerformanceFeedbackScalarWhereInput[]
    NOT?: PerformanceFeedbackScalarWhereInput | PerformanceFeedbackScalarWhereInput[]
    id?: StringFilter<"PerformanceFeedback"> | string
    performanceReviewId?: StringFilter<"PerformanceFeedback"> | string
    feedbackType?: StringFilter<"PerformanceFeedback"> | string
    feedback?: StringFilter<"PerformanceFeedback"> | string
    isPrivate?: BoolFilter<"PerformanceFeedback"> | boolean
    providedBy?: StringFilter<"PerformanceFeedback"> | string
    providedAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    createdAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceFeedback"> | Date | string
    tenantId?: StringFilter<"PerformanceFeedback"> | string
  }

  export type PerformanceGoalUpsertWithWhereUniqueWithoutTenantInput = {
    where: PerformanceGoalWhereUniqueInput
    update: XOR<PerformanceGoalUpdateWithoutTenantInput, PerformanceGoalUncheckedUpdateWithoutTenantInput>
    create: XOR<PerformanceGoalCreateWithoutTenantInput, PerformanceGoalUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceGoalUpdateWithWhereUniqueWithoutTenantInput = {
    where: PerformanceGoalWhereUniqueInput
    data: XOR<PerformanceGoalUpdateWithoutTenantInput, PerformanceGoalUncheckedUpdateWithoutTenantInput>
  }

  export type PerformanceGoalUpdateManyWithWhereWithoutTenantInput = {
    where: PerformanceGoalScalarWhereInput
    data: XOR<PerformanceGoalUpdateManyMutationInput, PerformanceGoalUncheckedUpdateManyWithoutTenantInput>
  }

  export type PerformanceGoalScalarWhereInput = {
    AND?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
    OR?: PerformanceGoalScalarWhereInput[]
    NOT?: PerformanceGoalScalarWhereInput | PerformanceGoalScalarWhereInput[]
    id?: StringFilter<"PerformanceGoal"> | string
    employeeId?: StringFilter<"PerformanceGoal"> | string
    reviewCycleId?: StringNullableFilter<"PerformanceGoal"> | string | null
    title?: StringFilter<"PerformanceGoal"> | string
    description?: StringFilter<"PerformanceGoal"> | string
    category?: StringFilter<"PerformanceGoal"> | string
    priority?: StringFilter<"PerformanceGoal"> | string
    targetDate?: DateTimeNullableFilter<"PerformanceGoal"> | Date | string | null
    status?: StringFilter<"PerformanceGoal"> | string
    progress?: IntFilter<"PerformanceGoal"> | number
    measurementCriteria?: StringNullableFilter<"PerformanceGoal"> | string | null
    achievedDate?: DateTimeNullableFilter<"PerformanceGoal"> | Date | string | null
    comments?: StringNullableFilter<"PerformanceGoal"> | string | null
    createdBy?: StringFilter<"PerformanceGoal"> | string
    createdAt?: DateTimeFilter<"PerformanceGoal"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceGoal"> | Date | string
    tenantId?: StringFilter<"PerformanceGoal"> | string
  }

  export type PerformanceRatingUpsertWithWhereUniqueWithoutTenantInput = {
    where: PerformanceRatingWhereUniqueInput
    update: XOR<PerformanceRatingUpdateWithoutTenantInput, PerformanceRatingUncheckedUpdateWithoutTenantInput>
    create: XOR<PerformanceRatingCreateWithoutTenantInput, PerformanceRatingUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceRatingUpdateWithWhereUniqueWithoutTenantInput = {
    where: PerformanceRatingWhereUniqueInput
    data: XOR<PerformanceRatingUpdateWithoutTenantInput, PerformanceRatingUncheckedUpdateWithoutTenantInput>
  }

  export type PerformanceRatingUpdateManyWithWhereWithoutTenantInput = {
    where: PerformanceRatingScalarWhereInput
    data: XOR<PerformanceRatingUpdateManyMutationInput, PerformanceRatingUncheckedUpdateManyWithoutTenantInput>
  }

  export type PerformanceRatingScalarWhereInput = {
    AND?: PerformanceRatingScalarWhereInput | PerformanceRatingScalarWhereInput[]
    OR?: PerformanceRatingScalarWhereInput[]
    NOT?: PerformanceRatingScalarWhereInput | PerformanceRatingScalarWhereInput[]
    id?: StringFilter<"PerformanceRating"> | string
    performanceReviewId?: StringFilter<"PerformanceRating"> | string
    competency?: StringFilter<"PerformanceRating"> | string
    rating?: FloatFilter<"PerformanceRating"> | number
    maxRating?: FloatFilter<"PerformanceRating"> | number
    weight?: FloatFilter<"PerformanceRating"> | number
    comments?: StringNullableFilter<"PerformanceRating"> | string | null
    raterType?: StringFilter<"PerformanceRating"> | string
    createdAt?: DateTimeFilter<"PerformanceRating"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceRating"> | Date | string
    tenantId?: StringFilter<"PerformanceRating"> | string
  }

  export type PerformanceReviewCycleUpsertWithWhereUniqueWithoutTenantInput = {
    where: PerformanceReviewCycleWhereUniqueInput
    update: XOR<PerformanceReviewCycleUpdateWithoutTenantInput, PerformanceReviewCycleUncheckedUpdateWithoutTenantInput>
    create: XOR<PerformanceReviewCycleCreateWithoutTenantInput, PerformanceReviewCycleUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceReviewCycleUpdateWithWhereUniqueWithoutTenantInput = {
    where: PerformanceReviewCycleWhereUniqueInput
    data: XOR<PerformanceReviewCycleUpdateWithoutTenantInput, PerformanceReviewCycleUncheckedUpdateWithoutTenantInput>
  }

  export type PerformanceReviewCycleUpdateManyWithWhereWithoutTenantInput = {
    where: PerformanceReviewCycleScalarWhereInput
    data: XOR<PerformanceReviewCycleUpdateManyMutationInput, PerformanceReviewCycleUncheckedUpdateManyWithoutTenantInput>
  }

  export type PerformanceReviewCycleScalarWhereInput = {
    AND?: PerformanceReviewCycleScalarWhereInput | PerformanceReviewCycleScalarWhereInput[]
    OR?: PerformanceReviewCycleScalarWhereInput[]
    NOT?: PerformanceReviewCycleScalarWhereInput | PerformanceReviewCycleScalarWhereInput[]
    id?: StringFilter<"PerformanceReviewCycle"> | string
    name?: StringFilter<"PerformanceReviewCycle"> | string
    description?: StringNullableFilter<"PerformanceReviewCycle"> | string | null
    startDate?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    endDate?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    reviewDeadline?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    status?: StringFilter<"PerformanceReviewCycle"> | string
    isActive?: BoolFilter<"PerformanceReviewCycle"> | boolean
    createdAt?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReviewCycle"> | Date | string
    tenantId?: StringFilter<"PerformanceReviewCycle"> | string
  }

  export type PerformanceReviewUpsertWithWhereUniqueWithoutTenantInput = {
    where: PerformanceReviewWhereUniqueInput
    update: XOR<PerformanceReviewUpdateWithoutTenantInput, PerformanceReviewUncheckedUpdateWithoutTenantInput>
    create: XOR<PerformanceReviewCreateWithoutTenantInput, PerformanceReviewUncheckedCreateWithoutTenantInput>
  }

  export type PerformanceReviewUpdateWithWhereUniqueWithoutTenantInput = {
    where: PerformanceReviewWhereUniqueInput
    data: XOR<PerformanceReviewUpdateWithoutTenantInput, PerformanceReviewUncheckedUpdateWithoutTenantInput>
  }

  export type PerformanceReviewUpdateManyWithWhereWithoutTenantInput = {
    where: PerformanceReviewScalarWhereInput
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyWithoutTenantInput>
  }

  export type PerformanceReviewScalarWhereInput = {
    AND?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
    OR?: PerformanceReviewScalarWhereInput[]
    NOT?: PerformanceReviewScalarWhereInput | PerformanceReviewScalarWhereInput[]
    id?: StringFilter<"PerformanceReview"> | string
    employeeId?: StringFilter<"PerformanceReview"> | string
    reviewCycleId?: StringFilter<"PerformanceReview"> | string
    reviewerId?: StringFilter<"PerformanceReview"> | string
    status?: StringFilter<"PerformanceReview"> | string
    selfAssessmentCompleted?: BoolFilter<"PerformanceReview"> | boolean
    managerReviewCompleted?: BoolFilter<"PerformanceReview"> | boolean
    overallRating?: FloatNullableFilter<"PerformanceReview"> | number | null
    overallComments?: StringNullableFilter<"PerformanceReview"> | string | null
    strengths?: StringNullableFilter<"PerformanceReview"> | string | null
    areasForImprovement?: StringNullableFilter<"PerformanceReview"> | string | null
    developmentPlan?: StringNullableFilter<"PerformanceReview"> | string | null
    goals?: StringNullableFilter<"PerformanceReview"> | string | null
    submittedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"PerformanceReview"> | Date | string | null
    approvedBy?: StringNullableFilter<"PerformanceReview"> | string | null
    createdAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    updatedAt?: DateTimeFilter<"PerformanceReview"> | Date | string
    tenantId?: StringFilter<"PerformanceReview"> | string
  }

  export type ReportInstanceUpsertWithWhereUniqueWithoutTenantInput = {
    where: ReportInstanceWhereUniqueInput
    update: XOR<ReportInstanceUpdateWithoutTenantInput, ReportInstanceUncheckedUpdateWithoutTenantInput>
    create: XOR<ReportInstanceCreateWithoutTenantInput, ReportInstanceUncheckedCreateWithoutTenantInput>
  }

  export type ReportInstanceUpdateWithWhereUniqueWithoutTenantInput = {
    where: ReportInstanceWhereUniqueInput
    data: XOR<ReportInstanceUpdateWithoutTenantInput, ReportInstanceUncheckedUpdateWithoutTenantInput>
  }

  export type ReportInstanceUpdateManyWithWhereWithoutTenantInput = {
    where: ReportInstanceScalarWhereInput
    data: XOR<ReportInstanceUpdateManyMutationInput, ReportInstanceUncheckedUpdateManyWithoutTenantInput>
  }

  export type ReportInstanceScalarWhereInput = {
    AND?: ReportInstanceScalarWhereInput | ReportInstanceScalarWhereInput[]
    OR?: ReportInstanceScalarWhereInput[]
    NOT?: ReportInstanceScalarWhereInput | ReportInstanceScalarWhereInput[]
    id?: StringFilter<"ReportInstance"> | string
    templateId?: StringFilter<"ReportInstance"> | string
    name?: StringFilter<"ReportInstance"> | string
    description?: StringNullableFilter<"ReportInstance"> | string | null
    parameters?: JsonNullableFilter<"ReportInstance">
    filters?: JsonNullableFilter<"ReportInstance">
    status?: StringFilter<"ReportInstance"> | string
    data?: JsonNullableFilter<"ReportInstance">
    filePath?: StringNullableFilter<"ReportInstance"> | string | null
    fileFormat?: StringFilter<"ReportInstance"> | string
    fileSize?: IntNullableFilter<"ReportInstance"> | number | null
    recordCount?: IntNullableFilter<"ReportInstance"> | number | null
    generatedBy?: StringFilter<"ReportInstance"> | string
    generatedAt?: DateTimeFilter<"ReportInstance"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ReportInstance"> | Date | string | null
    isScheduled?: BoolFilter<"ReportInstance"> | boolean
    scheduleConfig?: JsonNullableFilter<"ReportInstance">
    error?: StringNullableFilter<"ReportInstance"> | string | null
    createdAt?: DateTimeFilter<"ReportInstance"> | Date | string
    updatedAt?: DateTimeFilter<"ReportInstance"> | Date | string
    tenantId?: StringFilter<"ReportInstance"> | string
  }

  export type ReportTemplateUpsertWithWhereUniqueWithoutTenantInput = {
    where: ReportTemplateWhereUniqueInput
    update: XOR<ReportTemplateUpdateWithoutTenantInput, ReportTemplateUncheckedUpdateWithoutTenantInput>
    create: XOR<ReportTemplateCreateWithoutTenantInput, ReportTemplateUncheckedCreateWithoutTenantInput>
  }

  export type ReportTemplateUpdateWithWhereUniqueWithoutTenantInput = {
    where: ReportTemplateWhereUniqueInput
    data: XOR<ReportTemplateUpdateWithoutTenantInput, ReportTemplateUncheckedUpdateWithoutTenantInput>
  }

  export type ReportTemplateUpdateManyWithWhereWithoutTenantInput = {
    where: ReportTemplateScalarWhereInput
    data: XOR<ReportTemplateUpdateManyMutationInput, ReportTemplateUncheckedUpdateManyWithoutTenantInput>
  }

  export type ReportTemplateScalarWhereInput = {
    AND?: ReportTemplateScalarWhereInput | ReportTemplateScalarWhereInput[]
    OR?: ReportTemplateScalarWhereInput[]
    NOT?: ReportTemplateScalarWhereInput | ReportTemplateScalarWhereInput[]
    id?: StringFilter<"ReportTemplate"> | string
    name?: StringFilter<"ReportTemplate"> | string
    description?: StringNullableFilter<"ReportTemplate"> | string | null
    category?: StringFilter<"ReportTemplate"> | string
    type?: StringFilter<"ReportTemplate"> | string
    query?: StringFilter<"ReportTemplate"> | string
    parameters?: JsonNullableFilter<"ReportTemplate">
    columns?: JsonFilter<"ReportTemplate">
    filters?: JsonNullableFilter<"ReportTemplate">
    groupBy?: JsonNullableFilter<"ReportTemplate">
    sortBy?: JsonNullableFilter<"ReportTemplate">
    chartConfig?: JsonNullableFilter<"ReportTemplate">
    isActive?: BoolFilter<"ReportTemplate"> | boolean
    isPublic?: BoolFilter<"ReportTemplate"> | boolean
    createdBy?: StringFilter<"ReportTemplate"> | string
    createdAt?: DateTimeFilter<"ReportTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ReportTemplate"> | Date | string
    tenantId?: StringFilter<"ReportTemplate"> | string
  }

  export type SalaryAdvancePolicyUpsertWithWhereUniqueWithoutTenantInput = {
    where: SalaryAdvancePolicyWhereUniqueInput
    update: XOR<SalaryAdvancePolicyUpdateWithoutTenantInput, SalaryAdvancePolicyUncheckedUpdateWithoutTenantInput>
    create: XOR<SalaryAdvancePolicyCreateWithoutTenantInput, SalaryAdvancePolicyUncheckedCreateWithoutTenantInput>
  }

  export type SalaryAdvancePolicyUpdateWithWhereUniqueWithoutTenantInput = {
    where: SalaryAdvancePolicyWhereUniqueInput
    data: XOR<SalaryAdvancePolicyUpdateWithoutTenantInput, SalaryAdvancePolicyUncheckedUpdateWithoutTenantInput>
  }

  export type SalaryAdvancePolicyUpdateManyWithWhereWithoutTenantInput = {
    where: SalaryAdvancePolicyScalarWhereInput
    data: XOR<SalaryAdvancePolicyUpdateManyMutationInput, SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantInput>
  }

  export type SalaryAdvancePolicyScalarWhereInput = {
    AND?: SalaryAdvancePolicyScalarWhereInput | SalaryAdvancePolicyScalarWhereInput[]
    OR?: SalaryAdvancePolicyScalarWhereInput[]
    NOT?: SalaryAdvancePolicyScalarWhereInput | SalaryAdvancePolicyScalarWhereInput[]
    id?: StringFilter<"SalaryAdvancePolicy"> | string
    name?: StringFilter<"SalaryAdvancePolicy"> | string
    description?: StringNullableFilter<"SalaryAdvancePolicy"> | string | null
    maxAdvancePercentage?: FloatFilter<"SalaryAdvancePolicy"> | number
    maxAdvanceAmount?: FloatNullableFilter<"SalaryAdvancePolicy"> | number | null
    minServiceMonths?: IntFilter<"SalaryAdvancePolicy"> | number
    maxAdvancesPerYear?: IntFilter<"SalaryAdvancePolicy"> | number
    interestRate?: FloatFilter<"SalaryAdvancePolicy"> | number
    requiresApproval?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    autoApprove?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    isActive?: BoolFilter<"SalaryAdvancePolicy"> | boolean
    effectiveDate?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    expiryDate?: DateTimeNullableFilter<"SalaryAdvancePolicy"> | Date | string | null
    createdAt?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvancePolicy"> | Date | string
    tenantId?: StringFilter<"SalaryAdvancePolicy"> | string
    monthlyDeductionPercentage?: FloatFilter<"SalaryAdvancePolicy"> | number
  }

  export type SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutTenantInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    update: XOR<SalaryAdvanceRepaymentUpdateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedUpdateWithoutTenantInput>
    create: XOR<SalaryAdvanceRepaymentCreateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedCreateWithoutTenantInput>
  }

  export type SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutTenantInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    data: XOR<SalaryAdvanceRepaymentUpdateWithoutTenantInput, SalaryAdvanceRepaymentUncheckedUpdateWithoutTenantInput>
  }

  export type SalaryAdvanceRepaymentUpdateManyWithWhereWithoutTenantInput = {
    where: SalaryAdvanceRepaymentScalarWhereInput
    data: XOR<SalaryAdvanceRepaymentUpdateManyMutationInput, SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantInput>
  }

  export type SalaryAdvanceRepaymentScalarWhereInput = {
    AND?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
    OR?: SalaryAdvanceRepaymentScalarWhereInput[]
    NOT?: SalaryAdvanceRepaymentScalarWhereInput | SalaryAdvanceRepaymentScalarWhereInput[]
    id?: StringFilter<"SalaryAdvanceRepayment"> | string
    salaryAdvanceRequestId?: StringFilter<"SalaryAdvanceRepayment"> | string
    payrollPeriodId?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    repaymentDate?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    principalAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    interestAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    totalAmount?: FloatFilter<"SalaryAdvanceRepayment"> | number
    paymentMethod?: StringFilter<"SalaryAdvanceRepayment"> | string
    reference?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    notes?: StringNullableFilter<"SalaryAdvanceRepayment"> | string | null
    createdAt?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvanceRepayment"> | Date | string
    tenantId?: StringFilter<"SalaryAdvanceRepayment"> | string
  }

  export type SalaryAdvanceRequestUpsertWithWhereUniqueWithoutTenantInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    update: XOR<SalaryAdvanceRequestUpdateWithoutTenantInput, SalaryAdvanceRequestUncheckedUpdateWithoutTenantInput>
    create: XOR<SalaryAdvanceRequestCreateWithoutTenantInput, SalaryAdvanceRequestUncheckedCreateWithoutTenantInput>
  }

  export type SalaryAdvanceRequestUpdateWithWhereUniqueWithoutTenantInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    data: XOR<SalaryAdvanceRequestUpdateWithoutTenantInput, SalaryAdvanceRequestUncheckedUpdateWithoutTenantInput>
  }

  export type SalaryAdvanceRequestUpdateManyWithWhereWithoutTenantInput = {
    where: SalaryAdvanceRequestScalarWhereInput
    data: XOR<SalaryAdvanceRequestUpdateManyMutationInput, SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantInput>
  }

  export type SalaryAdvanceRequestScalarWhereInput = {
    AND?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
    OR?: SalaryAdvanceRequestScalarWhereInput[]
    NOT?: SalaryAdvanceRequestScalarWhereInput | SalaryAdvanceRequestScalarWhereInput[]
    id?: StringFilter<"SalaryAdvanceRequest"> | string
    employeeId?: StringFilter<"SalaryAdvanceRequest"> | string
    branchId?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    requestedAmount?: FloatFilter<"SalaryAdvanceRequest"> | number
    approvedAmount?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    reason?: StringFilter<"SalaryAdvanceRequest"> | string
    status?: StringFilter<"SalaryAdvanceRequest"> | string
    requestDate?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    approvedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    rejectedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    rejectedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    rejectionReason?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    disbursedAt?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    disbursedBy?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    repaymentStartDate?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    repaymentEndDate?: DateTimeNullableFilter<"SalaryAdvanceRequest"> | Date | string | null
    monthlyDeduction?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    totalRepaid?: FloatFilter<"SalaryAdvanceRequest"> | number
    outstandingBalance?: FloatNullableFilter<"SalaryAdvanceRequest"> | number | null
    interestRate?: FloatFilter<"SalaryAdvanceRequest"> | number
    totalInterest?: FloatFilter<"SalaryAdvanceRequest"> | number
    comments?: StringNullableFilter<"SalaryAdvanceRequest"> | string | null
    attachments?: StringNullableListFilter<"SalaryAdvanceRequest">
    createdAt?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryAdvanceRequest"> | Date | string
    tenantId?: StringFilter<"SalaryAdvanceRequest"> | string
  }

  export type SecurityAlertUpsertWithWhereUniqueWithoutTenantInput = {
    where: SecurityAlertWhereUniqueInput
    update: XOR<SecurityAlertUpdateWithoutTenantInput, SecurityAlertUncheckedUpdateWithoutTenantInput>
    create: XOR<SecurityAlertCreateWithoutTenantInput, SecurityAlertUncheckedCreateWithoutTenantInput>
  }

  export type SecurityAlertUpdateWithWhereUniqueWithoutTenantInput = {
    where: SecurityAlertWhereUniqueInput
    data: XOR<SecurityAlertUpdateWithoutTenantInput, SecurityAlertUncheckedUpdateWithoutTenantInput>
  }

  export type SecurityAlertUpdateManyWithWhereWithoutTenantInput = {
    where: SecurityAlertScalarWhereInput
    data: XOR<SecurityAlertUpdateManyMutationInput, SecurityAlertUncheckedUpdateManyWithoutTenantInput>
  }

  export type SecurityAlertScalarWhereInput = {
    AND?: SecurityAlertScalarWhereInput | SecurityAlertScalarWhereInput[]
    OR?: SecurityAlertScalarWhereInput[]
    NOT?: SecurityAlertScalarWhereInput | SecurityAlertScalarWhereInput[]
    id?: StringFilter<"SecurityAlert"> | string
    type?: StringFilter<"SecurityAlert"> | string
    title?: StringFilter<"SecurityAlert"> | string
    description?: StringFilter<"SecurityAlert"> | string
    timestamp?: DateTimeFilter<"SecurityAlert"> | Date | string
    tenantId?: StringFilter<"SecurityAlert"> | string
  }

  export type SecuritySettingsUpsertWithoutTenantInput = {
    update: XOR<SecuritySettingsUpdateWithoutTenantInput, SecuritySettingsUncheckedUpdateWithoutTenantInput>
    create: XOR<SecuritySettingsCreateWithoutTenantInput, SecuritySettingsUncheckedCreateWithoutTenantInput>
    where?: SecuritySettingsWhereInput
  }

  export type SecuritySettingsUpdateToOneWithWhereWithoutTenantInput = {
    where?: SecuritySettingsWhereInput
    data: XOR<SecuritySettingsUpdateWithoutTenantInput, SecuritySettingsUncheckedUpdateWithoutTenantInput>
  }

  export type SecuritySettingsUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    passwordExpiry?: BoolFieldUpdateOperationsInput | boolean
    sessionTimeout?: BoolFieldUpdateOperationsInput | boolean
    ipWhitelist?: BoolFieldUpdateOperationsInput | boolean
    auditLogging?: BoolFieldUpdateOperationsInput | boolean
    encryptionAtRest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SecuritySettingsUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    passwordExpiry?: BoolFieldUpdateOperationsInput | boolean
    sessionTimeout?: BoolFieldUpdateOperationsInput | boolean
    ipWhitelist?: BoolFieldUpdateOperationsInput | boolean
    auditLogging?: BoolFieldUpdateOperationsInput | boolean
    encryptionAtRest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TaxBracketUpsertWithWhereUniqueWithoutTenantInput = {
    where: TaxBracketWhereUniqueInput
    update: XOR<TaxBracketUpdateWithoutTenantInput, TaxBracketUncheckedUpdateWithoutTenantInput>
    create: XOR<TaxBracketCreateWithoutTenantInput, TaxBracketUncheckedCreateWithoutTenantInput>
  }

  export type TaxBracketUpdateWithWhereUniqueWithoutTenantInput = {
    where: TaxBracketWhereUniqueInput
    data: XOR<TaxBracketUpdateWithoutTenantInput, TaxBracketUncheckedUpdateWithoutTenantInput>
  }

  export type TaxBracketUpdateManyWithWhereWithoutTenantInput = {
    where: TaxBracketScalarWhereInput
    data: XOR<TaxBracketUpdateManyMutationInput, TaxBracketUncheckedUpdateManyWithoutTenantInput>
  }

  export type TaxBracketScalarWhereInput = {
    AND?: TaxBracketScalarWhereInput | TaxBracketScalarWhereInput[]
    OR?: TaxBracketScalarWhereInput[]
    NOT?: TaxBracketScalarWhereInput | TaxBracketScalarWhereInput[]
    id?: StringFilter<"TaxBracket"> | string
    name?: StringFilter<"TaxBracket"> | string
    minAmount?: FloatFilter<"TaxBracket"> | number
    maxAmount?: FloatNullableFilter<"TaxBracket"> | number | null
    rate?: FloatFilter<"TaxBracket"> | number
    fixedAmount?: FloatFilter<"TaxBracket"> | number
    isActive?: BoolFilter<"TaxBracket"> | boolean
    effectiveDate?: DateTimeFilter<"TaxBracket"> | Date | string
    createdAt?: DateTimeFilter<"TaxBracket"> | Date | string
    updatedAt?: DateTimeFilter<"TaxBracket"> | Date | string
    tenantId?: StringFilter<"TaxBracket"> | string
  }

  export type TrainingUpsertWithWhereUniqueWithoutTenantInput = {
    where: TrainingWhereUniqueInput
    update: XOR<TrainingUpdateWithoutTenantInput, TrainingUncheckedUpdateWithoutTenantInput>
    create: XOR<TrainingCreateWithoutTenantInput, TrainingUncheckedCreateWithoutTenantInput>
  }

  export type TrainingUpdateWithWhereUniqueWithoutTenantInput = {
    where: TrainingWhereUniqueInput
    data: XOR<TrainingUpdateWithoutTenantInput, TrainingUncheckedUpdateWithoutTenantInput>
  }

  export type TrainingUpdateManyWithWhereWithoutTenantInput = {
    where: TrainingScalarWhereInput
    data: XOR<TrainingUpdateManyMutationInput, TrainingUncheckedUpdateManyWithoutTenantInput>
  }

  export type TrainingScalarWhereInput = {
    AND?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
    OR?: TrainingScalarWhereInput[]
    NOT?: TrainingScalarWhereInput | TrainingScalarWhereInput[]
    id?: StringFilter<"Training"> | string
    tenantId?: StringFilter<"Training"> | string
    title?: StringFilter<"Training"> | string
    description?: StringNullableFilter<"Training"> | string | null
    startDate?: DateTimeFilter<"Training"> | Date | string
    endDate?: DateTimeFilter<"Training"> | Date | string
    status?: StringFilter<"Training"> | string
    capacity?: IntNullableFilter<"Training"> | number | null
    instructor?: StringNullableFilter<"Training"> | string | null
    venue?: StringNullableFilter<"Training"> | string | null
    requirements?: StringNullableListFilter<"Training">
    certification?: BoolFilter<"Training"> | boolean
    cost?: DecimalNullableFilter<"Training"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableFilter<"Training"> | string | null
    createdAt?: DateTimeFilter<"Training"> | Date | string
    updatedAt?: DateTimeFilter<"Training"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    tenantId?: StringFilter<"User"> | string
    employeeId?: StringNullableFilter<"User"> | string | null
  }

  export type WorkflowStatsUpsertWithWhereUniqueWithoutTenantInput = {
    where: WorkflowStatsWhereUniqueInput
    update: XOR<WorkflowStatsUpdateWithoutTenantInput, WorkflowStatsUncheckedUpdateWithoutTenantInput>
    create: XOR<WorkflowStatsCreateWithoutTenantInput, WorkflowStatsUncheckedCreateWithoutTenantInput>
  }

  export type WorkflowStatsUpdateWithWhereUniqueWithoutTenantInput = {
    where: WorkflowStatsWhereUniqueInput
    data: XOR<WorkflowStatsUpdateWithoutTenantInput, WorkflowStatsUncheckedUpdateWithoutTenantInput>
  }

  export type WorkflowStatsUpdateManyWithWhereWithoutTenantInput = {
    where: WorkflowStatsScalarWhereInput
    data: XOR<WorkflowStatsUpdateManyMutationInput, WorkflowStatsUncheckedUpdateManyWithoutTenantInput>
  }

  export type WorkflowStatsScalarWhereInput = {
    AND?: WorkflowStatsScalarWhereInput | WorkflowStatsScalarWhereInput[]
    OR?: WorkflowStatsScalarWhereInput[]
    NOT?: WorkflowStatsScalarWhereInput | WorkflowStatsScalarWhereInput[]
    id?: StringFilter<"WorkflowStats"> | string
    workflowId?: StringFilter<"WorkflowStats"> | string
    stats?: JsonFilter<"WorkflowStats">
    createdAt?: DateTimeFilter<"WorkflowStats"> | Date | string
    tenantId?: StringFilter<"WorkflowStats"> | string
  }

  export type WorkflowTemplateUpsertWithWhereUniqueWithoutTenantInput = {
    where: WorkflowTemplateWhereUniqueInput
    update: XOR<WorkflowTemplateUpdateWithoutTenantInput, WorkflowTemplateUncheckedUpdateWithoutTenantInput>
    create: XOR<WorkflowTemplateCreateWithoutTenantInput, WorkflowTemplateUncheckedCreateWithoutTenantInput>
  }

  export type WorkflowTemplateUpdateWithWhereUniqueWithoutTenantInput = {
    where: WorkflowTemplateWhereUniqueInput
    data: XOR<WorkflowTemplateUpdateWithoutTenantInput, WorkflowTemplateUncheckedUpdateWithoutTenantInput>
  }

  export type WorkflowTemplateUpdateManyWithWhereWithoutTenantInput = {
    where: WorkflowTemplateScalarWhereInput
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyWithoutTenantInput>
  }

  export type WorkflowTemplateScalarWhereInput = {
    AND?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
    OR?: WorkflowTemplateScalarWhereInput[]
    NOT?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
    id?: StringFilter<"WorkflowTemplate"> | string
    name?: StringFilter<"WorkflowTemplate"> | string
    description?: StringFilter<"WorkflowTemplate"> | string
    category?: StringFilter<"WorkflowTemplate"> | string
    version?: StringFilter<"WorkflowTemplate"> | string
    isActive?: BoolFilter<"WorkflowTemplate"> | boolean
    steps?: JsonFilter<"WorkflowTemplate">
    triggers?: JsonFilter<"WorkflowTemplate">
    variables?: JsonFilter<"WorkflowTemplate">
    createdBy?: StringFilter<"WorkflowTemplate"> | string
    createdDate?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    lastModified?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    tenantId?: StringFilter<"WorkflowTemplate"> | string
  }

  export type WorkflowUpsertWithWhereUniqueWithoutTenantInput = {
    where: WorkflowWhereUniqueInput
    update: XOR<WorkflowUpdateWithoutTenantInput, WorkflowUncheckedUpdateWithoutTenantInput>
    create: XOR<WorkflowCreateWithoutTenantInput, WorkflowUncheckedCreateWithoutTenantInput>
  }

  export type WorkflowUpdateWithWhereUniqueWithoutTenantInput = {
    where: WorkflowWhereUniqueInput
    data: XOR<WorkflowUpdateWithoutTenantInput, WorkflowUncheckedUpdateWithoutTenantInput>
  }

  export type WorkflowUpdateManyWithWhereWithoutTenantInput = {
    where: WorkflowScalarWhereInput
    data: XOR<WorkflowUpdateManyMutationInput, WorkflowUncheckedUpdateManyWithoutTenantInput>
  }

  export type WorkflowScalarWhereInput = {
    AND?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
    OR?: WorkflowScalarWhereInput[]
    NOT?: WorkflowScalarWhereInput | WorkflowScalarWhereInput[]
    id?: StringFilter<"Workflow"> | string
    name?: StringFilter<"Workflow"> | string
    tenantId?: StringFilter<"Workflow"> | string
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employeeId?: string | null
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type TenantCreateWithoutNotificationsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutNotificationsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TenantUpsertWithoutNotificationsInput = {
    update: XOR<TenantUpdateWithoutNotificationsInput, TenantUncheckedUpdateWithoutNotificationsInput>
    create: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutNotificationsInput, TenantUncheckedUpdateWithoutNotificationsInput>
  }

  export type TenantUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutManagerInput = {
    id?: string
    name: string
    description?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branches?: BranchCreateNestedManyWithoutDepartmentInput
    tenant: TenantCreateNestedOneWithoutDepartmentsInput
    employees?: EmployeeCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutManagerInput = {
    id?: string
    name: string
    description?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    branches?: BranchUncheckedCreateNestedManyWithoutDepartmentInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutManagerInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput>
  }

  export type DepartmentCreateManyManagerInputEnvelope = {
    data: DepartmentCreateManyManagerInput | DepartmentCreateManyManagerInput[]
    skipDuplicates?: boolean
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutUserInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type TenantCreateWithoutUsersInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutUsersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
    tenant: TenantCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
    tenantId: string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type DepartmentUpsertWithWhereUniqueWithoutManagerInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutManagerInput, DepartmentUncheckedUpdateWithoutManagerInput>
    create: XOR<DepartmentCreateWithoutManagerInput, DepartmentUncheckedCreateWithoutManagerInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutManagerInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutManagerInput, DepartmentUncheckedUpdateWithoutManagerInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutManagerInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutManagerInput>
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type EmployeeUpsertWithoutUserInput = {
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type TenantUpsertWithoutUsersInput = {
    update: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUsersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TenantUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUsersInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employeeId?: string | null
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BranchCreateWithoutDepartmentInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutBranchesInput
    employees?: EmployeeCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutDepartmentInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutDepartmentInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutDepartmentInput, BranchUncheckedCreateWithoutDepartmentInput>
  }

  export type BranchCreateManyDepartmentInputEnvelope = {
    data: BranchCreateManyDepartmentInput | BranchCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutManagedDepartmentsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUsersInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManagedDepartmentsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employeeId?: string | null
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManagedDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
  }

  export type TenantCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutDepartmentsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutDepartmentsInput, TenantUncheckedCreateWithoutDepartmentsInput>
  }

  export type EmployeeCreateWithoutDepartmentInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDepartmentInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDepartmentInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDepartmentInput, EmployeeUncheckedCreateWithoutDepartmentInput>
  }

  export type EmployeeCreateManyDepartmentInputEnvelope = {
    data: EmployeeCreateManyDepartmentInput | EmployeeCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type BranchUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: BranchWhereUniqueInput
    update: XOR<BranchUpdateWithoutDepartmentInput, BranchUncheckedUpdateWithoutDepartmentInput>
    create: XOR<BranchCreateWithoutDepartmentInput, BranchUncheckedCreateWithoutDepartmentInput>
  }

  export type BranchUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: BranchWhereUniqueInput
    data: XOR<BranchUpdateWithoutDepartmentInput, BranchUncheckedUpdateWithoutDepartmentInput>
  }

  export type BranchUpdateManyWithWhereWithoutDepartmentInput = {
    where: BranchScalarWhereInput
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserUpsertWithoutManagedDepartmentsInput = {
    update: XOR<UserUpdateWithoutManagedDepartmentsInput, UserUncheckedUpdateWithoutManagedDepartmentsInput>
    create: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagedDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagedDepartmentsInput, UserUncheckedUpdateWithoutManagedDepartmentsInput>
  }

  export type UserUpdateWithoutManagedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManagedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TenantUpsertWithoutDepartmentsInput = {
    update: XOR<TenantUpdateWithoutDepartmentsInput, TenantUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<TenantCreateWithoutDepartmentsInput, TenantUncheckedCreateWithoutDepartmentsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutDepartmentsInput, TenantUncheckedUpdateWithoutDepartmentsInput>
  }

  export type TenantUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutDepartmentInput, EmployeeUncheckedUpdateWithoutDepartmentInput>
    create: XOR<EmployeeCreateWithoutDepartmentInput, EmployeeUncheckedCreateWithoutDepartmentInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutDepartmentInput, EmployeeUncheckedUpdateWithoutDepartmentInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutDepartmentInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type DepartmentCreateWithoutBranchesInput = {
    id?: string
    name: string
    description?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    tenant: TenantCreateNestedOneWithoutDepartmentsInput
    employees?: EmployeeCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutBranchesInput = {
    id?: string
    name: string
    description?: string | null
    managerId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutBranchesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutBranchesInput, DepartmentUncheckedCreateWithoutBranchesInput>
  }

  export type TenantCreateWithoutBranchesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutBranchesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutBranchesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutBranchesInput, TenantUncheckedCreateWithoutBranchesInput>
  }

  export type EmployeeCreateWithoutBranchInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutBranchInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutBranchInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutBranchInput, EmployeeUncheckedCreateWithoutBranchInput>
  }

  export type EmployeeCreateManyBranchInputEnvelope = {
    data: EmployeeCreateManyBranchInput | EmployeeCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestCreateWithoutBranchInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveRequestsInput
    leaveType: LeaveTypeCreateNestedOneWithoutLeaveRequestsInput
    tenant: TenantCreateNestedOneWithoutLeaveRequestsInput
  }

  export type LeaveRequestUncheckedCreateWithoutBranchInput = {
    id?: string
    employeeId: string
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestCreateOrConnectWithoutBranchInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutBranchInput, LeaveRequestUncheckedCreateWithoutBranchInput>
  }

  export type LeaveRequestCreateManyBranchInputEnvelope = {
    data: LeaveRequestCreateManyBranchInput | LeaveRequestCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type SalaryAdvanceRequestCreateWithoutBranchInput = {
    id?: string
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    repayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutSalaryAdvanceRequestInput
    employee: EmployeeCreateNestedOneWithoutSalaryAdvanceRequestsInput
    tenant: TenantCreateNestedOneWithoutSalaryAdvanceRequestsInput
  }

  export type SalaryAdvanceRequestUncheckedCreateWithoutBranchInput = {
    id?: string
    employeeId: string
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    repayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutSalaryAdvanceRequestInput
  }

  export type SalaryAdvanceRequestCreateOrConnectWithoutBranchInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    create: XOR<SalaryAdvanceRequestCreateWithoutBranchInput, SalaryAdvanceRequestUncheckedCreateWithoutBranchInput>
  }

  export type SalaryAdvanceRequestCreateManyBranchInputEnvelope = {
    data: SalaryAdvanceRequestCreateManyBranchInput | SalaryAdvanceRequestCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutBranchesInput = {
    update: XOR<DepartmentUpdateWithoutBranchesInput, DepartmentUncheckedUpdateWithoutBranchesInput>
    create: XOR<DepartmentCreateWithoutBranchesInput, DepartmentUncheckedCreateWithoutBranchesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutBranchesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutBranchesInput, DepartmentUncheckedUpdateWithoutBranchesInput>
  }

  export type DepartmentUpdateWithoutBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutDepartmentsNestedInput
    employees?: EmployeeUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type TenantUpsertWithoutBranchesInput = {
    update: XOR<TenantUpdateWithoutBranchesInput, TenantUncheckedUpdateWithoutBranchesInput>
    create: XOR<TenantCreateWithoutBranchesInput, TenantUncheckedCreateWithoutBranchesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutBranchesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutBranchesInput, TenantUncheckedUpdateWithoutBranchesInput>
  }

  export type TenantUpdateWithoutBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutBranchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutBranchInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutBranchInput, EmployeeUncheckedUpdateWithoutBranchInput>
    create: XOR<EmployeeCreateWithoutBranchInput, EmployeeUncheckedCreateWithoutBranchInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutBranchInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutBranchInput, EmployeeUncheckedUpdateWithoutBranchInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutBranchInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutBranchInput>
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutBranchInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutBranchInput, LeaveRequestUncheckedUpdateWithoutBranchInput>
    create: XOR<LeaveRequestCreateWithoutBranchInput, LeaveRequestUncheckedCreateWithoutBranchInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutBranchInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutBranchInput, LeaveRequestUncheckedUpdateWithoutBranchInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutBranchInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutBranchInput>
  }

  export type SalaryAdvanceRequestUpsertWithWhereUniqueWithoutBranchInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    update: XOR<SalaryAdvanceRequestUpdateWithoutBranchInput, SalaryAdvanceRequestUncheckedUpdateWithoutBranchInput>
    create: XOR<SalaryAdvanceRequestCreateWithoutBranchInput, SalaryAdvanceRequestUncheckedCreateWithoutBranchInput>
  }

  export type SalaryAdvanceRequestUpdateWithWhereUniqueWithoutBranchInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    data: XOR<SalaryAdvanceRequestUpdateWithoutBranchInput, SalaryAdvanceRequestUncheckedUpdateWithoutBranchInput>
  }

  export type SalaryAdvanceRequestUpdateManyWithWhereWithoutBranchInput = {
    where: SalaryAdvanceRequestScalarWhereInput
    data: XOR<SalaryAdvanceRequestUpdateManyMutationInput, SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchInput>
  }

  export type BranchCreateWithoutEmployeesInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutBranchesInput
    tenant: TenantCreateNestedOneWithoutBranchesInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutEmployeesInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    departmentId: string
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutEmployeesInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutEmployeesInput, BranchUncheckedCreateWithoutEmployeesInput>
  }

  export type DepartmentCreateWithoutEmployeesInput = {
    id?: string
    name: string
    description?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branches?: BranchCreateNestedManyWithoutDepartmentInput
    manager?: UserCreateNestedOneWithoutManagedDepartmentsInput
    tenant: TenantCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutEmployeesInput = {
    id?: string
    name: string
    description?: string | null
    managerId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    branches?: BranchUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutEmployeesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
  }

  export type TenantCreateWithoutEmployeesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutEmployeesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutEmployeesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
  }

  export type LeaveBalanceCreateWithoutEmployeeInput = {
    id?: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveType: LeaveTypeCreateNestedOneWithoutLeaveBalancesInput
    tenant: TenantCreateNestedOneWithoutLeaveBalancesInput
  }

  export type LeaveBalanceUncheckedCreateWithoutEmployeeInput = {
    id?: string
    leaveTypeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveBalanceCreateOrConnectWithoutEmployeeInput = {
    where: LeaveBalanceWhereUniqueInput
    create: XOR<LeaveBalanceCreateWithoutEmployeeInput, LeaveBalanceUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveBalanceCreateManyEmployeeInputEnvelope = {
    data: LeaveBalanceCreateManyEmployeeInput | LeaveBalanceCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestCreateWithoutEmployeeInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutLeaveRequestsInput
    leaveType: LeaveTypeCreateNestedOneWithoutLeaveRequestsInput
    tenant: TenantCreateNestedOneWithoutLeaveRequestsInput
  }

  export type LeaveRequestUncheckedCreateWithoutEmployeeInput = {
    id?: string
    branchId?: string | null
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestCreateOrConnectWithoutEmployeeInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveRequestCreateManyEmployeeInputEnvelope = {
    data: LeaveRequestCreateManyEmployeeInput | LeaveRequestCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type PayStubCreateWithoutEmployeeInput = {
    id?: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    payroll: PayrollCreateNestedOneWithoutPayStubInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayStubsInput
    tenant: TenantCreateNestedOneWithoutPayStubsInput
  }

  export type PayStubUncheckedCreateWithoutEmployeeInput = {
    id?: string
    payrollId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayStubCreateOrConnectWithoutEmployeeInput = {
    where: PayStubWhereUniqueInput
    create: XOR<PayStubCreateWithoutEmployeeInput, PayStubUncheckedCreateWithoutEmployeeInput>
  }

  export type PayStubCreateManyEmployeeInputEnvelope = {
    data: PayStubCreateManyEmployeeInput | PayStubCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type PayrollCreateWithoutEmployeeInput = {
    id?: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStub?: PayStubCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemCreateNestedManyWithoutPayrollInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayrollsInput
    tenant: TenantCreateNestedOneWithoutPayrollsInput
  }

  export type PayrollUncheckedCreateWithoutEmployeeInput = {
    id?: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payStub?: PayStubUncheckedCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutPayrollInput
  }

  export type PayrollCreateOrConnectWithoutEmployeeInput = {
    where: PayrollWhereUniqueInput
    create: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollCreateManyEmployeeInputEnvelope = {
    data: PayrollCreateManyEmployeeInput | PayrollCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceGoalCreateWithoutEmployeeInput = {
    id?: string
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewCycle?: PerformanceReviewCycleCreateNestedOneWithoutPerformanceGoalsInput
    tenant: TenantCreateNestedOneWithoutPerformanceGoalsInput
  }

  export type PerformanceGoalUncheckedCreateWithoutEmployeeInput = {
    id?: string
    reviewCycleId?: string | null
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceGoalCreateOrConnectWithoutEmployeeInput = {
    where: PerformanceGoalWhereUniqueInput
    create: XOR<PerformanceGoalCreateWithoutEmployeeInput, PerformanceGoalUncheckedCreateWithoutEmployeeInput>
  }

  export type PerformanceGoalCreateManyEmployeeInputEnvelope = {
    data: PerformanceGoalCreateManyEmployeeInput | PerformanceGoalCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceReviewCreateWithoutEmployeeInput = {
    id?: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutPerformanceReviewInput
    reviewCycle: PerformanceReviewCycleCreateNestedOneWithoutPerformanceReviewsInput
    tenant: TenantCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateWithoutEmployeeInput = {
    id?: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutPerformanceReviewInput
  }

  export type PerformanceReviewCreateOrConnectWithoutEmployeeInput = {
    where: PerformanceReviewWhereUniqueInput
    create: XOR<PerformanceReviewCreateWithoutEmployeeInput, PerformanceReviewUncheckedCreateWithoutEmployeeInput>
  }

  export type PerformanceReviewCreateManyEmployeeInputEnvelope = {
    data: PerformanceReviewCreateManyEmployeeInput | PerformanceReviewCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type SalaryAdvanceRequestCreateWithoutEmployeeInput = {
    id?: string
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    repayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutSalaryAdvanceRequestInput
    branch?: BranchCreateNestedOneWithoutSalaryAdvanceRequestsInput
    tenant: TenantCreateNestedOneWithoutSalaryAdvanceRequestsInput
  }

  export type SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput = {
    id?: string
    branchId?: string | null
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    repayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutSalaryAdvanceRequestInput
  }

  export type SalaryAdvanceRequestCreateOrConnectWithoutEmployeeInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    create: XOR<SalaryAdvanceRequestCreateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type SalaryAdvanceRequestCreateManyEmployeeInputEnvelope = {
    data: SalaryAdvanceRequestCreateManyEmployeeInput | SalaryAdvanceRequestCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type TrainingEnrollmentCreateWithoutEmployeeInput = {
    id?: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    training: TrainingCreateNestedOneWithoutEnrollmentsInput
  }

  export type TrainingEnrollmentUncheckedCreateWithoutEmployeeInput = {
    id?: string
    trainingId: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingEnrollmentCreateOrConnectWithoutEmployeeInput = {
    where: TrainingEnrollmentWhereUniqueInput
    create: XOR<TrainingEnrollmentCreateWithoutEmployeeInput, TrainingEnrollmentUncheckedCreateWithoutEmployeeInput>
  }

  export type TrainingEnrollmentCreateManyEmployeeInputEnvelope = {
    data: TrainingEnrollmentCreateManyEmployeeInput | TrainingEnrollmentCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutEmployeeInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUsersInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployeeInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
  }

  export type BranchUpsertWithoutEmployeesInput = {
    update: XOR<BranchUpdateWithoutEmployeesInput, BranchUncheckedUpdateWithoutEmployeesInput>
    create: XOR<BranchCreateWithoutEmployeesInput, BranchUncheckedCreateWithoutEmployeesInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutEmployeesInput, BranchUncheckedUpdateWithoutEmployeesInput>
  }

  export type BranchUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutBranchesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutBranchesNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type DepartmentUpsertWithoutEmployeesInput = {
    update: XOR<DepartmentUpdateWithoutEmployeesInput, DepartmentUncheckedUpdateWithoutEmployeesInput>
    create: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutEmployeesInput, DepartmentUncheckedUpdateWithoutEmployeesInput>
  }

  export type DepartmentUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branches?: BranchUpdateManyWithoutDepartmentNestedInput
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    branches?: BranchUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type TenantUpsertWithoutEmployeesInput = {
    update: XOR<TenantUpdateWithoutEmployeesInput, TenantUncheckedUpdateWithoutEmployeesInput>
    create: XOR<TenantCreateWithoutEmployeesInput, TenantUncheckedCreateWithoutEmployeesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutEmployeesInput, TenantUncheckedUpdateWithoutEmployeesInput>
  }

  export type TenantUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type LeaveBalanceUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveBalanceWhereUniqueInput
    update: XOR<LeaveBalanceUpdateWithoutEmployeeInput, LeaveBalanceUncheckedUpdateWithoutEmployeeInput>
    create: XOR<LeaveBalanceCreateWithoutEmployeeInput, LeaveBalanceUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveBalanceUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveBalanceWhereUniqueInput
    data: XOR<LeaveBalanceUpdateWithoutEmployeeInput, LeaveBalanceUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveBalanceUpdateManyWithWhereWithoutEmployeeInput = {
    where: LeaveBalanceScalarWhereInput
    data: XOR<LeaveBalanceUpdateManyMutationInput, LeaveBalanceUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutEmployeeInput, LeaveRequestUncheckedUpdateWithoutEmployeeInput>
    create: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutEmployeeInput, LeaveRequestUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutEmployeeInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PayStubUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PayStubWhereUniqueInput
    update: XOR<PayStubUpdateWithoutEmployeeInput, PayStubUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PayStubCreateWithoutEmployeeInput, PayStubUncheckedCreateWithoutEmployeeInput>
  }

  export type PayStubUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PayStubWhereUniqueInput
    data: XOR<PayStubUpdateWithoutEmployeeInput, PayStubUncheckedUpdateWithoutEmployeeInput>
  }

  export type PayStubUpdateManyWithWhereWithoutEmployeeInput = {
    where: PayStubScalarWhereInput
    data: XOR<PayStubUpdateManyMutationInput, PayStubUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PayrollUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollWhereUniqueInput
    update: XOR<PayrollUpdateWithoutEmployeeInput, PayrollUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollWhereUniqueInput
    data: XOR<PayrollUpdateWithoutEmployeeInput, PayrollUncheckedUpdateWithoutEmployeeInput>
  }

  export type PayrollUpdateManyWithWhereWithoutEmployeeInput = {
    where: PayrollScalarWhereInput
    data: XOR<PayrollUpdateManyMutationInput, PayrollUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PerformanceGoalUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PerformanceGoalWhereUniqueInput
    update: XOR<PerformanceGoalUpdateWithoutEmployeeInput, PerformanceGoalUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PerformanceGoalCreateWithoutEmployeeInput, PerformanceGoalUncheckedCreateWithoutEmployeeInput>
  }

  export type PerformanceGoalUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PerformanceGoalWhereUniqueInput
    data: XOR<PerformanceGoalUpdateWithoutEmployeeInput, PerformanceGoalUncheckedUpdateWithoutEmployeeInput>
  }

  export type PerformanceGoalUpdateManyWithWhereWithoutEmployeeInput = {
    where: PerformanceGoalScalarWhereInput
    data: XOR<PerformanceGoalUpdateManyMutationInput, PerformanceGoalUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PerformanceReviewWhereUniqueInput
    update: XOR<PerformanceReviewUpdateWithoutEmployeeInput, PerformanceReviewUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PerformanceReviewCreateWithoutEmployeeInput, PerformanceReviewUncheckedCreateWithoutEmployeeInput>
  }

  export type PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PerformanceReviewWhereUniqueInput
    data: XOR<PerformanceReviewUpdateWithoutEmployeeInput, PerformanceReviewUncheckedUpdateWithoutEmployeeInput>
  }

  export type PerformanceReviewUpdateManyWithWhereWithoutEmployeeInput = {
    where: PerformanceReviewScalarWhereInput
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type SalaryAdvanceRequestUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    update: XOR<SalaryAdvanceRequestUpdateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedUpdateWithoutEmployeeInput>
    create: XOR<SalaryAdvanceRequestCreateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type SalaryAdvanceRequestUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    data: XOR<SalaryAdvanceRequestUpdateWithoutEmployeeInput, SalaryAdvanceRequestUncheckedUpdateWithoutEmployeeInput>
  }

  export type SalaryAdvanceRequestUpdateManyWithWhereWithoutEmployeeInput = {
    where: SalaryAdvanceRequestScalarWhereInput
    data: XOR<SalaryAdvanceRequestUpdateManyMutationInput, SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type TrainingEnrollmentUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: TrainingEnrollmentWhereUniqueInput
    update: XOR<TrainingEnrollmentUpdateWithoutEmployeeInput, TrainingEnrollmentUncheckedUpdateWithoutEmployeeInput>
    create: XOR<TrainingEnrollmentCreateWithoutEmployeeInput, TrainingEnrollmentUncheckedCreateWithoutEmployeeInput>
  }

  export type TrainingEnrollmentUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: TrainingEnrollmentWhereUniqueInput
    data: XOR<TrainingEnrollmentUpdateWithoutEmployeeInput, TrainingEnrollmentUncheckedUpdateWithoutEmployeeInput>
  }

  export type TrainingEnrollmentUpdateManyWithWhereWithoutEmployeeInput = {
    where: TrainingEnrollmentScalarWhereInput
    data: XOR<TrainingEnrollmentUpdateManyMutationInput, TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type TrainingEnrollmentScalarWhereInput = {
    AND?: TrainingEnrollmentScalarWhereInput | TrainingEnrollmentScalarWhereInput[]
    OR?: TrainingEnrollmentScalarWhereInput[]
    NOT?: TrainingEnrollmentScalarWhereInput | TrainingEnrollmentScalarWhereInput[]
    id?: StringFilter<"TrainingEnrollment"> | string
    trainingId?: StringFilter<"TrainingEnrollment"> | string
    employeeId?: StringFilter<"TrainingEnrollment"> | string
    enrollmentDate?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    completionDate?: DateTimeNullableFilter<"TrainingEnrollment"> | Date | string | null
    status?: StringFilter<"TrainingEnrollment"> | string
    progress?: IntFilter<"TrainingEnrollment"> | number
    score?: IntNullableFilter<"TrainingEnrollment"> | number | null
    certificateIssued?: BoolFilter<"TrainingEnrollment"> | boolean
    createdAt?: DateTimeFilter<"TrainingEnrollment"> | Date | string
    updatedAt?: DateTimeFilter<"TrainingEnrollment"> | Date | string
  }

  export type UserUpsertWithoutEmployeeInput = {
    update: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PayStubCreateWithoutPayrollPeriodInput = {
    id?: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPayStubsInput
    payroll: PayrollCreateNestedOneWithoutPayStubInput
    tenant: TenantCreateNestedOneWithoutPayStubsInput
  }

  export type PayStubUncheckedCreateWithoutPayrollPeriodInput = {
    id?: string
    employeeId: string
    payrollId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayStubCreateOrConnectWithoutPayrollPeriodInput = {
    where: PayStubWhereUniqueInput
    create: XOR<PayStubCreateWithoutPayrollPeriodInput, PayStubUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type PayStubCreateManyPayrollPeriodInputEnvelope = {
    data: PayStubCreateManyPayrollPeriodInput | PayStubCreateManyPayrollPeriodInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutPayrollPeriodsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPayrollPeriodsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPayrollPeriodsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPayrollPeriodsInput, TenantUncheckedCreateWithoutPayrollPeriodsInput>
  }

  export type PayrollCreateWithoutPayrollPeriodInput = {
    id?: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStub?: PayStubCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemCreateNestedManyWithoutPayrollInput
    employee: EmployeeCreateNestedOneWithoutPayrollsInput
    tenant: TenantCreateNestedOneWithoutPayrollsInput
  }

  export type PayrollUncheckedCreateWithoutPayrollPeriodInput = {
    id?: string
    employeeId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payStub?: PayStubUncheckedCreateNestedOneWithoutPayrollInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutPayrollInput
  }

  export type PayrollCreateOrConnectWithoutPayrollPeriodInput = {
    where: PayrollWhereUniqueInput
    create: XOR<PayrollCreateWithoutPayrollPeriodInput, PayrollUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type PayrollCreateManyPayrollPeriodInputEnvelope = {
    data: PayrollCreateManyPayrollPeriodInput | PayrollCreateManyPayrollPeriodInput[]
    skipDuplicates?: boolean
  }

  export type SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput = {
    id?: string
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    salaryAdvanceRequest: SalaryAdvanceRequestCreateNestedOneWithoutRepaymentsInput
    tenant: TenantCreateNestedOneWithoutSalaryAdvanceRepaymentsInput
  }

  export type SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput = {
    id?: string
    salaryAdvanceRequestId: string
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRepaymentCreateOrConnectWithoutPayrollPeriodInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    create: XOR<SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type SalaryAdvanceRepaymentCreateManyPayrollPeriodInputEnvelope = {
    data: SalaryAdvanceRepaymentCreateManyPayrollPeriodInput | SalaryAdvanceRepaymentCreateManyPayrollPeriodInput[]
    skipDuplicates?: boolean
  }

  export type PayStubUpsertWithWhereUniqueWithoutPayrollPeriodInput = {
    where: PayStubWhereUniqueInput
    update: XOR<PayStubUpdateWithoutPayrollPeriodInput, PayStubUncheckedUpdateWithoutPayrollPeriodInput>
    create: XOR<PayStubCreateWithoutPayrollPeriodInput, PayStubUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type PayStubUpdateWithWhereUniqueWithoutPayrollPeriodInput = {
    where: PayStubWhereUniqueInput
    data: XOR<PayStubUpdateWithoutPayrollPeriodInput, PayStubUncheckedUpdateWithoutPayrollPeriodInput>
  }

  export type PayStubUpdateManyWithWhereWithoutPayrollPeriodInput = {
    where: PayStubScalarWhereInput
    data: XOR<PayStubUpdateManyMutationInput, PayStubUncheckedUpdateManyWithoutPayrollPeriodInput>
  }

  export type TenantUpsertWithoutPayrollPeriodsInput = {
    update: XOR<TenantUpdateWithoutPayrollPeriodsInput, TenantUncheckedUpdateWithoutPayrollPeriodsInput>
    create: XOR<TenantCreateWithoutPayrollPeriodsInput, TenantUncheckedCreateWithoutPayrollPeriodsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPayrollPeriodsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPayrollPeriodsInput, TenantUncheckedUpdateWithoutPayrollPeriodsInput>
  }

  export type TenantUpdateWithoutPayrollPeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPayrollPeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PayrollUpsertWithWhereUniqueWithoutPayrollPeriodInput = {
    where: PayrollWhereUniqueInput
    update: XOR<PayrollUpdateWithoutPayrollPeriodInput, PayrollUncheckedUpdateWithoutPayrollPeriodInput>
    create: XOR<PayrollCreateWithoutPayrollPeriodInput, PayrollUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type PayrollUpdateWithWhereUniqueWithoutPayrollPeriodInput = {
    where: PayrollWhereUniqueInput
    data: XOR<PayrollUpdateWithoutPayrollPeriodInput, PayrollUncheckedUpdateWithoutPayrollPeriodInput>
  }

  export type PayrollUpdateManyWithWhereWithoutPayrollPeriodInput = {
    where: PayrollScalarWhereInput
    data: XOR<PayrollUpdateManyMutationInput, PayrollUncheckedUpdateManyWithoutPayrollPeriodInput>
  }

  export type SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutPayrollPeriodInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    update: XOR<SalaryAdvanceRepaymentUpdateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedUpdateWithoutPayrollPeriodInput>
    create: XOR<SalaryAdvanceRepaymentCreateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutPayrollPeriodInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    data: XOR<SalaryAdvanceRepaymentUpdateWithoutPayrollPeriodInput, SalaryAdvanceRepaymentUncheckedUpdateWithoutPayrollPeriodInput>
  }

  export type SalaryAdvanceRepaymentUpdateManyWithWhereWithoutPayrollPeriodInput = {
    where: SalaryAdvanceRepaymentScalarWhereInput
    data: XOR<SalaryAdvanceRepaymentUpdateManyMutationInput, SalaryAdvanceRepaymentUncheckedUpdateManyWithoutPayrollPeriodInput>
  }

  export type PayStubCreateWithoutPayrollInput = {
    id?: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPayStubsInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayStubsInput
    tenant: TenantCreateNestedOneWithoutPayStubsInput
  }

  export type PayStubUncheckedCreateWithoutPayrollInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayStubCreateOrConnectWithoutPayrollInput = {
    where: PayStubWhereUniqueInput
    create: XOR<PayStubCreateWithoutPayrollInput, PayStubUncheckedCreateWithoutPayrollInput>
  }

  export type PayrollItemCreateWithoutPayrollInput = {
    id?: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPayrollItemsInput
  }

  export type PayrollItemUncheckedCreateWithoutPayrollInput = {
    id?: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollItemCreateOrConnectWithoutPayrollInput = {
    where: PayrollItemWhereUniqueInput
    create: XOR<PayrollItemCreateWithoutPayrollInput, PayrollItemUncheckedCreateWithoutPayrollInput>
  }

  export type PayrollItemCreateManyPayrollInputEnvelope = {
    data: PayrollItemCreateManyPayrollInput | PayrollItemCreateManyPayrollInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutPayrollsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPayrollsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPayrollsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
  }

  export type PayrollPeriodCreateWithoutPayrollsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStubs?: PayStubCreateNestedManyWithoutPayrollPeriodInput
    tenant: TenantCreateNestedOneWithoutPayrollPeriodsInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUncheckedCreateWithoutPayrollsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payStubs?: PayStubUncheckedCreateNestedManyWithoutPayrollPeriodInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodCreateOrConnectWithoutPayrollsInput = {
    where: PayrollPeriodWhereUniqueInput
    create: XOR<PayrollPeriodCreateWithoutPayrollsInput, PayrollPeriodUncheckedCreateWithoutPayrollsInput>
  }

  export type TenantCreateWithoutPayrollsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPayrollsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPayrollsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPayrollsInput, TenantUncheckedCreateWithoutPayrollsInput>
  }

  export type PayStubUpsertWithoutPayrollInput = {
    update: XOR<PayStubUpdateWithoutPayrollInput, PayStubUncheckedUpdateWithoutPayrollInput>
    create: XOR<PayStubCreateWithoutPayrollInput, PayStubUncheckedCreateWithoutPayrollInput>
    where?: PayStubWhereInput
  }

  export type PayStubUpdateToOneWithWhereWithoutPayrollInput = {
    where?: PayStubWhereInput
    data: XOR<PayStubUpdateWithoutPayrollInput, PayStubUncheckedUpdateWithoutPayrollInput>
  }

  export type PayStubUpdateWithoutPayrollInput = {
    id?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayStubsNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayStubsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayStubsNestedInput
  }

  export type PayStubUncheckedUpdateWithoutPayrollInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollItemUpsertWithWhereUniqueWithoutPayrollInput = {
    where: PayrollItemWhereUniqueInput
    update: XOR<PayrollItemUpdateWithoutPayrollInput, PayrollItemUncheckedUpdateWithoutPayrollInput>
    create: XOR<PayrollItemCreateWithoutPayrollInput, PayrollItemUncheckedCreateWithoutPayrollInput>
  }

  export type PayrollItemUpdateWithWhereUniqueWithoutPayrollInput = {
    where: PayrollItemWhereUniqueInput
    data: XOR<PayrollItemUpdateWithoutPayrollInput, PayrollItemUncheckedUpdateWithoutPayrollInput>
  }

  export type PayrollItemUpdateManyWithWhereWithoutPayrollInput = {
    where: PayrollItemScalarWhereInput
    data: XOR<PayrollItemUpdateManyMutationInput, PayrollItemUncheckedUpdateManyWithoutPayrollInput>
  }

  export type EmployeeUpsertWithoutPayrollsInput = {
    update: XOR<EmployeeUpdateWithoutPayrollsInput, EmployeeUncheckedUpdateWithoutPayrollsInput>
    create: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPayrollsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPayrollsInput, EmployeeUncheckedUpdateWithoutPayrollsInput>
  }

  export type EmployeeUpdateWithoutPayrollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPayrollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type PayrollPeriodUpsertWithoutPayrollsInput = {
    update: XOR<PayrollPeriodUpdateWithoutPayrollsInput, PayrollPeriodUncheckedUpdateWithoutPayrollsInput>
    create: XOR<PayrollPeriodCreateWithoutPayrollsInput, PayrollPeriodUncheckedCreateWithoutPayrollsInput>
    where?: PayrollPeriodWhereInput
  }

  export type PayrollPeriodUpdateToOneWithWhereWithoutPayrollsInput = {
    where?: PayrollPeriodWhereInput
    data: XOR<PayrollPeriodUpdateWithoutPayrollsInput, PayrollPeriodUncheckedUpdateWithoutPayrollsInput>
  }

  export type PayrollPeriodUpdateWithoutPayrollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStubs?: PayStubUpdateManyWithoutPayrollPeriodNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollPeriodsNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodUncheckedUpdateWithoutPayrollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payStubs?: PayStubUncheckedUpdateManyWithoutPayrollPeriodNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type TenantUpsertWithoutPayrollsInput = {
    update: XOR<TenantUpdateWithoutPayrollsInput, TenantUncheckedUpdateWithoutPayrollsInput>
    create: XOR<TenantCreateWithoutPayrollsInput, TenantUncheckedCreateWithoutPayrollsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPayrollsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPayrollsInput, TenantUncheckedUpdateWithoutPayrollsInput>
  }

  export type TenantUpdateWithoutPayrollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPayrollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PayrollCreateWithoutPayrollItemsInput = {
    id?: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStub?: PayStubCreateNestedOneWithoutPayrollInput
    employee: EmployeeCreateNestedOneWithoutPayrollsInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayrollsInput
    tenant: TenantCreateNestedOneWithoutPayrollsInput
  }

  export type PayrollUncheckedCreateWithoutPayrollItemsInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payStub?: PayStubUncheckedCreateNestedOneWithoutPayrollInput
  }

  export type PayrollCreateOrConnectWithoutPayrollItemsInput = {
    where: PayrollWhereUniqueInput
    create: XOR<PayrollCreateWithoutPayrollItemsInput, PayrollUncheckedCreateWithoutPayrollItemsInput>
  }

  export type TenantCreateWithoutPayrollItemsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPayrollItemsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPayrollItemsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPayrollItemsInput, TenantUncheckedCreateWithoutPayrollItemsInput>
  }

  export type PayrollUpsertWithoutPayrollItemsInput = {
    update: XOR<PayrollUpdateWithoutPayrollItemsInput, PayrollUncheckedUpdateWithoutPayrollItemsInput>
    create: XOR<PayrollCreateWithoutPayrollItemsInput, PayrollUncheckedCreateWithoutPayrollItemsInput>
    where?: PayrollWhereInput
  }

  export type PayrollUpdateToOneWithWhereWithoutPayrollItemsInput = {
    where?: PayrollWhereInput
    data: XOR<PayrollUpdateWithoutPayrollItemsInput, PayrollUncheckedUpdateWithoutPayrollItemsInput>
  }

  export type PayrollUpdateWithoutPayrollItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStub?: PayStubUpdateOneWithoutPayrollNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPayrollsNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayrollsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type PayrollUncheckedUpdateWithoutPayrollItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payStub?: PayStubUncheckedUpdateOneWithoutPayrollNestedInput
  }

  export type TenantUpsertWithoutPayrollItemsInput = {
    update: XOR<TenantUpdateWithoutPayrollItemsInput, TenantUncheckedUpdateWithoutPayrollItemsInput>
    create: XOR<TenantCreateWithoutPayrollItemsInput, TenantUncheckedCreateWithoutPayrollItemsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPayrollItemsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPayrollItemsInput, TenantUncheckedUpdateWithoutPayrollItemsInput>
  }

  export type TenantUpdateWithoutPayrollItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPayrollItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutTaxBracketsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutTaxBracketsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutTaxBracketsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutTaxBracketsInput, TenantUncheckedCreateWithoutTaxBracketsInput>
  }

  export type TenantUpsertWithoutTaxBracketsInput = {
    update: XOR<TenantUpdateWithoutTaxBracketsInput, TenantUncheckedUpdateWithoutTaxBracketsInput>
    create: XOR<TenantCreateWithoutTaxBracketsInput, TenantUncheckedCreateWithoutTaxBracketsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutTaxBracketsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutTaxBracketsInput, TenantUncheckedUpdateWithoutTaxBracketsInput>
  }

  export type TenantUpdateWithoutTaxBracketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutTaxBracketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type EmployeeCreateWithoutPayStubsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPayStubsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPayStubsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPayStubsInput, EmployeeUncheckedCreateWithoutPayStubsInput>
  }

  export type PayrollCreateWithoutPayStubInput = {
    id?: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollItems?: PayrollItemCreateNestedManyWithoutPayrollInput
    employee: EmployeeCreateNestedOneWithoutPayrollsInput
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayrollsInput
    tenant: TenantCreateNestedOneWithoutPayrollsInput
  }

  export type PayrollUncheckedCreateWithoutPayStubInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutPayrollInput
  }

  export type PayrollCreateOrConnectWithoutPayStubInput = {
    where: PayrollWhereUniqueInput
    create: XOR<PayrollCreateWithoutPayStubInput, PayrollUncheckedCreateWithoutPayStubInput>
  }

  export type PayrollPeriodCreateWithoutPayStubsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPayrollPeriodsInput
    payrolls?: PayrollCreateNestedManyWithoutPayrollPeriodInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUncheckedCreateWithoutPayStubsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payrolls?: PayrollUncheckedCreateNestedManyWithoutPayrollPeriodInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodCreateOrConnectWithoutPayStubsInput = {
    where: PayrollPeriodWhereUniqueInput
    create: XOR<PayrollPeriodCreateWithoutPayStubsInput, PayrollPeriodUncheckedCreateWithoutPayStubsInput>
  }

  export type TenantCreateWithoutPayStubsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPayStubsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPayStubsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPayStubsInput, TenantUncheckedCreateWithoutPayStubsInput>
  }

  export type EmployeeUpsertWithoutPayStubsInput = {
    update: XOR<EmployeeUpdateWithoutPayStubsInput, EmployeeUncheckedUpdateWithoutPayStubsInput>
    create: XOR<EmployeeCreateWithoutPayStubsInput, EmployeeUncheckedCreateWithoutPayStubsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPayStubsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPayStubsInput, EmployeeUncheckedUpdateWithoutPayStubsInput>
  }

  export type EmployeeUpdateWithoutPayStubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPayStubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type PayrollUpsertWithoutPayStubInput = {
    update: XOR<PayrollUpdateWithoutPayStubInput, PayrollUncheckedUpdateWithoutPayStubInput>
    create: XOR<PayrollCreateWithoutPayStubInput, PayrollUncheckedCreateWithoutPayStubInput>
    where?: PayrollWhereInput
  }

  export type PayrollUpdateToOneWithWhereWithoutPayStubInput = {
    where?: PayrollWhereInput
    data: XOR<PayrollUpdateWithoutPayStubInput, PayrollUncheckedUpdateWithoutPayStubInput>
  }

  export type PayrollUpdateWithoutPayStubInput = {
    id?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollItems?: PayrollItemUpdateManyWithoutPayrollNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPayrollsNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayrollsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type PayrollUncheckedUpdateWithoutPayStubInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollPeriodUpsertWithoutPayStubsInput = {
    update: XOR<PayrollPeriodUpdateWithoutPayStubsInput, PayrollPeriodUncheckedUpdateWithoutPayStubsInput>
    create: XOR<PayrollPeriodCreateWithoutPayStubsInput, PayrollPeriodUncheckedCreateWithoutPayStubsInput>
    where?: PayrollPeriodWhereInput
  }

  export type PayrollPeriodUpdateToOneWithWhereWithoutPayStubsInput = {
    where?: PayrollPeriodWhereInput
    data: XOR<PayrollPeriodUpdateWithoutPayStubsInput, PayrollPeriodUncheckedUpdateWithoutPayStubsInput>
  }

  export type PayrollPeriodUpdateWithoutPayStubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPayrollPeriodsNestedInput
    payrolls?: PayrollUpdateManyWithoutPayrollPeriodNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodUncheckedUpdateWithoutPayStubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payrolls?: PayrollUncheckedUpdateManyWithoutPayrollPeriodNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type TenantUpsertWithoutPayStubsInput = {
    update: XOR<TenantUpdateWithoutPayStubsInput, TenantUncheckedUpdateWithoutPayStubsInput>
    create: XOR<TenantCreateWithoutPayStubsInput, TenantUncheckedCreateWithoutPayStubsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPayStubsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPayStubsInput, TenantUncheckedUpdateWithoutPayStubsInput>
  }

  export type TenantUpdateWithoutPayStubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPayStubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutPayrollSettingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPayrollSettingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPayrollSettingsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPayrollSettingsInput, TenantUncheckedCreateWithoutPayrollSettingsInput>
  }

  export type TenantUpsertWithoutPayrollSettingsInput = {
    update: XOR<TenantUpdateWithoutPayrollSettingsInput, TenantUncheckedUpdateWithoutPayrollSettingsInput>
    create: XOR<TenantCreateWithoutPayrollSettingsInput, TenantUncheckedCreateWithoutPayrollSettingsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPayrollSettingsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPayrollSettingsInput, TenantUncheckedUpdateWithoutPayrollSettingsInput>
  }

  export type TenantUpdateWithoutPayrollSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPayrollSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type LeaveBalanceCreateWithoutLeaveTypeInput = {
    id?: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveBalancesInput
    tenant: TenantCreateNestedOneWithoutLeaveBalancesInput
  }

  export type LeaveBalanceUncheckedCreateWithoutLeaveTypeInput = {
    id?: string
    employeeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveBalanceCreateOrConnectWithoutLeaveTypeInput = {
    where: LeaveBalanceWhereUniqueInput
    create: XOR<LeaveBalanceCreateWithoutLeaveTypeInput, LeaveBalanceUncheckedCreateWithoutLeaveTypeInput>
  }

  export type LeaveBalanceCreateManyLeaveTypeInputEnvelope = {
    data: LeaveBalanceCreateManyLeaveTypeInput | LeaveBalanceCreateManyLeaveTypeInput[]
    skipDuplicates?: boolean
  }

  export type LeavePolicyCreateWithoutLeaveTypeInput = {
    id?: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutLeavePoliciesInput
  }

  export type LeavePolicyUncheckedCreateWithoutLeaveTypeInput = {
    id?: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeavePolicyCreateOrConnectWithoutLeaveTypeInput = {
    where: LeavePolicyWhereUniqueInput
    create: XOR<LeavePolicyCreateWithoutLeaveTypeInput, LeavePolicyUncheckedCreateWithoutLeaveTypeInput>
  }

  export type LeavePolicyCreateManyLeaveTypeInputEnvelope = {
    data: LeavePolicyCreateManyLeaveTypeInput | LeavePolicyCreateManyLeaveTypeInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestCreateWithoutLeaveTypeInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveRequestsInput
    branch?: BranchCreateNestedOneWithoutLeaveRequestsInput
    tenant: TenantCreateNestedOneWithoutLeaveRequestsInput
  }

  export type LeaveRequestUncheckedCreateWithoutLeaveTypeInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestCreateOrConnectWithoutLeaveTypeInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutLeaveTypeInput, LeaveRequestUncheckedCreateWithoutLeaveTypeInput>
  }

  export type LeaveRequestCreateManyLeaveTypeInputEnvelope = {
    data: LeaveRequestCreateManyLeaveTypeInput | LeaveRequestCreateManyLeaveTypeInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutLeaveTypesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutLeaveTypesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutLeaveTypesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutLeaveTypesInput, TenantUncheckedCreateWithoutLeaveTypesInput>
  }

  export type LeaveBalanceUpsertWithWhereUniqueWithoutLeaveTypeInput = {
    where: LeaveBalanceWhereUniqueInput
    update: XOR<LeaveBalanceUpdateWithoutLeaveTypeInput, LeaveBalanceUncheckedUpdateWithoutLeaveTypeInput>
    create: XOR<LeaveBalanceCreateWithoutLeaveTypeInput, LeaveBalanceUncheckedCreateWithoutLeaveTypeInput>
  }

  export type LeaveBalanceUpdateWithWhereUniqueWithoutLeaveTypeInput = {
    where: LeaveBalanceWhereUniqueInput
    data: XOR<LeaveBalanceUpdateWithoutLeaveTypeInput, LeaveBalanceUncheckedUpdateWithoutLeaveTypeInput>
  }

  export type LeaveBalanceUpdateManyWithWhereWithoutLeaveTypeInput = {
    where: LeaveBalanceScalarWhereInput
    data: XOR<LeaveBalanceUpdateManyMutationInput, LeaveBalanceUncheckedUpdateManyWithoutLeaveTypeInput>
  }

  export type LeavePolicyUpsertWithWhereUniqueWithoutLeaveTypeInput = {
    where: LeavePolicyWhereUniqueInput
    update: XOR<LeavePolicyUpdateWithoutLeaveTypeInput, LeavePolicyUncheckedUpdateWithoutLeaveTypeInput>
    create: XOR<LeavePolicyCreateWithoutLeaveTypeInput, LeavePolicyUncheckedCreateWithoutLeaveTypeInput>
  }

  export type LeavePolicyUpdateWithWhereUniqueWithoutLeaveTypeInput = {
    where: LeavePolicyWhereUniqueInput
    data: XOR<LeavePolicyUpdateWithoutLeaveTypeInput, LeavePolicyUncheckedUpdateWithoutLeaveTypeInput>
  }

  export type LeavePolicyUpdateManyWithWhereWithoutLeaveTypeInput = {
    where: LeavePolicyScalarWhereInput
    data: XOR<LeavePolicyUpdateManyMutationInput, LeavePolicyUncheckedUpdateManyWithoutLeaveTypeInput>
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutLeaveTypeInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutLeaveTypeInput, LeaveRequestUncheckedUpdateWithoutLeaveTypeInput>
    create: XOR<LeaveRequestCreateWithoutLeaveTypeInput, LeaveRequestUncheckedCreateWithoutLeaveTypeInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutLeaveTypeInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutLeaveTypeInput, LeaveRequestUncheckedUpdateWithoutLeaveTypeInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutLeaveTypeInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutLeaveTypeInput>
  }

  export type TenantUpsertWithoutLeaveTypesInput = {
    update: XOR<TenantUpdateWithoutLeaveTypesInput, TenantUncheckedUpdateWithoutLeaveTypesInput>
    create: XOR<TenantCreateWithoutLeaveTypesInput, TenantUncheckedCreateWithoutLeaveTypesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutLeaveTypesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutLeaveTypesInput, TenantUncheckedUpdateWithoutLeaveTypesInput>
  }

  export type TenantUpdateWithoutLeaveTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutLeaveTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type LeaveTypeCreateWithoutLeavePoliciesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutLeaveTypeInput
    tenant: TenantCreateNestedOneWithoutLeaveTypesInput
  }

  export type LeaveTypeUncheckedCreateWithoutLeavePoliciesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutLeaveTypeInput
  }

  export type LeaveTypeCreateOrConnectWithoutLeavePoliciesInput = {
    where: LeaveTypeWhereUniqueInput
    create: XOR<LeaveTypeCreateWithoutLeavePoliciesInput, LeaveTypeUncheckedCreateWithoutLeavePoliciesInput>
  }

  export type TenantCreateWithoutLeavePoliciesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutLeavePoliciesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutLeavePoliciesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutLeavePoliciesInput, TenantUncheckedCreateWithoutLeavePoliciesInput>
  }

  export type LeaveTypeUpsertWithoutLeavePoliciesInput = {
    update: XOR<LeaveTypeUpdateWithoutLeavePoliciesInput, LeaveTypeUncheckedUpdateWithoutLeavePoliciesInput>
    create: XOR<LeaveTypeCreateWithoutLeavePoliciesInput, LeaveTypeUncheckedCreateWithoutLeavePoliciesInput>
    where?: LeaveTypeWhereInput
  }

  export type LeaveTypeUpdateToOneWithWhereWithoutLeavePoliciesInput = {
    where?: LeaveTypeWhereInput
    data: XOR<LeaveTypeUpdateWithoutLeavePoliciesInput, LeaveTypeUncheckedUpdateWithoutLeavePoliciesInput>
  }

  export type LeaveTypeUpdateWithoutLeavePoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveBalances?: LeaveBalanceUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutLeaveTypeNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveTypesNestedInput
  }

  export type LeaveTypeUncheckedUpdateWithoutLeavePoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutLeaveTypeNestedInput
  }

  export type TenantUpsertWithoutLeavePoliciesInput = {
    update: XOR<TenantUpdateWithoutLeavePoliciesInput, TenantUncheckedUpdateWithoutLeavePoliciesInput>
    create: XOR<TenantCreateWithoutLeavePoliciesInput, TenantUncheckedCreateWithoutLeavePoliciesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutLeavePoliciesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutLeavePoliciesInput, TenantUncheckedUpdateWithoutLeavePoliciesInput>
  }

  export type TenantUpdateWithoutLeavePoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutLeavePoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type EmployeeCreateWithoutLeaveRequestsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutLeaveRequestsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutLeaveRequestsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutLeaveRequestsInput, EmployeeUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type BranchCreateWithoutLeaveRequestsInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutBranchesInput
    tenant: TenantCreateNestedOneWithoutBranchesInput
    employees?: EmployeeCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutLeaveRequestsInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    departmentId: string
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutBranchInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutLeaveRequestsInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutLeaveRequestsInput, BranchUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type LeaveTypeCreateWithoutLeaveRequestsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutLeaveTypeInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutLeaveTypeInput
    tenant: TenantCreateNestedOneWithoutLeaveTypesInput
  }

  export type LeaveTypeUncheckedCreateWithoutLeaveRequestsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutLeaveTypeInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutLeaveTypeInput
  }

  export type LeaveTypeCreateOrConnectWithoutLeaveRequestsInput = {
    where: LeaveTypeWhereUniqueInput
    create: XOR<LeaveTypeCreateWithoutLeaveRequestsInput, LeaveTypeUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type TenantCreateWithoutLeaveRequestsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutLeaveRequestsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutLeaveRequestsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutLeaveRequestsInput, TenantUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type EmployeeUpsertWithoutLeaveRequestsInput = {
    update: XOR<EmployeeUpdateWithoutLeaveRequestsInput, EmployeeUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<EmployeeCreateWithoutLeaveRequestsInput, EmployeeUncheckedCreateWithoutLeaveRequestsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutLeaveRequestsInput, EmployeeUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type EmployeeUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type BranchUpsertWithoutLeaveRequestsInput = {
    update: XOR<BranchUpdateWithoutLeaveRequestsInput, BranchUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<BranchCreateWithoutLeaveRequestsInput, BranchUncheckedCreateWithoutLeaveRequestsInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutLeaveRequestsInput, BranchUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type BranchUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutBranchesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutBranchesNestedInput
    employees?: EmployeeUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type LeaveTypeUpsertWithoutLeaveRequestsInput = {
    update: XOR<LeaveTypeUpdateWithoutLeaveRequestsInput, LeaveTypeUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<LeaveTypeCreateWithoutLeaveRequestsInput, LeaveTypeUncheckedCreateWithoutLeaveRequestsInput>
    where?: LeaveTypeWhereInput
  }

  export type LeaveTypeUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: LeaveTypeWhereInput
    data: XOR<LeaveTypeUpdateWithoutLeaveRequestsInput, LeaveTypeUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type LeaveTypeUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveBalances?: LeaveBalanceUpdateManyWithoutLeaveTypeNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutLeaveTypeNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveTypesNestedInput
  }

  export type LeaveTypeUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutLeaveTypeNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutLeaveTypeNestedInput
  }

  export type TenantUpsertWithoutLeaveRequestsInput = {
    update: XOR<TenantUpdateWithoutLeaveRequestsInput, TenantUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<TenantCreateWithoutLeaveRequestsInput, TenantUncheckedCreateWithoutLeaveRequestsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutLeaveRequestsInput, TenantUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type TenantUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type EmployeeCreateWithoutLeaveBalancesInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutLeaveBalancesInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutLeaveBalancesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutLeaveBalancesInput, EmployeeUncheckedCreateWithoutLeaveBalancesInput>
  }

  export type LeaveTypeCreateWithoutLeaveBalancesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leavePolicies?: LeavePolicyCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutLeaveTypeInput
    tenant: TenantCreateNestedOneWithoutLeaveTypesInput
  }

  export type LeaveTypeUncheckedCreateWithoutLeaveBalancesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutLeaveTypeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutLeaveTypeInput
  }

  export type LeaveTypeCreateOrConnectWithoutLeaveBalancesInput = {
    where: LeaveTypeWhereUniqueInput
    create: XOR<LeaveTypeCreateWithoutLeaveBalancesInput, LeaveTypeUncheckedCreateWithoutLeaveBalancesInput>
  }

  export type TenantCreateWithoutLeaveBalancesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutLeaveBalancesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutLeaveBalancesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutLeaveBalancesInput, TenantUncheckedCreateWithoutLeaveBalancesInput>
  }

  export type EmployeeUpsertWithoutLeaveBalancesInput = {
    update: XOR<EmployeeUpdateWithoutLeaveBalancesInput, EmployeeUncheckedUpdateWithoutLeaveBalancesInput>
    create: XOR<EmployeeCreateWithoutLeaveBalancesInput, EmployeeUncheckedCreateWithoutLeaveBalancesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutLeaveBalancesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutLeaveBalancesInput, EmployeeUncheckedUpdateWithoutLeaveBalancesInput>
  }

  export type EmployeeUpdateWithoutLeaveBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutLeaveBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type LeaveTypeUpsertWithoutLeaveBalancesInput = {
    update: XOR<LeaveTypeUpdateWithoutLeaveBalancesInput, LeaveTypeUncheckedUpdateWithoutLeaveBalancesInput>
    create: XOR<LeaveTypeCreateWithoutLeaveBalancesInput, LeaveTypeUncheckedCreateWithoutLeaveBalancesInput>
    where?: LeaveTypeWhereInput
  }

  export type LeaveTypeUpdateToOneWithWhereWithoutLeaveBalancesInput = {
    where?: LeaveTypeWhereInput
    data: XOR<LeaveTypeUpdateWithoutLeaveBalancesInput, LeaveTypeUncheckedUpdateWithoutLeaveBalancesInput>
  }

  export type LeaveTypeUpdateWithoutLeaveBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leavePolicies?: LeavePolicyUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutLeaveTypeNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveTypesNestedInput
  }

  export type LeaveTypeUncheckedUpdateWithoutLeaveBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutLeaveTypeNestedInput
  }

  export type TenantUpsertWithoutLeaveBalancesInput = {
    update: XOR<TenantUpdateWithoutLeaveBalancesInput, TenantUncheckedUpdateWithoutLeaveBalancesInput>
    create: XOR<TenantCreateWithoutLeaveBalancesInput, TenantUncheckedCreateWithoutLeaveBalancesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutLeaveBalancesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutLeaveBalancesInput, TenantUncheckedUpdateWithoutLeaveBalancesInput>
  }

  export type TenantUpdateWithoutLeaveBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutLeaveBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutHolidaysInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutHolidaysInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutHolidaysInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutHolidaysInput, TenantUncheckedCreateWithoutHolidaysInput>
  }

  export type TenantUpsertWithoutHolidaysInput = {
    update: XOR<TenantUpdateWithoutHolidaysInput, TenantUncheckedUpdateWithoutHolidaysInput>
    create: XOR<TenantCreateWithoutHolidaysInput, TenantUncheckedCreateWithoutHolidaysInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutHolidaysInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutHolidaysInput, TenantUncheckedUpdateWithoutHolidaysInput>
  }

  export type TenantUpdateWithoutHolidaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutHolidaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PerformanceGoalCreateWithoutReviewCycleInput = {
    id?: string
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutPerformanceGoalsInput
    tenant: TenantCreateNestedOneWithoutPerformanceGoalsInput
  }

  export type PerformanceGoalUncheckedCreateWithoutReviewCycleInput = {
    id?: string
    employeeId: string
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceGoalCreateOrConnectWithoutReviewCycleInput = {
    where: PerformanceGoalWhereUniqueInput
    create: XOR<PerformanceGoalCreateWithoutReviewCycleInput, PerformanceGoalUncheckedCreateWithoutReviewCycleInput>
  }

  export type PerformanceGoalCreateManyReviewCycleInputEnvelope = {
    data: PerformanceGoalCreateManyReviewCycleInput | PerformanceGoalCreateManyReviewCycleInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutPerformanceReviewCyclesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPerformanceReviewCyclesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPerformanceReviewCyclesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPerformanceReviewCyclesInput, TenantUncheckedCreateWithoutPerformanceReviewCyclesInput>
  }

  export type PerformanceReviewCreateWithoutReviewCycleInput = {
    id?: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutPerformanceReviewInput
    employee: EmployeeCreateNestedOneWithoutPerformanceReviewsInput
    tenant: TenantCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateWithoutReviewCycleInput = {
    id?: string
    employeeId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutPerformanceReviewInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutPerformanceReviewInput
  }

  export type PerformanceReviewCreateOrConnectWithoutReviewCycleInput = {
    where: PerformanceReviewWhereUniqueInput
    create: XOR<PerformanceReviewCreateWithoutReviewCycleInput, PerformanceReviewUncheckedCreateWithoutReviewCycleInput>
  }

  export type PerformanceReviewCreateManyReviewCycleInputEnvelope = {
    data: PerformanceReviewCreateManyReviewCycleInput | PerformanceReviewCreateManyReviewCycleInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceGoalUpsertWithWhereUniqueWithoutReviewCycleInput = {
    where: PerformanceGoalWhereUniqueInput
    update: XOR<PerformanceGoalUpdateWithoutReviewCycleInput, PerformanceGoalUncheckedUpdateWithoutReviewCycleInput>
    create: XOR<PerformanceGoalCreateWithoutReviewCycleInput, PerformanceGoalUncheckedCreateWithoutReviewCycleInput>
  }

  export type PerformanceGoalUpdateWithWhereUniqueWithoutReviewCycleInput = {
    where: PerformanceGoalWhereUniqueInput
    data: XOR<PerformanceGoalUpdateWithoutReviewCycleInput, PerformanceGoalUncheckedUpdateWithoutReviewCycleInput>
  }

  export type PerformanceGoalUpdateManyWithWhereWithoutReviewCycleInput = {
    where: PerformanceGoalScalarWhereInput
    data: XOR<PerformanceGoalUpdateManyMutationInput, PerformanceGoalUncheckedUpdateManyWithoutReviewCycleInput>
  }

  export type TenantUpsertWithoutPerformanceReviewCyclesInput = {
    update: XOR<TenantUpdateWithoutPerformanceReviewCyclesInput, TenantUncheckedUpdateWithoutPerformanceReviewCyclesInput>
    create: XOR<TenantCreateWithoutPerformanceReviewCyclesInput, TenantUncheckedCreateWithoutPerformanceReviewCyclesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPerformanceReviewCyclesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPerformanceReviewCyclesInput, TenantUncheckedUpdateWithoutPerformanceReviewCyclesInput>
  }

  export type TenantUpdateWithoutPerformanceReviewCyclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPerformanceReviewCyclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PerformanceReviewUpsertWithWhereUniqueWithoutReviewCycleInput = {
    where: PerformanceReviewWhereUniqueInput
    update: XOR<PerformanceReviewUpdateWithoutReviewCycleInput, PerformanceReviewUncheckedUpdateWithoutReviewCycleInput>
    create: XOR<PerformanceReviewCreateWithoutReviewCycleInput, PerformanceReviewUncheckedCreateWithoutReviewCycleInput>
  }

  export type PerformanceReviewUpdateWithWhereUniqueWithoutReviewCycleInput = {
    where: PerformanceReviewWhereUniqueInput
    data: XOR<PerformanceReviewUpdateWithoutReviewCycleInput, PerformanceReviewUncheckedUpdateWithoutReviewCycleInput>
  }

  export type PerformanceReviewUpdateManyWithWhereWithoutReviewCycleInput = {
    where: PerformanceReviewScalarWhereInput
    data: XOR<PerformanceReviewUpdateManyMutationInput, PerformanceReviewUncheckedUpdateManyWithoutReviewCycleInput>
  }

  export type PerformanceFeedbackCreateWithoutPerformanceReviewInput = {
    id?: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPerformanceFeedbackInput
  }

  export type PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput = {
    id?: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceFeedbackCreateOrConnectWithoutPerformanceReviewInput = {
    where: PerformanceFeedbackWhereUniqueInput
    create: XOR<PerformanceFeedbackCreateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput>
  }

  export type PerformanceFeedbackCreateManyPerformanceReviewInputEnvelope = {
    data: PerformanceFeedbackCreateManyPerformanceReviewInput | PerformanceFeedbackCreateManyPerformanceReviewInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceRatingCreateWithoutPerformanceReviewInput = {
    id?: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPerformanceRatingsInput
  }

  export type PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput = {
    id?: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceRatingCreateOrConnectWithoutPerformanceReviewInput = {
    where: PerformanceRatingWhereUniqueInput
    create: XOR<PerformanceRatingCreateWithoutPerformanceReviewInput, PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput>
  }

  export type PerformanceRatingCreateManyPerformanceReviewInputEnvelope = {
    data: PerformanceRatingCreateManyPerformanceReviewInput | PerformanceRatingCreateManyPerformanceReviewInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutPerformanceReviewsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPerformanceReviewsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPerformanceReviewsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPerformanceReviewsInput, EmployeeUncheckedCreateWithoutPerformanceReviewsInput>
  }

  export type PerformanceReviewCycleCreateWithoutPerformanceReviewsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutReviewCycleInput
    tenant: TenantCreateNestedOneWithoutPerformanceReviewCyclesInput
  }

  export type PerformanceReviewCycleUncheckedCreateWithoutPerformanceReviewsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutReviewCycleInput
  }

  export type PerformanceReviewCycleCreateOrConnectWithoutPerformanceReviewsInput = {
    where: PerformanceReviewCycleWhereUniqueInput
    create: XOR<PerformanceReviewCycleCreateWithoutPerformanceReviewsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceReviewsInput>
  }

  export type TenantCreateWithoutPerformanceReviewsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPerformanceReviewsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPerformanceReviewsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPerformanceReviewsInput, TenantUncheckedCreateWithoutPerformanceReviewsInput>
  }

  export type PerformanceFeedbackUpsertWithWhereUniqueWithoutPerformanceReviewInput = {
    where: PerformanceFeedbackWhereUniqueInput
    update: XOR<PerformanceFeedbackUpdateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedUpdateWithoutPerformanceReviewInput>
    create: XOR<PerformanceFeedbackCreateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedCreateWithoutPerformanceReviewInput>
  }

  export type PerformanceFeedbackUpdateWithWhereUniqueWithoutPerformanceReviewInput = {
    where: PerformanceFeedbackWhereUniqueInput
    data: XOR<PerformanceFeedbackUpdateWithoutPerformanceReviewInput, PerformanceFeedbackUncheckedUpdateWithoutPerformanceReviewInput>
  }

  export type PerformanceFeedbackUpdateManyWithWhereWithoutPerformanceReviewInput = {
    where: PerformanceFeedbackScalarWhereInput
    data: XOR<PerformanceFeedbackUpdateManyMutationInput, PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewInput>
  }

  export type PerformanceRatingUpsertWithWhereUniqueWithoutPerformanceReviewInput = {
    where: PerformanceRatingWhereUniqueInput
    update: XOR<PerformanceRatingUpdateWithoutPerformanceReviewInput, PerformanceRatingUncheckedUpdateWithoutPerformanceReviewInput>
    create: XOR<PerformanceRatingCreateWithoutPerformanceReviewInput, PerformanceRatingUncheckedCreateWithoutPerformanceReviewInput>
  }

  export type PerformanceRatingUpdateWithWhereUniqueWithoutPerformanceReviewInput = {
    where: PerformanceRatingWhereUniqueInput
    data: XOR<PerformanceRatingUpdateWithoutPerformanceReviewInput, PerformanceRatingUncheckedUpdateWithoutPerformanceReviewInput>
  }

  export type PerformanceRatingUpdateManyWithWhereWithoutPerformanceReviewInput = {
    where: PerformanceRatingScalarWhereInput
    data: XOR<PerformanceRatingUpdateManyMutationInput, PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewInput>
  }

  export type EmployeeUpsertWithoutPerformanceReviewsInput = {
    update: XOR<EmployeeUpdateWithoutPerformanceReviewsInput, EmployeeUncheckedUpdateWithoutPerformanceReviewsInput>
    create: XOR<EmployeeCreateWithoutPerformanceReviewsInput, EmployeeUncheckedCreateWithoutPerformanceReviewsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPerformanceReviewsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPerformanceReviewsInput, EmployeeUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type EmployeeUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type PerformanceReviewCycleUpsertWithoutPerformanceReviewsInput = {
    update: XOR<PerformanceReviewCycleUpdateWithoutPerformanceReviewsInput, PerformanceReviewCycleUncheckedUpdateWithoutPerformanceReviewsInput>
    create: XOR<PerformanceReviewCycleCreateWithoutPerformanceReviewsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceReviewsInput>
    where?: PerformanceReviewCycleWhereInput
  }

  export type PerformanceReviewCycleUpdateToOneWithWhereWithoutPerformanceReviewsInput = {
    where?: PerformanceReviewCycleWhereInput
    data: XOR<PerformanceReviewCycleUpdateWithoutPerformanceReviewsInput, PerformanceReviewCycleUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type PerformanceReviewCycleUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceGoals?: PerformanceGoalUpdateManyWithoutReviewCycleNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewCyclesNestedInput
  }

  export type PerformanceReviewCycleUncheckedUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutReviewCycleNestedInput
  }

  export type TenantUpsertWithoutPerformanceReviewsInput = {
    update: XOR<TenantUpdateWithoutPerformanceReviewsInput, TenantUncheckedUpdateWithoutPerformanceReviewsInput>
    create: XOR<TenantCreateWithoutPerformanceReviewsInput, TenantUncheckedCreateWithoutPerformanceReviewsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPerformanceReviewsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPerformanceReviewsInput, TenantUncheckedUpdateWithoutPerformanceReviewsInput>
  }

  export type TenantUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPerformanceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type EmployeeCreateWithoutPerformanceGoalsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPerformanceGoalsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPerformanceGoalsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPerformanceGoalsInput, EmployeeUncheckedCreateWithoutPerformanceGoalsInput>
  }

  export type PerformanceReviewCycleCreateWithoutPerformanceGoalsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPerformanceReviewCyclesInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutReviewCycleInput
  }

  export type PerformanceReviewCycleUncheckedCreateWithoutPerformanceGoalsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutReviewCycleInput
  }

  export type PerformanceReviewCycleCreateOrConnectWithoutPerformanceGoalsInput = {
    where: PerformanceReviewCycleWhereUniqueInput
    create: XOR<PerformanceReviewCycleCreateWithoutPerformanceGoalsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceGoalsInput>
  }

  export type TenantCreateWithoutPerformanceGoalsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPerformanceGoalsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPerformanceGoalsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPerformanceGoalsInput, TenantUncheckedCreateWithoutPerformanceGoalsInput>
  }

  export type EmployeeUpsertWithoutPerformanceGoalsInput = {
    update: XOR<EmployeeUpdateWithoutPerformanceGoalsInput, EmployeeUncheckedUpdateWithoutPerformanceGoalsInput>
    create: XOR<EmployeeCreateWithoutPerformanceGoalsInput, EmployeeUncheckedCreateWithoutPerformanceGoalsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPerformanceGoalsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPerformanceGoalsInput, EmployeeUncheckedUpdateWithoutPerformanceGoalsInput>
  }

  export type EmployeeUpdateWithoutPerformanceGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPerformanceGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type PerformanceReviewCycleUpsertWithoutPerformanceGoalsInput = {
    update: XOR<PerformanceReviewCycleUpdateWithoutPerformanceGoalsInput, PerformanceReviewCycleUncheckedUpdateWithoutPerformanceGoalsInput>
    create: XOR<PerformanceReviewCycleCreateWithoutPerformanceGoalsInput, PerformanceReviewCycleUncheckedCreateWithoutPerformanceGoalsInput>
    where?: PerformanceReviewCycleWhereInput
  }

  export type PerformanceReviewCycleUpdateToOneWithWhereWithoutPerformanceGoalsInput = {
    where?: PerformanceReviewCycleWhereInput
    data: XOR<PerformanceReviewCycleUpdateWithoutPerformanceGoalsInput, PerformanceReviewCycleUncheckedUpdateWithoutPerformanceGoalsInput>
  }

  export type PerformanceReviewCycleUpdateWithoutPerformanceGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewCyclesNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutReviewCycleNestedInput
  }

  export type PerformanceReviewCycleUncheckedUpdateWithoutPerformanceGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutReviewCycleNestedInput
  }

  export type TenantUpsertWithoutPerformanceGoalsInput = {
    update: XOR<TenantUpdateWithoutPerformanceGoalsInput, TenantUncheckedUpdateWithoutPerformanceGoalsInput>
    create: XOR<TenantCreateWithoutPerformanceGoalsInput, TenantUncheckedCreateWithoutPerformanceGoalsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPerformanceGoalsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPerformanceGoalsInput, TenantUncheckedUpdateWithoutPerformanceGoalsInput>
  }

  export type TenantUpdateWithoutPerformanceGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPerformanceGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PerformanceReviewCreateWithoutPerformanceRatingsInput = {
    id?: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutPerformanceReviewInput
    employee: EmployeeCreateNestedOneWithoutPerformanceReviewsInput
    reviewCycle: PerformanceReviewCycleCreateNestedOneWithoutPerformanceReviewsInput
    tenant: TenantCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateWithoutPerformanceRatingsInput = {
    id?: string
    employeeId: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutPerformanceReviewInput
  }

  export type PerformanceReviewCreateOrConnectWithoutPerformanceRatingsInput = {
    where: PerformanceReviewWhereUniqueInput
    create: XOR<PerformanceReviewCreateWithoutPerformanceRatingsInput, PerformanceReviewUncheckedCreateWithoutPerformanceRatingsInput>
  }

  export type TenantCreateWithoutPerformanceRatingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPerformanceRatingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPerformanceRatingsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPerformanceRatingsInput, TenantUncheckedCreateWithoutPerformanceRatingsInput>
  }

  export type PerformanceReviewUpsertWithoutPerformanceRatingsInput = {
    update: XOR<PerformanceReviewUpdateWithoutPerformanceRatingsInput, PerformanceReviewUncheckedUpdateWithoutPerformanceRatingsInput>
    create: XOR<PerformanceReviewCreateWithoutPerformanceRatingsInput, PerformanceReviewUncheckedCreateWithoutPerformanceRatingsInput>
    where?: PerformanceReviewWhereInput
  }

  export type PerformanceReviewUpdateToOneWithWhereWithoutPerformanceRatingsInput = {
    where?: PerformanceReviewWhereInput
    data: XOR<PerformanceReviewUpdateWithoutPerformanceRatingsInput, PerformanceReviewUncheckedUpdateWithoutPerformanceRatingsInput>
  }

  export type PerformanceReviewUpdateWithoutPerformanceRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutPerformanceReviewNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    reviewCycle?: PerformanceReviewCycleUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateWithoutPerformanceRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewNestedInput
  }

  export type TenantUpsertWithoutPerformanceRatingsInput = {
    update: XOR<TenantUpdateWithoutPerformanceRatingsInput, TenantUncheckedUpdateWithoutPerformanceRatingsInput>
    create: XOR<TenantCreateWithoutPerformanceRatingsInput, TenantUncheckedCreateWithoutPerformanceRatingsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPerformanceRatingsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPerformanceRatingsInput, TenantUncheckedUpdateWithoutPerformanceRatingsInput>
  }

  export type TenantUpdateWithoutPerformanceRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPerformanceRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PerformanceReviewCreateWithoutPerformanceFeedbackInput = {
    id?: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutPerformanceReviewInput
    employee: EmployeeCreateNestedOneWithoutPerformanceReviewsInput
    reviewCycle: PerformanceReviewCycleCreateNestedOneWithoutPerformanceReviewsInput
    tenant: TenantCreateNestedOneWithoutPerformanceReviewsInput
  }

  export type PerformanceReviewUncheckedCreateWithoutPerformanceFeedbackInput = {
    id?: string
    employeeId: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutPerformanceReviewInput
  }

  export type PerformanceReviewCreateOrConnectWithoutPerformanceFeedbackInput = {
    where: PerformanceReviewWhereUniqueInput
    create: XOR<PerformanceReviewCreateWithoutPerformanceFeedbackInput, PerformanceReviewUncheckedCreateWithoutPerformanceFeedbackInput>
  }

  export type TenantCreateWithoutPerformanceFeedbackInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPerformanceFeedbackInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPerformanceFeedbackInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPerformanceFeedbackInput, TenantUncheckedCreateWithoutPerformanceFeedbackInput>
  }

  export type PerformanceReviewUpsertWithoutPerformanceFeedbackInput = {
    update: XOR<PerformanceReviewUpdateWithoutPerformanceFeedbackInput, PerformanceReviewUncheckedUpdateWithoutPerformanceFeedbackInput>
    create: XOR<PerformanceReviewCreateWithoutPerformanceFeedbackInput, PerformanceReviewUncheckedCreateWithoutPerformanceFeedbackInput>
    where?: PerformanceReviewWhereInput
  }

  export type PerformanceReviewUpdateToOneWithWhereWithoutPerformanceFeedbackInput = {
    where?: PerformanceReviewWhereInput
    data: XOR<PerformanceReviewUpdateWithoutPerformanceFeedbackInput, PerformanceReviewUncheckedUpdateWithoutPerformanceFeedbackInput>
  }

  export type PerformanceReviewUpdateWithoutPerformanceFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceRatings?: PerformanceRatingUpdateManyWithoutPerformanceReviewNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    reviewCycle?: PerformanceReviewCycleUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateWithoutPerformanceFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewNestedInput
  }

  export type TenantUpsertWithoutPerformanceFeedbackInput = {
    update: XOR<TenantUpdateWithoutPerformanceFeedbackInput, TenantUncheckedUpdateWithoutPerformanceFeedbackInput>
    create: XOR<TenantCreateWithoutPerformanceFeedbackInput, TenantUncheckedCreateWithoutPerformanceFeedbackInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPerformanceFeedbackInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPerformanceFeedbackInput, TenantUncheckedUpdateWithoutPerformanceFeedbackInput>
  }

  export type TenantUpdateWithoutPerformanceFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPerformanceFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type ReportInstanceCreateWithoutTemplateInput = {
    id?: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutReportInstancesInput
  }

  export type ReportInstanceUncheckedCreateWithoutTemplateInput = {
    id?: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ReportInstanceCreateOrConnectWithoutTemplateInput = {
    where: ReportInstanceWhereUniqueInput
    create: XOR<ReportInstanceCreateWithoutTemplateInput, ReportInstanceUncheckedCreateWithoutTemplateInput>
  }

  export type ReportInstanceCreateManyTemplateInputEnvelope = {
    data: ReportInstanceCreateManyTemplateInput | ReportInstanceCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutReportTemplatesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutReportTemplatesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutReportTemplatesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutReportTemplatesInput, TenantUncheckedCreateWithoutReportTemplatesInput>
  }

  export type ReportInstanceUpsertWithWhereUniqueWithoutTemplateInput = {
    where: ReportInstanceWhereUniqueInput
    update: XOR<ReportInstanceUpdateWithoutTemplateInput, ReportInstanceUncheckedUpdateWithoutTemplateInput>
    create: XOR<ReportInstanceCreateWithoutTemplateInput, ReportInstanceUncheckedCreateWithoutTemplateInput>
  }

  export type ReportInstanceUpdateWithWhereUniqueWithoutTemplateInput = {
    where: ReportInstanceWhereUniqueInput
    data: XOR<ReportInstanceUpdateWithoutTemplateInput, ReportInstanceUncheckedUpdateWithoutTemplateInput>
  }

  export type ReportInstanceUpdateManyWithWhereWithoutTemplateInput = {
    where: ReportInstanceScalarWhereInput
    data: XOR<ReportInstanceUpdateManyMutationInput, ReportInstanceUncheckedUpdateManyWithoutTemplateInput>
  }

  export type TenantUpsertWithoutReportTemplatesInput = {
    update: XOR<TenantUpdateWithoutReportTemplatesInput, TenantUncheckedUpdateWithoutReportTemplatesInput>
    create: XOR<TenantCreateWithoutReportTemplatesInput, TenantUncheckedCreateWithoutReportTemplatesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutReportTemplatesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutReportTemplatesInput, TenantUncheckedUpdateWithoutReportTemplatesInput>
  }

  export type TenantUpdateWithoutReportTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutReportTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type ReportTemplateCreateWithoutReportInstancesInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutReportTemplatesInput
  }

  export type ReportTemplateUncheckedCreateWithoutReportInstancesInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ReportTemplateCreateOrConnectWithoutReportInstancesInput = {
    where: ReportTemplateWhereUniqueInput
    create: XOR<ReportTemplateCreateWithoutReportInstancesInput, ReportTemplateUncheckedCreateWithoutReportInstancesInput>
  }

  export type TenantCreateWithoutReportInstancesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutReportInstancesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutReportInstancesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutReportInstancesInput, TenantUncheckedCreateWithoutReportInstancesInput>
  }

  export type ReportTemplateUpsertWithoutReportInstancesInput = {
    update: XOR<ReportTemplateUpdateWithoutReportInstancesInput, ReportTemplateUncheckedUpdateWithoutReportInstancesInput>
    create: XOR<ReportTemplateCreateWithoutReportInstancesInput, ReportTemplateUncheckedCreateWithoutReportInstancesInput>
    where?: ReportTemplateWhereInput
  }

  export type ReportTemplateUpdateToOneWithWhereWithoutReportInstancesInput = {
    where?: ReportTemplateWhereInput
    data: XOR<ReportTemplateUpdateWithoutReportInstancesInput, ReportTemplateUncheckedUpdateWithoutReportInstancesInput>
  }

  export type ReportTemplateUpdateWithoutReportInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutReportTemplatesNestedInput
  }

  export type ReportTemplateUncheckedUpdateWithoutReportInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TenantUpsertWithoutReportInstancesInput = {
    update: XOR<TenantUpdateWithoutReportInstancesInput, TenantUncheckedUpdateWithoutReportInstancesInput>
    create: XOR<TenantCreateWithoutReportInstancesInput, TenantUncheckedCreateWithoutReportInstancesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutReportInstancesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutReportInstancesInput, TenantUncheckedUpdateWithoutReportInstancesInput>
  }

  export type TenantUpdateWithoutReportInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutReportInstancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutDashboardsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutDashboardsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutDashboardsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutDashboardsInput, TenantUncheckedCreateWithoutDashboardsInput>
  }

  export type TenantUpsertWithoutDashboardsInput = {
    update: XOR<TenantUpdateWithoutDashboardsInput, TenantUncheckedUpdateWithoutDashboardsInput>
    create: XOR<TenantCreateWithoutDashboardsInput, TenantUncheckedCreateWithoutDashboardsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutDashboardsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutDashboardsInput, TenantUncheckedUpdateWithoutDashboardsInput>
  }

  export type TenantUpdateWithoutDashboardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutDashboardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutSalaryAdvancePoliciesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSalaryAdvancePoliciesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSalaryAdvancePoliciesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSalaryAdvancePoliciesInput, TenantUncheckedCreateWithoutSalaryAdvancePoliciesInput>
  }

  export type TenantUpsertWithoutSalaryAdvancePoliciesInput = {
    update: XOR<TenantUpdateWithoutSalaryAdvancePoliciesInput, TenantUncheckedUpdateWithoutSalaryAdvancePoliciesInput>
    create: XOR<TenantCreateWithoutSalaryAdvancePoliciesInput, TenantUncheckedCreateWithoutSalaryAdvancePoliciesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSalaryAdvancePoliciesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSalaryAdvancePoliciesInput, TenantUncheckedUpdateWithoutSalaryAdvancePoliciesInput>
  }

  export type TenantUpdateWithoutSalaryAdvancePoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSalaryAdvancePoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput = {
    id?: string
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payrollPeriod?: PayrollPeriodCreateNestedOneWithoutSalaryAdvanceRepaymentsInput
    tenant: TenantCreateNestedOneWithoutSalaryAdvanceRepaymentsInput
  }

  export type SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput = {
    id?: string
    payrollPeriodId?: string | null
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRepaymentCreateOrConnectWithoutSalaryAdvanceRequestInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    create: XOR<SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput>
  }

  export type SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInputEnvelope = {
    data: SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInput | SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutSalaryAdvanceRequestsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutSalaryAdvanceRequestsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    trainingEnrollments?: TrainingEnrollmentUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutSalaryAdvanceRequestsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSalaryAdvanceRequestsInput, EmployeeUncheckedCreateWithoutSalaryAdvanceRequestsInput>
  }

  export type BranchCreateWithoutSalaryAdvanceRequestsInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutBranchesInput
    tenant: TenantCreateNestedOneWithoutBranchesInput
    employees?: EmployeeCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateWithoutSalaryAdvanceRequestsInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    departmentId: string
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutBranchInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchCreateOrConnectWithoutSalaryAdvanceRequestsInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutSalaryAdvanceRequestsInput, BranchUncheckedCreateWithoutSalaryAdvanceRequestsInput>
  }

  export type TenantCreateWithoutSalaryAdvanceRequestsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSalaryAdvanceRequestsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSalaryAdvanceRequestsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSalaryAdvanceRequestsInput, TenantUncheckedCreateWithoutSalaryAdvanceRequestsInput>
  }

  export type SalaryAdvanceRepaymentUpsertWithWhereUniqueWithoutSalaryAdvanceRequestInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    update: XOR<SalaryAdvanceRepaymentUpdateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedUpdateWithoutSalaryAdvanceRequestInput>
    create: XOR<SalaryAdvanceRepaymentCreateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedCreateWithoutSalaryAdvanceRequestInput>
  }

  export type SalaryAdvanceRepaymentUpdateWithWhereUniqueWithoutSalaryAdvanceRequestInput = {
    where: SalaryAdvanceRepaymentWhereUniqueInput
    data: XOR<SalaryAdvanceRepaymentUpdateWithoutSalaryAdvanceRequestInput, SalaryAdvanceRepaymentUncheckedUpdateWithoutSalaryAdvanceRequestInput>
  }

  export type SalaryAdvanceRepaymentUpdateManyWithWhereWithoutSalaryAdvanceRequestInput = {
    where: SalaryAdvanceRepaymentScalarWhereInput
    data: XOR<SalaryAdvanceRepaymentUpdateManyMutationInput, SalaryAdvanceRepaymentUncheckedUpdateManyWithoutSalaryAdvanceRequestInput>
  }

  export type EmployeeUpsertWithoutSalaryAdvanceRequestsInput = {
    update: XOR<EmployeeUpdateWithoutSalaryAdvanceRequestsInput, EmployeeUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
    create: XOR<EmployeeCreateWithoutSalaryAdvanceRequestsInput, EmployeeUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutSalaryAdvanceRequestsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutSalaryAdvanceRequestsInput, EmployeeUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
  }

  export type EmployeeUpdateWithoutSalaryAdvanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutSalaryAdvanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type BranchUpsertWithoutSalaryAdvanceRequestsInput = {
    update: XOR<BranchUpdateWithoutSalaryAdvanceRequestsInput, BranchUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
    create: XOR<BranchCreateWithoutSalaryAdvanceRequestsInput, BranchUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutSalaryAdvanceRequestsInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutSalaryAdvanceRequestsInput, BranchUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
  }

  export type BranchUpdateWithoutSalaryAdvanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutBranchesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutBranchesNestedInput
    employees?: EmployeeUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutSalaryAdvanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type TenantUpsertWithoutSalaryAdvanceRequestsInput = {
    update: XOR<TenantUpdateWithoutSalaryAdvanceRequestsInput, TenantUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
    create: XOR<TenantCreateWithoutSalaryAdvanceRequestsInput, TenantUncheckedCreateWithoutSalaryAdvanceRequestsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSalaryAdvanceRequestsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSalaryAdvanceRequestsInput, TenantUncheckedUpdateWithoutSalaryAdvanceRequestsInput>
  }

  export type TenantUpdateWithoutSalaryAdvanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSalaryAdvanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PayrollPeriodCreateWithoutSalaryAdvanceRepaymentsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payStubs?: PayStubCreateNestedManyWithoutPayrollPeriodInput
    tenant: TenantCreateNestedOneWithoutPayrollPeriodsInput
    payrolls?: PayrollCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUncheckedCreateWithoutSalaryAdvanceRepaymentsInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    payStubs?: PayStubUncheckedCreateNestedManyWithoutPayrollPeriodInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodCreateOrConnectWithoutSalaryAdvanceRepaymentsInput = {
    where: PayrollPeriodWhereUniqueInput
    create: XOR<PayrollPeriodCreateWithoutSalaryAdvanceRepaymentsInput, PayrollPeriodUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
  }

  export type SalaryAdvanceRequestCreateWithoutRepaymentsInput = {
    id?: string
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutSalaryAdvanceRequestsInput
    branch?: BranchCreateNestedOneWithoutSalaryAdvanceRequestsInput
    tenant: TenantCreateNestedOneWithoutSalaryAdvanceRequestsInput
  }

  export type SalaryAdvanceRequestUncheckedCreateWithoutRepaymentsInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRequestCreateOrConnectWithoutRepaymentsInput = {
    where: SalaryAdvanceRequestWhereUniqueInput
    create: XOR<SalaryAdvanceRequestCreateWithoutRepaymentsInput, SalaryAdvanceRequestUncheckedCreateWithoutRepaymentsInput>
  }

  export type TenantCreateWithoutSalaryAdvanceRepaymentsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSalaryAdvanceRepaymentsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSalaryAdvanceRepaymentsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSalaryAdvanceRepaymentsInput, TenantUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
  }

  export type PayrollPeriodUpsertWithoutSalaryAdvanceRepaymentsInput = {
    update: XOR<PayrollPeriodUpdateWithoutSalaryAdvanceRepaymentsInput, PayrollPeriodUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput>
    create: XOR<PayrollPeriodCreateWithoutSalaryAdvanceRepaymentsInput, PayrollPeriodUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
    where?: PayrollPeriodWhereInput
  }

  export type PayrollPeriodUpdateToOneWithWhereWithoutSalaryAdvanceRepaymentsInput = {
    where?: PayrollPeriodWhereInput
    data: XOR<PayrollPeriodUpdateWithoutSalaryAdvanceRepaymentsInput, PayrollPeriodUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput>
  }

  export type PayrollPeriodUpdateWithoutSalaryAdvanceRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStubs?: PayStubUpdateManyWithoutPayrollPeriodNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollPeriodsNestedInput
    payrolls?: PayrollUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payStubs?: PayStubUncheckedUpdateManyWithoutPayrollPeriodNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type SalaryAdvanceRequestUpsertWithoutRepaymentsInput = {
    update: XOR<SalaryAdvanceRequestUpdateWithoutRepaymentsInput, SalaryAdvanceRequestUncheckedUpdateWithoutRepaymentsInput>
    create: XOR<SalaryAdvanceRequestCreateWithoutRepaymentsInput, SalaryAdvanceRequestUncheckedCreateWithoutRepaymentsInput>
    where?: SalaryAdvanceRequestWhereInput
  }

  export type SalaryAdvanceRequestUpdateToOneWithWhereWithoutRepaymentsInput = {
    where?: SalaryAdvanceRequestWhereInput
    data: XOR<SalaryAdvanceRequestUpdateWithoutRepaymentsInput, SalaryAdvanceRequestUncheckedUpdateWithoutRepaymentsInput>
  }

  export type SalaryAdvanceRequestUpdateWithoutRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
    branch?: BranchUpdateOneWithoutSalaryAdvanceRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateWithoutRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TenantUpsertWithoutSalaryAdvanceRepaymentsInput = {
    update: XOR<TenantUpdateWithoutSalaryAdvanceRepaymentsInput, TenantUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput>
    create: XOR<TenantCreateWithoutSalaryAdvanceRepaymentsInput, TenantUncheckedCreateWithoutSalaryAdvanceRepaymentsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSalaryAdvanceRepaymentsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSalaryAdvanceRepaymentsInput, TenantUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput>
  }

  export type TenantUpdateWithoutSalaryAdvanceRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSalaryAdvanceRepaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutAuditLogsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutAuditLogsInput, TenantUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    managedDepartments?: DepartmentCreateNestedManyWithoutManagerInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    tenant: TenantCreateNestedOneWithoutUsersInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    employeeId?: string | null
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutManagerInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type TenantUpsertWithoutAuditLogsInput = {
    update: XOR<TenantUpdateWithoutAuditLogsInput, TenantUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<TenantCreateWithoutAuditLogsInput, TenantUncheckedCreateWithoutAuditLogsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutAuditLogsInput, TenantUncheckedUpdateWithoutAuditLogsInput>
  }

  export type TenantUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TenantCreateWithoutSecurityAlertsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSecurityAlertsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSecurityAlertsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSecurityAlertsInput, TenantUncheckedCreateWithoutSecurityAlertsInput>
  }

  export type TenantUpsertWithoutSecurityAlertsInput = {
    update: XOR<TenantUpdateWithoutSecurityAlertsInput, TenantUncheckedUpdateWithoutSecurityAlertsInput>
    create: XOR<TenantCreateWithoutSecurityAlertsInput, TenantUncheckedCreateWithoutSecurityAlertsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSecurityAlertsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSecurityAlertsInput, TenantUncheckedUpdateWithoutSecurityAlertsInput>
  }

  export type TenantUpdateWithoutSecurityAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSecurityAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutSecuritySettingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSecuritySettingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSecuritySettingsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSecuritySettingsInput, TenantUncheckedCreateWithoutSecuritySettingsInput>
  }

  export type TenantUpsertWithoutSecuritySettingsInput = {
    update: XOR<TenantUpdateWithoutSecuritySettingsInput, TenantUncheckedUpdateWithoutSecuritySettingsInput>
    create: XOR<TenantCreateWithoutSecuritySettingsInput, TenantUncheckedCreateWithoutSecuritySettingsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSecuritySettingsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSecuritySettingsInput, TenantUncheckedUpdateWithoutSecuritySettingsInput>
  }

  export type TenantUpdateWithoutSecuritySettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSecuritySettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutWorkflowTemplatesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutWorkflowTemplatesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutWorkflowTemplatesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutWorkflowTemplatesInput, TenantUncheckedCreateWithoutWorkflowTemplatesInput>
  }

  export type TenantUpsertWithoutWorkflowTemplatesInput = {
    update: XOR<TenantUpdateWithoutWorkflowTemplatesInput, TenantUncheckedUpdateWithoutWorkflowTemplatesInput>
    create: XOR<TenantCreateWithoutWorkflowTemplatesInput, TenantUncheckedCreateWithoutWorkflowTemplatesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutWorkflowTemplatesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutWorkflowTemplatesInput, TenantUncheckedUpdateWithoutWorkflowTemplatesInput>
  }

  export type TenantUpdateWithoutWorkflowTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutWorkflowTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TrainingEnrollmentCreateWithoutTrainingInput = {
    id?: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutTrainingEnrollmentsInput
  }

  export type TrainingEnrollmentUncheckedCreateWithoutTrainingInput = {
    id?: string
    employeeId: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingEnrollmentCreateOrConnectWithoutTrainingInput = {
    where: TrainingEnrollmentWhereUniqueInput
    create: XOR<TrainingEnrollmentCreateWithoutTrainingInput, TrainingEnrollmentUncheckedCreateWithoutTrainingInput>
  }

  export type TrainingEnrollmentCreateManyTrainingInputEnvelope = {
    data: TrainingEnrollmentCreateManyTrainingInput | TrainingEnrollmentCreateManyTrainingInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutTrainingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutTrainingsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutTrainingsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutTrainingsInput, TenantUncheckedCreateWithoutTrainingsInput>
  }

  export type TrainingEnrollmentUpsertWithWhereUniqueWithoutTrainingInput = {
    where: TrainingEnrollmentWhereUniqueInput
    update: XOR<TrainingEnrollmentUpdateWithoutTrainingInput, TrainingEnrollmentUncheckedUpdateWithoutTrainingInput>
    create: XOR<TrainingEnrollmentCreateWithoutTrainingInput, TrainingEnrollmentUncheckedCreateWithoutTrainingInput>
  }

  export type TrainingEnrollmentUpdateWithWhereUniqueWithoutTrainingInput = {
    where: TrainingEnrollmentWhereUniqueInput
    data: XOR<TrainingEnrollmentUpdateWithoutTrainingInput, TrainingEnrollmentUncheckedUpdateWithoutTrainingInput>
  }

  export type TrainingEnrollmentUpdateManyWithWhereWithoutTrainingInput = {
    where: TrainingEnrollmentScalarWhereInput
    data: XOR<TrainingEnrollmentUpdateManyMutationInput, TrainingEnrollmentUncheckedUpdateManyWithoutTrainingInput>
  }

  export type TenantUpsertWithoutTrainingsInput = {
    update: XOR<TenantUpdateWithoutTrainingsInput, TenantUncheckedUpdateWithoutTrainingsInput>
    create: XOR<TenantCreateWithoutTrainingsInput, TenantUncheckedCreateWithoutTrainingsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutTrainingsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutTrainingsInput, TenantUncheckedUpdateWithoutTrainingsInput>
  }

  export type TenantUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutTrainingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type EmployeeCreateWithoutTrainingEnrollmentsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    branch?: BranchCreateNestedOneWithoutEmployeesInput
    department: DepartmentCreateNestedOneWithoutEmployeesInput
    tenant: TenantCreateNestedOneWithoutEmployeesInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutEmployeeInput
    user?: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutTrainingEnrollmentsInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutEmployeeInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutEmployeeInput
    user?: UserUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutTrainingEnrollmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutTrainingEnrollmentsInput, EmployeeUncheckedCreateWithoutTrainingEnrollmentsInput>
  }

  export type TrainingCreateWithoutEnrollmentsInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutTrainingsInput
  }

  export type TrainingUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    tenantId: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateOrConnectWithoutEnrollmentsInput = {
    where: TrainingWhereUniqueInput
    create: XOR<TrainingCreateWithoutEnrollmentsInput, TrainingUncheckedCreateWithoutEnrollmentsInput>
  }

  export type EmployeeUpsertWithoutTrainingEnrollmentsInput = {
    update: XOR<EmployeeUpdateWithoutTrainingEnrollmentsInput, EmployeeUncheckedUpdateWithoutTrainingEnrollmentsInput>
    create: XOR<EmployeeCreateWithoutTrainingEnrollmentsInput, EmployeeUncheckedCreateWithoutTrainingEnrollmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutTrainingEnrollmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutTrainingEnrollmentsInput, EmployeeUncheckedUpdateWithoutTrainingEnrollmentsInput>
  }

  export type EmployeeUpdateWithoutTrainingEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTrainingEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type TrainingUpsertWithoutEnrollmentsInput = {
    update: XOR<TrainingUpdateWithoutEnrollmentsInput, TrainingUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<TrainingCreateWithoutEnrollmentsInput, TrainingUncheckedCreateWithoutEnrollmentsInput>
    where?: TrainingWhereInput
  }

  export type TrainingUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: TrainingWhereInput
    data: XOR<TrainingUpdateWithoutEnrollmentsInput, TrainingUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type TrainingUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutTrainingsNestedInput
  }

  export type TrainingUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationLogCreateWithoutIntegrationInput = {
    id?: string
    message: string
    createdAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
    tenant: TenantCreateNestedOneWithoutIntegrationLogsInput
  }

  export type IntegrationLogUncheckedCreateWithoutIntegrationInput = {
    id?: string
    message: string
    createdAt?: Date | string
    tenantId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
  }

  export type IntegrationLogCreateOrConnectWithoutIntegrationInput = {
    where: IntegrationLogWhereUniqueInput
    create: XOR<IntegrationLogCreateWithoutIntegrationInput, IntegrationLogUncheckedCreateWithoutIntegrationInput>
  }

  export type IntegrationLogCreateManyIntegrationInputEnvelope = {
    data: IntegrationLogCreateManyIntegrationInput | IntegrationLogCreateManyIntegrationInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutIntegrationsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutIntegrationsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutIntegrationsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutIntegrationsInput, TenantUncheckedCreateWithoutIntegrationsInput>
  }

  export type IntegrationLogUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: IntegrationLogWhereUniqueInput
    update: XOR<IntegrationLogUpdateWithoutIntegrationInput, IntegrationLogUncheckedUpdateWithoutIntegrationInput>
    create: XOR<IntegrationLogCreateWithoutIntegrationInput, IntegrationLogUncheckedCreateWithoutIntegrationInput>
  }

  export type IntegrationLogUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: IntegrationLogWhereUniqueInput
    data: XOR<IntegrationLogUpdateWithoutIntegrationInput, IntegrationLogUncheckedUpdateWithoutIntegrationInput>
  }

  export type IntegrationLogUpdateManyWithWhereWithoutIntegrationInput = {
    where: IntegrationLogScalarWhereInput
    data: XOR<IntegrationLogUpdateManyMutationInput, IntegrationLogUncheckedUpdateManyWithoutIntegrationInput>
  }

  export type TenantUpsertWithoutIntegrationsInput = {
    update: XOR<TenantUpdateWithoutIntegrationsInput, TenantUncheckedUpdateWithoutIntegrationsInput>
    create: XOR<TenantCreateWithoutIntegrationsInput, TenantUncheckedCreateWithoutIntegrationsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutIntegrationsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutIntegrationsInput, TenantUncheckedUpdateWithoutIntegrationsInput>
  }

  export type TenantUpdateWithoutIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type IntegrationCreateWithoutIntegrationLogsInput = {
    id?: string
    name: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutIntegrationsInput
  }

  export type IntegrationUncheckedCreateWithoutIntegrationLogsInput = {
    id?: string
    name: string
    tenantId: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
  }

  export type IntegrationCreateOrConnectWithoutIntegrationLogsInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutIntegrationLogsInput, IntegrationUncheckedCreateWithoutIntegrationLogsInput>
  }

  export type TenantCreateWithoutIntegrationLogsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutIntegrationLogsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutIntegrationLogsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutIntegrationLogsInput, TenantUncheckedCreateWithoutIntegrationLogsInput>
  }

  export type IntegrationUpsertWithoutIntegrationLogsInput = {
    update: XOR<IntegrationUpdateWithoutIntegrationLogsInput, IntegrationUncheckedUpdateWithoutIntegrationLogsInput>
    create: XOR<IntegrationCreateWithoutIntegrationLogsInput, IntegrationUncheckedCreateWithoutIntegrationLogsInput>
    where?: IntegrationWhereInput
  }

  export type IntegrationUpdateToOneWithWhereWithoutIntegrationLogsInput = {
    where?: IntegrationWhereInput
    data: XOR<IntegrationUpdateWithoutIntegrationLogsInput, IntegrationUncheckedUpdateWithoutIntegrationLogsInput>
  }

  export type IntegrationUpdateWithoutIntegrationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutIntegrationsNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutIntegrationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUpsertWithoutIntegrationLogsInput = {
    update: XOR<TenantUpdateWithoutIntegrationLogsInput, TenantUncheckedUpdateWithoutIntegrationLogsInput>
    create: XOR<TenantCreateWithoutIntegrationLogsInput, TenantUncheckedCreateWithoutIntegrationLogsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutIntegrationLogsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutIntegrationLogsInput, TenantUncheckedUpdateWithoutIntegrationLogsInput>
  }

  export type TenantUpdateWithoutIntegrationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutIntegrationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type ApprovalCreateWithoutWorkflowInput = {
    id?: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutWorkflowInput = {
    id?: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ApprovalCreateOrConnectWithoutWorkflowInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutWorkflowInput, ApprovalUncheckedCreateWithoutWorkflowInput>
  }

  export type ApprovalCreateManyWorkflowInputEnvelope = {
    data: ApprovalCreateManyWorkflowInput | ApprovalCreateManyWorkflowInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowStatsCreateWithoutWorkflowInput = {
    id?: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutWorkflowStatsInput
  }

  export type WorkflowStatsUncheckedCreateWithoutWorkflowInput = {
    id?: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type WorkflowStatsCreateOrConnectWithoutWorkflowInput = {
    where: WorkflowStatsWhereUniqueInput
    create: XOR<WorkflowStatsCreateWithoutWorkflowInput, WorkflowStatsUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowStatsCreateManyWorkflowInputEnvelope = {
    data: WorkflowStatsCreateManyWorkflowInput | WorkflowStatsCreateManyWorkflowInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutWorkflowsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutWorkflowsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutWorkflowsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutWorkflowsInput, TenantUncheckedCreateWithoutWorkflowsInput>
  }

  export type ApprovalUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutWorkflowInput, ApprovalUncheckedUpdateWithoutWorkflowInput>
    create: XOR<ApprovalCreateWithoutWorkflowInput, ApprovalUncheckedCreateWithoutWorkflowInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutWorkflowInput, ApprovalUncheckedUpdateWithoutWorkflowInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutWorkflowInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutWorkflowInput>
  }

  export type WorkflowStatsUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowStatsWhereUniqueInput
    update: XOR<WorkflowStatsUpdateWithoutWorkflowInput, WorkflowStatsUncheckedUpdateWithoutWorkflowInput>
    create: XOR<WorkflowStatsCreateWithoutWorkflowInput, WorkflowStatsUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowStatsUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowStatsWhereUniqueInput
    data: XOR<WorkflowStatsUpdateWithoutWorkflowInput, WorkflowStatsUncheckedUpdateWithoutWorkflowInput>
  }

  export type WorkflowStatsUpdateManyWithWhereWithoutWorkflowInput = {
    where: WorkflowStatsScalarWhereInput
    data: XOR<WorkflowStatsUpdateManyMutationInput, WorkflowStatsUncheckedUpdateManyWithoutWorkflowInput>
  }

  export type TenantUpsertWithoutWorkflowsInput = {
    update: XOR<TenantUpdateWithoutWorkflowsInput, TenantUncheckedUpdateWithoutWorkflowsInput>
    create: XOR<TenantCreateWithoutWorkflowsInput, TenantUncheckedCreateWithoutWorkflowsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutWorkflowsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutWorkflowsInput, TenantUncheckedUpdateWithoutWorkflowsInput>
  }

  export type TenantUpdateWithoutWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutWorkflowStatsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutWorkflowStatsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutWorkflowStatsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutWorkflowStatsInput, TenantUncheckedCreateWithoutWorkflowStatsInput>
  }

  export type WorkflowCreateWithoutWorkflowStatsInput = {
    id?: string
    name: string
    approvals?: ApprovalCreateNestedManyWithoutWorkflowInput
    tenant: TenantCreateNestedOneWithoutWorkflowsInput
  }

  export type WorkflowUncheckedCreateWithoutWorkflowStatsInput = {
    id?: string
    name: string
    tenantId: string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutWorkflowStatsInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutWorkflowStatsInput, WorkflowUncheckedCreateWithoutWorkflowStatsInput>
  }

  export type TenantUpsertWithoutWorkflowStatsInput = {
    update: XOR<TenantUpdateWithoutWorkflowStatsInput, TenantUncheckedUpdateWithoutWorkflowStatsInput>
    create: XOR<TenantCreateWithoutWorkflowStatsInput, TenantUncheckedCreateWithoutWorkflowStatsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutWorkflowStatsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutWorkflowStatsInput, TenantUncheckedUpdateWithoutWorkflowStatsInput>
  }

  export type TenantUpdateWithoutWorkflowStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutWorkflowStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type WorkflowUpsertWithoutWorkflowStatsInput = {
    update: XOR<WorkflowUpdateWithoutWorkflowStatsInput, WorkflowUncheckedUpdateWithoutWorkflowStatsInput>
    create: XOR<WorkflowCreateWithoutWorkflowStatsInput, WorkflowUncheckedCreateWithoutWorkflowStatsInput>
    where?: WorkflowWhereInput
  }

  export type WorkflowUpdateToOneWithWhereWithoutWorkflowStatsInput = {
    where?: WorkflowWhereInput
    data: XOR<WorkflowUpdateWithoutWorkflowStatsInput, WorkflowUncheckedUpdateWithoutWorkflowStatsInput>
  }

  export type WorkflowUpdateWithoutWorkflowStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    approvals?: ApprovalUpdateManyWithoutWorkflowNestedInput
    tenant?: TenantUpdateOneRequiredWithoutWorkflowsNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutWorkflowStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    approvals?: ApprovalUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type TenantCreateWithoutApprovalsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutApprovalsInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    experimentalFeatures?: ExperimentalFeatureUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutApprovalsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutApprovalsInput, TenantUncheckedCreateWithoutApprovalsInput>
  }

  export type WorkflowCreateWithoutApprovalsInput = {
    id?: string
    name: string
    workflowStats?: WorkflowStatsCreateNestedManyWithoutWorkflowInput
    tenant: TenantCreateNestedOneWithoutWorkflowsInput
  }

  export type WorkflowUncheckedCreateWithoutApprovalsInput = {
    id?: string
    name: string
    tenantId: string
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutApprovalsInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutApprovalsInput, WorkflowUncheckedCreateWithoutApprovalsInput>
  }

  export type TenantUpsertWithoutApprovalsInput = {
    update: XOR<TenantUpdateWithoutApprovalsInput, TenantUncheckedUpdateWithoutApprovalsInput>
    create: XOR<TenantCreateWithoutApprovalsInput, TenantUncheckedCreateWithoutApprovalsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutApprovalsInput, TenantUncheckedUpdateWithoutApprovalsInput>
  }

  export type TenantUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    experimentalFeatures?: ExperimentalFeatureUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type WorkflowUpsertWithoutApprovalsInput = {
    update: XOR<WorkflowUpdateWithoutApprovalsInput, WorkflowUncheckedUpdateWithoutApprovalsInput>
    create: XOR<WorkflowCreateWithoutApprovalsInput, WorkflowUncheckedCreateWithoutApprovalsInput>
    where?: WorkflowWhereInput
  }

  export type WorkflowUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: WorkflowWhereInput
    data: XOR<WorkflowUpdateWithoutApprovalsInput, WorkflowUncheckedUpdateWithoutApprovalsInput>
  }

  export type WorkflowUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    workflowStats?: WorkflowStatsUpdateManyWithoutWorkflowNestedInput
    tenant?: TenantUpdateOneRequiredWithoutWorkflowsNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type TenantCreateWithoutExperimentalFeaturesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogCreateNestedManyWithoutTenantInput
    branches?: BranchCreateNestedManyWithoutTenantInput
    dashboards?: DashboardCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    employees?: EmployeeCreateNestedManyWithoutTenantInput
    holidays?: HolidayCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogCreateNestedManyWithoutTenantInput
    integrations?: IntegrationCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeCreateNestedManyWithoutTenantInput
    payStubs?: PayStubCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsCreateNestedOneWithoutTenantInput
    payrolls?: PayrollCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketCreateNestedManyWithoutTenantInput
    trainings?: TrainingCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutTenantInput
    workflows?: WorkflowCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutExperimentalFeaturesInput = {
    id?: string
    name: string
    domain?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    approvals?: ApprovalUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutTenantInput
    branches?: BranchUncheckedCreateNestedManyWithoutTenantInput
    dashboards?: DashboardUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutTenantInput
    holidays?: HolidayUncheckedCreateNestedManyWithoutTenantInput
    integrationLogs?: IntegrationLogUncheckedCreateNestedManyWithoutTenantInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutTenantInput
    leaveBalances?: LeaveBalanceUncheckedCreateNestedManyWithoutTenantInput
    leavePolicies?: LeavePolicyUncheckedCreateNestedManyWithoutTenantInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutTenantInput
    leaveTypes?: LeaveTypeUncheckedCreateNestedManyWithoutTenantInput
    payStubs?: PayStubUncheckedCreateNestedManyWithoutTenantInput
    payrollItems?: PayrollItemUncheckedCreateNestedManyWithoutTenantInput
    payrollPeriods?: PayrollPeriodUncheckedCreateNestedManyWithoutTenantInput
    payrollSettings?: PayrollSettingsUncheckedCreateNestedOneWithoutTenantInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutTenantInput
    performanceFeedback?: PerformanceFeedbackUncheckedCreateNestedManyWithoutTenantInput
    performanceGoals?: PerformanceGoalUncheckedCreateNestedManyWithoutTenantInput
    performanceRatings?: PerformanceRatingUncheckedCreateNestedManyWithoutTenantInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedCreateNestedManyWithoutTenantInput
    performanceReviews?: PerformanceReviewUncheckedCreateNestedManyWithoutTenantInput
    reportInstances?: ReportInstanceUncheckedCreateNestedManyWithoutTenantInput
    reportTemplates?: ReportTemplateUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedCreateNestedManyWithoutTenantInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedCreateNestedManyWithoutTenantInput
    securityAlerts?: SecurityAlertUncheckedCreateNestedManyWithoutTenantInput
    securitySettings?: SecuritySettingsUncheckedCreateNestedOneWithoutTenantInput
    taxBrackets?: TaxBracketUncheckedCreateNestedManyWithoutTenantInput
    trainings?: TrainingUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    workflowStats?: WorkflowStatsUncheckedCreateNestedManyWithoutTenantInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutTenantInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutExperimentalFeaturesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutExperimentalFeaturesInput, TenantUncheckedCreateWithoutExperimentalFeaturesInput>
  }

  export type TenantUpsertWithoutExperimentalFeaturesInput = {
    update: XOR<TenantUpdateWithoutExperimentalFeaturesInput, TenantUncheckedUpdateWithoutExperimentalFeaturesInput>
    create: XOR<TenantCreateWithoutExperimentalFeaturesInput, TenantUncheckedCreateWithoutExperimentalFeaturesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutExperimentalFeaturesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutExperimentalFeaturesInput, TenantUncheckedUpdateWithoutExperimentalFeaturesInput>
  }

  export type TenantUpdateWithoutExperimentalFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUpdateManyWithoutTenantNestedInput
    branches?: BranchUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutExperimentalFeaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    domain?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvals?: ApprovalUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutTenantNestedInput
    branches?: BranchUncheckedUpdateManyWithoutTenantNestedInput
    dashboards?: DashboardUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutTenantNestedInput
    holidays?: HolidayUncheckedUpdateManyWithoutTenantNestedInput
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutTenantNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutTenantNestedInput
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutTenantNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutTenantNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutTenantNestedInput
    leaveTypes?: LeaveTypeUncheckedUpdateManyWithoutTenantNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutTenantNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutTenantNestedInput
    payrollPeriods?: PayrollPeriodUncheckedUpdateManyWithoutTenantNestedInput
    payrollSettings?: PayrollSettingsUncheckedUpdateOneWithoutTenantNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutTenantNestedInput
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutTenantNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutTenantNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviewCycles?: PerformanceReviewCycleUncheckedUpdateManyWithoutTenantNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutTenantNestedInput
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTenantNestedInput
    reportTemplates?: ReportTemplateUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvancePolicies?: SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    securityAlerts?: SecurityAlertUncheckedUpdateManyWithoutTenantNestedInput
    securitySettings?: SecuritySettingsUncheckedUpdateOneWithoutTenantNestedInput
    taxBrackets?: TaxBracketUncheckedUpdateManyWithoutTenantNestedInput
    trainings?: TrainingUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutTenantNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutTenantNestedInput
    workflows?: WorkflowUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type ApprovalCreateManyTenantInput = {
    id?: string
    workflowId: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyTenantInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
  }

  export type AuditLogCreateManyTenantInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    userId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BranchCreateManyTenantInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    departmentId: string
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DashboardCreateManyTenantInput = {
    id?: string
    name: string
    description?: string | null
    layout: JsonNullValueInput | InputJsonValue
    widgets: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: number | null
    isDefault?: boolean
    isPublic?: boolean
    allowedRoles?: DashboardCreateallowedRolesInput | string[]
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateManyTenantInput = {
    id?: string
    name: string
    description?: string | null
    managerId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCreateManyTenantInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExperimentalFeatureCreateManyTenantInput = {
    id?: string
    key: string
    name: string
    description?: string | null
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
  }

  export type HolidayCreateManyTenantInput = {
    id?: string
    name: string
    date: Date | string
    type?: string
    description?: string | null
    isRecurring?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IntegrationLogCreateManyTenantInput = {
    id?: string
    integrationId: string
    message: string
    createdAt?: Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
  }

  export type IntegrationCreateManyTenantInput = {
    id?: string
    name: string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    lastSyncTime?: Date | string | null
    status?: string
    successRate?: number
    type: string
    updatedAt?: Date | string
  }

  export type LeaveBalanceCreateManyTenantInput = {
    id?: string
    employeeId: string
    leaveTypeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeavePolicyCreateManyTenantInput = {
    id?: string
    leaveTypeId: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveRequestCreateManyTenantInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveTypeCreateManyTenantInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayStubCreateManyTenantInput = {
    id?: string
    employeeId: string
    payrollId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollItemCreateManyTenantInput = {
    id?: string
    payrollId: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollPeriodCreateManyTenantInput = {
    id?: string
    name: string
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayrollCreateManyTenantInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceFeedbackCreateManyTenantInput = {
    id?: string
    performanceReviewId: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceGoalCreateManyTenantInput = {
    id?: string
    employeeId: string
    reviewCycleId?: string | null
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceRatingCreateManyTenantInput = {
    id?: string
    performanceReviewId: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceReviewCycleCreateManyTenantInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    reviewDeadline: Date | string
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PerformanceReviewCreateManyTenantInput = {
    id?: string
    employeeId: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportInstanceCreateManyTenantInput = {
    id?: string
    templateId: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportTemplateCreateManyTenantInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type?: string
    query: string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPublic?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalaryAdvancePolicyCreateManyTenantInput = {
    id?: string
    name: string
    description?: string | null
    maxAdvancePercentage?: number
    maxAdvanceAmount?: number | null
    minServiceMonths?: number
    maxAdvancesPerYear?: number
    interestRate?: number
    requiresApproval?: boolean
    autoApprove?: boolean
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlyDeductionPercentage?: number
  }

  export type SalaryAdvanceRepaymentCreateManyTenantInput = {
    id?: string
    salaryAdvanceRequestId: string
    payrollPeriodId?: string | null
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalaryAdvanceRequestCreateManyTenantInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SecurityAlertCreateManyTenantInput = {
    id?: string
    type: string
    title: string
    description: string
    timestamp?: Date | string
  }

  export type TaxBracketCreateManyTenantInput = {
    id?: string
    name: string
    minAmount: number
    maxAmount?: number | null
    rate: number
    fixedAmount?: number
    isActive?: boolean
    effectiveDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingCreateManyTenantInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    capacity?: number | null
    instructor?: string | null
    venue?: string | null
    requirements?: TrainingCreaterequirementsInput | string[]
    certification?: boolean
    cost?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyTenantInput = {
    id?: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: string
    status?: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: string | null
  }

  export type WorkflowStatsCreateManyTenantInput = {
    id?: string
    workflowId: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type WorkflowTemplateCreateManyTenantInput = {
    id?: string
    name: string
    description: string
    category: string
    version: string
    isActive: boolean
    steps: JsonNullValueInput | InputJsonValue
    triggers: JsonNullValueInput | InputJsonValue
    variables: JsonNullValueInput | InputJsonValue
    createdBy: string
    createdDate: Date | string
    lastModified: Date | string
  }

  export type WorkflowCreateManyTenantInput = {
    id?: string
    name: string
  }

  export type ApprovalUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BranchUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutBranchesNestedInput
    employees?: EmployeeUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    layout?: JsonNullValueInput | InputJsonValue
    widgets?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: NullableIntFieldUpdateOperationsInput | number | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedRoles?: DashboardUpdateallowedRolesInput | string[]
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    layout?: JsonNullValueInput | InputJsonValue
    widgets?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: NullableIntFieldUpdateOperationsInput | number | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedRoles?: DashboardUpdateallowedRolesInput | string[]
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    layout?: JsonNullValueInput | InputJsonValue
    widgets?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    refreshInterval?: NullableIntFieldUpdateOperationsInput | number | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    allowedRoles?: DashboardUpdateallowedRolesInput | string[]
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branches?: BranchUpdateManyWithoutDepartmentNestedInput
    manager?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    employees?: EmployeeUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branches?: BranchUncheckedUpdateManyWithoutDepartmentNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentalFeatureUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExperimentalFeatureUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExperimentalFeatureUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HolidayUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HolidayUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HolidayUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationLogUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutIntegrationLogsNestedInput
  }

  export type IntegrationLogUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationLogUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrationLogs?: IntegrationLogUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrationLogs?: IntegrationLogUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSyncTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    successRate?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveBalanceUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveBalancesNestedInput
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeaveBalancesNestedInput
  }

  export type LeaveBalanceUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveBalanceUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePolicyUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeavePoliciesNestedInput
  }

  export type LeavePolicyUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeavePolicyUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveRequestsNestedInput
    branch?: BranchUpdateOneWithoutLeaveRequestsNestedInput
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeaveRequestsNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveTypeUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveBalances?: LeaveBalanceUpdateManyWithoutLeaveTypeNestedInput
    leavePolicies?: LeavePolicyUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutLeaveTypeNestedInput
  }

  export type LeaveTypeUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutLeaveTypeNestedInput
    leavePolicies?: LeavePolicyUncheckedUpdateManyWithoutLeaveTypeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutLeaveTypeNestedInput
  }

  export type LeaveTypeUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayStubUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayStubsNestedInput
    payroll?: PayrollUpdateOneRequiredWithoutPayStubNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayStubsNestedInput
  }

  export type PayStubUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayStubUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollItemUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll?: PayrollUpdateOneRequiredWithoutPayrollItemsNestedInput
  }

  export type PayrollItemUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollItemUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollPeriodUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStubs?: PayStubUpdateManyWithoutPayrollPeriodNestedInput
    payrolls?: PayrollUpdateManyWithoutPayrollPeriodNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStubs?: PayStubUncheckedUpdateManyWithoutPayrollPeriodNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutPayrollPeriodNestedInput
    salaryAdvanceRepayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStub?: PayStubUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutPayrollNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPayrollsNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type PayrollUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStub?: PayStubUncheckedUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceFeedbackUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceReview?: PerformanceReviewUpdateOneRequiredWithoutPerformanceFeedbackNestedInput
  }

  export type PerformanceFeedbackUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceFeedbackUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceGoalUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceGoalsNestedInput
    reviewCycle?: PerformanceReviewCycleUpdateOneWithoutPerformanceGoalsNestedInput
  }

  export type PerformanceGoalUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceGoalUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceRatingUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceReview?: PerformanceReviewUpdateOneRequiredWithoutPerformanceRatingsNestedInput
  }

  export type PerformanceRatingUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceRatingUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    performanceReviewId?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceReviewCycleUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceGoals?: PerformanceGoalUpdateManyWithoutReviewCycleNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutReviewCycleNestedInput
  }

  export type PerformanceReviewCycleUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutReviewCycleNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutReviewCycleNestedInput
  }

  export type PerformanceReviewCycleUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewDeadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceReviewUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutPerformanceReviewNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    reviewCycle?: PerformanceReviewCycleUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewNestedInput
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportInstanceUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: ReportTemplateUpdateOneRequiredWithoutReportInstancesNestedInput
  }

  export type ReportInstanceUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportInstanceUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportTemplateUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportInstances?: ReportInstanceUpdateManyWithoutTemplateNestedInput
  }

  export type ReportTemplateUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportInstances?: ReportInstanceUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type ReportTemplateUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    query?: StringFieldUpdateOperationsInput | string
    parameters?: NullableJsonNullValueInput | InputJsonValue
    columns?: JsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    groupBy?: NullableJsonNullValueInput | InputJsonValue
    sortBy?: NullableJsonNullValueInput | InputJsonValue
    chartConfig?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryAdvancePolicyUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxAdvancePercentage?: FloatFieldUpdateOperationsInput | number
    maxAdvanceAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    minServiceMonths?: IntFieldUpdateOperationsInput | number
    maxAdvancesPerYear?: IntFieldUpdateOperationsInput | number
    interestRate?: FloatFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlyDeductionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type SalaryAdvancePolicyUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxAdvancePercentage?: FloatFieldUpdateOperationsInput | number
    maxAdvanceAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    minServiceMonths?: IntFieldUpdateOperationsInput | number
    maxAdvancesPerYear?: IntFieldUpdateOperationsInput | number
    interestRate?: FloatFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlyDeductionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type SalaryAdvancePolicyUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxAdvancePercentage?: FloatFieldUpdateOperationsInput | number
    maxAdvanceAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    minServiceMonths?: IntFieldUpdateOperationsInput | number
    maxAdvancesPerYear?: IntFieldUpdateOperationsInput | number
    interestRate?: FloatFieldUpdateOperationsInput | number
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlyDeductionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type SalaryAdvanceRepaymentUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollPeriod?: PayrollPeriodUpdateOneWithoutSalaryAdvanceRepaymentsNestedInput
    salaryAdvanceRequest?: SalaryAdvanceRequestUpdateOneRequiredWithoutRepaymentsNestedInput
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    salaryAdvanceRequestId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    salaryAdvanceRequestId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryAdvanceRequestUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repayments?: SalaryAdvanceRepaymentUpdateManyWithoutSalaryAdvanceRequestNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
    branch?: BranchUpdateOneWithoutSalaryAdvanceRequestsNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutSalaryAdvanceRequestNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityAlertUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityAlertUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityAlertUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaxBracketUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    minAmount?: FloatFieldUpdateOperationsInput | number
    maxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaxBracketUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    minAmount?: FloatFieldUpdateOperationsInput | number
    maxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaxBracketUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    minAmount?: FloatFieldUpdateOperationsInput | number
    maxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    rate?: FloatFieldUpdateOperationsInput | number
    fixedAmount?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: TrainingEnrollmentUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutTrainingNestedInput
  }

  export type TrainingUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: TrainingUpdaterequirementsInput | string[]
    certification?: BoolFieldUpdateOperationsInput | boolean
    cost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutManagerNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStatsUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: WorkflowUpdateOneRequiredWithoutWorkflowStatsNestedInput
  }

  export type WorkflowStatsUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowStatsUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowId?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    steps?: JsonNullValueInput | InputJsonValue
    triggers?: JsonNullValueInput | InputJsonValue
    variables?: JsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    steps?: JsonNullValueInput | InputJsonValue
    triggers?: JsonNullValueInput | InputJsonValue
    variables?: JsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    steps?: JsonNullValueInput | InputJsonValue
    triggers?: JsonNullValueInput | InputJsonValue
    variables?: JsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    approvals?: ApprovalUpdateManyWithoutWorkflowNestedInput
    workflowStats?: WorkflowStatsUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    approvals?: ApprovalUncheckedUpdateManyWithoutWorkflowNestedInput
    workflowStats?: WorkflowStatsUncheckedUpdateManyWithoutWorkflowNestedInput
  }

  export type WorkflowUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type DepartmentCreateManyManagerInput = {
    id?: string
    name: string
    description?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: string
    title: string
    message: string
    timestamp?: Date | string
    read?: boolean
    actionUrl?: string | null
    actionLabel?: string | null
    module?: string | null
    tenantId: string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branches?: BranchUpdateManyWithoutDepartmentNestedInput
    tenant?: TenantUpdateOneRequiredWithoutDepartmentsNestedInput
    employees?: EmployeeUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    branches?: BranchUncheckedUpdateManyWithoutDepartmentNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutManagerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
    tenant?: TenantUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionLabel?: NullableStringFieldUpdateOperationsInput | string | null
    module?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type BranchCreateManyDepartmentInput = {
    id?: string
    name: string
    location?: string | null
    address?: string | null
    managerId?: string | null
    managerUserId?: string | null
    employeeCount?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type EmployeeCreateManyDepartmentInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    branchId?: string | null
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type BranchUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutBranchesNestedInput
    employees?: EmployeeUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutBranchNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutBranchNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    managerUserId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateManyBranchInput = {
    id?: string
    employeeNumber: string
    firstName: string
    lastName: string
    email: string
    phone?: string | null
    address?: string | null
    position: string
    departmentId: string
    salary?: number | null
    hireDate: Date | string
    terminationDate?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestCreateManyBranchInput = {
    id?: string
    employeeId: string
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRequestCreateManyBranchInput = {
    id?: string
    employeeId: string
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type EmployeeUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutEmployeesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutEmployeesNestedInput
    leaveBalances?: LeaveBalanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    leaveBalances?: LeaveBalanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payStubs?: PayStubUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceGoals?: PerformanceGoalUncheckedUpdateManyWithoutEmployeeNestedInput
    performanceReviews?: PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryAdvanceRequests?: SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    trainingEnrollments?: TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeNestedInput
    user?: UserUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    terminationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveRequestsNestedInput
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeaveRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveRequestsNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRequestUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repayments?: SalaryAdvanceRepaymentUpdateManyWithoutSalaryAdvanceRequestNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    repayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutSalaryAdvanceRequestNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveBalanceCreateManyEmployeeInput = {
    id?: string
    leaveTypeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestCreateManyEmployeeInput = {
    id?: string
    branchId?: string | null
    leaveTypeId: string
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayStubCreateManyEmployeeInput = {
    id?: string
    payrollId: string
    payrollPeriodId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollCreateManyEmployeeInput = {
    id?: string
    payrollPeriodId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceGoalCreateManyEmployeeInput = {
    id?: string
    reviewCycleId?: string | null
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceReviewCreateManyEmployeeInput = {
    id?: string
    reviewCycleId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRequestCreateManyEmployeeInput = {
    id?: string
    branchId?: string | null
    requestedAmount: number
    approvedAmount?: number | null
    reason: string
    status?: string
    requestDate?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    disbursedAt?: Date | string | null
    disbursedBy?: string | null
    repaymentStartDate?: Date | string | null
    repaymentEndDate?: Date | string | null
    monthlyDeduction?: number | null
    totalRepaid?: number
    outstandingBalance?: number | null
    interestRate?: number
    totalInterest?: number
    comments?: string | null
    attachments?: SalaryAdvanceRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type TrainingEnrollmentCreateManyEmployeeInput = {
    id?: string
    trainingId: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveBalanceUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeaveBalancesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveBalancesNestedInput
  }

  export type LeaveBalanceUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveBalanceUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneWithoutLeaveRequestsNestedInput
    leaveType?: LeaveTypeUpdateOneRequiredWithoutLeaveRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveRequestsNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    leaveTypeId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayStubUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll?: PayrollUpdateOneRequiredWithoutPayStubNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayStubsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayStubsNestedInput
  }

  export type PayStubUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayStubUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStub?: PayStubUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutPayrollNestedInput
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayrollsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type PayrollUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payStub?: PayStubUncheckedUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceGoalUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewCycle?: PerformanceReviewCycleUpdateOneWithoutPerformanceGoalsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceGoalsNestedInput
  }

  export type PerformanceGoalUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceGoalUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceReviewUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutPerformanceReviewNestedInput
    reviewCycle?: PerformanceReviewCycleUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewNestedInput
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewCycleId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRequestUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    repayments?: SalaryAdvanceRepaymentUpdateManyWithoutSalaryAdvanceRequestNestedInput
    branch?: BranchUpdateOneWithoutSalaryAdvanceRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvanceRequestsNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    repayments?: SalaryAdvanceRepaymentUncheckedUpdateManyWithoutSalaryAdvanceRequestNestedInput
  }

  export type SalaryAdvanceRequestUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAmount?: FloatFieldUpdateOperationsInput | number
    approvedAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    disbursedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    disbursedBy?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repaymentEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monthlyDeduction?: NullableFloatFieldUpdateOperationsInput | number | null
    totalRepaid?: FloatFieldUpdateOperationsInput | number
    outstandingBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    interestRate?: FloatFieldUpdateOperationsInput | number
    totalInterest?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: SalaryAdvanceRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingEnrollmentUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    training?: TrainingUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type TrainingEnrollmentUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingEnrollmentUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    trainingId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayStubCreateManyPayrollPeriodInput = {
    id?: string
    employeeId: string
    payrollId: string
    stubNumber: string
    generatedAt?: Date | string
    pdfPath?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollCreateManyPayrollPeriodInput = {
    id?: string
    employeeId: string
    basicSalary: number
    grossSalary: number
    totalDeductions: number
    netSalary: number
    status?: string
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRepaymentCreateManyPayrollPeriodInput = {
    id?: string
    salaryAdvanceRequestId: string
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayStubUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayStubsNestedInput
    payroll?: PayrollUpdateOneRequiredWithoutPayStubNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayStubsNestedInput
  }

  export type PayStubUncheckedUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayStubUncheckedUpdateManyWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollId?: StringFieldUpdateOperationsInput | string
    stubNumber?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdfPath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payStub?: PayStubUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUpdateManyWithoutPayrollNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPayrollsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type PayrollUncheckedUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    payStub?: PayStubUncheckedUpdateOneWithoutPayrollNestedInput
    payrollItems?: PayrollItemUncheckedUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollUncheckedUpdateManyWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    basicSalary?: FloatFieldUpdateOperationsInput | number
    grossSalary?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    netSalary?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRepaymentUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    salaryAdvanceRequest?: SalaryAdvanceRequestUpdateOneRequiredWithoutRepaymentsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvanceRepaymentsNestedInput
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    salaryAdvanceRequestId?: StringFieldUpdateOperationsInput | string
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateManyWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    salaryAdvanceRequestId?: StringFieldUpdateOperationsInput | string
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollItemCreateManyPayrollInput = {
    id?: string
    type: string
    category: string
    name: string
    amount: number
    isStatutory?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PayrollItemUpdateWithoutPayrollInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPayrollItemsNestedInput
  }

  export type PayrollItemUncheckedUpdateWithoutPayrollInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayrollItemUncheckedUpdateManyWithoutPayrollInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    isStatutory?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveBalanceCreateManyLeaveTypeInput = {
    id?: string
    employeeId: string
    year: number
    allocated: number
    used?: number
    pending?: number
    available: number
    carriedForward?: number
    accrued?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeavePolicyCreateManyLeaveTypeInput = {
    id?: string
    name: string
    description?: string | null
    maxDaysPerYear: number
    maxDaysPerRequest?: number | null
    minDaysNotice?: number
    maxCarryForward?: number
    allowNegativeBalance?: boolean
    requiresApproval?: boolean
    autoApprove?: boolean
    accrualRate?: number
    probationPeriodDays?: number
    isActive?: boolean
    effectiveDate: Date | string
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveRequestCreateManyLeaveTypeInput = {
    id?: string
    employeeId: string
    branchId?: string | null
    startDate: Date | string
    endDate: Date | string
    totalDays: number
    reason?: string | null
    status?: string
    appliedAt?: Date | string
    approvedAt?: Date | string | null
    approvedBy?: string | null
    rejectedAt?: Date | string | null
    rejectedBy?: string | null
    rejectionReason?: string | null
    cancelledAt?: Date | string | null
    cancelledBy?: string | null
    comments?: string | null
    attachments?: LeaveRequestCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type LeaveBalanceUpdateWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveBalancesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveBalancesNestedInput
  }

  export type LeaveBalanceUncheckedUpdateWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveBalanceUncheckedUpdateManyWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    allocated?: FloatFieldUpdateOperationsInput | number
    used?: FloatFieldUpdateOperationsInput | number
    pending?: FloatFieldUpdateOperationsInput | number
    available?: FloatFieldUpdateOperationsInput | number
    carriedForward?: FloatFieldUpdateOperationsInput | number
    accrued?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeavePolicyUpdateWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutLeavePoliciesNestedInput
  }

  export type LeavePolicyUncheckedUpdateWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeavePolicyUncheckedUpdateManyWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxDaysPerYear?: IntFieldUpdateOperationsInput | number
    maxDaysPerRequest?: NullableIntFieldUpdateOperationsInput | number | null
    minDaysNotice?: IntFieldUpdateOperationsInput | number
    maxCarryForward?: IntFieldUpdateOperationsInput | number
    allowNegativeBalance?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    autoApprove?: BoolFieldUpdateOperationsInput | boolean
    accrualRate?: FloatFieldUpdateOperationsInput | number
    probationPeriodDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestUpdateWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveRequestsNestedInput
    branch?: BranchUpdateOneWithoutLeaveRequestsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutLeaveRequestsNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveRequestUncheckedUpdateManyWithoutLeaveTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    branchId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalDays?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: LeaveRequestUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceGoalCreateManyReviewCycleInput = {
    id?: string
    employeeId: string
    title: string
    description: string
    category?: string
    priority?: string
    targetDate?: Date | string | null
    status?: string
    progress?: number
    measurementCriteria?: string | null
    achievedDate?: Date | string | null
    comments?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceReviewCreateManyReviewCycleInput = {
    id?: string
    employeeId: string
    reviewerId: string
    status?: string
    selfAssessmentCompleted?: boolean
    managerReviewCompleted?: boolean
    overallRating?: number | null
    overallComments?: string | null
    strengths?: string | null
    areasForImprovement?: string | null
    developmentPlan?: string | null
    goals?: string | null
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceGoalUpdateWithoutReviewCycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceGoalsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceGoalsNestedInput
  }

  export type PerformanceGoalUncheckedUpdateWithoutReviewCycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceGoalUncheckedUpdateManyWithoutReviewCycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    measurementCriteria?: NullableStringFieldUpdateOperationsInput | string | null
    achievedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceReviewUpdateWithoutReviewCycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceFeedback?: PerformanceFeedbackUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUpdateManyWithoutPerformanceReviewNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPerformanceReviewsNestedInput
  }

  export type PerformanceReviewUncheckedUpdateWithoutReviewCycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    performanceFeedback?: PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewNestedInput
    performanceRatings?: PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewNestedInput
  }

  export type PerformanceReviewUncheckedUpdateManyWithoutReviewCycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    selfAssessmentCompleted?: BoolFieldUpdateOperationsInput | boolean
    managerReviewCompleted?: BoolFieldUpdateOperationsInput | boolean
    overallRating?: NullableFloatFieldUpdateOperationsInput | number | null
    overallComments?: NullableStringFieldUpdateOperationsInput | string | null
    strengths?: NullableStringFieldUpdateOperationsInput | string | null
    areasForImprovement?: NullableStringFieldUpdateOperationsInput | string | null
    developmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceFeedbackCreateManyPerformanceReviewInput = {
    id?: string
    feedbackType?: string
    feedback: string
    isPrivate?: boolean
    providedBy: string
    providedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceRatingCreateManyPerformanceReviewInput = {
    id?: string
    competency: string
    rating: number
    maxRating?: number
    weight?: number
    comments?: string | null
    raterType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type PerformanceFeedbackUpdateWithoutPerformanceReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPerformanceFeedbackNestedInput
  }

  export type PerformanceFeedbackUncheckedUpdateWithoutPerformanceReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceFeedbackUncheckedUpdateManyWithoutPerformanceReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedbackType?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    providedBy?: StringFieldUpdateOperationsInput | string
    providedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceRatingUpdateWithoutPerformanceReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPerformanceRatingsNestedInput
  }

  export type PerformanceRatingUncheckedUpdateWithoutPerformanceReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PerformanceRatingUncheckedUpdateManyWithoutPerformanceReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    competency?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    maxRating?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    raterType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportInstanceCreateManyTemplateInput = {
    id?: string
    name: string
    description?: string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: string | null
    fileFormat?: string
    fileSize?: number | null
    recordCount?: number | null
    generatedBy: string
    generatedAt?: Date | string
    expiresAt?: Date | string | null
    isScheduled?: boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type ReportInstanceUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutReportInstancesNestedInput
  }

  export type ReportInstanceUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportInstanceUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    filters?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    fileFormat?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    recordCount?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isScheduled?: BoolFieldUpdateOperationsInput | boolean
    scheduleConfig?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRepaymentCreateManySalaryAdvanceRequestInput = {
    id?: string
    payrollPeriodId?: string | null
    repaymentDate: Date | string
    principalAmount: number
    interestAmount?: number
    totalAmount: number
    paymentMethod?: string
    reference?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type SalaryAdvanceRepaymentUpdateWithoutSalaryAdvanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payrollPeriod?: PayrollPeriodUpdateOneWithoutSalaryAdvanceRepaymentsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutSalaryAdvanceRepaymentsNestedInput
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateWithoutSalaryAdvanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryAdvanceRepaymentUncheckedUpdateManyWithoutSalaryAdvanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    principalAmount?: FloatFieldUpdateOperationsInput | number
    interestAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingEnrollmentCreateManyTrainingInput = {
    id?: string
    employeeId: string
    enrollmentDate?: Date | string
    completionDate?: Date | string | null
    status?: string
    progress?: number
    score?: number | null
    certificateIssued?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrainingEnrollmentUpdateWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutTrainingEnrollmentsNestedInput
  }

  export type TrainingEnrollmentUncheckedUpdateWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrainingEnrollmentUncheckedUpdateManyWithoutTrainingInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    score?: NullableIntFieldUpdateOperationsInput | number | null
    certificateIssued?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationLogCreateManyIntegrationInput = {
    id?: string
    message: string
    createdAt?: Date | string
    tenantId: string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: string
    status?: string
  }

  export type IntegrationLogUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    tenant?: TenantUpdateOneRequiredWithoutIntegrationLogsNestedInput
  }

  export type IntegrationLogUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntegrationLogUncheckedUpdateManyWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    event?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalCreateManyWorkflowInput = {
    id?: string
    approverId: string
    status?: string
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type WorkflowStatsCreateManyWorkflowInput = {
    id?: string
    stats: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenantId: string
  }

  export type ApprovalUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalUncheckedUpdateManyWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowStatsUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutWorkflowStatsNestedInput
  }

  export type WorkflowStatsUncheckedUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowStatsUncheckedUpdateManyWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    stats?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}