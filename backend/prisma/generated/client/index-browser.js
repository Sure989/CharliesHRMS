
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  domain: 'domain',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  timestamp: 'timestamp',
  read: 'read',
  actionUrl: 'actionUrl',
  actionLabel: 'actionLabel',
  module: 'module',
  tenantId: 'tenantId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  status: 'status',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
  employeeId: 'employeeId'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  managerId: 'managerId',
  employeeCount: 'employeeCount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  address: 'address',
  managerId: 'managerId',
  managerUserId: 'managerUserId',
  departmentId: 'departmentId',
  employeeCount: 'employeeCount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  employeeNumber: 'employeeNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  position: 'position',
  departmentId: 'departmentId',
  branchId: 'branchId',
  salary: 'salary',
  hireDate: 'hireDate',
  terminationDate: 'terminationDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PayrollPeriodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  payDate: 'payDate',
  status: 'status',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollPeriodId: 'payrollPeriodId',
  basicSalary: 'basicSalary',
  grossSalary: 'grossSalary',
  totalDeductions: 'totalDeductions',
  netSalary: 'netSalary',
  status: 'status',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PayrollItemScalarFieldEnum = {
  id: 'id',
  payrollId: 'payrollId',
  type: 'type',
  category: 'category',
  name: 'name',
  amount: 'amount',
  isStatutory: 'isStatutory',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.TaxBracketScalarFieldEnum = {
  id: 'id',
  name: 'name',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  rate: 'rate',
  fixedAmount: 'fixedAmount',
  isActive: 'isActive',
  effectiveDate: 'effectiveDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PayStubScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollId: 'payrollId',
  payrollPeriodId: 'payrollPeriodId',
  stubNumber: 'stubNumber',
  generatedAt: 'generatedAt',
  pdfPath: 'pdfPath',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PayrollSettingsScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  companyName: 'companyName',
  kraPin: 'kraPin',
  nssfNumber: 'nssfNumber',
  nhifNumber: 'nhifNumber',
  companyAddress: 'companyAddress',
  companyCity: 'companyCity',
  companyPostalCode: 'companyPostalCode',
  personalRelief: 'personalRelief',
  overtimeMultiplier: 'overtimeMultiplier',
  workingDaysPerMonth: 'workingDaysPerMonth',
  workingHoursPerDay: 'workingHoursPerDay',
  payFrequency: 'payFrequency',
  payDay: 'payDay',
  cutoffDay: 'cutoffDay',
  requirePayrollApproval: 'requirePayrollApproval',
  approvalLevels: 'approvalLevels',
  autoApproveThreshold: 'autoApproveThreshold',
  notifyEmployeesOnPayment: 'notifyEmployeesOnPayment',
  sendPayslipsByEmail: 'sendPayslipsByEmail',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  branchCode: 'branchCode',
  swiftCode: 'swiftCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaveTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.LeavePolicyScalarFieldEnum = {
  id: 'id',
  leaveTypeId: 'leaveTypeId',
  name: 'name',
  description: 'description',
  maxDaysPerYear: 'maxDaysPerYear',
  maxDaysPerRequest: 'maxDaysPerRequest',
  minDaysNotice: 'minDaysNotice',
  maxCarryForward: 'maxCarryForward',
  allowNegativeBalance: 'allowNegativeBalance',
  requiresApproval: 'requiresApproval',
  autoApprove: 'autoApprove',
  accrualRate: 'accrualRate',
  probationPeriodDays: 'probationPeriodDays',
  isActive: 'isActive',
  effectiveDate: 'effectiveDate',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  branchId: 'branchId',
  leaveTypeId: 'leaveTypeId',
  startDate: 'startDate',
  endDate: 'endDate',
  totalDays: 'totalDays',
  reason: 'reason',
  status: 'status',
  appliedAt: 'appliedAt',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  rejectedAt: 'rejectedAt',
  rejectedBy: 'rejectedBy',
  rejectionReason: 'rejectionReason',
  cancelledAt: 'cancelledAt',
  cancelledBy: 'cancelledBy',
  comments: 'comments',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.LeaveBalanceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  leaveTypeId: 'leaveTypeId',
  year: 'year',
  allocated: 'allocated',
  used: 'used',
  pending: 'pending',
  available: 'available',
  carriedForward: 'carriedForward',
  accrued: 'accrued',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.HolidayScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  type: 'type',
  description: 'description',
  isRecurring: 'isRecurring',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PerformanceReviewCycleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  reviewDeadline: 'reviewDeadline',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PerformanceReviewScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  reviewCycleId: 'reviewCycleId',
  reviewerId: 'reviewerId',
  status: 'status',
  selfAssessmentCompleted: 'selfAssessmentCompleted',
  managerReviewCompleted: 'managerReviewCompleted',
  overallRating: 'overallRating',
  overallComments: 'overallComments',
  strengths: 'strengths',
  areasForImprovement: 'areasForImprovement',
  developmentPlan: 'developmentPlan',
  goals: 'goals',
  submittedAt: 'submittedAt',
  completedAt: 'completedAt',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PerformanceGoalScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  reviewCycleId: 'reviewCycleId',
  title: 'title',
  description: 'description',
  category: 'category',
  priority: 'priority',
  targetDate: 'targetDate',
  status: 'status',
  progress: 'progress',
  measurementCriteria: 'measurementCriteria',
  achievedDate: 'achievedDate',
  comments: 'comments',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PerformanceRatingScalarFieldEnum = {
  id: 'id',
  performanceReviewId: 'performanceReviewId',
  competency: 'competency',
  rating: 'rating',
  maxRating: 'maxRating',
  weight: 'weight',
  comments: 'comments',
  raterType: 'raterType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.PerformanceFeedbackScalarFieldEnum = {
  id: 'id',
  performanceReviewId: 'performanceReviewId',
  feedbackType: 'feedbackType',
  feedback: 'feedback',
  isPrivate: 'isPrivate',
  providedBy: 'providedBy',
  providedAt: 'providedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.ReportTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  type: 'type',
  query: 'query',
  parameters: 'parameters',
  columns: 'columns',
  filters: 'filters',
  groupBy: 'groupBy',
  sortBy: 'sortBy',
  chartConfig: 'chartConfig',
  isActive: 'isActive',
  isPublic: 'isPublic',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.ReportInstanceScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  name: 'name',
  description: 'description',
  parameters: 'parameters',
  filters: 'filters',
  status: 'status',
  data: 'data',
  filePath: 'filePath',
  fileFormat: 'fileFormat',
  fileSize: 'fileSize',
  recordCount: 'recordCount',
  generatedBy: 'generatedBy',
  generatedAt: 'generatedAt',
  expiresAt: 'expiresAt',
  isScheduled: 'isScheduled',
  scheduleConfig: 'scheduleConfig',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.DashboardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  layout: 'layout',
  widgets: 'widgets',
  filters: 'filters',
  refreshInterval: 'refreshInterval',
  isDefault: 'isDefault',
  isPublic: 'isPublic',
  allowedRoles: 'allowedRoles',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.SalaryAdvancePolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  maxAdvancePercentage: 'maxAdvancePercentage',
  maxAdvanceAmount: 'maxAdvanceAmount',
  minServiceMonths: 'minServiceMonths',
  maxAdvancesPerYear: 'maxAdvancesPerYear',
  interestRate: 'interestRate',
  requiresApproval: 'requiresApproval',
  autoApprove: 'autoApprove',
  isActive: 'isActive',
  effectiveDate: 'effectiveDate',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
  monthlyDeductionPercentage: 'monthlyDeductionPercentage'
};

exports.Prisma.SalaryAdvanceRequestScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  branchId: 'branchId',
  requestedAmount: 'requestedAmount',
  approvedAmount: 'approvedAmount',
  reason: 'reason',
  status: 'status',
  requestDate: 'requestDate',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  rejectedAt: 'rejectedAt',
  rejectedBy: 'rejectedBy',
  rejectionReason: 'rejectionReason',
  disbursedAt: 'disbursedAt',
  disbursedBy: 'disbursedBy',
  repaymentStartDate: 'repaymentStartDate',
  repaymentEndDate: 'repaymentEndDate',
  monthlyDeduction: 'monthlyDeduction',
  totalRepaid: 'totalRepaid',
  outstandingBalance: 'outstandingBalance',
  interestRate: 'interestRate',
  totalInterest: 'totalInterest',
  comments: 'comments',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.SalaryAdvanceRepaymentScalarFieldEnum = {
  id: 'id',
  salaryAdvanceRequestId: 'salaryAdvanceRequestId',
  payrollPeriodId: 'payrollPeriodId',
  repaymentDate: 'repaymentDate',
  principalAmount: 'principalAmount',
  interestAmount: 'interestAmount',
  totalAmount: 'totalAmount',
  paymentMethod: 'paymentMethod',
  reference: 'reference',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  userId: 'userId',
  details: 'details',
  createdAt: 'createdAt',
  tenantId: 'tenantId'
};

exports.Prisma.SecurityAlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  timestamp: 'timestamp',
  tenantId: 'tenantId'
};

exports.Prisma.SecuritySettingsScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  twoFactorAuth: 'twoFactorAuth',
  passwordExpiry: 'passwordExpiry',
  sessionTimeout: 'sessionTimeout',
  ipWhitelist: 'ipWhitelist',
  auditLogging: 'auditLogging',
  encryptionAtRest: 'encryptionAtRest'
};

exports.Prisma.WorkflowTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  version: 'version',
  isActive: 'isActive',
  steps: 'steps',
  triggers: 'triggers',
  variables: 'variables',
  createdBy: 'createdBy',
  createdDate: 'createdDate',
  lastModified: 'lastModified',
  tenantId: 'tenantId'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  capacity: 'capacity',
  instructor: 'instructor',
  venue: 'venue',
  requirements: 'requirements',
  certification: 'certification',
  cost: 'cost',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingEnrollmentScalarFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  employeeId: 'employeeId',
  enrollmentDate: 'enrollmentDate',
  completionDate: 'completionDate',
  status: 'status',
  progress: 'progress',
  score: 'score',
  certificateIssued: 'certificateIssued',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tenantId: 'tenantId',
  config: 'config',
  createdAt: 'createdAt',
  lastSyncTime: 'lastSyncTime',
  status: 'status',
  successRate: 'successRate',
  type: 'type',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationLogScalarFieldEnum = {
  id: 'id',
  integrationId: 'integrationId',
  message: 'message',
  createdAt: 'createdAt',
  tenantId: 'tenantId',
  details: 'details',
  event: 'event',
  status: 'status'
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tenantId: 'tenantId'
};

exports.Prisma.WorkflowStatsScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  stats: 'stats',
  createdAt: 'createdAt',
  tenantId: 'tenantId'
};

exports.Prisma.ApprovalScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  approverId: 'approverId',
  status: 'status',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId'
};

exports.Prisma.ExperimentalFeatureScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  description: 'description',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  tenantId: 'tenantId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  Notification: 'Notification',
  User: 'User',
  UserSession: 'UserSession',
  Department: 'Department',
  Branch: 'Branch',
  Employee: 'Employee',
  PayrollPeriod: 'PayrollPeriod',
  Payroll: 'Payroll',
  PayrollItem: 'PayrollItem',
  TaxBracket: 'TaxBracket',
  PayStub: 'PayStub',
  PayrollSettings: 'PayrollSettings',
  LeaveType: 'LeaveType',
  LeavePolicy: 'LeavePolicy',
  LeaveRequest: 'LeaveRequest',
  LeaveBalance: 'LeaveBalance',
  Holiday: 'Holiday',
  PerformanceReviewCycle: 'PerformanceReviewCycle',
  PerformanceReview: 'PerformanceReview',
  PerformanceGoal: 'PerformanceGoal',
  PerformanceRating: 'PerformanceRating',
  PerformanceFeedback: 'PerformanceFeedback',
  ReportTemplate: 'ReportTemplate',
  ReportInstance: 'ReportInstance',
  Dashboard: 'Dashboard',
  SalaryAdvancePolicy: 'SalaryAdvancePolicy',
  SalaryAdvanceRequest: 'SalaryAdvanceRequest',
  SalaryAdvanceRepayment: 'SalaryAdvanceRepayment',
  AuditLog: 'AuditLog',
  SecurityAlert: 'SecurityAlert',
  SecuritySettings: 'SecuritySettings',
  WorkflowTemplate: 'WorkflowTemplate',
  Training: 'Training',
  TrainingEnrollment: 'TrainingEnrollment',
  Integration: 'Integration',
  IntegrationLog: 'IntegrationLog',
  Workflow: 'Workflow',
  WorkflowStats: 'WorkflowStats',
  Approval: 'Approval',
  ExperimentalFeature: 'ExperimentalFeature'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
