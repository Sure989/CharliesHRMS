[{"filePath":"C:\\AI\\HRMS APP\\backend\\checkBackendLogs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\controllers\\performanceReviewsController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\create-failed-login.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\create-security-alert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\config\\config.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\config\\config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\admin.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\admin.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\analytics.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\analytics.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\auth.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\auth.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\branch.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\branch.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\department.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\department.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\employee.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\employee.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\integration.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\integration.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\leave.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\leave.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\payroll.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\payroll.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\performanceReviews.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\performanceReviews.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\salaryAdvance.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\salaryAdvance.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\security.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\security.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\securityAlert.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\securityAlert.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\securityMetrics.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\securityMetrics.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\user.controller.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\controllers\\user.controller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\middleware\\auth.middleware.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\middleware\\auth.middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\middleware\\user.validation.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\middleware\\user.validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\middleware\\validate.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\middleware\\validate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\admin.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\admin.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\analytics.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\analytics.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\auth.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\auth.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\branch.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\branch.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\department.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\department.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\employee.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\employee.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\integration.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\integration.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\leave.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\leave.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\payroll.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\payroll.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\performanceReviews.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\performanceReviews.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\performanceReviews.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\performanceReviews.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\salaryAdvance.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\salaryAdvance.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\security.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\security.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\securityMetrics.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\securityMetrics.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\training.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\training.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\user.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\user.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflow.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflow.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflowTemplates.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflowTemplates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflowTemplates.routes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflowTemplates.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflowTemplatesRouter.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\routes\\workflowTemplatesRouter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\analytics.service.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\analytics.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\compliance.service.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\compliance.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\experimentalFeatures.service.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\experimentalFeatures.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\leaveManagement.service.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\leaveManagement.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\payrollCalculation.service.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\payrollCalculation.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\salaryAdvance.service.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\salaryAdvance.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\systemStatus.service.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\services\\systemStatus.service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\utils\\jwt.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\utils\\jwt.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\utils\\permissions.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\dist\\utils\\permissions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\jest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\prisma\\seed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\routes\\performanceReviews.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\routes\\performanceReviews.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\routes\\workflowTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\scripts\\activate-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\scripts\\createUsersForEmployees.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\scripts\\fixOrphanedTenantRecords.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\scripts\\generateTestJwt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\scripts\\listTenants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\scripts\\remove-orphaned-users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\scripts\\removeDuplicateIntegrations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\config\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\admin.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\analytics.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\auth.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\branch.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\department.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\employee.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\employeeExtras.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\integration.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\leave.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\payroll.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\performanceReviews.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\salaryAdvance.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\security.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\securityAlert.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\securityMetrics.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\controllers\\user.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\middleware\\auth.middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\middleware\\user.validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\middleware\\validate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\admin.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\analytics.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\auth.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\branch.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\department.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\employee.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\employeeExtras.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\integration.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\leave.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\payroll.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\performanceReviews.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\performanceReviews.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\salaryAdvance.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\security.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\securityMetrics.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\training.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\user.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\workflow.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\workflowTemplates.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\workflowTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\routes\\workflowTemplatesRouter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\services\\analytics.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\services\\compliance.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\services\\experimentalFeatures.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\services\\leaveManagement.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\services\\payrollCalculation.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\services\\salaryAdvance.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\services\\systemStatus.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\utils\\jwt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\src\\utils\\permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\tests\\analytics.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\tests\\branch.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\tests\\department.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\tests\\employee.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\tests\\user.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\backend\\verify-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\eslint.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\fix-all-typescript-errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\postcss.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\restart-typescript.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":185,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":185,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\r\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { config } from '@/config/environment';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n  errorInfo: ErrorInfo | null;\r\n}\r\n\r\nexport class ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n      error: null,\r\n      errorInfo: null,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    return {\r\n      hasError: true,\r\n      error,\r\n      errorInfo: null,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    this.setState({\r\n      error,\r\n      errorInfo,\r\n    });\r\n\r\n    // Log error to console in development\r\n    if (config.isDevelopment) {\r\n      console.error('ErrorBoundary caught an error:', error, errorInfo);\r\n    }\r\n\r\n    // Call custom error handler if provided\r\n    if (this.props.onError) {\r\n      this.props.onError(error, errorInfo);\r\n    }\r\n\r\n    // In production, you might want to send this to an error reporting service\r\n    if (config.isProduction) {\r\n      // Example: Send to error reporting service\r\n      // errorReportingService.captureException(error, { extra: errorInfo });\r\n    }\r\n  }\r\n\r\n  handleRetry = () => {\r\n    this.setState({\r\n      hasError: false,\r\n      error: null,\r\n      errorInfo: null,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Custom fallback UI\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      // Default error UI\r\n      return (\r\n        <div className=\"min-h-screen flex items-center justify-center p-4 bg-gray-50\">\r\n          <Card className=\"w-full max-w-md\">\r\n            <CardHeader className=\"text-center\">\r\n              <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-red-100\">\r\n                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\r\n              </div>\r\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">\r\n                Something went wrong\r\n              </CardTitle>\r\n              <CardDescription className=\"text-gray-600\">\r\n                We're sorry, but something unexpected happened. Please try refreshing the page.\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <Button \r\n                onClick={this.handleRetry} \r\n                className=\"w-full\"\r\n                variant=\"default\"\r\n              >\r\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\r\n                Try Again\r\n              </Button>\r\n              \r\n              <Button \r\n                onClick={() => window.location.reload()} \r\n                className=\"w-full\"\r\n                variant=\"outline\"\r\n              >\r\n                Refresh Page\r\n              </Button>\r\n\r\n              {config.isDevelopment && this.state.error && (\r\n                <details className=\"mt-4 p-3 bg-gray-100 rounded-md text-sm\">\r\n                  <summary className=\"cursor-pointer font-medium text-gray-700 mb-2\">\r\n                    Error Details (Development)\r\n                  </summary>\r\n                  <div className=\"space-y-2\">\r\n                    <div>\r\n                      <strong>Error:</strong>\r\n                      <pre className=\"mt-1 text-xs text-red-600 whitespace-pre-wrap\">\r\n                        {this.state.error.toString()}\r\n                      </pre>\r\n                    </div>\r\n                    {this.state.errorInfo && (\r\n                      <div>\r\n                        <strong>Component Stack:</strong>\r\n                        <pre className=\"mt-1 text-xs text-gray-600 whitespace-pre-wrap\">\r\n                          {this.state.errorInfo.componentStack}\r\n                        </pre>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </details>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// API Error Boundary specifically for API-related errors\r\ninterface ApiErrorBoundaryProps {\r\n  children: ReactNode;\r\n  onRetry?: () => void;\r\n}\r\n\r\nexport const ApiErrorBoundary: React.FC<ApiErrorBoundaryProps> = ({ \r\n  children, \r\n  onRetry \r\n}) => {\r\n  return (\r\n    <ErrorBoundary\r\n      fallback={\r\n        <div className=\"flex flex-col items-center justify-center p-8 text-center\">\r\n          <AlertTriangle className=\"h-12 w-12 text-red-500 mb-4\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n            Connection Error\r\n          </h3>\r\n          <p className=\"text-gray-600 mb-4\">\r\n            Unable to connect to the server. Please check your internet connection and try again.\r\n          </p>\r\n          <div className=\"space-x-2\">\r\n            {onRetry && (\r\n              <Button onClick={onRetry} variant=\"default\">\r\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\r\n                Retry\r\n              </Button>\r\n            )}\r\n            <Button \r\n              onClick={() => window.location.reload()} \r\n              variant=\"outline\"\r\n            >\r\n              Refresh Page\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      }\r\n    >\r\n      {children}\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\n// Hook for handling API errors in components\r\nexport const useErrorHandler = () => {\r\n  const handleError = (error: any) => {\r\n    console.error('API Error:', error);\r\n    \r\n    // You can customize error handling based on error type\r\n    if (error.response?.status === 401) {\r\n      // Unauthorized - redirect to login\r\n      window.location.href = '/login';\r\n    } else if (error.response?.status === 403) {\r\n      // Forbidden - show access denied message\r\n      // You could dispatch a global notification here\r\n    } else if (error.response?.status >= 500) {\r\n      // Server error - show server error message\r\n      // You could dispatch a global notification here\r\n    }\r\n    \r\n    // Return user-friendly error message\r\n    if (error.response?.data?.message) {\r\n      return error.response.data.message;\r\n    }\r\n    \r\n    if (error.message) {\r\n      return error.message;\r\n    }\r\n    \r\n    return 'An unexpected error occurred. Please try again.';\r\n  };\r\n\r\n  return { handleError };\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\WorkflowDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, user]","fix":{"range":[4187,4193],"text":"[loadData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react'\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { CheckCircle, Clock, AlertTriangle, XCircle, RefreshCw, User } from 'lucide-react'\r\nimport { api } from '@/services/unifiedApi'\r\nimport { LeaveRequest, SalaryAdvanceRequest } from '@/types/types'\r\nimport { useAuth } from '@/contexts/AuthContext'\r\n\r\n// Fix badge array typing\r\ninterface BadgeItem {\r\n  key: string;\r\n  label: string;\r\n  variant: \"default\" | \"destructive\" | \"outline\" | \"secondary\";\r\n}\r\n\r\ninterface WorkflowDashboardProps {\r\n  className?: string;\r\n}\r\n\r\nconst WorkflowDashboard: React.FC<WorkflowDashboardProps> = ({ className }) => {\r\n  const { user } = useAuth();\r\n  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);\r\n  const [salaryAdvances, setSalaryAdvances] = useState<SalaryAdvanceRequest[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('leave');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const pollingRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Properly typed badge arrays\r\n  const leaveStatusBadges: BadgeItem[] = [\r\n    { key: 'pending_ops_initial', label: 'Pending Operations Review', variant: 'default' },\r\n    { key: 'forwarded_to_hr', label: 'Forwarded to HR', variant: 'default' },\r\n    { key: 'hr_rejected', label: 'HR Rejected', variant: 'destructive' },\r\n    { key: 'hr_approved', label: 'HR Approved', variant: 'destructive' },\r\n    { key: 'ops_final_approved', label: 'Final Approved', variant: 'default' },\r\n    { key: 'ops_final_rejected', label: 'Final Rejected', variant: 'destructive' }\r\n  ];\r\n\r\n  const salaryAdvanceStatusBadges: BadgeItem[] = [\r\n    { key: 'pending_ops_initial', label: 'Pending Operations Review', variant: 'default' },\r\n    { key: 'forwarded_to_hr', label: 'Forwarded to HR', variant: 'default' },\r\n    { key: 'hr_rejected', label: 'HR Rejected', variant: 'destructive' },\r\n    { key: 'hr_approved', label: 'HR Approved', variant: 'destructive' },\r\n    { key: 'ops_final_approved', label: 'Final Approved', variant: 'default' },\r\n    { key: 'disbursed', label: 'Disbursed', variant: 'default' },\r\n    { key: 'ops_final_rejected', label: 'Final Rejected', variant: 'destructive' }\r\n  ];\r\n\r\n  // Retry logic for network errors\r\n  const loadData = async (showLoading = false, retries = 2) => {\r\n    if (!user) return;\r\n    if (showLoading) setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const role = user.role === 'OPERATIONS_MANAGER' ? 'operations' : \r\n                   user.role === 'HR_MANAGER' ? 'hr' : 'employee';\r\n      const [leaves, advances] = await Promise.all([\r\n        api.data.getLeaveRequests(role, { employeeId: user.id }),\r\n        api.data.getSalaryAdvanceRequests(role, { employeeId: user.id })\r\n      ]);\r\n      setLeaveRequests(leaves);\r\n      setSalaryAdvances(advances);\r\n    } catch (err: any) {\r\n      if (err?.code === 'ERR_NETWORK' && retries > 0) {\r\n        // Wait 2 seconds before retrying\r\n        setTimeout(() => loadData(showLoading, retries - 1), 2000);\r\n        return;\r\n      }\r\n      if (err?.code === 'ERR_NETWORK') {\r\n        setError('Cannot connect to the server. Please check your network connection or try again later.');\r\n      } else {\r\n        setError('Failed to load data. Please try again.');\r\n      }\r\n      console.error('Error loading data:', err);\r\n    } finally {\r\n      if (showLoading) setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Polling effect\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    loadData(true); // Initial load with spinner\r\n    pollingRef.current = setInterval(() => {\r\n      loadData(false); // Silent polling\r\n    }, 60000); // Changed from 10 seconds to 60 seconds\r\n    return () => {\r\n      if (pollingRef.current) clearInterval(pollingRef.current);\r\n    };\r\n  }, [user]);\r\n\r\n  const handleLeaveAction = async (requestId: string, action: string) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const role = user.role === 'OPERATIONS_MANAGER' ? 'operations' : 'hr';\r\n      \r\n      switch (action) {\r\n        case 'forward_to_hr':\r\n          await api.data.forwardLeaveRequestToHR(requestId, user.id, 'Forwarding for eligibility review');\r\n          break;\r\n        case 'hr_approve':\r\n          await api.data.reviewLeaveRequestHR(requestId, user.id, 'eligible', 'Employee is eligible for leave');\r\n          break;\r\n        case 'hr_reject':\r\n          await api.data.reviewLeaveRequestHR(requestId, user.id, 'not_eligible', 'Employee not eligible for leave');\r\n          break;\r\n        case 'ops_approve':\r\n          await api.data.finalDecisionLeaveRequest(requestId, user.id, 'approved', 'Final approval granted');\r\n          break;\r\n        case 'ops_reject':\r\n          await api.data.finalDecisionLeaveRequest(requestId, user.id, 'rejected', 'Final approval denied');\r\n          break;\r\n      }\r\n      \r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error processing leave action:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSalaryAdvanceAction = async (requestId: number, action: string) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      switch (action) {\r\n        case 'forward_to_hr':\r\n          await api.data.forwardSalaryAdvanceToHR(requestId, user.id, 'Forwarding for eligibility check');\r\n          break;\r\n        case 'hr_approve':\r\n          await api.data.reviewSalaryAdvanceHR(requestId, user.id, 'eligible', 'Employee eligible for advance', {\r\n            currentSalary: 30000,\r\n            existingAdvances: 0,\r\n            maxAllowableAdvance: 15000,\r\n            employmentTenure: 12,\r\n            creditworthiness: 'good'\r\n          });\r\n          break;\r\n        case 'hr_reject':\r\n          await api.data.reviewSalaryAdvanceHR(requestId, user.id, 'not_eligible', 'Employee not eligible for advance');\r\n          break;\r\n        case 'ops_approve':\r\n          await api.data.finalDecisionSalaryAdvance(requestId, user.id, 'approved', 'Final approval granted');\r\n          break;\r\n        case 'ops_reject':\r\n          await api.data.finalDecisionSalaryAdvance(requestId, user.id, 'rejected', 'Final approval denied');\r\n          break;\r\n        case 'disburse':\r\n          await api.data.disburseSalaryAdvance(requestId, user.id);\r\n          break;\r\n      }\r\n      \r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error processing salary advance action:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string, type: 'leave' | 'salary') => {\r\n    const badges = type === 'leave' ? leaveStatusBadges : salaryAdvanceStatusBadges;\r\n    const badge = badges.find(b => b.key === status);\r\n    return badge || { key: status, label: status, variant: 'outline' as const };\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'pending_ops_initial':\r\n        return <Clock className=\"h-4 w-4\" />;\r\n      case 'forwarded_to_hr':\r\n        return <RefreshCw className=\"h-4 w-4\" />;\r\n      case 'hr_approved':\r\n      case 'ops_final_approved':\r\n      case 'disbursed':\r\n        return <CheckCircle className=\"h-4 w-4\" />;\r\n      case 'hr_rejected':\r\n      case 'ops_final_rejected':\r\n        return <XCircle className=\"h-4 w-4\" />;\r\n      default:\r\n        return <AlertTriangle className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className || ''}`}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <AlertTriangle className=\"h-4 w-4\" />\r\n          <AlertTitle>Error</AlertTitle>\r\n          <AlertDescription>{error}</AlertDescription>\r\n        </Alert>\r\n      )}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <User className=\"h-5 w-5\" />\r\n            Workflow Dashboard\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Manage leave requests and salary advances workflow\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n            <TabsList className=\"grid w-full grid-cols-2\">\r\n              <TabsTrigger value=\"leave\">Leave Requests</TabsTrigger>\r\n              <TabsTrigger value=\"salary\">Salary Advances</TabsTrigger>\r\n            </TabsList>\r\n            <TabsContent value=\"leave\" className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-semibold\">Leave Requests</h3>\r\n                <Button \r\n                  onClick={() => loadData(true)} \r\n                  disabled={loading}\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                >\r\n                  {loading ? <RefreshCw className=\"h-4 w-4 animate-spin\" /> : <RefreshCw className=\"h-4 w-4\" />}\r\n                  Refresh\r\n                </Button>\r\n              </div>\r\n              \r\n              {leaveRequests.length === 0 ? (\r\n                <Alert>\r\n                  <AlertTriangle className=\"h-4 w-4\" />\r\n                  <AlertTitle>No Leave Requests</AlertTitle>\r\n                  <AlertDescription>\r\n                    There are no leave requests to display.\r\n                  </AlertDescription>\r\n                </Alert>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  {leaveRequests.map((request) => {\r\n                    const statusBadge = getStatusBadge(request.status, 'leave');\r\n                    return (\r\n                      <Card key={request.id}>\r\n                        <CardContent className=\"pt-6\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <div className=\"space-y-2\">\r\n                              <div className=\"flex items-center gap-2\">\r\n                                {getStatusIcon(request.status)}\r\n                                <span className=\"font-medium\">{request.employeeName}</span>\r\n                                <Badge \r\n                                  variant={statusBadge.variant}\r\n                                  key={statusBadge.key}\r\n                                >\r\n                                  {statusBadge.label}\r\n                                </Badge>\r\n                              </div>\r\n                              <p className=\"text-sm text-muted-foreground\">\r\n                                {request.leaveType} • {request.days} days • {request.startDate} to {request.endDate}\r\n                              </p>\r\n                              <p className=\"text-sm\">{request.reason}</p>\r\n                            </div>\r\n                            \r\n                            <div className=\"flex gap-2\">\r\n                              {request.status === 'pending_ops_initial' && user?.role === 'OPERATIONS_MANAGER' && (\r\n                                <Button\r\n                                  size=\"sm\"\r\n                                  onClick={() => handleLeaveAction(request.id, 'forward_to_hr')}\r\n                                  disabled={loading}\r\n                                >\r\n                                  Forward to HR\r\n                                </Button>\r\n                              )}\r\n                              \r\n                              {request.status === 'forwarded_to_hr' && user?.role === 'HR_MANAGER' && (\r\n                                <>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleLeaveAction(request.id, 'hr_approve')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Approve\r\n                                  </Button>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    variant=\"destructive\"\r\n                                    onClick={() => handleLeaveAction(request.id, 'hr_reject')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Reject\r\n                                  </Button>\r\n                                </>\r\n                              )}\r\n                              \r\n                              {request.status === 'hr_approved' && user?.role === 'OPERATIONS_MANAGER' && (\r\n                                <>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleLeaveAction(request.id, 'ops_approve')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Final Approve\r\n                                  </Button>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    variant=\"destructive\"\r\n                                    onClick={() => handleLeaveAction(request.id, 'ops_reject')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Final Reject\r\n                                  </Button>\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </TabsContent>\r\n            <TabsContent value=\"salary\" className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-semibold\">Salary Advances</h3>\r\n                <Button \r\n                  onClick={() => loadData(true)} \r\n                  disabled={loading}\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                >\r\n                  {loading ? <RefreshCw className=\"h-4 w-4 animate-spin\" /> : <RefreshCw className=\"h-4 w-4\" />}\r\n                  Refresh\r\n                </Button>\r\n              </div>\r\n              \r\n              {salaryAdvances.length === 0 ? (\r\n                <Alert>\r\n                  <AlertTriangle className=\"h-4 w-4\" />\r\n                  <AlertTitle>No Salary Advances</AlertTitle>\r\n                  <AlertDescription>\r\n                    There are no salary advance requests to display.\r\n                  </AlertDescription>\r\n                </Alert>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  {salaryAdvances.map((request) => {\r\n                    const statusBadge = getStatusBadge(request.status, 'salary');\r\n                    return (\r\n                      <Card key={request.id}>\r\n                        <CardContent className=\"pt-6\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <div className=\"space-y-2\">\r\n                              <div className=\"flex items-center gap-2\">\r\n                                {getStatusIcon(request.status)}\r\n                                <span className=\"font-medium\">{request.employeeName}</span>\r\n                                <Badge \r\n                                  variant={statusBadge.variant}\r\n                                  key={statusBadge.key}\r\n                                >\r\n                                  {statusBadge.label}\r\n                                </Badge>\r\n                              </div>\r\n                              <p className=\"text-sm text-muted-foreground\">\r\n                                Amount: KES {request.amount.toLocaleString()} • Requested: {request.requestDate}\r\n                              </p>\r\n                              <p className=\"text-sm\">{request.reason}</p>\r\n                            </div>\r\n                            \r\n                            <div className=\"flex gap-2\">\r\n                              {request.status === 'pending_ops_initial' && user?.role === 'OPERATIONS_MANAGER' && (\r\n                                <Button\r\n                                  size=\"sm\"\r\n                                  onClick={() => handleSalaryAdvanceAction(request.id, 'forward_to_hr')}\r\n                                  disabled={loading}\r\n                                >\r\n                                  Forward to HR\r\n                                </Button>\r\n                              )}\r\n                              \r\n                              {request.status === 'forwarded_to_hr' && user?.role === 'HR_MANAGER' && (\r\n                                <>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleSalaryAdvanceAction(request.id, 'hr_approve')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Approve\r\n                                  </Button>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    variant=\"destructive\"\r\n                                    onClick={() => handleSalaryAdvanceAction(request.id, 'hr_reject')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Reject\r\n                                  </Button>\r\n                                </>\r\n                              )}\r\n                              \r\n                              {request.status === 'hr_approved' && user?.role === 'OPERATIONS_MANAGER' && (\r\n                                <>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleSalaryAdvanceAction(request.id, 'ops_approve')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Final Approve\r\n                                  </Button>\r\n                                  <Button\r\n                                    size=\"sm\"\r\n                                    variant=\"destructive\"\r\n                                    onClick={() => handleSalaryAdvanceAction(request.id, 'ops_reject')}\r\n                                    disabled={loading}\r\n                                  >\r\n                                    Final Reject\r\n                                  </Button>\r\n                                </>\r\n                              )}\r\n                              \r\n                              {request.status === 'ops_final_approved' && user?.role === 'ADMIN' && (\r\n                                <Button\r\n                                  size=\"sm\"\r\n                                  onClick={() => handleSalaryAdvanceAction(request.id, 'disburse')}\r\n                                  disabled={loading}\r\n                                >\r\n                                  Disburse\r\n                                </Button>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkflowDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\WorkflowStatusTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\WorkflowTestDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, user]","fix":{"range":[1272,1278],"text":"[loadData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { CheckCircle, Clock, AlertTriangle, XCircle, ArrowRight, DollarSign } from 'lucide-react';\r\nimport { api, SalaryAdvanceRequest } from '@/services/unifiedApi'; // Import SalaryAdvanceRequest directly from unifiedApi\r\nimport { LeaveRequest, AdvancePayrollIntegration } from '@/types/types'; // Import other types from types.ts\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\nconst WorkflowTestDashboard = () => {\r\n  const { user } = useAuth();\r\n  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);\r\n  const [salaryAdvances, setSalaryAdvances] = useState<SalaryAdvanceRequest[]>([]);\r\n  const [activeDeductions, setActiveDeductions] = useState<AdvancePayrollIntegration[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [user]);\r\n\r\n  const loadData = async () => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    try { // Load data based on user role\r\n      const role = user.role === 'OPERATIONS_MANAGER' ? 'operations' :\r\n                   user.role === 'HR_MANAGER' ? 'hr' : 'employee';\r\n      \r\n      const [leaves, advances, deductions] = await Promise.all([\r\n        api.data.getLeaveRequests(role, { employeeId: user.id }),\r\n        api.data.getSalaryAdvanceRequests(role, { employeeId: user.id }),\r\n        api.data.getActiveAdvanceDeductions(user.id)\r\n      ]);\r\n\r\n      setLeaveRequests(leaves);\r\n      setSalaryAdvances(advances);\r\n      setActiveDeductions(deductions);\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'pending_ops_initial':\r\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n      case 'forwarded_to_hr':\r\n        return <ArrowRight className=\"h-4 w-4 text-blue-500\" />;\r\n      case 'hr_approved':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'hr_rejected':\r\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'ops_final_approved':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'ops_final_rejected':\r\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\r\n      case 'disbursed':\r\n        return <DollarSign className=\"h-4 w-4 text-green-500\" />;\r\n      case 'completed':\r\n        return <CheckCircle className=\"h-4 w-4 text-gray-500\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4 text-gray-400\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending_ops_initial':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'forwarded_to_hr':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'hr_approved':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'hr_rejected':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'ops_final_approved':\r\n        return 'bg-green-100 text-green-900';\r\n      case 'ops_final_rejected':\r\n        return 'bg-red-100 text-red-900';\r\n      case 'disbursed':\r\n        return 'bg-emerald-100 text-emerald-800';\r\n      case 'completed':\r\n        return 'bg-gray-100 text-gray-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-600';\r\n    }\r\n  };\r\n\r\n  const handleLeaveAction = async (requestId: string, action: string) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      switch (action) {\r\n        case 'forward_to_hr':\r\n          await api.data.forwardLeaveRequestToHR(requestId, user.id, 'Forwarding for eligibility review');\r\n          break;\r\n        case 'hr_approve':\r\n          await api.data.reviewLeaveRequestHR(requestId, user.id, 'eligible', 'Employee is eligible for leave');\r\n          break;\r\n        case 'hr_reject':\r\n          await api.data.reviewLeaveRequestHR(requestId, user.id, 'not_eligible', 'Employee not eligible for leave');\r\n          break;\r\n        case 'ops_approve':\r\n          await api.data.finalDecisionLeaveRequest(requestId, user.id, 'approved', 'Final approval granted');\r\n          break;\r\n        case 'ops_reject':\r\n          await api.data.finalDecisionLeaveRequest(requestId, user.id, 'rejected', 'Final approval denied');\r\n          break;\r\n      }\r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error processing leave action:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSalaryAdvanceAction = async (requestId: number | string, action: string) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      switch (action) {\r\n        case 'forward_to_hr':\r\n          await api.data.forwardSalaryAdvanceToHR(requestId, user.id, 'Forwarding for eligibility check');\r\n          break;\r\n        case 'hr_approve':\r\n          await api.data.reviewSalaryAdvanceHR(requestId, user.id, 'eligible', 'Employee eligible for advance', {\r\n            currentSalary: 30000,\r\n            existingAdvances: 0,\r\n            maxAllowableAdvance: 15000,\r\n            employmentTenure: 12,\r\n            creditworthiness: 'good'\r\n          });\r\n          break;\r\n        case 'hr_reject':\r\n          await api.data.reviewSalaryAdvanceHR(requestId, user.id, 'not_eligible', 'Employee not eligible for advance');\r\n          break;\r\n        case 'ops_approve':\r\n          await api.data.finalDecisionSalaryAdvance(requestId, user.id, 'approved', 'Final approval granted');\r\n          break;\r\n        case 'ops_reject':\r\n          await api.data.finalDecisionSalaryAdvance(requestId, user.id, 'rejected', 'Final approval denied');\r\n          break;\r\n        case 'disburse':\r\n          await api.data.disburseSalaryAdvance(requestId, user.id);\r\n          break;\r\n      }\r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error processing salary advance action:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const simulatePayrollDeduction = async (salaryAdvanceId: number | string) => {\r\n    setLoading(true);\r\n    try {\r\n      await api.data.processAdvanceDeduction(salaryAdvanceId, 'PP-2024-12', 2500);\r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error processing payroll deduction:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getAvailableActions = (request: LeaveRequest | SalaryAdvanceRequest, type: 'leave' | 'advance') => {\r\n    const actions = [];\r\n    \r\n    if (user?.role === 'OPERATIONS_MANAGER') {\r\n      if (request.status === 'pending_ops_initial') {\r\n        actions.push({ key: 'forward_to_hr', label: 'Forward to HR', variant: 'default' as const });\r\n      }\r\n      if (request.status === 'hr_approved') {\r\n        actions.push({ key: 'ops_approve', label: 'Approve', variant: 'default' as const });\r\n        actions.push({ key: 'ops_reject', label: 'Reject', variant: 'destructive' as const });\r\n      }\r\n      if (request.status === 'hr_rejected') {\r\n        actions.push({ key: 'ops_reject', label: 'Reject', variant: 'destructive' as const });\r\n      }\r\n      if (type === 'advance' && request.status === 'ops_final_approved') {\r\n        actions.push({ key: 'disburse', label: 'Disburse', variant: 'default' as const });\r\n      }\r\n    }\r\n    \r\n    if (user?.role === 'HR_MANAGER') {\r\n      if (request.status === 'forwarded_to_hr') {\r\n        actions.push({ key: 'hr_approve', label: 'Approve Eligibility', variant: 'default' as const });\r\n        actions.push({ key: 'hr_reject', label: 'Reject Eligibility', variant: 'destructive' as const });\r\n      }\r\n    }\r\n    \r\n    return actions;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <Clock className=\"h-8 w-8 animate-spin mx-auto mb-2\" />\r\n          <p>Loading workflow data...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">Workflow Test Dashboard</h2>\r\n          <p className=\"text-muted-foreground\">\r\n            Test interconnectivity between leave requests, salary advances, and payroll integration\r\n          </p>\r\n        </div>\r\n        <Button onClick={loadData} disabled={loading}>\r\n          Refresh Data\r\n        </Button>\r\n      </div>\r\n\r\n      <Alert>\r\n        <AlertTriangle className=\"h-4 w-4\" />\r\n        <AlertTitle>Workflow Testing Environment</AlertTitle>\r\n        <AlertDescription>\r\n          This dashboard demonstrates the corrected workflow where Operations Managers forward requests to HR for eligibility checks, \r\n          then make final decisions based on HR feedback. Salary advances automatically integrate with payroll for deductions.\r\n        </AlertDescription>\r\n      </Alert>\r\n\r\n      <Tabs defaultValue=\"leave\" className=\"space-y-4\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"leave\">Leave Requests ({leaveRequests.length})</TabsTrigger>\r\n          <TabsTrigger value=\"advances\">Salary Advances ({salaryAdvances.length})</TabsTrigger>\r\n          <TabsTrigger value=\"payroll\">Payroll Integration ({activeDeductions.length})</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"leave\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Leave Request Workflow</CardTitle>\r\n              <CardDescription>\r\n                Employee → Operations Manager → HR (Eligibility) → Operations Manager (Final Decision)\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              {leaveRequests.length === 0 ? (\r\n                <p className=\"text-center text-muted-foreground py-8\">No leave requests found</p>\r\n              ) : (\r\n                leaveRequests.map((request) => (\r\n                  <div key={request.id} className=\"border rounded-lg p-4 space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {getStatusIcon(request.status)}\r\n                        <span className=\"font-medium\">{request.employeeName}</span>\r\n                        <Badge className={getStatusColor(request.status)}>\r\n                          {request.status.replace(/_/g, ' ').toUpperCase()}\r\n                        </Badge>\r\n                      </div>\r\n                      <span className=\"text-sm text-muted-foreground\">\r\n                        {request.days} days • {request.leaveType}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      <p><strong>Dates:</strong> {request.startDate} to {request.endDate}</p>\r\n                      <p><strong>Reason:</strong> {request.reason}</p>\r\n                      <p><strong>Current Step:</strong> {request.currentStep.replace(/_/g, ' ')}</p>\r\n                    </div>\r\n\r\n                    {request.workflowHistory.length > 0 && (\r\n                      <div className=\"space-y-2\">\r\n                        <Separator />\r\n                        <h4 className=\"text-sm font-medium\">Workflow History:</h4>\r\n                        {request.workflowHistory.map((step, index) => (\r\n                          <div key={step.id} className=\"text-xs bg-muted p-2 rounded\">\r\n                            <span className=\"font-medium\">{step.actorName}</span> {step.action} \r\n                            <span className=\"text-muted-foreground ml-1\">\r\n                              ({new Date(step.timestamp).toLocaleString()})\r\n                            </span>\r\n                            {step.comments && <p className=\"mt-1 italic\">\"{step.comments}\"</p>}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"flex gap-2\">\r\n                      {getAvailableActions(request, 'leave').map((action) => (\r\n                        <Button\r\n                          key={action.key}\r\n                          size=\"sm\"\r\n                          variant={action.variant}\r\n                          onClick={() => handleLeaveAction(request.id, action.key)}\r\n                          disabled={loading}\r\n                        >\r\n                          {action.label}\r\n                        </Button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"advances\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Salary Advance Workflow</CardTitle>\r\n              <CardDescription>\r\n                Employee → Operations Manager → HR (Eligibility) → Operations Manager (Final Decision) → Disbursement → Payroll Integration\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              {salaryAdvances.length === 0 ? (\r\n                <p className=\"text-center text-muted-foreground py-8\">No salary advance requests found</p>\r\n              ) : (\r\n                salaryAdvances.map((request) => (\r\n                  <div key={request.id} className=\"border rounded-lg p-4 space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {getStatusIcon(request.status)}\r\n                        <span className=\"font-medium\">{request.employeeName}</span>\r\n                        <Badge className={getStatusColor(request.status)}>\r\n                          {request.status.replace(/_/g, ' ').toUpperCase()}\r\n                        </Badge>\r\n                      </div>\r\n                      <span className=\"text-sm text-muted-foreground\">\r\n                        KSH {request.amount.toLocaleString()}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      <p><strong>Reason:</strong> {request.reason}</p>\r\n                      <p><strong>Current Step:</strong> {request.currentStep.replace(/_/g, ' ')}</p>\r\n                      <p><strong>Repayment:</strong> KSH {request.payrollIntegration.monthlyDeduction.toLocaleString()}/month for {request.payrollIntegration.repaymentMonths} months</p>\r\n                      {request.repaymentDetails.remainingBalance > 0 && (\r\n                        <p><strong>Remaining Balance:</strong> KSH {request.repaymentDetails.remainingBalance.toLocaleString()}</p>\r\n                      )}\r\n                    </div>\r\n\r\n                    {request.hrEligibilityDetails && (\r\n                      <div className=\"bg-blue-50 p-3 rounded text-sm\">\r\n                        <h4 className=\"font-medium mb-2\">HR Eligibility Assessment:</h4>\r\n                        <div className=\"grid grid-cols-2 gap-2 text-xs\">\r\n                          <span>Current Salary: KSH {request.hrEligibilityDetails.currentSalary.toLocaleString()}</span>\r\n                          <span>Max Allowable: KSH {request.hrEligibilityDetails.maxAllowableAdvance.toLocaleString()}</span>\r\n                          <span>Employment Tenure: {request.hrEligibilityDetails.employmentTenure} months</span>\r\n                          <span>Creditworthiness: {request.hrEligibilityDetails.creditworthiness}</span>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n\r\n                    {request.workflowHistory.length > 0 && (\r\n                      <div className=\"space-y-2\">\r\n                        <Separator />\r\n                        <h4 className=\"text-sm font-medium\">Workflow History:</h4>\r\n                        {request.workflowHistory.map((step) => (\r\n                          <div key={step.id} className=\"text-xs bg-muted p-2 rounded\">\r\n                            <span className=\"font-medium\">{step.actorName}</span> {step.action} \r\n                            <span className=\"text-muted-foreground ml-1\">\r\n                              ({new Date(step.timestamp).toLocaleString()})\r\n                            </span>\r\n                            {step.comments && <p className=\"mt-1 italic\">\"{step.comments}\"</p>}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"flex gap-2\">\r\n                      {getAvailableActions(request, 'advance').map((action) => (\r\n                        <Button\r\n                          key={action.key}\r\n                          size=\"sm\"\r\n                          variant={action.variant}\r\n                          onClick={() => handleSalaryAdvanceAction(request.id, action.key)}\r\n                          disabled={loading}\r\n                        >\r\n                          {action.label}\r\n                        </Button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"payroll\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Payroll Integration</CardTitle>\r\n              <CardDescription>\r\n                Active salary advance deductions that will be processed during payroll\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              {activeDeductions.length === 0 ? (\r\n                <p className=\"text-center text-muted-foreground py-8\">No active payroll deductions found</p>\r\n              ) : (\r\n                activeDeductions.map((deduction) => (\r\n                  <div key={`${deduction.salaryAdvanceId}-${deduction.employeeId}`} className=\"border rounded-lg p-4 space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <DollarSign className=\"h-4 w-4 text-green-500\" />\r\n                        <span className=\"font-medium\">Advance #{deduction.salaryAdvanceId}</span>\r\n                        <Badge className=\"bg-green-100 text-green-800\">ACTIVE</Badge>\r\n                      </div>\r\n                      <span className=\"text-sm text-muted-foreground\">\r\n                        Employee ID: {deduction.employeeId}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                      <div>\r\n                        <p><strong>Monthly Deduction:</strong> KSH {deduction.monthlyDeductionAmount.toLocaleString()}</p>\r\n                        <p><strong>Remaining Balance:</strong> KSH {deduction.remainingBalance.toLocaleString()}</p>\r\n                      </div>\r\n                      <div>\r\n                        <p><strong>Start Date:</strong> {deduction.startDate}</p>\r\n                        <p><strong>Priority:</strong> {deduction.priority}</p>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex gap-2\">\r\n                      <Button\r\n                        size=\"sm\"\r\n                        onClick={() => simulatePayrollDeduction(deduction.salaryAdvanceId)}\r\n                        disabled={loading}\r\n                      >\r\n                        Simulate Payroll Deduction\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkflowTestDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\admin\\ExperimentalFeaturesManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\admin\\FeatureFlagManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\auth\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\dashboard\\RealTimeDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\layout\\DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\payroll\\PayStubViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\nimport * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  )\r\n}\r\n\r\nexport { Badge, badgeVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  ControllerProps,\r\n  FieldPath,\r\n  FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message) : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst NavigationMenu = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <NavigationMenuViewport />\r\n  </NavigationMenuPrimitive.Root>\r\n))\r\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\r\n\r\nconst NavigationMenuList = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\r\n\r\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\r\n\r\nconst navigationMenuTriggerStyle = cva(\r\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\r\n)\r\n\r\nconst NavigationMenuTrigger = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\r\n    {...props}\r\n  >\r\n    {children}{\" \"}\r\n    <ChevronDown\r\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\r\n      aria-hidden=\"true\"\r\n    />\r\n  </NavigationMenuPrimitive.Trigger>\r\n))\r\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\r\n\r\nconst NavigationMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\r\n\r\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\r\n\r\nconst NavigationMenuViewport = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\r\n    <NavigationMenuPrimitive.Viewport\r\n      className={cn(\r\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nNavigationMenuViewport.displayName =\r\n  NavigationMenuPrimitive.Viewport.displayName\r\n\r\nconst NavigationMenuIndicator = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Indicator\r\n    ref={ref}\r\n    className={cn(\r\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\r\n  </NavigationMenuPrimitive.Indicator>\r\n))\r\nNavigationMenuIndicator.displayName =\r\n  NavigationMenuPrimitive.Indicator.displayName\r\n\r\nexport {\r\n  navigationMenuTriggerStyle,\r\n  NavigationMenu,\r\n  NavigationMenuList,\r\n  NavigationMenuItem,\r\n  NavigationMenuContent,\r\n  NavigationMenuTrigger,\r\n  NavigationMenuLink,\r\n  NavigationMenuIndicator,\r\n  NavigationMenuViewport,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\nimport { PanelLeft } from \"lucide-react\"\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\r\nimport { Skeleton } from \"@/components/ui/skeleton\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\"\r\n\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\r\nconst SIDEBAR_WIDTH = \"16rem\"\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\r\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\r\n\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\"\r\n  open: boolean\r\n  setOpen: (open: boolean) => void\r\n  openMobile: boolean\r\n  setOpenMobile: (open: boolean) => void\r\n  isMobile: boolean\r\n  toggleSidebar: () => void\r\n}\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext)\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    defaultOpen?: boolean\r\n    open?: boolean\r\n    onOpenChange?: (open: boolean) => void\r\n  }\r\n>(\r\n  (\r\n    {\r\n      defaultOpen = true,\r\n      open: openProp,\r\n      onOpenChange: setOpenProp,\r\n      className,\r\n      style,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const isMobile = useIsMobile()\r\n    const [openMobile, setOpenMobile] = React.useState(false)\r\n\r\n    // This is the internal state of the sidebar.\r\n    // We use openProp and setOpenProp for control from outside the component.\r\n    const [_open, _setOpen] = React.useState(defaultOpen)\r\n    const open = openProp ?? _open\r\n    const setOpen = React.useCallback(\r\n      (value: boolean | ((value: boolean) => boolean)) => {\r\n        const openState = typeof value === \"function\" ? value(open) : value\r\n        if (setOpenProp) {\r\n          setOpenProp(openState)\r\n        } else {\r\n          _setOpen(openState)\r\n        }\r\n\r\n        // This sets the cookie to keep the sidebar state.\r\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\r\n      },\r\n      [setOpenProp, open]\r\n    )\r\n\r\n    // Helper to toggle the sidebar.\r\n    const toggleSidebar = React.useCallback(() => {\r\n      return isMobile\r\n        ? setOpenMobile((open) => !open)\r\n        : setOpen((open) => !open)\r\n    }, [isMobile, setOpen, setOpenMobile])\r\n\r\n    // Adds a keyboard shortcut to toggle the sidebar.\r\n    React.useEffect(() => {\r\n      const handleKeyDown = (event: KeyboardEvent) => {\r\n        if (\r\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\r\n          (event.metaKey || event.ctrlKey)\r\n        ) {\r\n          event.preventDefault()\r\n          toggleSidebar()\r\n        }\r\n      }\r\n\r\n      window.addEventListener(\"keydown\", handleKeyDown)\r\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\r\n    }, [toggleSidebar])\r\n\r\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n    // This makes it easier to style the sidebar with Tailwind classes.\r\n    const state = open ? \"expanded\" : \"collapsed\"\r\n\r\n    const contextValue = React.useMemo<SidebarContext>(\r\n      () => ({\r\n        state,\r\n        open,\r\n        setOpen,\r\n        isMobile,\r\n        openMobile,\r\n        setOpenMobile,\r\n        toggleSidebar,\r\n      }),\r\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\r\n    )\r\n\r\n    return (\r\n      <SidebarContext.Provider value={contextValue}>\r\n        <TooltipProvider delayDuration={0}>\r\n          <div\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH,\r\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n                ...style,\r\n              } as React.CSSProperties\r\n            }\r\n            className={cn(\r\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\r\n              className\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          >\r\n            {children}\r\n          </div>\r\n        </TooltipProvider>\r\n      </SidebarContext.Provider>\r\n    )\r\n  }\r\n)\r\nSidebarProvider.displayName = \"SidebarProvider\"\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    side?: \"left\" | \"right\"\r\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\r\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\r\n  }\r\n>(\r\n  (\r\n    {\r\n      side = \"left\",\r\n      variant = \"sidebar\",\r\n      collapsible = \"offcanvas\",\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\r\n\r\n    if (collapsible === \"none\") {\r\n      return (\r\n        <div\r\n          className={cn(\r\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\r\n            className\r\n          )}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (isMobile) {\r\n      return (\r\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n          <SheetContent\r\n            data-sidebar=\"sidebar\"\r\n            data-mobile=\"true\"\r\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n            style={\r\n              {\r\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\r\n              } as React.CSSProperties\r\n            }\r\n            side={side}\r\n          >\r\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n          </SheetContent>\r\n        </Sheet>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className=\"group peer hidden md:block text-sidebar-foreground\"\r\n        data-state={state}\r\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\r\n        data-variant={variant}\r\n        data-side={side}\r\n      >\r\n        {/* This is what handles the sidebar gap on desktop */}\r\n        <div\r\n          className={cn(\r\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\r\n            \"group-data-[collapsible=offcanvas]:w-0\",\r\n            \"group-data-[side=right]:rotate-180\",\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\r\n            side === \"left\"\r\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\r\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n            // Adjust the padding for floating and inset variants.\r\n            variant === \"floating\" || variant === \"inset\"\r\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\r\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          <div\r\n            data-sidebar=\"sidebar\"\r\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nSidebar.displayName = \"Sidebar\"\r\n\r\nconst SidebarTrigger = React.forwardRef<\r\n  React.ElementRef<typeof Button>,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, onClick, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      data-sidebar=\"trigger\"\r\n      variant=\"ghost\"\r\n      size=\"icon\"\r\n      className={cn(\"h-7 w-7\", className)}\r\n      onClick={(event) => {\r\n        onClick?.(event)\r\n        toggleSidebar()\r\n      }}\r\n      {...props}\r\n    >\r\n      <PanelLeft />\r\n      <span className=\"sr-only\">Toggle Sidebar</span>\r\n    </Button>\r\n  )\r\n})\r\nSidebarTrigger.displayName = \"SidebarTrigger\"\r\n\r\nconst SidebarRail = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\">\r\n>(({ className, ...props }, ref) => {\r\n  const { toggleSidebar } = useSidebar()\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      data-sidebar=\"rail\"\r\n      aria-label=\"Toggle Sidebar\"\r\n      tabIndex={-1}\r\n      onClick={toggleSidebar}\r\n      title=\"Toggle Sidebar\"\r\n      className={cn(\r\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\r\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\r\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\r\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\r\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\r\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarRail.displayName = \"SidebarRail\"\r\n\r\nconst SidebarInset = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"main\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <main\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\r\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInset.displayName = \"SidebarInset\"\r\n\r\nconst SidebarInput = React.forwardRef<\r\n  React.ElementRef<typeof Input>,\r\n  React.ComponentProps<typeof Input>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Input\r\n      ref={ref}\r\n      data-sidebar=\"input\"\r\n      className={cn(\r\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarInput.displayName = \"SidebarInput\"\r\n\r\nconst SidebarHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"header\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarHeader.displayName = \"SidebarHeader\"\r\n\r\nconst SidebarFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"footer\"\r\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarFooter.displayName = \"SidebarFooter\"\r\n\r\nconst SidebarSeparator = React.forwardRef<\r\n  React.ElementRef<typeof Separator>,\r\n  React.ComponentProps<typeof Separator>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <Separator\r\n      ref={ref}\r\n      data-sidebar=\"separator\"\r\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarSeparator.displayName = \"SidebarSeparator\"\r\n\r\nconst SidebarContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"content\"\r\n      className={cn(\r\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarContent.displayName = \"SidebarContent\"\r\n\r\nconst SidebarGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group\"\r\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroup.displayName = \"SidebarGroup\"\r\n\r\nconst SidebarGroupLabel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"div\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-label\"\r\n      className={cn(\r\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\r\n\r\nconst SidebarGroupAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\r\n>(({ className, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"group-action\"\r\n      className={cn(\r\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\r\n\r\nconst SidebarGroupContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"group-content\"\r\n    className={cn(\"w-full text-sm\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\r\n\r\nconst SidebarMenu = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu\"\r\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenu.displayName = \"SidebarMenu\"\r\n\r\nconst SidebarMenuItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ className, ...props }, ref) => (\r\n  <li\r\n    ref={ref}\r\n    data-sidebar=\"menu-item\"\r\n    className={cn(\"group/menu-item relative\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n        outline:\r\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\r\n      },\r\n      size: {\r\n        default: \"h-8 text-sm\",\r\n        sm: \"h-7 text-xs\",\r\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    isActive?: boolean\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(\r\n  (\r\n    {\r\n      asChild = false,\r\n      isActive = false,\r\n      variant = \"default\",\r\n      size = \"default\",\r\n      tooltip,\r\n      className,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    const { isMobile, state } = useSidebar()\r\n\r\n    const button = (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"menu-button\"\r\n        data-size={size}\r\n        data-active={isActive}\r\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n        {...props}\r\n      />\r\n    )\r\n\r\n    if (!tooltip) {\r\n      return button\r\n    }\r\n\r\n    if (typeof tooltip === \"string\") {\r\n      tooltip = {\r\n        children: tooltip,\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n        <TooltipContent\r\n          side=\"right\"\r\n          align=\"center\"\r\n          hidden={state !== \"collapsed\" || isMobile}\r\n          {...tooltip}\r\n        />\r\n      </Tooltip>\r\n    )\r\n  }\r\n)\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean\r\n    showOnHover?: boolean\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        showOnHover &&\r\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\r\n\r\nconst SidebarMenuBadge = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\">\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    data-sidebar=\"menu-badge\"\r\n    className={cn(\r\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\r\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\r\n      \"peer-data-[size=sm]/menu-button:top-1\",\r\n      \"peer-data-[size=default]/menu-button:top-1.5\",\r\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    showIcon?: boolean\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\r\n      {...props}\r\n    >\r\n      {showIcon && (\r\n        <Skeleton\r\n          className=\"size-4 rounded-md\"\r\n          data-sidebar=\"menu-skeleton-icon\"\r\n        />\r\n      )}\r\n      <Skeleton\r\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            \"--skeleton-width\": width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  )\r\n})\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\r\n\r\nconst SidebarMenuSub = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    data-sidebar=\"menu-sub\"\r\n    className={cn(\r\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\r\n      \"group-data-[collapsible=icon]:hidden\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<\"a\"> & {\r\n    asChild?: boolean\r\n    size?: \"sm\" | \"md\"\r\n    isActive?: boolean\r\n  }\r\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"a\"\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\r\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\r\n        size === \"sm\" && \"text-xs\",\r\n        size === \"md\" && \"text-sm\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Toggle = React.forwardRef<\r\n  React.ElementRef<typeof TogglePrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\r\n    VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, ...props }, ref) => (\r\n  <TogglePrimitive.Root\r\n    ref={ref}\r\n    className={cn(toggleVariants({ variant, size, className }))}\r\n    {...props}\r\n  />\r\n))\r\n\r\nToggle.displayName = TogglePrimitive.Root.displayName\r\n\r\nexport { Toggle, toggleVariants }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\config\\environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":18,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":18,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User } from '@/types/types';\r\nimport { authService } from '@/services/api/auth.service';\r\nimport { employeeService } from '@/services/api/employee.service';\r\nimport { config } from '@/config/environment';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  refreshUser: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const initializeAuth = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      if (authService.isAuthenticated()) {\r\n        const currentUser = await authService.getCurrentUser();\r\n        if (currentUser && currentUser.employeeId) {\r\n          // Fetch employee details by database UUID\r\n          const employeeDetails = await employeeService.getEmployeeById(currentUser.employeeId);\r\n          // Set user.employeeId to employeeNumber (business ID) for consistent lookups\r\n          setUser({ ...currentUser, ...employeeDetails, employeeId: employeeDetails.employeeId });\r\n        } else {\r\n          setUser(currentUser);\r\n        }\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth initialization error:', error);\r\n      await authService.logout();\r\n      setUser(null);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string): Promise<boolean> => {\r\n    setIsLoading(true);\r\n    try {\r\n      const loginResponse = await authService.login({ email, password });\r\n      if (loginResponse && loginResponse.user) {\r\n        const { user: authUser } = loginResponse;\r\n        if (authUser && authUser.employeeId) {\r\n          // Fetch employee details by database UUID\r\n          const employeeDetails = await employeeService.getEmployeeById(authUser.employeeId);\r\n          // Set user.employeeId to employeeNumber (business ID) for consistent lookups\r\n          const fullUser = { ...authUser, ...employeeDetails, employeeId: employeeDetails.employeeId, branch: employeeDetails.branch || employeeDetails.department };\r\n          setUser(fullUser);\r\n          authService.setAuthData({ token: loginResponse.token, user: fullUser, refreshToken: loginResponse.refreshToken });\r\n        } else {\r\n          setUser(authUser);\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Real API logout\r\n      await authService.logout();\r\n      setUser(null);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Clear user state even if API call fails\r\n      setUser(null);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshUser = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      if (authService.isAuthenticated()) {\r\n        const currentUser = await authService.getCurrentUser();\r\n        if (currentUser && currentUser.employeeId) {\r\n          // Fetch employee details by database UUID\r\n          const employeeDetails = await employeeService.getEmployeeById(currentUser.employeeId);\r\n          // Set user.employeeId to employeeNumber (business ID) for consistent lookups\r\n          const fullUser = { ...currentUser, ...employeeDetails, employeeId: employeeDetails.employeeId, branch: employeeDetails.branch || employeeDetails.department };\r\n          setUser(fullUser);\r\n          authService.setAuthData({ token: authService.getToken() || '', user: fullUser, refreshToken: authService.getRefreshToken() });\r\n        } else {\r\n          setUser(currentUser);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to refresh user:', error);\r\n      await logout();\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isLoading,\r\n    refreshUser\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\hooks\\useApi.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData, immediate]","fix":{"range":[1711,1739],"text":"[fetchData, immediate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":72,"column":18,"nodeType":"SpreadElement","endLine":72,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchData' and 'initialPage'. Either include them or remove the dependency array.","line":228,"column":6,"nodeType":"ArrayExpression","endLine":228,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData, filters, initialPage]","fix":{"range":[5616,5625],"text":"[fetchData, filters, initialPage]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'loading'. Either include it or remove the dependency array.","line":333,"column":6,"nodeType":"ArrayExpression","endLine":333,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [apiCall, loading, onUpdate]","fix":{"range":[8252,8271],"text":"[apiCall, loading, onUpdate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchData' and 'loading'. Either include them or remove the dependency array.","line":353,"column":6,"nodeType":"ArrayExpression","endLine":353,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [enabled, fetchData, interval, loading, retryCount]","fix":{"range":[8818,8849],"text":"[enabled, fetchData, interval, loading, retryCount]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { config } from '@/config/environment';\r\n\r\nexport interface UseApiState<T> {\r\n  data: T | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => Promise<void>;\r\n  mutate: (newData: T) => void;\r\n}\r\n\r\nexport interface UseApiOptions {\r\n  immediate?: boolean;\r\n  onSuccess?: (data: any) => void;\r\n  onError?: (error: string) => void;\r\n  dependencies?: any[];\r\n}\r\n\r\n/**\r\n * Custom hook for API data fetching with loading states\r\n */\r\nexport function useApi<T>(\r\n  apiCall: () => Promise<T>,\r\n  options: UseApiOptions = {}\r\n): UseApiState<T> {\r\n  const {\r\n    immediate = true,\r\n    onSuccess,\r\n    onError,\r\n    dependencies = []\r\n  } = options;\r\n\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const result = await apiCall();\r\n      setData(result);\r\n      \r\n      if (onSuccess) {\r\n        onSuccess(result);\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || err.message || 'An error occurred';\r\n      setError(errorMessage);\r\n      \r\n      if (onError) {\r\n        onError(errorMessage);\r\n      }\r\n      \r\n      if (config.enableDebugLogs) {\r\n        console.error('API call failed:', err);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [apiCall, onSuccess, onError]);\r\n\r\n  const mutate = useCallback((newData: T) => {\r\n    setData(newData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (immediate) {\r\n      fetchData();\r\n    }\r\n  }, [immediate, ...dependencies]); // Remove fetchData from dependencies to prevent loops\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    refetch: fetchData,\r\n    mutate\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for API mutations (POST, PUT, DELETE operations)\r\n */\r\nexport function useApiMutation<TData, TVariables = void>(\r\n  mutationFn: (variables: TVariables) => Promise<TData>,\r\n  options: {\r\n    onSuccess?: (data: TData, variables: TVariables) => void;\r\n    onError?: (error: string, variables: TVariables) => void;\r\n  } = {}\r\n) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const mutate = useCallback(async (variables: TVariables): Promise<TData | null> => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const result = await mutationFn(variables);\r\n      \r\n      if (options.onSuccess) {\r\n        options.onSuccess(result, variables);\r\n      }\r\n      \r\n      return result;\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || err.message || 'An error occurred';\r\n      setError(errorMessage);\r\n      \r\n      if (options.onError) {\r\n        options.onError(errorMessage, variables);\r\n      }\r\n      \r\n      if (config.enableDebugLogs) {\r\n        console.error('API mutation failed:', err);\r\n      }\r\n      \r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [mutationFn, options]);\r\n\r\n  const reset = useCallback(() => {\r\n    setError(null);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return {\r\n    mutate,\r\n    loading,\r\n    error,\r\n    reset\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for paginated API data\r\n */\r\nexport function usePaginatedApi<T>(\r\n  apiCall: (page: number, limit: number, filters?: any) => Promise<{\r\n    data: T[];\r\n    pagination: {\r\n      page: number;\r\n      limit: number;\r\n      total: number;\r\n      totalPages: number;\r\n    };\r\n  }>,\r\n  options: {\r\n    initialPage?: number;\r\n    pageSize?: number;\r\n    filters?: any;\r\n    onSuccess?: (data: any) => void;\r\n    onError?: (error: string) => void;\r\n  } = {}\r\n) {\r\n  const {\r\n    initialPage = 1,\r\n    pageSize = 10,\r\n    filters,\r\n    onSuccess,\r\n    onError\r\n  } = options;\r\n\r\n  const [data, setData] = useState<T[]>([]);\r\n  const [pagination, setPagination] = useState({\r\n    page: initialPage,\r\n    limit: pageSize,\r\n    total: 0,\r\n    totalPages: 0\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchData = useCallback(async (page: number = pagination.page) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const result = await apiCall(page, pageSize, filters);\r\n      setData(result.data);\r\n      setPagination(result.pagination);\r\n      \r\n      if (onSuccess) {\r\n        onSuccess(result);\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || err.message || 'An error occurred';\r\n      setError(errorMessage);\r\n      \r\n      if (onError) {\r\n        onError(errorMessage);\r\n      }\r\n      \r\n      if (config.enableDebugLogs) {\r\n        console.error('Paginated API call failed:', err);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [apiCall, pageSize, filters, pagination.page, onSuccess, onError]);\r\n\r\n  const goToPage = useCallback((page: number) => {\r\n    fetchData(page);\r\n  }, [fetchData]);\r\n\r\n  const nextPage = useCallback(() => {\r\n    if (pagination.page < pagination.totalPages) {\r\n      goToPage(pagination.page + 1);\r\n    }\r\n  }, [pagination.page, pagination.totalPages, goToPage]);\r\n\r\n  const prevPage = useCallback(() => {\r\n    if (pagination.page > 1) {\r\n      goToPage(pagination.page - 1);\r\n    }\r\n  }, [pagination.page, goToPage]);\r\n\r\n  const refresh = useCallback(() => {\r\n    fetchData(pagination.page);\r\n  }, [fetchData, pagination.page]);\r\n\r\n  useEffect(() => {\r\n    fetchData(initialPage);\r\n  }, [filters]); // Re-fetch when filters change\r\n\r\n  return {\r\n    data,\r\n    pagination,\r\n    loading,\r\n    error,\r\n    goToPage,\r\n    nextPage,\r\n    prevPage,\r\n    refresh,\r\n    hasNextPage: pagination.page < pagination.totalPages,\r\n    hasPrevPage: pagination.page > 1\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for optimistic updates\r\n */\r\nexport function useOptimisticUpdate<T>(\r\n  initialData: T[],\r\n  keyField: keyof T = 'id' as keyof T\r\n) {\r\n  const [data, setData] = useState<T[]>(initialData);\r\n\r\n  const addOptimistic = useCallback((item: T) => {\r\n    setData(prev => [...prev, item]);\r\n  }, []);\r\n\r\n  const updateOptimistic = useCallback((id: any, updates: Partial<T>) => {\r\n    setData(prev => prev.map(item => \r\n      item[keyField] === id ? { ...item, ...updates } : item\r\n    ));\r\n  }, [keyField]);\r\n\r\n  const removeOptimistic = useCallback((id: any) => {\r\n    setData(prev => prev.filter(item => item[keyField] !== id));\r\n  }, [keyField]);\r\n\r\n  const revertOptimistic = useCallback((originalData: T[]) => {\r\n    setData(originalData);\r\n  }, []);\r\n\r\n  const syncData = useCallback((newData: T[]) => {\r\n    setData(newData);\r\n  }, []);\r\n\r\n  return {\r\n    data,\r\n    addOptimistic,\r\n    updateOptimistic,\r\n    removeOptimistic,\r\n    revertOptimistic,\r\n    syncData\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for real-time data updates with improved error handling and resource cleanup\r\n */\r\nexport function useRealTimeData<T>(\r\n  apiCall: () => Promise<T>,\r\n  options: {\r\n    interval?: number;\r\n    enabled?: boolean;\r\n    onUpdate?: (data: T) => void;\r\n  } = {}\r\n) {\r\n  const {\r\n    interval = 30000, // 30 seconds default\r\n    enabled = true,\r\n    onUpdate\r\n  } = options;\r\n\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    // Don't fetch if already loading to prevent overlapping requests\r\n    if (loading) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const result = await apiCall();\r\n      setData(result);\r\n      setRetryCount(0); // Reset retry count on success\r\n      \r\n      if (onUpdate) {\r\n        onUpdate(result);\r\n      }\r\n    } catch (err: any) {\r\n      const errorMessage = err.response?.data?.message || err.message || 'An error occurred';\r\n      setError(errorMessage);\r\n      setRetryCount(prev => prev + 1);\r\n      \r\n      if (config.enableDebugLogs) {\r\n        console.error('Real-time data fetch failed:', err);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [apiCall, onUpdate]); // Remove loading from dependencies\r\n\r\n  useEffect(() => {\r\n    if (!enabled) return;\r\n\r\n    // Initial fetch\r\n    fetchData();\r\n\r\n    // Set up interval with exponential backoff on errors\r\n    const effectiveInterval = retryCount > 0 ? Math.min(interval * Math.pow(2, retryCount), 300000) : interval;\r\n    const intervalId = setInterval(() => {\r\n      // Only fetch if not currently loading\r\n      if (!loading) {\r\n        fetchData();\r\n      }\r\n    }, effectiveInterval);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [enabled, interval, retryCount]); // Remove fetchData from dependencies\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    refresh: fetchData\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\hooks\\useIntegrations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\AdminDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isLoading'. Either include it or remove the dependency array.","line":121,"column":6,"nodeType":"ArrayExpression","endLine":121,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [isLoading]","fix":{"range":[4957,4959],"text":"[isLoading]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useEffect } from 'react';\r\nimport { DashboardLayout } from '@/components/layout/DashboardLayout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\r\nimport { Users, Shield, Database, Activity, AlertTriangle, CheckCircle, XCircle, Clock, TestTube, FileText, LifeBuoy, Settings, Zap, Flag } from 'lucide-react';\r\nimport ComplianceDashboard from './ComplianceDashboard';\r\nimport SecurityManagement from './SecurityManagement';\r\nimport IntegrationDashboard from './IntegrationDashboard';\r\nimport WorkflowDashboard from './WorkflowDashboard';\r\nimport ExperimentalFeaturesManager from '@/components/admin/ExperimentalFeaturesManager';\r\nimport { userService } from '@/services/api/user.service';\r\nimport { departmentService } from '@/services/api/department.service';\r\nimport { branchService } from '@/services/api/branch.service';\r\nimport RealTimeDashboard from '../../components/dashboard/RealTimeDashboard';\r\nimport { analyticsService } from '@/services/api/analytics.service';\r\nimport { adminService } from '@/services/api/admin.service';\r\n\r\nconst AdminDashboard = () => {\r\n  const [systemStatus, setSystemStatus] = useState({\r\n    overall: 'healthy' as 'healthy' | 'warning' | 'critical',\r\n    database: 'healthy' as 'healthy' | 'warning' | 'critical',\r\n    authentication: 'healthy' as 'healthy' | 'warning' | 'critical',\r\n    api: 'warning' as 'healthy' | 'warning' | 'critical' | 'error', // Initially set to warning, will be updated via API\r\n    storage: 'healthy' as 'healthy' | 'warning' | 'critical'\r\n  });\r\n\r\n  // Real metrics state\r\n  const [metrics, setMetrics] = useState({\r\n    totalUsers: 0,\r\n    activeUsers: 0,\r\n    totalDepartments: 0,\r\n    totalBranches: 0,\r\n    systemUptime: '99.8%',\r\n    avgResponseTime: '120ms',\r\n    storageUsed: 68\r\n  });\r\n\r\n  // Real activities state\r\n  const [recentActivities, setRecentActivities] = useState<any[]>([]);\r\n  const [maintenanceInfo, setMaintenanceInfo] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMetrics = async () => {\r\n      // Prevent multiple simultaneous calls\r\n      if (isLoading) return;\r\n      \r\n      setIsLoading(true);\r\n      try {\r\n        // Batch API calls to reduce load\r\n        const [usersResponse, departments, branches, systemStatusData, activitiesData, maintenanceData] = await Promise.all([\r\n          userService.getUsers().catch(() => ({ data: [] })),\r\n          departmentService.getAllDepartments().catch(() => []),\r\n          branchService.getAllBranches().catch(() => []),\r\n          adminService.getSystemStatus().catch(() => null),\r\n          adminService.getSystemActivities(10).catch(() => []),\r\n          adminService.getMaintenanceInfo().catch(() => null)\r\n        ]);\r\n        \r\n        const users = usersResponse.data || [];\r\n        \r\n        setMetrics({\r\n          totalUsers: users.length,\r\n          activeUsers: users.filter(u => u.status === 'active').length,\r\n          totalDepartments: departments.length,\r\n          totalBranches: branches.length,\r\n          systemUptime: maintenanceData?.systemUptime || '99.8%',\r\n          avgResponseTime: '120ms',\r\n          storageUsed: 68\r\n        });\r\n\r\n        // Update system status with real data\r\n        if (systemStatusData) {\r\n          setSystemStatus(systemStatusData);\r\n        }\r\n\r\n        // Update activities with real data\r\n        setRecentActivities(activitiesData);\r\n\r\n        // Update maintenance info\r\n        setMaintenanceInfo(maintenanceData);\r\n      } catch (error) {\r\n        console.error('Failed to fetch admin metrics:', error);\r\n        // Set defaults if API fails\r\n        setMetrics(prev => ({\r\n          ...prev,\r\n          totalUsers: 0,\r\n          activeUsers: 0,\r\n          totalDepartments: 0,\r\n          totalBranches: 0\r\n        }));\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMetrics();\r\n    \r\n    // Reduce polling frequency for system status - only poll if not loading\r\n    const statusInterval = setInterval(async () => {\r\n      if (isLoading) return; // Skip if already loading\r\n      \r\n      try {\r\n        const systemStatusData = await adminService.getSystemStatus();\r\n        setSystemStatus(systemStatusData);\r\n      } catch (error) {\r\n        console.error('System status check failed:', error);\r\n        setSystemStatus(prev => ({\r\n          ...prev,\r\n          api: 'critical',\r\n          overall: 'warning'\r\n        }));\r\n      }\r\n    }, 120000); // Check every 2 minutes instead of 1 minute\r\n    \r\n    return () => clearInterval(statusInterval);\r\n  }, []); // Empty dependency array to prevent loops\r\n\r\n\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'healthy':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'warning':\r\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\r\n      case 'error':\r\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'success':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'warning':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'error':\r\n        return 'bg-red-100 text-red-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout title=\"System Administration\">\r\n      <div className=\"space-y-6\">\r\n        {/* System Status Overview */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\r\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader> \r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.totalUsers}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                {metrics.activeUsers} active\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">System Uptime</CardTitle>\r\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.systemUptime}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Last 30 days\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Response Time</CardTitle>\r\n              <Database className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.avgResponseTime}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Average response\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Storage Used</CardTitle>\r\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics.storageUsed}%</div>\r\n              <Progress value={metrics.storageUsed} className=\"mt-2\" />\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        <Tabs defaultValue=\"realtime\" className=\"space-y-4\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"realtime\">Real-Time Dashboard</TabsTrigger>\r\n            <TabsTrigger value=\"status\">System Status</TabsTrigger>\r\n            <TabsTrigger value=\"compliance\">Compliance</TabsTrigger>\r\n            <TabsTrigger value=\"maintenance\">Maintenance</TabsTrigger>\r\n            <TabsTrigger value=\"feature-flags\">Experimental Features</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"realtime\" className=\"space-y-4\">\r\n            <RealTimeDashboard role=\"admin\" />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"status\" className=\"space-y-4\">\r\n            {/* System Health Status */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>System Health</CardTitle>\r\n                <CardDescription>Real-time status of system components</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium\">Overall System</span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(systemStatus.overall)}\r\n                    <Badge variant=\"outline\" className=\"capitalize\">\r\n                      {systemStatus.overall}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium\">Database</span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(systemStatus.database)}\r\n                    <Badge variant=\"outline\" className=\"capitalize\">\r\n                      {systemStatus.database}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium\">Authentication</span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(systemStatus.authentication)}\r\n                    <Badge variant=\"outline\" className=\"capitalize\">\r\n                      {systemStatus.authentication}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium\">API Services</span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(systemStatus.api)}\r\n                    <Badge variant=\"outline\" className=\"capitalize\">\r\n                      {systemStatus.api}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium\">File Storage</span>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getStatusIcon(systemStatus.storage)}\r\n                    <Badge variant=\"outline\" className=\"capitalize\">\r\n                      {systemStatus.storage}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Recent System Activities */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Recent System Activities</CardTitle>\r\n                <CardDescription>Latest system events and user activities</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {recentActivities.map((activity) => (\r\n                    <div key={activity.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"font-medium\">{activity.action}</div>\r\n                        <div className=\"text-sm text-muted-foreground\">{activity.user}</div>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <span className=\"text-xs text-muted-foreground\">{activity.timestamp}</span>\r\n                        <Badge className={getStatusColor(activity.status)}>\r\n                          {activity.status}\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n\r\n          <TabsContent value=\"maintenance\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>System Maintenance</CardTitle>\r\n                <CardDescription>Perform system maintenance and updates</CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    onClick={async () => {\r\n                      try {\r\n                        await adminService.triggerDatabaseBackup();\r\n                        alert('Database backup initiated successfully');\r\n                      } catch (error) {\r\n                        alert('Failed to initiate database backup');\r\n                      }\r\n                    }}\r\n                  >\r\n                    Database Backup\r\n                  </Button>\r\n                  <Button \r\n                    variant=\"outline\"\r\n                    onClick={async () => {\r\n                      try {\r\n                        await adminService.clearCache();\r\n                        alert('Cache cleared successfully');\r\n                      } catch (error) {\r\n                        alert('Failed to clear cache');\r\n                      }\r\n                    }}\r\n                  >\r\n                    Clear Cache\r\n                  </Button>\r\n                  <Button variant=\"outline\" disabled>\r\n                    System Update\r\n                  </Button>\r\n                </div>\r\n                \r\n                {maintenanceInfo && (\r\n                  <Alert>\r\n                    <Database className=\"h-4 w-4\" />\r\n                    <AlertTitle>Maintenance Schedule</AlertTitle>\r\n                    <AlertDescription>\r\n                      Last maintenance: {maintenanceInfo.lastMaintenance ? new Date(maintenanceInfo.lastMaintenance).toLocaleDateString() : 'Never'}\r\n                      <br />\r\n                      Next scheduled maintenance: {new Date(maintenanceInfo.nextMaintenance).toLocaleDateString()} ({maintenanceInfo.maintenanceWindow})\r\n                      <br />\r\n                      System uptime: {maintenanceInfo.systemUptime} ({maintenanceInfo.uptimeDays} days)\r\n                    </AlertDescription>\r\n                  </Alert>\r\n                )}\r\n                \r\n                {!maintenanceInfo && (\r\n                  <Alert>\r\n                    <Database className=\"h-4 w-4\" />\r\n                    <AlertTitle>Maintenance Schedule</AlertTitle>\r\n                    <AlertDescription>\r\n                      Loading maintenance information...\r\n                    </AlertDescription>\r\n                  </Alert>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"compliance\" className=\"space-y-4\">\r\n            <ComplianceDashboard />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"feature-flags\" className=\"space-y-4\">\r\n            <ExperimentalFeaturesManager />\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\AdvancedAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\ComplianceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\IntegrationDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\RealTimeDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\SalaryAdvanceOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\SecurityManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\UserManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadData]","fix":{"range":[3135,3137],"text":"[loadData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { DashboardLayout } from '@/components/layout/DashboardLayout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { Users, UserPlus, Edit, Trash2, Shield, Search, Settings, Key, UserCheck, UserX, Loader2, Eye, EyeOff } from 'lucide-react';\r\nimport { userService, CreateUserRequest } from '@/services/api/user.service';\r\nimport { branchService } from '@/services/api/branch.service';\r\nimport { employeeService } from '@/services/api/employee.service';\r\nimport { User, Branch } from '@/types/types';\r\n\r\nconst initialAddUser = {\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  password: '',\r\n  role: '',\r\n};\r\n\r\nconst UserManagement: React.FC = () => {\r\n  const { toast } = useToast();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterRole, setFilterRole] = useState('all');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n  // Department filter removed\r\n  const [activeTab, setActiveTab] = useState('users');\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [roles, setRoles] = useState<Array<{ id: string; name: string; description: string; permissions: string[] }>>([]);\r\n  // const [departments, setDepartments] = useState<Array<{ id: string; name: string; description: string }>>([]);\r\n  // const [branches, setBranches] = useState<Branch[]>([]);\r\n  const [permissions, setPermissions] = useState<string[]>([]);\r\n  const [userStats, setUserStats] = useState({ totalUsers: 0, activeUsers: 0, adminUsers: 0, hrManagerUsers: 0 });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [editFields, setEditFields] = useState<{ [userId: string]: any }>({});\r\n  const [passwordFields, setPasswordFields] = useState<{ [userId: string]: { newPassword: string; confirmPassword: string } }>({});\r\n  const [passwordVisibility, setPasswordVisibility] = useState<{ [userId: string]: { new: boolean; confirm: boolean } }>({});\r\n  const [addUserDialogOpen, setAddUserDialogOpen] = useState(false);\r\n  const [addUser, setAddUser] = useState(initialAddUser);\r\n  const [addUserLoading, setAddUserLoading] = useState(false);\r\n  const [addUserErrors, setAddUserErrors] = useState<{ [k: string]: string }>({});\r\n\r\n  // Load data on component mount\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Load all data in parallel\r\n      const [usersResponse, rolesResponse, branchesResponse, permissionsResponse, statsResponse] = await Promise.all([\r\n        userService.getUsers(),\r\n        userService.getRoles(),\r\n        branchService.getAllBranches(),\r\n        userService.getPermissions(),\r\n        userService.getUserStats()\r\n      ]);\r\n\r\n      let users: User[] = Array.isArray(usersResponse.data) ? usersResponse.data : [];\r\n\r\n      // No branch merging needed\r\n      setUsers(users);\r\n      setRoles(Array.isArray(rolesResponse) ? rolesResponse : []);\r\n      // setDepartments(Array.isArray(departmentsResponse) ? departmentsResponse : []);\r\n      // setDepartments(Array.isArray(departmentsResponse) ? departmentsResponse : []);\r\n      // Departments loading removed due to missing API\r\n      setPermissions(Array.isArray(permissionsResponse) ? permissionsResponse : []);\r\n      setUserStats(statsResponse || { totalUsers: 0, activeUsers: 0, adminUsers: 0, hrManagerUsers: 0 });\r\n\r\n    } catch (error) {\r\n      console.error('Failed to load data:', error);\r\n      setError('Failed to load user data. Please try again.');\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load user data. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [toast]);\r\n\r\n  const getRoleBadgeColor = (role: string) => {\r\n    switch (role) {\r\n      case 'ADMIN':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'HR_MANAGER':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'OPERATIONS_MANAGER':\r\n        return 'bg-purple-100 text-purple-800';\r\n      case 'EMPLOYEE':\r\n        return 'bg-green-100 text-green-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusBadgeColor = (status: string) => {\r\n    switch (status?.toUpperCase()) {\r\n      case 'ACTIVE':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'INACTIVE':\r\n        return 'bg-gray-100 text-gray-800';\r\n      case 'SUSPENDED':\r\n        return 'bg-red-100 text-red-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  // Helper to safely get string value\r\n  const safeToString = (val: any) => (val !== undefined && val !== null ? val.toString() : '');\r\n\r\n  // Helper to get department/branch name by ID\r\n  // const getDepartmentName = (id: string | null) => {\r\n  //   if (!id) return 'None';\r\n  //   const dept = departments.find(d => d.id === id);\r\n  //   return dept ? dept.name : 'None';\r\n  // };\r\n  // const getBranchName = (id: string | null) => {\r\n  //   if (!id) return 'None';\r\n  //   const branch = branches.find(b => b.id === id);\r\n  //   return branch ? branch.name : 'None';\r\n  // };\r\n\r\n  // Defensive filter: only include valid user objects\r\n  const filteredUsers = useMemo(() => users.filter(user => {\r\n    if (!user || typeof user !== 'object') return false;\r\n    // Defensive: check for required fields\r\n    if (!('status' in user) || !('role' in user) || !('firstName' in user)) return false;\r\n    const matchesSearch = (user.firstName?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||\r\n      (user.lastName?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||\r\n      (user.email?.toLowerCase() || '').includes(searchTerm.toLowerCase());\r\n    const matchesRole = filterRole === 'all' || user.role === filterRole || safeToString(user.role) === filterRole;\r\n    const matchesStatus = filterStatus === 'all' || (user.status?.toUpperCase() === filterStatus.toUpperCase());\r\n    return matchesSearch && matchesRole && matchesStatus;\r\n  }), [users, searchTerm, filterRole, filterStatus]);\r\n\r\n  const handleDeleteUser = async (userId: string) => {\r\n    try {\r\n      await userService.deleteUser(userId);\r\n      setUsers(prev => prev.filter(u => u.id !== userId));\r\n      toast({\r\n        title: \"User Deleted\",\r\n        description: \"User has been successfully removed from the system.\",\r\n      });\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message || \"Failed to delete user.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleToggleUserStatus = async (userId: string, currentStatus: string) => {\r\n    const newStatus = currentStatus?.toUpperCase() === 'ACTIVE' ? 'INACTIVE' : 'ACTIVE';\r\n    try {\r\n      const updatedUser = await userService.updateUserStatus(userId, newStatus);\r\n      if (updatedUser && typeof updatedUser.status !== 'undefined') {\r\n        setUsers(prev => prev.map(u => u.id === userId ? { ...u, status: updatedUser.status } : u));\r\n        toast({\r\n          title: \"User Status Updated\",\r\n          description: `User status changed to ${newStatus}.`,\r\n        });\r\n      } else {\r\n        toast({\r\n          title: \"Error\",\r\n          description: \"Failed to update user status. Invalid response from server.\",\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message || \"Failed to update user status.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleUpdateUser = async (userId: string, userData: any) => {\r\n    // Only send allowed fields\r\n    const allowedFields = [\r\n      'firstName', 'lastName', 'email', 'role', 'status', 'department', 'permissions'\r\n    ];\r\n    const sanitizedData: any = {};\r\n    allowedFields.forEach(field => {\r\n      if (userData && userData[field] !== undefined) {\r\n        sanitizedData[field] = userData[field];\r\n      }\r\n    });\r\n    console.log('Updating user:', userId, sanitizedData); // DEBUG\r\n    try {\r\n      const updatedUser = await userService.updateUser(userId, sanitizedData);\r\n      setUsers(prev => prev.map(u => u.id === userId && updatedUser ? updatedUser : u));\r\n      toast({\r\n        title: \"User Updated\",\r\n        description: \"User details have been successfully updated.\",\r\n      });\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message || \"Failed to update user.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async (userId: string, newPassword: string) => {\r\n    try {\r\n      await userService.changeUserPassword({ userId, newPassword });\r\n      toast({\r\n        title: \"Password Reset\",\r\n        description: \"User password has been successfully reset.\",\r\n      });\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message || \"Failed to reset password.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleUpdatePermissions = async (userId: string, permissions: string[]) => {\r\n    try {\r\n      const updatedUser = await userService.updateUserPermissions(userId, permissions);\r\n      setUsers(prev => prev.map(u => u.id === userId ? updatedUser : u));\r\n      toast({\r\n        title: \"Permissions Updated\",\r\n        description: \"User permissions have been successfully updated.\",\r\n      });\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message || \"Failed to update permissions.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const availablePermissions = [\r\n    'user_management',\r\n    'system_admin',\r\n    'reports',\r\n    'workflow_management',\r\n    'salary_advances',\r\n    'leave_management',\r\n    'employee_management',\r\n    'performance_management',\r\n    'branch_management',\r\n    'leave_approval',\r\n    'salary_advance_approval',\r\n    'staff_scheduling',\r\n    'profile_view',\r\n    'leave_request',\r\n    'salary_advance_request',\r\n    'staff_coordination'\r\n  ];\r\n\r\n  const getPermissionsByRole = (role: string): string[] => {\r\n    switch (role) {\r\n      case 'admin':\r\n        return ['user_management', 'system_admin', 'reports', 'workflow_management', 'salary_advances', 'leave_management'];\r\n      case 'hr_manager':\r\n        return ['employee_management', 'leave_management', 'salary_advances', 'reports', 'performance_management'];\r\n      case 'operations_manager':\r\n        return ['branch_management', 'leave_approval', 'salary_advance_approval', 'staff_scheduling', 'reports'];\r\n      case 'employee':\r\n        return ['profile_view', 'leave_request', 'salary_advance_request'];\r\n      default:\r\n        return ['profile_view'];\r\n    }\r\n  };\r\n\r\n  // Add User logic\r\n  const validateAddUser = (data: typeof initialAddUser) => {\r\n    const errors: { [k: string]: string } = {};\r\n    if (!data.firstName.trim()) errors.firstName = 'First name is required';\r\n    if (!data.lastName.trim()) errors.lastName = 'Last name is required';\r\n    if (!data.email.trim()) errors.email = 'Email is required';\r\n    if (!data.password.trim() || data.password.length < 6) errors.password = 'Password (min 6 chars) is required';\r\n    if (!data.role) errors.role = 'Role is required';\r\n    return errors;\r\n  };\r\n\r\n  const handleAddUser = async () => {\r\n    const errors = validateAddUser(addUser);\r\n    setAddUserErrors(errors);\r\n    if (Object.keys(errors).length > 0) return;\r\n    setAddUserLoading(true);\r\n    try {\r\n      // Only create employee, backend will auto-create user\r\n      // Match the expected type for employeeService.createEmployee\r\n      await employeeService.createEmployee({\r\n        firstName: addUser.firstName.trim(),\r\n        lastName: addUser.lastName.trim(),\r\n        email: addUser.email.trim(),\r\n        position: addUser.role, // or set to a default/empty string if needed\r\n        hireDate: new Date().toISOString(),\r\n        phone: '',\r\n        department: '', // Provide a default or select value if available\r\n        branch: '',     // Provide a default or select value if available\r\n      });\r\n      // Reload users to ensure correct department/branch display\r\n      await loadData();\r\n      setAddUser(initialAddUser);\r\n      setAddUserDialogOpen(false);\r\n      setAddUserErrors({});\r\n      toast({ title: 'User Added', description: `${addUser.firstName} ${addUser.lastName} has been added.` });\r\n    } catch (error: any) {\r\n      toast({ title: 'Error', description: error.message || 'Failed to add user.', variant: 'destructive' });\r\n    } finally {\r\n      setAddUserLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper type guard for objects with a name property\r\n  function hasNameProp(obj: any): obj is { name: string } {\r\n    return obj && typeof obj === 'object' && 'name' in obj;\r\n  }\r\n\r\n  return (\r\n    <DashboardLayout title=\"User Management\">\r\n      <div className=\"space-y-6\">\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\r\n              <Users className=\"h-4 w-4 text-blue-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{userStats.totalUsers ?? users.length}</div>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\r\n              <Users className=\"h-4 w-4 text-green-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{userStats.activeUsers ?? users.filter(u => u.status === 'active').length}</div>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Administrators</CardTitle>\r\n              <Shield className=\"h-4 w-4 text-red-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{userStats.adminUsers ?? users.filter(u => u.role === 'ADMIN').length}</div>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">HR Managers</CardTitle>\r\n              <Users className=\"h-4 w-4 text-yellow-600\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{userStats.hrManagerUsers ?? users.filter(u => u.role === 'HR_MANAGER').length}</div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\r\n            <TabsTrigger value=\"roles\">Roles & Permissions</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"users\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <div>\r\n                    <CardTitle>User Management</CardTitle>\r\n                    <CardDescription>Manage system users and their access</CardDescription>\r\n                  </div>\r\n                  <Dialog open={addUserDialogOpen} onOpenChange={setAddUserDialogOpen}>\r\n                    <DialogTrigger asChild>\r\n                      <Button className=\"bg-green-600 hover:bg-green-700 text-white\">\r\n                        <UserPlus className=\"mr-2 h-4 w-4 text-white\" />\r\n                        Add User\r\n                      </Button>\r\n                    </DialogTrigger>\r\n                    <DialogContent>\r\n                      <DialogHeader>\r\n                        <DialogTitle>Add New User</DialogTitle>\r\n                        <DialogDescription>Create a new user account</DialogDescription>\r\n                      </DialogHeader>\r\n                      <div className=\"space-y-4\">\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                          <div>\r\n                            <Label htmlFor=\"firstName\">First Name</Label>\r\n                            <Input id=\"firstName\" value={addUser.firstName} onChange={e => setAddUser(a => ({ ...a, firstName: e.target.value }))} placeholder=\"Enter first name\" />\r\n                            {addUserErrors.firstName && <div className=\"text-xs text-red-500\">{addUserErrors.firstName}</div>}\r\n                          </div>\r\n                          <div>\r\n                            <Label htmlFor=\"lastName\">Last Name</Label>\r\n                            <Input id=\"lastName\" value={addUser.lastName} onChange={e => setAddUser(a => ({ ...a, lastName: e.target.value }))} placeholder=\"Enter last name\" />\r\n                            {addUserErrors.lastName && <div className=\"text-xs text-red-500\">{addUserErrors.lastName}</div>}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <Label htmlFor=\"email\">Email</Label>\r\n                          <Input id=\"email\" type=\"email\" value={addUser.email} onChange={e => setAddUser(a => ({ ...a, email: e.target.value }))} placeholder=\"Enter email address\" />\r\n                          {addUserErrors.email && <div className=\"text-xs text-red-500\">{addUserErrors.email}</div>}\r\n                        </div>\r\n                        <div>\r\n                          <Label htmlFor=\"password\">Password</Label>\r\n                          <Input id=\"password\" type=\"password\" value={addUser.password} onChange={e => setAddUser(a => ({ ...a, password: e.target.value }))} placeholder=\"Set initial password\" />\r\n                          {addUserErrors.password && <div className=\"text-xs text-red-500\">{addUserErrors.password}</div>}\r\n                        </div>\r\n                        <div>\r\n                          <Label htmlFor=\"role\">Role</Label>\r\n                          <Select value={addUser.role} onValueChange={val => setAddUser(a => ({ ...a, role: val }))}>\r\n                            <SelectTrigger>\r\n                              <SelectValue placeholder=\"Select role\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              {roles.map(role => (\r\n                                <SelectItem key={role.id} value={role.id}>{role.name}</SelectItem>\r\n                              ))}\r\n                            </SelectContent>\r\n                          </Select>\r\n                          {addUserErrors.role && <div className=\"text-xs text-red-500\">{addUserErrors.role}</div>}\r\n                        </div>\r\n                        {/* Department and Branch fields removed */}\r\n                        <Button className=\"w-full\" onClick={handleAddUser} disabled={addUserLoading}>\r\n                          {addUserLoading ? <Loader2 className=\"animate-spin h-4 w-4 mr-2\" /> : null} Create User\r\n                        </Button>\r\n                      </div>\r\n                    </DialogContent>\r\n                  </Dialog>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {/* Search and Filter */}\r\n                <div className=\"flex gap-4 mb-6\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"relative\">\r\n                      <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n                      <Input\r\n                        placeholder=\"Search users...\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                        className=\"pl-9\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <Select value={filterRole} onValueChange={setFilterRole}>\r\n                    <SelectTrigger className=\"w-48\">\r\n                      <SelectValue placeholder=\"Filter by role\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">All Roles</SelectItem>\r\n                      {roles\r\n                        .filter(role => role && role.id && safeToString(role.id).trim() && role.name && role.name.trim())\r\n                        .map(role => (\r\n                          <SelectItem key={safeToString(role.id)} value={safeToString(role.id)}>\r\n                            {role.name}\r\n                          </SelectItem>\r\n                        ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  {/* Department filter removed due to missing departments API */}\r\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\r\n                    <SelectTrigger className=\"w-48\">\r\n                      <SelectValue placeholder=\"Filter by status\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">All Status</SelectItem>\r\n                      <SelectItem value=\"active\">Active</SelectItem>\r\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                {/* Users Table */}\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>User</TableHead>\r\n                      <TableHead>Email</TableHead>\r\n                      <TableHead>Role</TableHead>\r\n                      {/* Department and Branch columns removed */}\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Last Login</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {filteredUsers.map((user) => (\r\n                      user ? (\r\n                        <TableRow key={user?.id || Math.random()}>\r\n                          <TableCell>\r\n                            <div>\r\n                              <div className=\"font-medium\">{user?.firstName || ''} {user?.lastName || ''}</div>\r\n                              <div className=\"text-sm text-muted-foreground\">{user?.employeeId || ''}</div>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell>{user?.email || ''}</TableCell>\r\n                          <TableCell>\r\n                            <Badge className={getRoleBadgeColor(user?.role || '')}>\r\n                              {(user?.role || '').replace('_', ' ')}\r\n                            </Badge>\r\n                          </TableCell>\r\n                          {/* Department and Branch cells removed */}\r\n                          <TableCell>\r\n                          <Badge className={getStatusBadgeColor(user?.status || '')}>\r\n                              {user?.status ? user.status.charAt(0) + user.status.slice(1).toLowerCase() : ''}\r\n                          </Badge>\r\n                          </TableCell>\r\n                          <TableCell className=\"text-sm\">{user.lastLogin}</TableCell>\r\n                          <TableCell>\r\n                            <div className=\"flex gap-2\">\r\n                              {/* Edit User Dialog Trigger */}\r\n                              <Dialog>\r\n                                <DialogTrigger asChild>\r\n                                  <Button variant=\"outline\" size=\"sm\" className=\"hover:bg-blue-100\">\r\n                                    <Edit className=\"h-4 w-4 text-blue-600\" />\r\n                                  </Button>\r\n                                </DialogTrigger>\r\n                                <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\r\n                                  <DialogHeader>\r\n                                    <DialogTitle>Edit User: {user.firstName} {user.lastName}</DialogTitle>\r\n                                    <DialogDescription>Update user details, role, permissions, and password.</DialogDescription>\r\n                                  </DialogHeader>\r\n                                  <div className=\"space-y-6\">\r\n                                    {/* Basic User Info */}\r\n                                    <div className=\"space-y-4\">\r\n                                      <h4 className=\"font-semibold\">Basic Information</h4>\r\n                                      <div className=\"grid grid-cols-2 gap-4\">\r\n                                        <div>\r\n                                          <Label htmlFor={`edit-firstName-${user.id}`}>First Name</Label>\r\n                                          <Input id={`edit-firstName-${user.id}`} defaultValue={user.firstName} onChange={e => setEditFields(f => ({ ...f, [user.id]: { ...f[user.id], firstName: e.target.value } }))} />\r\n                                        </div>\r\n                                        <div>\r\n                                          <Label htmlFor={`edit-lastName-${user.id}`}>Last Name</Label>\r\n                                          <Input id={`edit-lastName-${user.id}`} defaultValue={user.lastName} onChange={e => setEditFields(f => ({ ...f, [user.id]: { ...f[user.id], lastName: e.target.value } }))} />\r\n                                        </div>\r\n                                      </div>\r\n                                      <div>\r\n                                        <Label htmlFor={`edit-email-${user.id}`}>Email</Label>\r\n                                        <Input id={`edit-email-${user.id}`} type=\"email\" defaultValue={user.email} onChange={e => setEditFields(f => ({ ...f, [user.id]: { ...f[user.id], email: e.target.value } }))} />\r\n                                      </div>\r\n                                      <div className=\"grid grid-cols-2 gap-4\">\r\n                                        {/* Department and Branch fields removed from edit dialog */}\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    {/* Role & Status Management */}\r\n                                    <div className=\"space-y-4 border-t pt-4\">\r\n                                      <h4 className=\"font-semibold\">Role & Status</h4>\r\n                                      <div className=\"grid grid-cols-2 gap-4\">\r\n                                        <div>\r\n                                          <Label htmlFor={`edit-role-${user.id}`}>Role</Label>\r\n                                          <Select defaultValue={user.role} onValueChange={val => setEditFields(f => ({ ...f, [user.id]: { ...f[user.id], role: val } }))}>\r\n                                            <SelectTrigger id={`edit-role-${user.id}`}>\r\n                                              <SelectValue placeholder=\"Select role\" />\r\n                                            </SelectTrigger>\r\n                                            <SelectContent>\r\n                                              <SelectItem value=\"ADMIN\">Administrator</SelectItem>\r\n                                              <SelectItem value=\"HR_MANAGER\">HR Manager</SelectItem>\r\n                                              <SelectItem value=\"OPERATIONS_MANAGER\">Operations Manager</SelectItem>\r\n                                              <SelectItem value=\"EMPLOYEE\">Employee</SelectItem>\r\n                                            </SelectContent>\r\n                                          </Select>\r\n                                        </div>\r\n                                        <div>\r\n                                          <Label htmlFor={`edit-status-${user.id}`}>Status</Label>\r\n                                          <Select defaultValue={user.status} onValueChange={val => setEditFields(f => ({ ...f, [user.id]: { ...f[user.id], status: val } }))}>\r\n                                            <SelectTrigger id={`edit-status-${user.id}`}>\r\n                                              <SelectValue placeholder=\"Select status\" />\r\n                                            </SelectTrigger>\r\n                                            <SelectContent>\r\n                                              <SelectItem value=\"active\">Active</SelectItem>\r\n                                              <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                                              <SelectItem value=\"suspended\">Suspended</SelectItem>\r\n                                            </SelectContent>\r\n                                          </Select>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    {/* Permissions Management */}\r\n                                    <div className=\"space-y-4 border-t pt-4\">\r\n                                      <div className=\"flex items-center justify-between\">\r\n                                        <h4 className=\"font-semibold\">Permissions</h4>\r\n                                        <Button\r\n                                          variant=\"outline\"\r\n                                          size=\"sm\"\r\n                                          onClick={() => {\r\n                                            const rolePermissions = getPermissionsByRole(user.role);\r\n                                            // TODO: Update permissions checkboxes based on role\r\n                                          }}\r\n                                        >\r\n                                          <Settings className=\"h-4 w-4 mr-1\" />\r\n                                          Set by Role\r\n                                        </Button>\r\n                                      </div>\r\n                                      <div className=\"grid grid-cols-2 gap-2 max-h-48 overflow-y-auto border rounded p-3\">\r\n                                        {availablePermissions.map((permission) => (\r\n                                          <div key={permission} className=\"flex items-center space-x-2\">\r\n                                            <Checkbox\r\n                                              id={`permission-${user.id}-${permission}`}\r\n                                              defaultChecked={user.permissions?.includes(permission)}\r\n                                            />\r\n                                            <Label\r\n                                              htmlFor={`permission-${user.id}-${permission}`}\r\n                                              className=\"text-sm font-normal cursor-pointer\"\r\n                                            >\r\n                                              {permission.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n                                            </Label>\r\n                                          </div>\r\n                                        ))}\r\n                                      </div>\r\n                                      <div className=\"text-xs text-muted-foreground\">\r\n                                        Current permissions: {user.permissions?.length || 0} selected\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    {/* Password Reset Section */}\r\n                                    <div className=\"border-t pt-4 space-y-4\">\r\n                                      <h4 className=\"font-semibold flex items-center\">\r\n                                        <Key className=\"h-4 w-4 mr-2\" />\r\n                                        Password Management\r\n                                      </h4>\r\n                                      <div className=\"space-y-2\">\r\n                                        <Label htmlFor={`new-password-${user.id}`}>New Password</Label>\r\n                                        <div className=\"relative\">\r\n                                          <Input\r\n                                            id={`new-password-${user.id}`}\r\n                                            type={passwordVisibility[user.id]?.new ? \"text\" : \"password\"}\r\n                                            placeholder=\"Enter new password\"\r\n                                            onChange={e => setPasswordFields(f => ({ ...f, [user.id]: { ...f[user.id], newPassword: e.target.value } }))}\r\n                                            value={passwordFields[user.id]?.newPassword || \"\"}\r\n                                          />\r\n                                          <Button\r\n                                            type=\"button\"\r\n                                            variant=\"ghost\"\r\n                                            size=\"icon\"\r\n                                            className=\"absolute right-2 top-2\"\r\n                                            onClick={() => setPasswordVisibility(v => ({ ...v, [user.id]: { ...v[user.id], new: !v[user.id]?.new } }))}\r\n                                            tabIndex={-1}\r\n                                          >\r\n                                            {passwordVisibility[user.id]?.new ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n                                          </Button>\r\n                                        </div>\r\n                                        <Label htmlFor={`confirm-password-${user.id}`}>Confirm Password</Label>\r\n                                        <div className=\"relative\">\r\n                                          <Input\r\n                                            id={`confirm-password-${user.id}`}\r\n                                            type={passwordVisibility[user.id]?.confirm ? \"text\" : \"password\"}\r\n                                            placeholder=\"Confirm new password\"\r\n                                            onChange={e => setPasswordFields(f => ({ ...f, [user.id]: { ...f[user.id], confirmPassword: e.target.value } }))}\r\n                                            value={passwordFields[user.id]?.confirmPassword || \"\"}\r\n                                          />\r\n                                          <Button\r\n                                            type=\"button\"\r\n                                            variant=\"ghost\"\r\n                                            size=\"icon\"\r\n                                            className=\"absolute right-2 top-2\"\r\n                                            onClick={() => setPasswordVisibility(v => ({ ...v, [user.id]: { ...v[user.id], confirm: !v[user.id]?.confirm } }))}\r\n                                            tabIndex={-1}\r\n                                          >\r\n                                            {passwordVisibility[user.id]?.confirm ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n                                          </Button>\r\n                                        </div>\r\n                                        <Button variant=\"secondary\" size=\"sm\" className=\"w-full\" onClick={() => handleResetPassword(user.id, passwordFields[user.id]?.newPassword)}>\r\n                                          Reset Password\r\n                                        </Button>\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    {/* Action Buttons */}\r\n                                    <div className=\"flex gap-2 pt-4\">\r\n                                      <Button className=\"flex-1\" onClick={() => handleUpdateUser(user.id, editFields[user.id])}>\r\n                                        Save All Changes\r\n                                      </Button>\r\n                                      <Button\r\n                                        variant=\"outline\"\r\n                                        onClick={() => handleUpdatePermissions(user.id, user.permissions || [])}\r\n                                      >\r\n                                        Update Permissions Only\r\n                                      </Button>\r\n                                    </div>\r\n                                  </div>\r\n                                </DialogContent>\r\n                              </Dialog>\r\n\r\n                              <Button\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleToggleUserStatus(user.id, user.status)} className={user.status === 'active' ? 'hover:bg-yellow-100' : 'hover:bg-green-100'}>\r\n                                {user.status === 'active' ? 'Deactivate' : 'Activate'}\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleDeleteUser(user.id)} className=\"hover:bg-red-100\">\r\n                                <Trash2 className=\"h-4 w-4 text-red-600\" />\r\n                              </Button>\r\n                            </div>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ) : null\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n\r\n          <TabsContent value=\"roles\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Roles & Permissions</CardTitle>\r\n                <CardDescription>Manage system roles and their permissions for the nightclub/restaurant HRMS</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-6\">\r\n                  {/* Role Overview Cards */}\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    {[\r\n                      {\r\n                        role: 'ADMIN',\r\n                        name: 'Administrator',\r\n                        description: 'Full system access and user management',\r\n                        userCount: users.filter(u => u.role === 'ADMIN').length,\r\n                        permissions: getPermissionsByRole('admin')\r\n                      },\r\n                      {\r\n                        role: 'HR_MANAGER',\r\n                        name: 'HR Manager',\r\n                        description: 'Employee management and HR operations',\r\n                        userCount: users.filter(u => u.role === 'HR_MANAGER').length,\r\n                        permissions: getPermissionsByRole('hr_manager')\r\n                      },\r\n                      {\r\n                        role: 'OPERATIONS_MANAGER',\r\n                        name: 'Operations Manager',\r\n                        description: 'Branch management and operational oversight',\r\n                        userCount: users.filter(u => u.role === 'OPERATIONS_MANAGER').length,\r\n                        permissions: getPermissionsByRole('operations_manager')\r\n                      },\r\n                      {\r\n                        role: 'EMPLOYEE',\r\n                        name: 'Employee',\r\n                        description: 'Basic employee access and self-service',\r\n                        userCount: users.filter(u => u.role === 'EMPLOYEE').length,\r\n                        permissions: getPermissionsByRole('employee')\r\n                      }\r\n                    ].map((roleInfo) => (\r\n                      <Card key={roleInfo.role} className=\"border-2\">\r\n                        <CardHeader className=\"pb-3\">\r\n                          <div className=\"flex justify-between items-start\">\r\n                            <div>\r\n                              <CardTitle className=\"text-lg\">{roleInfo.name}</CardTitle>\r\n                              <Badge className={getRoleBadgeColor(roleInfo.role)} variant=\"secondary\">\r\n                                {roleInfo.userCount} users\r\n                              </Badge>\r\n                            </div>\r\n                            <Dialog>\r\n                              <DialogTrigger asChild>\r\n                                <Button variant=\"outline\" size=\"sm\">\r\n                                  <Settings className=\"h-4 w-4 mr-1\" />\r\n                                  Manage\r\n                                </Button>\r\n                              </DialogTrigger>\r\n                              <DialogContent className=\"max-w-2xl\">\r\n                                <DialogHeader>\r\n                                  <DialogTitle>Manage {roleInfo.name} Permissions</DialogTitle>\r\n                                  <DialogDescription>\r\n                                    Configure permissions for {roleInfo.name} role in the nightclub/restaurant HRMS\r\n                                  </DialogDescription>\r\n                                </DialogHeader>\r\n                                <div className=\"space-y-4\">\r\n                                  <div className=\"text-sm text-muted-foreground\">\r\n                                    {roleInfo.description}\r\n                                  </div>\r\n                                  <div className=\"space-y-3\">\r\n                                    <h4 className=\"font-semibold\">Current Permissions</h4>\r\n                                    <div className=\"grid grid-cols-2 gap-2 max-h-64 overflow-y-auto border rounded p-3\">\r\n                                      {availablePermissions.map((permission) => (\r\n                                        <div key={permission} className=\"flex items-center space-x-2\">\r\n                                          <Checkbox\r\n                                            id={`role-permission-${roleInfo.role}-${permission}`}\r\n                                            defaultChecked={roleInfo.permissions.includes(permission)}\r\n                                          />\r\n                                          <Label\r\n                                            htmlFor={`role-permission-${roleInfo.role}-${permission}`}\r\n                                            className=\"text-sm font-normal cursor-pointer\"\r\n                                          >\r\n                                            {permission.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n                                          </Label>\r\n                                        </div>\r\n                                      ))}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"flex justify-between items-center pt-4 border-t\">\r\n                                    <div className=\"text-sm text-muted-foreground\">\r\n                                      {roleInfo.permissions.length} permissions assigned\r\n                                    </div>\r\n                                    <Button onClick={() => {\r\n                                      toast({\r\n                                        title: \"Role Updated\",\r\n                                        description: `Permissions for ${roleInfo.name} have been updated.`,\r\n                                      });\r\n                                    }}>\r\n                                      Save Changes\r\n                                    </Button>\r\n                                  </div>\r\n                                </div>\r\n                              </DialogContent>\r\n                            </Dialog>\r\n                          </div>\r\n                        </CardHeader>\r\n                        <CardContent>\r\n                          <p className=\"text-sm text-muted-foreground mb-3\">{roleInfo.description}</p>\r\n                          <div className=\"space-y-2\">\r\n                            <div className=\"text-sm font-medium\">Key Permissions:</div>\r\n                            <div className=\"flex flex-wrap gap-1\">\r\n                              {roleInfo.permissions.slice(0, 4).map((permission) => (\r\n                                <Badge key={permission} variant=\"outline\" className=\"text-xs\">\r\n                                  {permission.replace('_', ' ')}\r\n                                </Badge>\r\n                              ))}\r\n                              {roleInfo.permissions.length > 4 && (\r\n                                <Badge variant=\"outline\" className=\"text-xs\">\r\n                                  +{roleInfo.permissions.length - 4} more\r\n                                </Badge>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    ))}\r\n                  </div>\r\n\r\n                  {/* Permission Matrix */}\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle>Permission Matrix</CardTitle>\r\n                      <CardDescription>Overview of permissions across all roles</CardDescription>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"overflow-x-auto\">\r\n                        <Table>\r\n                          <TableHeader>\r\n                            <TableRow>\r\n                              <TableHead>Permission</TableHead>\r\n                              <TableHead className=\"text-center\">Admin</TableHead>\r\n                              <TableHead className=\"text-center\">HR Manager</TableHead>\r\n                              <TableHead className=\"text-center\">Operations Manager</TableHead>\r\n                              <TableHead className=\"text-center\">Employee</TableHead>\r\n                            </TableRow>\r\n                          </TableHeader>\r\n                          <TableBody>\r\n                            {availablePermissions.map((permission) => (\r\n                              <TableRow key={permission}>\r\n                                <TableCell className=\"font-medium\">\r\n                                  {permission.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n                                </TableCell>\r\n                                <TableCell className=\"text-center\">\r\n                                  {getPermissionsByRole('admin').includes(permission) ? (\r\n                                    <UserCheck className=\"h-4 w-4 text-green-600 mx-auto\" />\r\n                                  ) : (\r\n                                    <UserX className=\"h-4 w-4 text-gray-300 mx-auto\" />\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell className=\"text-center\">\r\n                                  {getPermissionsByRole('hr_manager').includes(permission) ? (\r\n                                    <UserCheck className=\"h-4 w-4 text-green-600 mx-auto\" />\r\n                                  ) : (\r\n                                    <UserX className=\"h-4 w-4 text-gray-300 mx-auto\" />\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell className=\"text-center\">\r\n                                  {getPermissionsByRole('operations_manager').includes(permission) ? (\r\n                                    <UserCheck className=\"h-4 w-4 text-green-600 mx-auto\" />\r\n                                  ) : (\r\n                                    <UserX className=\"h-4 w-4 text-gray-300 mx-auto\" />\r\n                                  )}\r\n                                </TableCell>\r\n                                <TableCell className=\"text-center\">\r\n                                  {getPermissionsByRole('employee').includes(permission) ? (\r\n                                    <UserCheck className=\"h-4 w-4 text-green-600 mx-auto\" />\r\n                                  ) : (\r\n                                    <UserX className=\"h-4 w-4 text-gray-300 mx-auto\" />\r\n                                  )}\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default UserManagement;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\admin\\WorkflowDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'workflows' array makes the dependencies of useMemo Hook (at line 91) change on every render. To fix this, wrap the initialization of 'workflows' in its own useMemo() Hook.","line":70,"column":9,"nodeType":"VariableDeclarator","endLine":70,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from 'react';\r\nimport { DashboardLayout } from '@/components/layout/DashboardLayout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Activity, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  Users, \r\n  Calendar, \r\n  DollarSign,\r\n  TrendingUp,\r\n  AlertTriangle\r\n} from 'lucide-react';\r\nimport WorkflowStatusTracker from '@/components/WorkflowStatusTracker';\r\nimport { api } from '@/services/api';\r\n\r\nconst WorkflowDashboard = () => {\r\n  const [leaveWorkflows, setLeaveWorkflows] = useState([]);\r\n  const [salaryAdvanceWorkflows, setSalaryAdvanceWorkflows] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWorkflows = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Fetch leave requests\r\n        const leaveRes = await api.leave.getLeaveRequests({ status: 'pending' });\r\n        // Fetch salary advance requests\r\n        const salaryRes = await api.salaryAdvances.getSalaryAdvanceRequests({ status: 'pending' });\r\n        setLeaveWorkflows(\r\n          (leaveRes?.data || []).map((item) => ({\r\n            id: item.id,\r\n            type: 'leave',\r\n            requestId: item.id,\r\n            currentStep: item.status,\r\n            status: item.status,\r\n            assignedTo: item.status === 'pending' ? 'operations' : '',\r\n            createdAt: item.createdAt,\r\n            updatedAt: item.updatedAt,\r\n          }))\r\n        );\r\n        setSalaryAdvanceWorkflows(\r\n          (salaryRes?.data || []).map((item) => ({\r\n            id: item.id,\r\n            type: 'salary_advance',\r\n            requestId: item.id,\r\n            currentStep: item.status,\r\n            status: item.status,\r\n            assignedTo: (item.status as string) === 'pending_ops' ? 'operations' : (item.status as string) === 'pending_hr' ? 'hr' : '',\r\n            createdAt: item.createdAt,\r\n            updatedAt: item.updatedAt,\r\n          }))\r\n        );\r\n      } catch (error) {\r\n        setLeaveWorkflows([]);\r\n        setSalaryAdvanceWorkflows([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchWorkflows();\r\n  }, []);\r\n\r\n  const workflows = [...leaveWorkflows, ...salaryAdvanceWorkflows];\r\n\r\n  const stats = useMemo(() => {\r\n    // Only count pending_ops for leave, pending_ops and pending_hr for salary advance\r\n    const totalActive = workflows.filter(w => !['approved', 'rejected', 'disbursed'].includes(w.status)).length;\r\n    const pendingOps = workflows.filter(w => w.status === 'pending_ops').length;\r\n    // Only salary advances can be pending_hr now\r\n    const pendingHR = salaryAdvanceWorkflows.filter(w => w.status === 'pending_hr').length;\r\n    const completedToday = workflows.filter(w => {\r\n      const updatedDate = new Date(w.updatedAt);\r\n      const today = new Date();\r\n      return updatedDate.toDateString() === today.toDateString() && \r\n             ['approved', 'rejected', 'disbursed'].includes(w.status);\r\n    }).length;\r\n\r\n    return {\r\n      totalActive,\r\n      pendingOps,\r\n      pendingHR,\r\n      completedToday\r\n    };\r\n  }, [workflows, salaryAdvanceWorkflows]);\r\n\r\n  // --- Workflow Performance Calculations ---\r\n  const getAverageProcessingTime = (workflows) => {\r\n    if (!workflows.length) return 0;\r\n    // Only consider completed workflows\r\n    const completed = workflows.filter(w => ['approved', 'rejected', 'disbursed'].includes(w.status));\r\n    if (!completed.length) return 0;\r\n    const totalMs = completed.reduce((sum, w) => {\r\n      const created = new Date(w.createdAt).getTime();\r\n      const updated = new Date(w.updatedAt).getTime();\r\n      return sum + Math.max(0, updated - created);\r\n    }, 0);\r\n    const avgMs = totalMs / completed.length;\r\n    return avgMs / (1000 * 60 * 60 * 24); // days\r\n  };\r\n\r\n  const getCompletionRate = (workflows) => {\r\n    if (!workflows.length) return 0;\r\n    const completed = workflows.filter(w => ['approved', 'rejected', 'disbursed'].includes(w.status)).length;\r\n    return Math.round((completed / workflows.length) * 100);\r\n  };\r\n\r\n  const leaveAvgDays = getAverageProcessingTime(leaveWorkflows).toFixed(1);\r\n  const leaveCompletion = getCompletionRate(leaveWorkflows);\r\n  const salaryAvgDays = getAverageProcessingTime(salaryAdvanceWorkflows).toFixed(1);\r\n  const salaryCompletion = getCompletionRate(salaryAdvanceWorkflows);\r\n\r\n  const getWorkflowTypeIcon = (type: string) => {\r\n    return type === 'leave' ? <Calendar className=\"h-4 w-4\" /> : <DollarSign className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending_ops':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'approved_ops':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'pending_hr':\r\n        return 'bg-purple-100 text-purple-800';\r\n      case 'approved':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'rejected':\r\n        return 'bg-red-100 text-red-800';\r\n      case 'disbursed':\r\n        return 'bg-emerald-100 text-emerald-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const formatTimeAgo = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    return `${Math.floor(diffInHours / 24)}d ago`;\r\n  };\r\n\r\n  const overviewStats = [\r\n    {\r\n      title: 'Active Workflows',\r\n      value: stats.totalActive.toString(),\r\n      description: 'Currently in progress',\r\n      icon: Activity,\r\n      color: 'text-blue-600'\r\n    },\r\n    {\r\n      title: 'Pending Operations',\r\n      value: stats.pendingOps.toString(),\r\n      description: 'Awaiting ops review',\r\n      icon: Clock,\r\n      color: 'text-yellow-600'\r\n    },\r\n    // Only show Pending HR if there are salary advances in that state\r\n    ...(stats.pendingHR > 0 ? [{\r\n      title: 'Pending HR',\r\n      value: stats.pendingHR.toString(),\r\n      description: 'Awaiting HR review (salary advance only)',\r\n      icon: Users,\r\n      color: 'text-purple-600'\r\n    }] : []),\r\n    {\r\n      title: 'Completed Today',\r\n      value: stats.completedToday.toString(),\r\n      description: 'Finished workflows',\r\n      icon: CheckCircle,\r\n      color: 'text-green-600'\r\n    }\r\n  ];\r\n\r\n  // --- Additional Calculations for Processing Trends and Bottlenecks ---\r\n  // Helper to get start of week (Monday)\r\n  const getStartOfWeek = (date) => {\r\n    const d = new Date(date);\r\n    const day = d.getDay();\r\n    const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n    return new Date(d.setDate(diff));\r\n  };\r\n  // Helper to get start of last week\r\n  const getStartOfLastWeek = (date) => {\r\n    const startOfThisWeek = getStartOfWeek(date);\r\n    return new Date(startOfThisWeek.setDate(startOfThisWeek.getDate() - 7));\r\n  };\r\n  // Get workflows completed in a given week\r\n  const getCompletedInWeek = (workflows, weekStart) => {\r\n    const weekEnd = new Date(weekStart);\r\n    weekEnd.setDate(weekEnd.getDate() + 7);\r\n    return workflows.filter(w => {\r\n      const updated = new Date(w.updatedAt);\r\n      return (\r\n        ['approved', 'rejected', 'disbursed'].includes(w.status) &&\r\n        updated >= weekStart && updated < weekEnd\r\n      );\r\n    });\r\n  };\r\n  // Calculate processing time for a set of workflows\r\n  const getAvgProcessingTimeFor = (workflows) => {\r\n    if (!workflows.length) return 0;\r\n    const totalMs = workflows.reduce((sum, w) => {\r\n      const created = new Date(w.createdAt).getTime();\r\n      const updated = new Date(w.updatedAt).getTime();\r\n      return sum + Math.max(0, updated - created);\r\n    }, 0);\r\n    return totalMs / workflows.length / (1000 * 60 * 60 * 24); // days\r\n  };\r\n  // Calculate approval rate for a set of workflows\r\n  const getApprovalRateFor = (workflows) => {\r\n    if (!workflows.length) return 0;\r\n    const approved = workflows.filter(w => w.status === 'approved' || w.status === 'disbursed').length;\r\n    return Math.round((approved / workflows.length) * 100);\r\n  };\r\n  // Calculate overdue workflows (pending for more than 3 days)\r\n  const overdueThresholdDays = 3;\r\n  const overdueCount = workflows.filter(w => {\r\n    if (['approved', 'rejected', 'disbursed'].includes(w.status)) return false;\r\n    const created = new Date(w.createdAt);\r\n    const now = new Date();\r\n    const diffDays = (now.getTime() - created.getTime()) / (1000 * 60 * 60 * 24);\r\n    return diffDays > overdueThresholdDays;\r\n  }).length;\r\n\r\n  // Calculate trends for this week vs last week\r\n  const now = new Date();\r\n  const startOfThisWeek = getStartOfWeek(now);\r\n  const startOfLastWeek = getStartOfLastWeek(now);\r\n  const completedThisWeek = getCompletedInWeek(workflows, startOfThisWeek);\r\n  const completedLastWeek = getCompletedInWeek(workflows, startOfLastWeek);\r\n  const avgTimeThisWeek = getAvgProcessingTimeFor(completedThisWeek);\r\n  const avgTimeLastWeek = getAvgProcessingTimeFor(completedLastWeek);\r\n  let percentFaster = 0;\r\n  if (avgTimeLastWeek > 0 && avgTimeThisWeek > 0) {\r\n    percentFaster = Math.round(((avgTimeLastWeek - avgTimeThisWeek) / avgTimeLastWeek) * 100);\r\n  }\r\n  const approvalRate = getApprovalRateFor(workflows);\r\n  const avgProcessingTime = getAverageProcessingTime(workflows).toFixed(1);\r\n\r\n  return (\r\n    <DashboardLayout title=\"Workflow Management\">\r\n      <div className=\"space-y-6\">\r\n        {/* Overview Stats */}\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          {overviewStats.map((stat) => (\r\n            <Card key={stat.title}>\r\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                <CardTitle className=\"text-sm font-medium\">{stat.title}</CardTitle>\r\n                <stat.icon className={`h-4 w-4 ${stat.color}`} />\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\r\n                <p className=\"text-xs text-muted-foreground\">{stat.description}</p>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Workflow Performance Chart */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Workflow Performance</CardTitle>\r\n            <CardDescription>Average processing time and completion rates</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"space-y-1\">\r\n                  <p className=\"text-sm font-medium\">Leave Requests</p>\r\n                  <p className=\"text-xs text-muted-foreground\">Avg. {leaveAvgDays} days processing time</p>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Progress value={leaveCompletion} className=\"w-20\" />\r\n                  <span className=\"text-sm font-medium\">{leaveCompletion}%</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"space-y-1\">\r\n                  <p className=\"text-sm font-medium\">Salary Advances</p>\r\n                  <p className=\"text-xs text-muted-foreground\">Avg. {salaryAvgDays} days processing time</p>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Progress value={salaryCompletion} className=\"w-20\" />\r\n                  <span className=\"text-sm font-medium\">{salaryCompletion}%</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Active Workflows */}\r\n        <Tabs defaultValue=\"all\" className=\"space-y-4\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"all\">All Workflows ({workflows.length})</TabsTrigger>\r\n            <TabsTrigger value=\"leave\">Leave Requests ({leaveWorkflows.length})</TabsTrigger>\r\n            <TabsTrigger value=\"salary\">Salary Advances ({salaryAdvanceWorkflows.length})</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"all\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>All Active Workflows</CardTitle>\r\n                <CardDescription>Monitor all ongoing workflow processes</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Type</TableHead>\r\n                      <TableHead>Request ID</TableHead>\r\n                      <TableHead>Current Step</TableHead>\r\n                      <TableHead>Assigned To</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Created</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {workflows.map((workflow) => (\r\n                      <TableRow key={workflow.id}>\r\n                        <TableCell>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {getWorkflowTypeIcon(workflow.type)}\r\n                            <span className=\"capitalize\">{workflow.type.replace('_', ' ')}</span>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell className=\"font-medium\">#{workflow.requestId}</TableCell>\r\n                        <TableCell className=\"capitalize\">{workflow.currentStep.replace('_', ' ')}</TableCell>\r\n                        <TableCell className=\"capitalize\">{workflow.assignedTo?.replace('_', ' ')}</TableCell>\r\n                        <TableCell>\r\n                          <Badge className={getStatusColor(workflow.status)}>\r\n                            {workflow.status.replace('_', ' ')}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>{formatTimeAgo(workflow.createdAt)}</TableCell>\r\n                        <TableCell>\r\n                          <Button variant=\"outline\" size=\"sm\">\r\n                            View Details\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n                {workflows.length === 0 && (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    No active workflows found\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"leave\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Leave Request Workflows</CardTitle>\r\n                <CardDescription>Track leave request processing</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Request ID</TableHead>\r\n                      <TableHead>Current Step</TableHead>\r\n                      <TableHead>Assigned To</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Created</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {leaveWorkflows.map((workflow) => (\r\n                      <TableRow key={workflow.id}>\r\n                        <TableCell className=\"font-medium\">#{workflow.requestId}</TableCell>\r\n                        <TableCell className=\"capitalize\">{workflow.currentStep.replace('_', ' ')}</TableCell>\r\n                        <TableCell className=\"capitalize\">{workflow.assignedTo?.replace('_', ' ')}</TableCell>\r\n                        <TableCell>\r\n                          <Badge className={getStatusColor(workflow.status)}>\r\n                            {workflow.status.replace('_', ' ')}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>{formatTimeAgo(workflow.createdAt)}</TableCell>\r\n                        <TableCell>\r\n                          <Button variant=\"outline\" size=\"sm\">\r\n                            View Details\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n                {leaveWorkflows.length === 0 && (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    No active leave workflows found\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"salary\" className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Salary Advance Workflows</CardTitle>\r\n                <CardDescription>Track salary advance processing</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Request ID</TableHead>\r\n                      <TableHead>Current Step</TableHead>\r\n                      <TableHead>Assigned To</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Created</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {salaryAdvanceWorkflows.map((workflow) => (\r\n                      <TableRow key={workflow.id}>\r\n                        <TableCell className=\"font-medium\">#{workflow.requestId}</TableCell>\r\n                        <TableCell className=\"capitalize\">{workflow.currentStep.replace('_', ' ')}</TableCell>\r\n                        <TableCell className=\"capitalize\">{workflow.assignedTo?.replace('_', ' ')}</TableCell>\r\n                        <TableCell>\r\n                          <Badge className={getStatusColor(workflow.status)}>\r\n                            {workflow.status.replace('_', ' ')}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>{formatTimeAgo(workflow.createdAt)}</TableCell>\r\n                        <TableCell>\r\n                          <Button variant=\"outline\" size=\"sm\">\r\n                            View Details\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n                {salaryAdvanceWorkflows.length === 0 && (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    No active salary advance workflows found\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        {/* Workflow Insights */}\r\n        <div className=\"grid gap-4 md:grid-cols-2\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <TrendingUp className=\"h-5 w-5\" />\r\n                Processing Trends\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm\">This Week</span>\r\n                  <span className=\"text-sm font-medium\">{percentFaster > 0 ? `+${percentFaster}% faster` : percentFaster < 0 ? `${percentFaster}% slower` : 'No change'}</span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm\">Approval Rate</span>\r\n                  <span className=\"text-sm font-medium\">{approvalRate}%</span>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm\">Avg. Processing Time</span>\r\n                  <span className=\"text-sm font-medium\">{avgProcessingTime} days</span>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <AlertTriangle className=\"h-5 w-5\" />\r\n                Bottlenecks\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-3\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm\">HR Review Queue</span>\r\n                  <Badge variant=\"secondary\">{stats.pendingHR} pending</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm\">Operations Queue</span>\r\n                  <Badge variant=\"secondary\">{stats.pendingOps} pending</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span className=\"text-sm\">Overdue Reviews</span>\r\n                  <Badge variant=\"destructive\">{overdueCount} overdue</Badge>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default WorkflowDashboard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\auth\\Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\employee\\EmployeeDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\employee\\EmployeePayroll.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\employee\\EmployeeProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\employee\\LeaveRequests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\employee\\SalaryAdvanceRequest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\BranchManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\DepartmentManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'usersList' array makes the dependencies of useMemo Hook (at line 156) change on every render. To fix this, wrap the initialization of 'usersList' in its own useMemo() Hook.","line":94,"column":7,"nodeType":"VariableDeclarator","endLine":94,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DashboardLayout } from '@/components/layout/DashboardLayout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { useState, useMemo } from 'react';\r\nimport { Plus, Edit, Trash2, Building2, Users, DollarSign, Loader2, AlertTriangle } from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { Department } from '@/types/department';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { canManageDepartments } from '@/utils/permissions';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { departmentService, employeeService } from '@/services/api';\r\nimport { userService } from '@/services/api/user.service';\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\r\nimport { extractDataFromResponse } from '@/utils/api-helpers';\r\nimport { User } from '@/types/types';\r\n\r\nexport interface CreateDepartmentRequest {\r\n  name: string;\r\n  description?: string;\r\n  managerId?: string;\r\n}\r\n\r\nexport interface UpdateDepartmentRequest {\r\n  name?: string;\r\n  description?: string;\r\n  managerId?: string;\r\n  status?: string;\r\n}\r\n\r\nconst DepartmentManagement = () => {\r\n  const { toast } = useToast();\r\n  const { user } = useAuth();\r\n  const queryClient = useQueryClient();\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const [newDepartment, setNewDepartment] = useState<CreateDepartmentRequest>({\r\n    name: '',\r\n    description: '',\r\n    managerId: undefined\r\n  });\r\n\r\n  const [editDepartment, setEditDepartment] = useState<UpdateDepartmentRequest>({\r\n    name: '',\r\n    description: '',\r\n    managerId: undefined,\r\n    status: 'ACTIVE'\r\n  });\r\n\r\n  // Fetch departments\r\n  const {\r\n    data: departments = [],\r\n    isLoading: isLoadingDepartments,\r\n    isError: isDepartmentsError,\r\n    error: departmentsError\r\n  } = useQuery({\r\n    queryKey: ['departments'],\r\n    queryFn: () => departmentService.getAllDepartments(),\r\n  });\r\n\r\n  // Fetch employees for manager selection\r\n  const {\r\n    data: employees = [],\r\n    isLoading: isLoadingEmployees,\r\n    isError: isEmployeesError\r\n  } = useQuery({\r\n    queryKey: ['employees'],\r\n    queryFn: () => employeeService.getEmployees(),\r\n  });\r\n\r\n  // Fetch users for manager selection\r\n  const {\r\n    data: usersData = [],\r\n    isLoading: isLoadingUsers,\r\n    isError: isUsersError\r\n  } = useQuery({\r\n    queryKey: ['users'],\r\n    queryFn: () => userService.getUsers({ status: 'active' }),\r\n  });\r\n\r\n  // Extract data from possible paginated responses\r\n  const employeesList = extractDataFromResponse(employees);\r\n\r\n  // Extract users and map to employees for display\r\n  let usersList: User[] = [];\r\n  if (Array.isArray(usersData)) {\r\n    usersList = usersData;\r\n  } else if (usersData && Array.isArray(usersData.data)) {\r\n    usersList = usersData.data;\r\n  }\r\n\r\n  // Enhanced manager options with multiple fallback strategies\r\n  const managerOptions = useMemo(() => {\r\n    console.log('Creating manager options...');\r\n    console.log('Users Data:', usersData);\r\n    console.log('Users List:', usersList);\r\n    console.log('Employees List:', employeesList);\r\n\r\n    if (!usersList || !employeesList) {\r\n      console.log('Missing data - returning empty options');\r\n      return [];\r\n    }\r\n\r\n    const options: Array<{userId: string; employeeName: string; source: string}> = [];\r\n\r\n    // Strategy 1: Users with linked employees\r\n    usersList.forEach((user: User) => {\r\n      if (user.employeeId) {\r\n        const emp = employeesList.find((e) => e.id === user.employeeId);\r\n        if (emp && emp.firstName && emp.lastName) {\r\n          options.push({\r\n            userId: user.id,\r\n            employeeName: `${emp.firstName} ${emp.lastName}`,\r\n            source: 'user-employee-link'\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Strategy 2: Users with names (fallback)\r\n    if (options.length === 0) {\r\n      usersList.forEach((user: User) => {\r\n        if (user.firstName && user.lastName) {\r\n          options.push({\r\n            userId: user.id,\r\n            employeeName: `${user.firstName} ${user.lastName}`,\r\n            source: 'user-direct'\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // Strategy 3: All users regardless of names (last resort)\r\n    if (options.length === 0) {\r\n      usersList.forEach((user: User) => {\r\n        const name = [user.firstName, user.lastName].filter(Boolean).join(' ') || user.email;\r\n        options.push({\r\n          userId: user.id,\r\n          employeeName: name,\r\n          source: 'user-fallback'\r\n        });\r\n      });\r\n    }\r\n\r\n    console.log('Final manager options:', options);\r\n    return options;\r\n  }, [usersList, employeesList, usersData]);\r\n\r\n  // Debug info\r\n  console.log('Debug Info:', {\r\n    selectedDepartment,\r\n    editDepartment,\r\n    usersList: usersList.slice(0, 3),\r\n    employeesList: employeesList.slice(0, 3),\r\n    managerOptions: managerOptions.slice(0, 3),\r\n    isLoadingUsers,\r\n    isUsersError,\r\n    isLoadingEmployees,\r\n    isEmployeesError,\r\n    totalManagerOptions: managerOptions.length,\r\n    totalUsers: usersList.length,\r\n    totalEmployees: employeesList.length\r\n  });\r\n  const createDepartmentMutation = useMutation({\r\n    mutationFn: (newDept: CreateDepartmentRequest) => \r\n      departmentService.createDepartment(newDept),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['departments'] });\r\n      setIsAddDialogOpen(false);\r\n      setNewDepartment({\r\n        name: '',\r\n        description: '',\r\n        managerId: undefined\r\n      });\r\n      toast({\r\n        title: 'Department created',\r\n        description: 'The department has been created successfully.',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      toast({\r\n        title: 'Failed to create department',\r\n        description: error.message || 'An error occurred while creating the department.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  });\r\n\r\n  // Update department mutation\r\n  const updateDepartmentMutation = useMutation({\r\n    mutationFn: ({ id, data }: { id: string; data: UpdateDepartmentRequest }) => \r\n      departmentService.updateDepartment(id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['departments'] });\r\n      setIsEditDialogOpen(false);\r\n      setSelectedDepartment(null);\r\n      toast({\r\n        title: 'Department updated',\r\n        description: 'The department has been updated successfully.',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      toast({\r\n        title: 'Failed to update department',\r\n        description: error.message || 'An error occurred while updating the department.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  });\r\n\r\n  // Delete department mutation\r\n  const deleteDepartmentMutation = useMutation({\r\n    mutationFn: (id: string) => departmentService.deleteDepartment(id),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['departments'] });\r\n      toast({\r\n        title: 'Department deleted',\r\n        description: 'The department has been deleted successfully.',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      toast({\r\n        title: 'Failed to delete department',\r\n        description: error.message || 'An error occurred while deleting the department.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  });\r\n\r\n  const handleCreateDepartment = () => {\r\n    createDepartmentMutation.mutate(newDepartment);\r\n  };\r\n\r\n  const handleUpdateDepartment = async () => {\r\n    if (!selectedDepartment) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'No department selected for update.',\r\n        variant: 'destructive'\r\n      });\r\n      return;\r\n    }\r\n\r\n    console.log('Updating department:', selectedDepartment.id, 'with data:', editDepartment);\r\n    \r\n    try {\r\n      await updateDepartmentMutation.mutateAsync({\r\n        id: selectedDepartment.id,\r\n        data: editDepartment\r\n      });\r\n    } catch (error) {\r\n      console.error('Department update error:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteDepartment = (id: string) => {\r\n    if (window.confirm('Are you sure you want to delete this department? This action cannot be undone.')) {\r\n      deleteDepartmentMutation.mutate(id);\r\n    }\r\n  };\r\n\r\n  const openEditDialog = (department: Department) => {\r\n    setSelectedDepartment(department);\r\n    setEditDepartment({\r\n      name: department.name,\r\n      description: department.description || '',\r\n      managerId: department.managerId || 'none', // Convert null/undefined to 'none'\r\n      status: department.status || 'ACTIVE'\r\n    });\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  // Filter departments based on search term\r\n  const filteredDepartments = departments.filter((dept: Department) => \r\n    dept.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    (dept.description && dept.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n  );\r\n\r\n  // Check if user has permission to manage departments\r\n  const canManage = canManageDepartments(user);\r\n\r\n  // If user doesn't have permission, show alert\r\n  if (!canManage) {\r\n    return (\r\n      <DashboardLayout title=\"Department Management\">\r\n        <Alert variant=\"destructive\">\r\n          <AlertTriangle className=\"h-4 w-4\" />\r\n          <AlertTitle>Access Denied</AlertTitle>\r\n          <AlertDescription>\r\n            You don't have permission to manage departments. Please contact your administrator.\r\n          </AlertDescription>\r\n        </Alert>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  console.log('Debug Info:', {\r\n    selectedDepartment,\r\n    editDepartment,\r\n    usersList: usersList.slice(0, 3), // First 3 users\r\n    employeesList: employeesList.slice(0, 3), // First 3 employees\r\n    managerOptions: managerOptions.slice(0, 3), // First 3 options\r\n    isLoadingUsers,\r\n    isUsersError,\r\n    usersData: typeof usersData,\r\n    totalManagerOptions: managerOptions.length\r\n  });\r\n  \r\n  console.log('Employees List:', employeesList);\r\n  console.log('Users List:', usersList);\r\n  console.log('Manager Options:', managerOptions);\r\n  console.log('Users with employeeId:', usersList.filter((user: User) => user.employeeId));\r\n  console.log('Employees:', employeesList);\r\n\r\n  return (\r\n    <DashboardLayout title=\"Department Management\">\r\n      <Card className=\"mb-6\">\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle>Departments</CardTitle>\r\n              <CardDescription>Manage your organization's departments</CardDescription>\r\n            </div>\r\n            <Button onClick={() => setIsAddDialogOpen(true)} className=\"bg-green-600 hover:bg-green-700 text-white\">\r\n              <Plus className=\"mr-2 h-4 w-4 text-white\" />\r\n              Add Department\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"mb-4\">\r\n            <Input\r\n              placeholder=\"Search departments...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"max-w-sm\"\r\n            />\r\n          </div>\r\n\r\n          {isLoadingDepartments ? (\r\n            <div className=\"flex justify-center items-center h-40\">\r\n              <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            </div>\r\n          ) : isDepartmentsError ? (\r\n            <Alert variant=\"destructive\">\r\n              <AlertTriangle className=\"h-4 w-4\" />\r\n              <AlertTitle>Error</AlertTitle>\r\n              <AlertDescription>\r\n                {(departmentsError as Error)?.message || 'Failed to load departments'}\r\n              </AlertDescription>\r\n            </Alert>\r\n          ) : filteredDepartments.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              No departments found. {searchTerm ? 'Try a different search term.' : 'Add a department to get started.'}\r\n            </div>\r\n          ) : (\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Name</TableHead>\r\n                  <TableHead>Description</TableHead>\r\n                  <TableHead>Manager</TableHead>\r\n                  <TableHead>Employees</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead className=\"text-right\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredDepartments.map((department: Department) => {\r\n                  // Find the manager in usersList by user.id\r\n                  const manager = usersList.find(user => user.id === department.managerId);\r\n                  return (\r\n                    <TableRow key={department.id}>\r\n                      <TableCell className=\"font-medium\">{department.name}</TableCell>\r\n                      <TableCell>\r\n                        {department.description ? \r\n                          department.description.length > 50 \r\n                            ? `${department.description.substring(0, 50)}...` \r\n                            : department.description \r\n                          : 'No description'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {manager \r\n                          ? `${manager.firstName} ${manager.lastName}`\r\n                          : 'None'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {department.employees?.length || 0}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge\r\n                          variant={department.status === 'ACTIVE' ? 'default' : 'secondary'}\r\n                        >\r\n                          {department.status || 'ACTIVE'}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"icon\"\r\n                          onClick={() => openEditDialog(department)}\r\n                          className=\"hover:bg-blue-100\"\r\n                        >\r\n                          <Edit className=\"h-4 w-4 text-blue-600\" />\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"icon\"\r\n                          onClick={() => handleDeleteDepartment(department.id)}\r\n                          disabled={deleteDepartmentMutation.isPending}\r\n                          className=\"hover:bg-red-100\"\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4 text-red-600\" />\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Add Department Dialog */}\r\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\r\n        <DialogContent className=\"sm:max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle>Add Department</DialogTitle>\r\n            <DialogDescription>\r\n              Create a new department in your organization.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4 py-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"name\">Department Name *</Label>\r\n              <Input\r\n                id=\"name\"\r\n                placeholder=\"Enter department name\"\r\n                value={newDepartment.name}\r\n                onChange={(e) => setNewDepartment({ ...newDepartment, name: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"description\">Description</Label>\r\n              <Textarea\r\n                id=\"description\"\r\n                placeholder=\"Enter department description\"\r\n                value={newDepartment.description || ''}\r\n                onChange={(e) => setNewDepartment({ ...newDepartment, description: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"manager\">Department Manager</Label>\r\n              <Select\r\n                value={newDepartment.managerId || 'none'}\r\n                onValueChange={(value) => setNewDepartment({ ...newDepartment, managerId: value === 'none' ? undefined : value })}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select a manager\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"none\">None</SelectItem>\r\n                  {isLoadingUsers ? (\r\n                    <div className=\"flex items-center justify-center p-2\">\r\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                    </div>\r\n                  ) : isUsersError ? (\r\n                    <div className=\"flex items-center justify-center p-2 text-red-500\">\r\n                      Error loading users\r\n                    </div>\r\n                  ) : managerOptions.length === 0 ? (\r\n                    <div className=\"flex items-center justify-center p-2 text-gray-500\">\r\n                      No managers available\r\n                    </div>\r\n                  ) : (\r\n                    managerOptions.map((option) => (\r\n                      <SelectItem key={option.userId} value={option.userId}>\r\n                        {option.employeeName}\r\n                      </SelectItem>\r\n                    ))\r\n                  )}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end space-x-2\">\r\n            <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} className=\"border-gray-400 text-gray-700 hover:bg-gray-100\">Cancel</Button>\r\n            <Button onClick={handleCreateDepartment} disabled={!newDepartment.name || createDepartmentMutation.isPending} className=\"bg-green-600 hover:bg-green-700 text-white\">\r\n              {createDepartmentMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin text-white\" />}\r\n              Create Department\r\n            </Button>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Edit Department Dialog */}\r\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\r\n        <DialogContent className=\"sm:max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle>Edit Department</DialogTitle>\r\n            <DialogDescription>\r\n              Update department information.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4 py-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"edit-name\">Department Name *</Label>\r\n              <Input\r\n                id=\"edit-name\"\r\n                placeholder=\"Enter department name\"\r\n                value={editDepartment.name || ''}\r\n                onChange={(e) => setEditDepartment({ ...editDepartment, name: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"edit-description\">Description</Label>\r\n              <Textarea\r\n                id=\"edit-description\"\r\n                placeholder=\"Enter department description\"\r\n                value={editDepartment.description || ''}\r\n                onChange={(e) => setEditDepartment({ ...editDepartment, description: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"edit-manager\">Department Manager</Label>\r\n              <Select\r\n                value={editDepartment.managerId || 'none'}\r\n                onValueChange={(value) => setEditDepartment({ ...editDepartment, managerId: value === 'none' ? undefined : value })}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select a manager\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"none\">None</SelectItem>\r\n                  {isLoadingUsers ? (\r\n                    <div className=\"flex items-center justify-center p-2\">\r\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                    </div>\r\n                  ) : isUsersError ? (\r\n                    <div className=\"flex items-center justify-center p-2 text-red-500\">\r\n                      Error loading users\r\n                    </div>\r\n                  ) : managerOptions.length === 0 ? (\r\n                    <div className=\"flex items-center justify-center p-2 text-gray-500\">\r\n                      No managers available\r\n                    </div>\r\n                  ) : (\r\n                    managerOptions.map((option) => (\r\n                      <SelectItem key={option.userId} value={option.userId}>\r\n                        {option.employeeName}\r\n                      </SelectItem>\r\n                    ))\r\n                  )}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"edit-status\">Status</Label>\r\n              <Select\r\n                value={editDepartment.status || 'ACTIVE'}\r\n                onValueChange={(value) => setEditDepartment({ ...editDepartment, status: value })}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select status\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"ACTIVE\">Active</SelectItem>\r\n                  <SelectItem value=\"INACTIVE\">Inactive</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end space-x-2\">\r\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)} className=\"border-gray-400 text-gray-700 hover:bg-gray-100\">Cancel</Button>\r\n            <Button onClick={handleUpdateDepartment} disabled={!editDepartment.name || updateDepartmentMutation.isPending} className=\"bg-blue-600 hover:bg-blue-700 text-white\">\r\n              {updateDepartmentMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin text-white\" />}\r\n              Update Department\r\n            </Button>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Department Statistics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Departments</CardTitle>\r\n            <Building2 className=\"h-4 w-4 text-green-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{departments.length}</div>\r\n            <p className=\"text-xs text-muted-foreground\">Across the organization</p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Active Departments</CardTitle>\r\n            <Users className=\"h-4 w-4 text-blue-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {departments.filter(d => d.status === 'ACTIVE' || !d.status).length}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">Currently operational</p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\r\n            <Users className=\"h-4 w-4 text-yellow-600\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {departments.reduce((total, dept) => total + (dept.employees?.length || 0), 0)}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">Assigned to departments</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default DepartmentManagement;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\EmployeeManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\HRDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\LeaveApprovals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\PerformanceManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\SalaryAdvanceManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\hr\\TrainingManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\operations\\OperationsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\operations\\OperationsLeaveApprovals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\operations\\OperationsSalaryAdvances.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\operations\\OpsManagerLeaveRequestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\operations\\OpsManagerSalaryAdvancePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\operations\\TeamsOverview.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [user, user.branch]","fix":{"range":[2509,2523],"text":"[user, user.branch]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'user'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [user, users]","fix":{"range":[2942,2963],"text":"[user, users]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DashboardLayout } from '@/components/layout/DashboardLayout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { \r\n  Users, \r\n  Search, \r\n  Filter, \r\n  Mail, \r\n  Phone, \r\n  Calendar, \r\n  MapPin, \r\n  Clock,\r\n  UserCheck,\r\n  UserX,\r\n  MoreVertical,\r\n  Eye,\r\n  Edit,\r\n  MessageSquare,\r\n  Shield,\r\n  Info,\r\n  UserPlus\r\n} from 'lucide-react';\r\nimport { useState, useMemo, useEffect } from 'react';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { employeeService } from '@/services/api/employee.service';\r\nimport { User } from '@/types/types';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { canAddEmployee, canManageTeamMembers, getRolePermissionsDescription, getRoleDisplayName } from '@/utils/permissions';\r\n\r\nconst TeamsOverview = () => {\r\n  const { user } = useAuth();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [departmentFilter, setDepartmentFilter] = useState('all');\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(null);\r\n    if (user?.branch) {\r\n      const userBranch = user && user.branch != null ? (typeof user.branch === 'object' ? (user.branch as any).name : user.branch) : '';\r\n      employeeService.getEmployeesByBranch(userBranch)\r\n        .then((members) => {\r\n          const usersWithRoles = members.map((member) => ({\r\n            ...member,\r\n            role: 'EMPLOYEE' as const,\r\n          }));\r\n          setUsers(usersWithRoles);\r\n          setLoading(false);\r\n        })\r\n        .catch(() => {\r\n          setError('Failed to fetch team members.');\r\n          setUsers([]);\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      setUsers([]);\r\n      setLoading(false);\r\n    }\r\n  }, [user?.branch]);\r\n\r\n  const canAdd = canAddEmployee(user);\r\n  const canManage = canManageTeamMembers(user);\r\n\r\n  const branchEmployees = useMemo(() => {\r\n    const userBranch = user && user.branch != null ? (typeof user.branch === 'object' ? (user.branch as any).name : user.branch) : '';\r\n    return users.filter(\r\n      (employee) => \r\n        employee.branch === userBranch && \r\n        employee.role === 'EMPLOYEE'\r\n    );\r\n  }, [user?.branch, users]);\r\n\r\n  const filteredEmployees = useMemo(() => {\r\n    return branchEmployees.filter((employee) => {\r\n      const matchesSearch = \r\n        employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        employee.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        employee.employeeId.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        employee.email.toLowerCase().includes(searchTerm.toLowerCase());\r\n      \r\n      const matchesStatus = statusFilter === 'all' || employee.status === statusFilter;\r\n      const matchesDepartment = departmentFilter === 'all' || employee.department === departmentFilter;\r\n      \r\n      return matchesSearch && matchesStatus && matchesDepartment;\r\n    });\r\n  }, [branchEmployees, searchTerm, statusFilter, departmentFilter]);\r\n\r\n  const departments = useMemo(() => {\r\n    const depts = [...new Set(branchEmployees.map(emp => emp.department).filter(Boolean))];\r\n    return depts;\r\n  }, [branchEmployees]);\r\n\r\n  const teamStats = useMemo(() => {\r\n    const total = branchEmployees.length;\r\n    const active = branchEmployees.filter(emp => emp.status === 'active').length;\r\n    const inactive = branchEmployees.filter(emp => emp.status === 'inactive').length;\r\n    const recentlyActive = branchEmployees.filter(emp => {\r\n      if (!emp.lastLogin) return false;\r\n      const lastLogin = new Date(emp.lastLogin);\r\n      const oneDayAgo = new Date();\r\n      oneDayAgo.setDate(oneDayAgo.getDate() - 1);\r\n      return lastLogin > oneDayAgo;\r\n    }).length;\r\n\r\n    return { total, active, inactive, recentlyActive };\r\n  }, [branchEmployees]);\r\n\r\n  const getInitials = (firstName: string, lastName: string) => {\r\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\r\n  };\r\n\r\n  const getStatusColor = (status?: string) => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\r\n      case 'inactive':\r\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\r\n      case 'suspended':\r\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\r\n    }\r\n  };\r\n\r\n  const formatLastLogin = (lastLogin?: string) => {\r\n    if (!lastLogin) return 'Never';\r\n    const date = new Date(lastLogin);\r\n    const now = new Date();\r\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Just now';\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    if (diffInHours < 48) return 'Yesterday';\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  const EmployeeCard = ({ employee }: { employee: User }) => (\r\n    <Card className=\"hover:shadow-md transition-shadow\">\r\n      <CardContent className=\"p-6\">\r\n        <div className=\"flex items-start justify-between\">\r\n          <div className=\"flex items-start space-x-4\">\r\n            <Avatar className=\"h-12 w-12\">\r\n              <AvatarImage src={employee.profilePicture} />\r\n              <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\r\n                {getInitials(employee.firstName, employee.lastName)}\r\n              </AvatarFallback>\r\n            </Avatar>\r\n            <div className=\"flex-1 min-w-0\">\r\n              <div className=\"flex items-center space-x-2 mb-1\">\r\n                <h3 className=\"text-lg font-semibold text-foreground\">\r\n                  {employee.firstName} {employee.lastName}\r\n                </h3>\r\n                <Badge className={getStatusColor(employee.status)}>\r\n                  {employee.status || 'active'}\r\n                </Badge>\r\n              </div>\r\n              <p className=\"text-sm text-muted-foreground mb-1\">\r\n                {employee.position || 'Team Member'} • {employee.employeeId}\r\n              </p>\r\n              <p className=\"text-sm text-muted-foreground mb-3\">\r\n                {employee.department}\r\n              </p>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\r\n                <div className=\"flex items-center space-x-2 text-muted-foreground\">\r\n                  <Mail className=\"h-4 w-4\" />\r\n                  <span className=\"truncate\">{employee.email}</span>\r\n                </div>\r\n                {employee.phone && (\r\n                  <div className=\"flex items-center space-x-2 text-muted-foreground\">\r\n                    <Phone className=\"h-4 w-4\" />\r\n                    <span>{employee.phone}</span>\r\n                  </div>\r\n                )}\r\n                <div className=\"flex items-center space-x-2 text-muted-foreground\">\r\n                  <Calendar className=\"h-4 w-4\" />\r\n                  <span>Hired: {employee.hireDate ? new Date(employee.hireDate).toLocaleDateString() : 'N/A'}</span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2 text-muted-foreground\">\r\n                  <Clock className=\"h-4 w-4\" />\r\n                  <span>Last seen: {formatLastLogin(employee.lastLogin)}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button variant=\"ghost\" size=\"sm\">\r\n                <MoreVertical className=\"h-4 w-4\" />\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align=\"end\">\r\n              <DropdownMenuItem>\r\n                <Eye className=\"h-4 w-4 mr-2\" />\r\n                View Profile\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>\r\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                Send Message\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>\r\n                <Edit className=\"h-4 w-4 mr-2\" />\r\n                Edit Details\r\n              </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const EmployeeTable = ({ employees }: { employees: User[] }) => (\r\n    <div className=\"border rounded-lg\">\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"w-full\">\r\n          <thead className=\"border-b bg-muted/50\">\r\n            <tr>\r\n              <th className=\"text-left p-4 font-medium\">Employee</th>\r\n              <th className=\"text-left p-4 font-medium\">Position</th>\r\n              <th className=\"text-left p-4 font-medium\">Department</th>\r\n              <th className=\"text-left p-4 font-medium\">Status</th>\r\n              <th className=\"text-left p-4 font-medium\">Last Login</th>\r\n              <th className=\"text-left p-4 font-medium\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {employees.map((employee) => (\r\n              <tr key={employee.id} className=\"border-b hover:bg-muted/50\">\r\n                <td className=\"p-4\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <Avatar className=\"h-8 w-8\">\r\n                      <AvatarImage src={employee.profilePicture} />\r\n                      <AvatarFallback className=\"bg-primary/10 text-primary text-xs\">\r\n                        {getInitials(employee.firstName, employee.lastName)}\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                    <div>\r\n                      <p className=\"font-medium\">{employee.firstName} {employee.lastName}</p>\r\n                      <p className=\"text-sm text-muted-foreground\">{employee.employeeId}</p>\r\n                    </div>\r\n                  </div>\r\n                </td>\r\n                <td className=\"p-4 text-sm\">{employee.position || 'Team Member'}</td>\r\n                <td className=\"p-4 text-sm\">{employee.department}</td>\r\n                <td className=\"p-4\">\r\n                  <Badge className={getStatusColor(employee.status)}>\r\n                    {employee.status || 'active'}\r\n                  </Badge>\r\n                </td>\r\n                <td className=\"p-4 text-sm\">{formatLastLogin(employee.lastLogin)}</td>\r\n                <td className=\"p-4\">\r\n                  <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        <MoreVertical className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent align=\"end\">\r\n                      <DropdownMenuItem>\r\n                        <Eye className=\"h-4 w-4 mr-2\" />\r\n                        View Profile\r\n                      </DropdownMenuItem>\r\n                      <DropdownMenuItem>\r\n                        <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                        Send Message\r\n                      </DropdownMenuItem>\r\n                      <DropdownMenuItem>\r\n                        <Edit className=\"h-4 w-4 mr-2\" />\r\n                        Edit Details\r\n                      </DropdownMenuItem>\r\n                    </DropdownMenuContent>\r\n                  </DropdownMenu>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const filteredUsers = useMemo(() => {\r\n    return users.filter(u => {\r\n      const matchesSearch = `${u.firstName} ${u.lastName}`.toLowerCase().includes(searchTerm.toLowerCase());\r\n      const matchesStatus = statusFilter === 'all' || u.status === statusFilter;\r\n      const matchesDepartment = departmentFilter === 'all' || u.department === departmentFilter;\r\n      return matchesSearch && matchesStatus && matchesDepartment && u.role === 'EMPLOYEE';\r\n    });\r\n  }, [users, searchTerm, statusFilter, departmentFilter]);\r\n\r\n  return (\r\n    <DashboardLayout title=\"Teams Overview\">\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <p className=\"text-muted-foreground\">\r\n              Manage and monitor your team at {user && user.branch != null ? (typeof user.branch === 'object' ? (user.branch as any).name || 'Unknown' : user.branch || 'Unknown') : 'Unknown'} branch\r\n            </p>\r\n          </div>\r\n          {canAdd ? (\r\n            <Button>\r\n              <UserPlus className=\"h-4 w-4 mr-2\" />\r\n              Add Team Member\r\n            </Button>\r\n          ) : null}\r\n        </div>\r\n\r\n        \r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Team Members</CardTitle>\r\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{teamStats.total}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Under your supervision\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Active Members</CardTitle>\r\n              <UserCheck className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold text-green-600\">{teamStats.active}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Currently active\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Inactive Members</CardTitle>\r\n              <UserX className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold text-red-600\">{teamStats.inactive}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Need attention\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Recently Active</CardTitle>\r\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold text-blue-600\">{teamStats.recentlyActive}</div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Last 24 hours\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        \r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Team Members</CardTitle>\r\n            <CardDescription>\r\n              Search and filter your team members\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\r\n              <div className=\"relative flex-1\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search by name, ID, or email...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\r\n                  <SelectValue placeholder=\"Filter by status\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Status</SelectItem>\r\n                  <SelectItem value=\"active\">Active</SelectItem>\r\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                  <SelectItem value=\"suspended\">Suspended</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\r\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\r\n                  <SelectValue placeholder=\"Filter by department\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Departments</SelectItem>\r\n                  {departments.map((dept) => (\r\n                    <SelectItem key={dept} value={dept}>{dept}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <Tabs defaultValue=\"cards\" className=\"w-full\">\r\n              <TabsList className=\"grid w-full grid-cols-2 max-w-[400px]\">\r\n                <TabsTrigger value=\"cards\">Card View</TabsTrigger>\r\n                <TabsTrigger value=\"table\">Table View</TabsTrigger>\r\n              </TabsList>\r\n              \r\n              <TabsContent value=\"cards\" className=\"mt-6\">\r\n                {filteredEmployees.length === 0 ? (\r\n                  <div className=\"text-center py-12\">\r\n                    <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                    <h3 className=\"text-lg font-semibold mb-2\">No team members found</h3>\r\n                    <p className=\"text-muted-foreground\">\r\n                      {searchTerm || statusFilter !== 'all' || departmentFilter !== 'all'\r\n                        ? 'Try adjusting your search or filters'\r\n                        : 'No team members assigned to your branch yet'}\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-1 xl:grid-cols-2\">\r\n                    {filteredEmployees.map((employee) => (\r\n                      <EmployeeCard key={employee.id} employee={employee} />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </TabsContent>\r\n              \r\n              <TabsContent value=\"table\" className=\"mt-6\">\r\n                {filteredEmployees.length === 0 ? (\r\n                  <div className=\"text-center py-12\">\r\n                    <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                    <h3 className=\"text-lg font-semibold mb-2\">No team members found</h3>\r\n                    <p className=\"text-muted-foreground\">\r\n                      {searchTerm || statusFilter !== 'all' || departmentFilter !== 'all'\r\n                        ? 'Try adjusting your search or filters'\r\n                        : 'No team members assigned to your branch yet'}\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <EmployeeTable employees={filteredEmployees} />\r\n                )}\r\n              </TabsContent>\r\n            </Tabs>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default TeamsOverview;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\EmployeeCompensation.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEmployees'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadEmployees]","fix":{"range":[2400,2402],"text":"[loadEmployees]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { DashboardLayout } from '@/components/layout/DashboardLayout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { \r\n  Users, \r\n  DollarSign, \r\n  Edit,\r\n  Save,\r\n  RefreshCw,\r\n  AlertTriangle,\r\n  Search\r\n} from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { employeeService, type Employee } from '@/services/api/employee.service';\r\nimport PayrollDataService from '@/services/payrollDataService';\r\nimport { PayrollEngine } from '@/services/payrollEngine';\r\nimport type { KenyanPayrollEmployee } from '@/types/payroll';\r\n\r\n// Enhanced employee type with Kenyan payroll information\r\ninterface KenyanEmployee extends Employee {\r\n  payrollInfo: {\r\n    employeeType: 'hourly' | 'salaried';\r\n    monthlySalary?: number;\r\n    hourlyRate?: number;\r\n    overtimeRate?: number;\r\n    personalRelief: number;\r\n    kraPin?: string;\r\n    nssfNumber?: string;\r\n    nhifNumber?: string;\r\n    bankAccount?: {\r\n      bankName: string;\r\n      accountNumber: string;\r\n      branchCode: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst EmployeeCompensation = () => {\r\n  const { toast } = useToast();\r\n  const [employees, setEmployees] = useState<KenyanEmployee[]>([]);\r\n  const [filteredEmployees, setFilteredEmployees] = useState<KenyanEmployee[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [departmentFilter, setDepartmentFilter] = useState('all');\r\n  const [selectedEmployee, setSelectedEmployee] = useState<KenyanEmployee | null>(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editData, setEditData] = useState<Partial<KenyanEmployee>>({});\r\n\r\n  // Load employees with Kenyan payroll data\r\n  useEffect(() => {\r\n    loadEmployees();\r\n  }, []);\r\n\r\n  const loadEmployees = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Get employees from database\r\n      const employeeResponse = await employeeService.getEmployees();\r\n      \r\n      if (employeeResponse?.data?.length > 0) {\r\n        // Get payroll data\r\n        let payrollData: KenyanPayrollEmployee[] = [];\r\n        try {\r\n          payrollData = await PayrollDataService.getAllPayrollEmployees();\r\n        } catch (error) {\r\n          console.log('No payroll data available:', error);\r\n        }\r\n        \r\n        // Merge employee and payroll data with Kenyan defaults\r\n        const kenyanEmployees: KenyanEmployee[] = employeeResponse.data.map(employee => {\r\n          const payrollEmployee = payrollData.find(pe => pe.employeeId === employee.employeeId);\r\n          \r\n          return {\r\n            ...employee,\r\n            payrollInfo: {\r\n              employeeType: payrollEmployee?.payrollInfo?.employeeType || 'salaried',\r\n              monthlySalary: payrollEmployee?.payrollInfo?.monthlySalary || employee.salary || 0,\r\n              hourlyRate: payrollEmployee?.payrollInfo?.hourlyRate || 0,\r\n              overtimeRate: payrollEmployee?.payrollInfo?.overtimeRate || 0,\r\n              personalRelief: payrollEmployee?.payrollInfo?.personalRelief || 2400, // Kenyan personal relief\r\n              kraPin: employee.taxInfo?.kraPin || '',\r\n              nssfNumber: employee.taxInfo?.nssfNumber || '',\r\n              nhifNumber: employee.taxInfo?.nhifNumber || '',\r\n              bankAccount: {\r\n                bankName: employee.bankDetails?.bankName || '',\r\n                accountNumber: employee.bankDetails?.accountNumber || '',\r\n                branchCode: employee.bankDetails?.branchCode || ''\r\n              }\r\n            }\r\n          };\r\n        });\r\n        \r\n        setEmployees(kenyanEmployees);\r\n        setFilteredEmployees(kenyanEmployees);\r\n      } else {\r\n        setEmployees([]);\r\n        setFilteredEmployees([]);\r\n        toast({\r\n          title: \"No Employees Found\",\r\n          description: \"No employees found in the database.\",\r\n          variant: \"destructive\"\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading employees:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load employee data\",\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Filter employees\r\n  useEffect(() => {\r\n    let filtered = employees;\r\n\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(emp => \r\n        emp.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        emp.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        emp.employeeId.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (departmentFilter !== 'all') {\r\n      filtered = filtered.filter(emp => emp.department === departmentFilter);\r\n    }\r\n\r\n    setFilteredEmployees(filtered);\r\n  }, [employees, searchTerm, departmentFilter]);\r\n\r\n  // Get unique departments\r\n  const departments = ['all', ...new Set(employees.map(emp => emp.department).filter(Boolean))];\r\n\r\n  // Calculate Kenyan net pay\r\n  const calculateNetPay = (employee: KenyanEmployee): number => {\r\n    const grossPay = employee.payrollInfo.employeeType === 'salaried' \r\n      ? employee.payrollInfo.monthlySalary || 0\r\n      : (employee.payrollInfo.hourlyRate || 0) * 160; // Assume 160 hours/month\r\n\r\n    const paye = PayrollEngine.calculatePAYE(grossPay, employee.payrollInfo.personalRelief);\r\n    const nssf = PayrollEngine.calculateNSSF(grossPay);\r\n    const nhif = PayrollEngine.calculateNHIF(grossPay);\r\n    \r\n    return grossPay - paye - nssf - nhif;\r\n  };\r\n\r\n  // Get gross pay\r\n  const getGrossPay = (employee: KenyanEmployee): number => {\r\n    return employee.payrollInfo.employeeType === 'salaried' \r\n      ? employee.payrollInfo.monthlySalary || 0\r\n      : (employee.payrollInfo.hourlyRate || 0) * 160;\r\n  };\r\n\r\n  // Handle edit employee\r\n  const handleEdit = (employee: KenyanEmployee) => {\r\n    setSelectedEmployee(employee);\r\n    setEditData(employee);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  // Save employee changes\r\n  const handleSave = async () => {\r\n    if (!selectedEmployee || !editData) return;\r\n\r\n    try {\r\n      // Update employee basic info\r\n      await employeeService.updateEmployee(selectedEmployee.id, {\r\n        firstName: editData.firstName,\r\n        lastName: editData.lastName,\r\n        department: editData.department,\r\n        position: editData.position,\r\n        salary: editData.payrollInfo?.monthlySalary,\r\n        taxInfo: {\r\n          kraPin: editData.payrollInfo?.kraPin,\r\n          nssfNumber: editData.payrollInfo?.nssfNumber,\r\n          nhifNumber: editData.payrollInfo?.nhifNumber\r\n        },\r\n        bankDetails: editData.payrollInfo?.bankAccount ? {\r\n          bankName: editData.payrollInfo.bankAccount.bankName,\r\n          accountNumber: editData.payrollInfo.bankAccount.accountNumber,\r\n          branchCode: editData.payrollInfo.bankAccount.branchCode,\r\n          accountType: 'savings'\r\n        } : undefined\r\n      });\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Employee updated successfully\"\r\n      });\r\n\r\n      setIsEditing(false);\r\n      setSelectedEmployee(null);\r\n      setEditData({});\r\n      await loadEmployees();\r\n    } catch (error) {\r\n      console.error('Error updating employee:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to update employee\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <DashboardLayout title=\"Employee Compensation\">\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <RefreshCw className=\"h-6 w-6 animate-spin mr-2\" />\r\n          <span>Loading employees...</span>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DashboardLayout title=\"Employee Compensation\">\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        {/* Removed duplicate title */}\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\r\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{employees.length}</div>\r\n            </CardContent>\r\n          </Card>\r\n          \r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Total Monthly Payroll</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">\r\n                KES {employees.reduce((sum, emp) => sum + getGrossPay(emp), 0).toLocaleString()}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Average Net Pay</CardTitle>\r\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">\r\n                KES {employees.length > 0 \r\n                  ? Math.round(employees.reduce((sum, emp) => sum + calculateNetPay(emp), 0) / employees.length).toLocaleString()\r\n                  : '0'\r\n                }\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Employee Compensation Management</CardTitle>\r\n            <CardDescription>View and manage employee compensation with Kenyan payroll calculations</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n                  <Input\r\n                    placeholder=\"Search employees...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"pl-8\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\r\n                <SelectTrigger className=\"w-full sm:w-[200px]\">\r\n                  <SelectValue placeholder=\"All Departments\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {departments.map(dept => (\r\n                    <SelectItem key={dept} value={dept}>\r\n                      {dept === 'all' ? 'All Departments' : dept}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            {/* Employee Table */}\r\n            {filteredEmployees.length === 0 ? (\r\n              <Alert>\r\n                <AlertTriangle className=\"h-4 w-4\" />\r\n                <AlertDescription>\r\n                  No employees found. {searchTerm || departmentFilter !== 'all' ? 'Try adjusting your filters.' : 'Add employees to get started.'}\r\n                </AlertDescription>\r\n              </Alert>\r\n            ) : (\r\n              <div className=\"border rounded-lg\">\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Employee</TableHead>\r\n                      <TableHead>Department</TableHead>\r\n                      <TableHead>Position</TableHead>\r\n                      <TableHead>Type</TableHead>\r\n                      <TableHead>Gross Pay</TableHead>\r\n                      <TableHead>Net Pay</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {filteredEmployees.map((employee) => (\r\n                      <TableRow key={employee.id}>\r\n                        <TableCell>\r\n                          <div>\r\n                            <div className=\"font-medium\">{employee.firstName} {employee.lastName}</div>\r\n                            <div className=\"text-sm text-muted-foreground\">{employee.employeeId}</div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>{employee.department}</TableCell>\r\n                        <TableCell>{employee.position}</TableCell>\r\n                        <TableCell>\r\n                          <Badge variant={employee.payrollInfo.employeeType === 'salaried' ? 'default' : 'secondary'}>\r\n                            {employee.payrollInfo.employeeType === 'salaried' ? 'Salaried' : 'Hourly'}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>KES {getGrossPay(employee).toLocaleString()}</TableCell>\r\n                        <TableCell>KES {calculateNetPay(employee).toLocaleString()}</TableCell>\r\n                        <TableCell>\r\n                          <Badge variant={employee.status === 'active' ? 'default' : 'secondary'}>\r\n                            {employee.status}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => handleEdit(employee)}\r\n                          >\r\n                            <Edit className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Edit Employee Dialog */}\r\n        <Dialog open={isEditing} onOpenChange={(open) => {\r\n          if (!open) {\r\n            setIsEditing(false);\r\n            setSelectedEmployee(null);\r\n            setEditData({});\r\n          }\r\n        }}>\r\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\r\n            <DialogHeader>\r\n              <DialogTitle>Edit Employee Compensation</DialogTitle>\r\n            </DialogHeader>\r\n            \r\n            {selectedEmployee && (\r\n              <div className=\"space-y-6\">\r\n                {/* Basic Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"text-lg font-semibold\">Basic Information</h3>\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label>First Name</Label>\r\n                      <Input\r\n                        value={editData.firstName || ''}\r\n                        onChange={(e) => setEditData({...editData, firstName: e.target.value})}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Last Name</Label>\r\n                      <Input\r\n                        value={editData.lastName || ''}\r\n                        onChange={(e) => setEditData({...editData, lastName: e.target.value})}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Department</Label>\r\n                      <Input\r\n                        value={editData.department || ''}\r\n                        onChange={(e) => setEditData({...editData, department: e.target.value})}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Position</Label>\r\n                      <Input\r\n                        value={editData.position || ''}\r\n                        onChange={(e) => setEditData({...editData, position: e.target.value})}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Payroll Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"text-lg font-semibold\">Kenyan Payroll Information</h3>\r\n                  \r\n                  <div>\r\n                    <Label>Employee Type</Label>\r\n                    <Select\r\n                      value={editData.payrollInfo?.employeeType || 'salaried'}\r\n                      onValueChange={(value: 'salaried' | 'hourly') => setEditData({\r\n                        ...editData,\r\n                        payrollInfo: { ...editData.payrollInfo, employeeType: value }\r\n                      })}\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"salaried\">Salaried</SelectItem>\r\n                        <SelectItem value=\"hourly\">Hourly</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  {editData.payrollInfo?.employeeType === 'salaried' ? (\r\n                    <div>\r\n                      <Label>Monthly Salary (KES)</Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        value={editData.payrollInfo?.monthlySalary || 0}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { ...editData.payrollInfo, monthlySalary: Number(e.target.value) }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      <Label>Hourly Rate (KES)</Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        value={editData.payrollInfo?.hourlyRate || 0}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { ...editData.payrollInfo, hourlyRate: Number(e.target.value) }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                  )}\r\n\r\n                  <div>\r\n                    <Label>Personal Relief (KES)</Label>\r\n                    <Input\r\n                      type=\"number\"\r\n                      value={editData.payrollInfo?.personalRelief || 2400}\r\n                      onChange={(e) => setEditData({\r\n                        ...editData,\r\n                        payrollInfo: { ...editData.payrollInfo, personalRelief: Number(e.target.value) }\r\n                      })}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Kenyan Tax Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"text-lg font-semibold\">Kenyan Tax Information</h3>\r\n                  <div className=\"grid grid-cols-1 gap-4\">\r\n                    <div>\r\n                      <Label>KRA PIN</Label>\r\n                      <Input\r\n                        value={editData.payrollInfo?.kraPin || ''}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { ...editData.payrollInfo, kraPin: e.target.value }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>NSSF Number</Label>\r\n                      <Input\r\n                        value={editData.payrollInfo?.nssfNumber || ''}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { ...editData.payrollInfo, nssfNumber: e.target.value }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>NHIF Number</Label>\r\n                      <Input\r\n                        value={editData.payrollInfo?.nhifNumber || ''}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { ...editData.payrollInfo, nhifNumber: e.target.value }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Bank Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"text-lg font-semibold\">Bank Information</h3>\r\n                  <div className=\"grid grid-cols-1 gap-4\">\r\n                    <div>\r\n                      <Label>Bank Name</Label>\r\n                      <Input\r\n                        value={editData.payrollInfo?.bankAccount?.bankName || ''}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { \r\n                            ...editData.payrollInfo, \r\n                            bankAccount: { \r\n                              ...editData.payrollInfo?.bankAccount, \r\n                              bankName: e.target.value \r\n                            }\r\n                          }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Account Number</Label>\r\n                      <Input\r\n                        value={editData.payrollInfo?.bankAccount?.accountNumber || ''}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { \r\n                            ...editData.payrollInfo, \r\n                            bankAccount: { \r\n                              ...editData.payrollInfo?.bankAccount, \r\n                              accountNumber: e.target.value \r\n                            }\r\n                          }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <Label>Branch Code</Label>\r\n                      <Input\r\n                        value={editData.payrollInfo?.bankAccount?.branchCode || ''}\r\n                        onChange={(e) => setEditData({\r\n                          ...editData,\r\n                          payrollInfo: { \r\n                            ...editData.payrollInfo, \r\n                            bankAccount: { \r\n                              ...editData.payrollInfo?.bankAccount, \r\n                              branchCode: e.target.value \r\n                            }\r\n                          }\r\n                        })}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Actions */}\r\n                <div className=\"flex justify-end space-x-2\">\r\n                  <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\r\n                    Cancel\r\n                  </Button>\r\n                  <Button onClick={handleSave}>\r\n                    <Save className=\"h-4 w-4 mr-2\" />\r\n                    Save Changes\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default EmployeeCompensation;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\PayStubViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\PayrollDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\PayrollProcessing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\PayrollReports.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\PayrollSettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSettings'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSettings]","fix":{"range":[2498,2500],"text":"[loadSettings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { DashboardLayout } from '@/components/layout/DashboardLayout';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { \r\n  Settings, \r\n  Save,\r\n  RefreshCw,\r\n  Building,\r\n  Calendar,\r\n  Clock,\r\n  DollarSign,\r\n  FileText,\r\n  Users,\r\n  Info,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Shield\r\n} from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { api } from '@/services/unifiedApi';\r\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\r\n\r\nconst PayrollSettings = () => {\r\n  const { toast } = useToast();\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\r\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n  const [originalSettings, setOriginalSettings] = useState<any>(null);\r\n  \r\n  const [settings, setSettings] = useState({\r\n    companyInfo: {\r\n      name: \"\",\r\n      kraPin: \"\",\r\n      nssfNumber: \"\",\r\n      nhifNumber: \"\",\r\n      address: \"\",\r\n      postalCode: \"\",\r\n      city: \"\"\r\n    },\r\n    payrollDefaults: {\r\n      personalRelief: 0,\r\n      overtimeMultiplier: 0,\r\n      workingDaysPerMonth: 0,\r\n      workingHoursPerDay: 0,\r\n      payFrequency: \"\",\r\n      payDay: 0,\r\n      cutoffDay: 0\r\n    },\r\n    approvalWorkflow: {\r\n      requirePayrollApproval: false,\r\n      approvalLevels: 0,\r\n      autoApproveThreshold: 0,\r\n      notifyEmployeesOnPayment: false,\r\n      sendPayslipsByEmail: false\r\n    },\r\n    bankingInfo: {\r\n      bankName: \"\",\r\n      accountNumber: \"\",\r\n      branchCode: \"\",\r\n      swiftCode: \"\"\r\n    }\r\n  });\r\n\r\n  // Load settings on component mount\r\n  useEffect(() => {\r\n    loadSettings();\r\n  }, []);\r\n\r\n  const loadSettings = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const loadedSettings = await api.payroll.getPayrollSettings();\r\n      \r\n      // Use only real data from API, no hardcoded fallbacks\r\n      const settingsData = loadedSettings as any || {};\r\n      \r\n      // Map API data directly without hardcoded defaults\r\n      const completeSettings = {\r\n        companyInfo: {\r\n          name: settingsData?.companyInfo?.name || \"\",\r\n          kraPin: settingsData?.companyInfo?.kraPin || \"\",\r\n          nssfNumber: settingsData?.companyInfo?.nssfNumber || \"\",\r\n          nhifNumber: settingsData?.companyInfo?.nhifNumber || \"\",\r\n          address: settingsData?.companyInfo?.address || \"\",\r\n          postalCode: settingsData?.companyInfo?.postalCode || \"\",\r\n          city: settingsData?.companyInfo?.city || \"\"\r\n        },\r\n        payrollDefaults: {\r\n          personalRelief: settingsData?.payrollDefaults?.personalRelief || 0,\r\n          overtimeMultiplier: settingsData?.payrollDefaults?.overtimeMultiplier || 0,\r\n          workingDaysPerMonth: settingsData?.payrollDefaults?.workingDaysPerMonth || 0,\r\n          workingHoursPerDay: settingsData?.payrollDefaults?.workingHoursPerDay || 0,\r\n          payFrequency: settingsData?.payrollDefaults?.payFrequency || \"\",\r\n          payDay: settingsData?.payrollDefaults?.payDay || 0,\r\n          cutoffDay: settingsData?.payrollDefaults?.cutoffDay || 0\r\n        },\r\n        approvalWorkflow: {\r\n          requirePayrollApproval: settingsData?.approvalWorkflow?.requirePayrollApproval ?? false,\r\n          approvalLevels: settingsData?.approvalWorkflow?.approvalLevels || 0,\r\n          autoApproveThreshold: settingsData?.approvalWorkflow?.autoApproveThreshold || 0,\r\n          notifyEmployeesOnPayment: settingsData?.approvalWorkflow?.notifyEmployeesOnPayment ?? false,\r\n          sendPayslipsByEmail: settingsData?.approvalWorkflow?.sendPayslipsByEmail ?? false\r\n        },\r\n        bankingInfo: {\r\n          bankName: settingsData?.bankingInfo?.bankName || \"\",\r\n          accountNumber: settingsData?.bankingInfo?.accountNumber || \"\",\r\n          branchCode: settingsData?.bankingInfo?.branchCode || \"\",\r\n          swiftCode: settingsData?.bankingInfo?.swiftCode || \"\"\r\n        }\r\n      };\r\n      \r\n      setSettings(completeSettings);\r\n      setOriginalSettings(JSON.parse(JSON.stringify(completeSettings)));\r\n      setHasUnsavedChanges(false);\r\n      \r\n      toast({\r\n        title: \"Settings Loaded\",\r\n        description: \"Payroll settings loaded successfully from database.\",\r\n        variant: \"default\"\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n      toast({\r\n        title: \"Error Loading Settings\",\r\n        description: \"Failed to load payroll settings from database. Please try again.\",\r\n        variant: \"destructive\"\r\n      });\r\n      \r\n      // Use empty settings structure if loading fails - no hardcoded data\r\n      const emptySettings = {\r\n        companyInfo: {\r\n          name: \"\",\r\n          kraPin: \"\",\r\n          nssfNumber: \"\",\r\n          nhifNumber: \"\",\r\n          address: \"\",\r\n          postalCode: \"\",\r\n          city: \"\"\r\n        },\r\n        payrollDefaults: {\r\n          personalRelief: 0,\r\n          overtimeMultiplier: 0,\r\n          workingDaysPerMonth: 0,\r\n          workingHoursPerDay: 0,\r\n          payFrequency: \"\",\r\n          payDay: 0,\r\n          cutoffDay: 0\r\n        },\r\n        approvalWorkflow: {\r\n          requirePayrollApproval: false,\r\n          approvalLevels: 0,\r\n          autoApproveThreshold: 0,\r\n          notifyEmployeesOnPayment: false,\r\n          sendPayslipsByEmail: false\r\n        },\r\n        bankingInfo: {\r\n          bankName: \"\",\r\n          accountNumber: \"\",\r\n          branchCode: \"\",\r\n          swiftCode: \"\"\r\n        }\r\n      };\r\n      setSettings(emptySettings);\r\n      setOriginalSettings(JSON.parse(JSON.stringify(emptySettings)));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Validation functions\r\n  const validateKRAPin = (pin: string): boolean => {\r\n    // KRA PIN format: P051234567A (P + 9 digits + letter)\r\n    const kraRegex = /^P\\d{9}[A-Z]$/;\r\n    return kraRegex.test(pin);\r\n  };\r\n\r\n  const validateNSSFNumber = (number: string): boolean => {\r\n    // NSSF format: NSSF + 6 digits\r\n    const nssfRegex = /^NSSF\\d{6}$/;\r\n    return nssfRegex.test(number);\r\n  };\r\n\r\n  const validateNHIFNumber = (number: string): boolean => {\r\n    // NHIF format: NHIF + 6 digits\r\n    const nhifRegex = /^NHIF\\d{6}$/;\r\n    return nhifRegex.test(number);\r\n  };\r\n\r\n  const validateBankAccount = (account: string): boolean => {\r\n    // Bank account: 10-16 digits\r\n    const accountRegex = /^\\d{10,16}$/;\r\n    return accountRegex.test(account);\r\n  };\r\n\r\n  const validateSwiftCode = (swift: string): boolean => {\r\n    // SWIFT code: 8 or 11 characters\r\n    const swiftRegex = /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\r\n    return swiftRegex.test(swift);\r\n  };\r\n\r\n  const validateSettings = (): boolean => {\r\n    const errors: Record<string, string> = {};\r\n\r\n    // Company Info Validation\r\n    if (!settings.companyInfo.name.trim()) {\r\n      errors.name = \"Company name is required\";\r\n    }\r\n\r\n    if (settings.companyInfo.kraPin && !validateKRAPin(settings.companyInfo.kraPin)) {\r\n      errors.kraPin = \"Invalid KRA PIN format (e.g., P051234567A)\";\r\n    }\r\n\r\n    if (settings.companyInfo.nssfNumber && !validateNSSFNumber(settings.companyInfo.nssfNumber)) {\r\n      errors.nssfNumber = \"Invalid NSSF number format (e.g., NSSF001234)\";\r\n    }\r\n\r\n    if (settings.companyInfo.nhifNumber && !validateNHIFNumber(settings.companyInfo.nhifNumber)) {\r\n      errors.nhifNumber = \"Invalid NHIF number format (e.g., NHIF001234)\";\r\n    }\r\n\r\n    if (!settings.companyInfo.address.trim()) {\r\n      errors.address = \"Address is required\";\r\n    }\r\n\r\n    if (!settings.companyInfo.city.trim()) {\r\n      errors.city = \"City is required\";\r\n    }\r\n\r\n    // Payroll Defaults Validation\r\n    if (settings.payrollDefaults.personalRelief < 0) {\r\n      errors.personalRelief = \"Personal relief cannot be negative\";\r\n    }\r\n\r\n    if (settings.payrollDefaults.overtimeMultiplier < 1) {\r\n      errors.overtimeMultiplier = \"Overtime multiplier must be at least 1.0\";\r\n    }\r\n\r\n    if (settings.payrollDefaults.workingDaysPerMonth < 1 || settings.payrollDefaults.workingDaysPerMonth > 31) {\r\n      errors.workingDaysPerMonth = \"Working days must be between 1 and 31\";\r\n    }\r\n\r\n    if (settings.payrollDefaults.workingHoursPerDay < 1 || settings.payrollDefaults.workingHoursPerDay > 24) {\r\n      errors.workingHoursPerDay = \"Working hours must be between 1 and 24\";\r\n    }\r\n\r\n    if (!settings.payrollDefaults.payFrequency) {\r\n      errors.payFrequency = \"Pay frequency is required\";\r\n    }\r\n\r\n    if (settings.payrollDefaults.payDay < 1 || settings.payrollDefaults.payDay > 31) {\r\n      errors.payDay = \"Pay day must be between 1 and 31\";\r\n    }\r\n\r\n    // Banking Info Validation (only if provided)\r\n    if (settings.bankingInfo.bankName && !settings.bankingInfo.bankName.trim()) {\r\n      errors.bankName = \"Bank name cannot be empty if provided\";\r\n    }\r\n\r\n    if (settings.bankingInfo.accountNumber && !validateBankAccount(settings.bankingInfo.accountNumber)) {\r\n      errors.accountNumber = \"Invalid account number (10-16 digits)\";\r\n    }\r\n\r\n    if (settings.bankingInfo.swiftCode && !validateSwiftCode(settings.bankingInfo.swiftCode)) {\r\n      errors.swiftCode = \"Invalid SWIFT code format\";\r\n    }\r\n\r\n    setValidationErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSaveSettings = async () => {\r\n    if (!validateSettings()) {\r\n      toast({\r\n        title: \"Validation Error\",\r\n        description: \"Please fix the validation errors before saving.\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n    \r\n    try {\r\n      // Real API call to save settings\r\n      await api.payroll.updatePayrollSettings(settings);\r\n      \r\n      setOriginalSettings(JSON.parse(JSON.stringify(settings)));\r\n      setHasUnsavedChanges(false);\r\n      setShowConfirmDialog(false);\r\n      \r\n      toast({\r\n        title: \"Settings Saved\",\r\n        description: \"Payroll settings have been updated successfully.\",\r\n        variant: \"default\"\r\n      });\r\n    } catch (error: any) {\r\n      console.error('Failed to save settings:', error);\r\n      \r\n      let errorMessage = \"Failed to save settings. Please try again.\";\r\n      \r\n      // Handle specific error types\r\n      if (error.message?.includes('network')) {\r\n        errorMessage = \"Network error. Please check your connection and try again.\";\r\n      } else if (error.message?.includes('unauthorized')) {\r\n        errorMessage = \"You don't have permission to update these settings.\";\r\n      } else if (error.message?.includes('validation')) {\r\n        errorMessage = \"Server validation failed. Please check your inputs.\";\r\n      }\r\n      \r\n      toast({\r\n        title: \"Error Saving Settings\",\r\n        description: errorMessage,\r\n        variant: \"destructive\"\r\n      });\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (section: string, field: string, value: any) => {\r\n    setSettings(prev => {\r\n      // Validate and sanitize numeric values to prevent NaN\r\n      let sanitizedValue = value;\r\n      \r\n      // Handle number inputs specifically\r\n      if (section === 'payrollDefaults') {\r\n        if (field === 'personalRelief' || field === 'overtimeMultiplier' || field === 'autoApproveThreshold') {\r\n          const numValue = parseFloat(value);\r\n          sanitizedValue = isNaN(numValue) || value === '' ? 0 : numValue;\r\n        } else if (field === 'workingDaysPerMonth' || field === 'workingHoursPerDay' || field === 'payDay' || field === 'cutoffDay' || field === 'approvalLevels') {\r\n          const intValue = parseInt(value);\r\n          sanitizedValue = isNaN(intValue) || value === '' ? 0 : intValue;\r\n        }\r\n      }\r\n      \r\n      const newSettings = {\r\n        ...prev,\r\n        [section]: {\r\n          ...prev[section as keyof typeof prev],\r\n          [field]: sanitizedValue\r\n        }\r\n      };\r\n      \r\n      // Check if settings have changed\r\n      const hasChanges = JSON.stringify(newSettings) !== JSON.stringify(originalSettings);\r\n      setHasUnsavedChanges(hasChanges);\r\n      \r\n      // Clear validation error for this field\r\n      if (validationErrors[field]) {\r\n        setValidationErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors[field];\r\n          return newErrors;\r\n        });\r\n      }\r\n      \r\n      return newSettings;\r\n    });\r\n  };\r\n\r\n  const handleConfirmSave = () => {\r\n    setShowConfirmDialog(true);\r\n  };\r\n\r\n  const getChangedFields = () => {\r\n    if (!originalSettings) return [];\r\n    \r\n    const changes: string[] = [];\r\n    const checkSection = (sectionName: string, original: any, current: any) => {\r\n      Object.keys(current).forEach(key => {\r\n        if (original[key] !== current[key]) {\r\n          changes.push(`${sectionName}.${key}`);\r\n        }\r\n      });\r\n    };\r\n    \r\n    checkSection('Company Info', originalSettings.companyInfo, settings.companyInfo);\r\n    checkSection('Payroll Defaults', originalSettings.payrollDefaults, settings.payrollDefaults);\r\n    checkSection('Approval Workflow', originalSettings.approvalWorkflow, settings.approvalWorkflow);\r\n    checkSection('Banking Info', originalSettings.bankingInfo, settings.bankingInfo);\r\n    \r\n    return changes;\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <DashboardLayout title=\"Payroll Settings\">\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <RefreshCw className=\"h-8 w-8 animate-spin text-blue-500\" />\r\n          <span className=\"ml-2\">Loading settings...</span>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  // Safety check for settings object\r\n  if (!settings || !settings.companyInfo || !settings.payrollDefaults || !settings.approvalWorkflow || !settings.bankingInfo) {\r\n    return (\r\n      <DashboardLayout title=\"Payroll Settings\">\r\n        <div className=\"flex items-center justify-center h-64\">\r\n          <div className=\"text-center\">\r\n            <AlertTriangle className=\"h-8 w-8 text-yellow-500 mx-auto mb-4\" />\r\n            <p className=\"text-lg\">Settings not available</p>\r\n            <p className=\"text-sm text-gray-500 mt-2\">Please refresh the page or contact support.</p>\r\n            <Button onClick={loadSettings} className=\"mt-4\">\r\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n              Retry Loading\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </DashboardLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DashboardLayout title=\"Payroll Settings\">\r\n      <div className=\"space-y-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <CardTitle>Payroll System Settings</CardTitle>\r\n                <CardDescription>\r\n                  Configure payroll calculation parameters and company information\r\n                </CardDescription>\r\n              </div>\r\n              <Button onClick={handleSaveSettings} disabled={isSaving}>\r\n                {isSaving ? (\r\n                  <>\r\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                    Saving...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Save className=\"h-4 w-4 mr-2\" />\r\n                    Save Settings\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n        </Card>\r\n\r\n        {hasUnsavedChanges && (\r\n          <Alert>\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              You have unsaved changes. Don't forget to save your settings.\r\n            </AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        <Tabs defaultValue=\"company\" className=\"space-y-6\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"company\">Company Information</TabsTrigger>\r\n            <TabsTrigger value=\"payroll\">Payroll Defaults</TabsTrigger>\r\n            <TabsTrigger value=\"workflow\">Approval Workflow</TabsTrigger>\r\n            <TabsTrigger value=\"banking\">Banking Information</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"company\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <Building className=\"h-5 w-5 mr-2\" />\r\n                  Company Information\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Company details used in payroll reports and statutory filings\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid gap-6 md:grid-cols-2\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"company-name\">Company Name</Label>\r\n                    <Input \r\n                      id=\"company-name\" \r\n                      value={settings.companyInfo.name}\r\n                      onChange={(e) => handleInputChange('companyInfo', 'name', e.target.value)}\r\n                      className={validationErrors.name ? 'border-red-500' : ''}\r\n                      placeholder=\"Enter your company name\"\r\n                    />\r\n                    {validationErrors.name && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.name}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"kra-pin\">KRA PIN</Label>\r\n                    <Input \r\n                      id=\"kra-pin\" \r\n                      value={settings.companyInfo.kraPin}\r\n                      onChange={(e) => handleInputChange('companyInfo', 'kraPin', e.target.value)}\r\n                      className={validationErrors.kraPin ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., P051234567A\"\r\n                    />\r\n                    {validationErrors.kraPin && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.kraPin}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"nssf-number\">NSSF Number</Label>\r\n                    <Input \r\n                      id=\"nssf-number\" \r\n                      value={settings.companyInfo.nssfNumber}\r\n                      onChange={(e) => handleInputChange('companyInfo', 'nssfNumber', e.target.value)}\r\n                      className={validationErrors.nssfNumber ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., NSSF001234\"\r\n                    />\r\n                    {validationErrors.nssfNumber && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.nssfNumber}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"nhif-number\">NHIF Number</Label>\r\n                    <Input \r\n                      id=\"nhif-number\" \r\n                      value={settings.companyInfo.nhifNumber}\r\n                      onChange={(e) => handleInputChange('companyInfo', 'nhifNumber', e.target.value)}\r\n                      className={validationErrors.nhifNumber ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., NHIF001234\"\r\n                    />\r\n                    {validationErrors.nhifNumber && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.nhifNumber}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"address\">Address</Label>\r\n                    <Input \r\n                      id=\"address\" \r\n                      value={settings.companyInfo.address}\r\n                      onChange={(e) => handleInputChange('companyInfo', 'address', e.target.value)}\r\n                      className={validationErrors.address ? 'border-red-500' : ''}\r\n                      placeholder=\"Enter company physical address\"\r\n                    />\r\n                    {validationErrors.address && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.address}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"postal-code\">Postal Code</Label>\r\n                      <Input \r\n                        id=\"postal-code\" \r\n                        value={settings.companyInfo.postalCode}\r\n                        onChange={(e) => handleInputChange('companyInfo', 'postalCode', e.target.value)}\r\n                        placeholder=\"e.g., 00100\"\r\n                      />\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"city\">City</Label>\r\n                      <Input \r\n                        id=\"city\" \r\n                        value={settings.companyInfo.city}\r\n                        onChange={(e) => handleInputChange('companyInfo', 'city', e.target.value)}\r\n                        className={validationErrors.city ? 'border-red-500' : ''}\r\n                        placeholder=\"e.g., Nairobi\"\r\n                      />\r\n                      {validationErrors.city && (\r\n                        <p className=\"text-sm text-red-500\">{validationErrors.city}</p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"payroll\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <Calendar className=\"h-5 w-5 mr-2\" />\r\n                  Payroll Calculation Defaults\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Default values used in payroll calculations\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid gap-6 md:grid-cols-2\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"personal-relief\">Personal Relief (KES)</Label>\r\n                    <Input \r\n                      id=\"personal-relief\" \r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      step=\"0.01\"\r\n                      value={settings.payrollDefaults.personalRelief || ''}\r\n                      onChange={(e) => handleInputChange('payrollDefaults', 'personalRelief', e.target.value)}\r\n                      className={validationErrors.personalRelief ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., 2400\"\r\n                    />\r\n                    {validationErrors.personalRelief && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.personalRelief}</p>\r\n                    )}\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Standard personal relief applied to all employees\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"overtime-multiplier\">Overtime Multiplier</Label>\r\n                    <Input \r\n                      id=\"overtime-multiplier\" \r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      step=\"0.1\"\r\n                      value={settings.payrollDefaults.overtimeMultiplier || ''}\r\n                      onChange={(e) => handleInputChange('payrollDefaults', 'overtimeMultiplier', e.target.value)}\r\n                      className={validationErrors.overtimeMultiplier ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., 1.5\"\r\n                    />\r\n                    {validationErrors.overtimeMultiplier && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.overtimeMultiplier}</p>\r\n                    )}\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Multiplier for overtime hours (e.g., 1.5 = time and a half)\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"working-days\">Working Days per Month</Label>\r\n                    <Input \r\n                      id=\"working-days\" \r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      max=\"31\"\r\n                      value={settings.payrollDefaults.workingDaysPerMonth || ''}\r\n                      onChange={(e) => handleInputChange('payrollDefaults', 'workingDaysPerMonth', e.target.value)}\r\n                      className={validationErrors.workingDaysPerMonth ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., 22\"\r\n                    />\r\n                    {validationErrors.workingDaysPerMonth && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.workingDaysPerMonth}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"working-hours\">Working Hours per Day</Label>\r\n                    <Input \r\n                      id=\"working-hours\" \r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      max=\"24\"\r\n                      value={settings.payrollDefaults.workingHoursPerDay || ''}\r\n                      onChange={(e) => handleInputChange('payrollDefaults', 'workingHoursPerDay', e.target.value)}\r\n                      className={validationErrors.workingHoursPerDay ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., 8\"\r\n                    />\r\n                    {validationErrors.workingHoursPerDay && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.workingHoursPerDay}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"pay-frequency\">Pay Frequency</Label>\r\n                    <Select \r\n                      value={settings.payrollDefaults.payFrequency}\r\n                      onValueChange={(value) => handleInputChange('payrollDefaults', 'payFrequency', value)}\r\n                    >\r\n                      <SelectTrigger id=\"pay-frequency\">\r\n                        <SelectValue placeholder=\"Select pay frequency\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\r\n                        <SelectItem value=\"biweekly\">Bi-weekly</SelectItem>\r\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"pay-day\">Pay Day</Label>\r\n                    <Input \r\n                      id=\"pay-day\" \r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      max=\"31\"\r\n                      value={settings.payrollDefaults.payDay || ''}\r\n                      onChange={(e) => handleInputChange('payrollDefaults', 'payDay', e.target.value)}\r\n                      className={validationErrors.payDay ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., 25\"\r\n                    />\r\n                    {validationErrors.payDay && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.payDay}</p>\r\n                    )}\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Day of month when employees are paid\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"workflow\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <Users className=\"h-5 w-5 mr-2\" />\r\n                  Approval Workflow\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Configure payroll approval process and notifications\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-6\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"space-y-0.5\">\r\n                      <Label htmlFor=\"require-approval\">Require Payroll Approval</Label>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Require manager approval before processing payroll\r\n                      </p>\r\n                    </div>\r\n                    <Switch \r\n                      id=\"require-approval\"\r\n                      checked={settings.approvalWorkflow.requirePayrollApproval}\r\n                      onCheckedChange={(checked) => handleInputChange('approvalWorkflow', 'requirePayrollApproval', checked)}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"approval-levels\">Approval Levels</Label>\r\n                    <Select \r\n                      value={settings.approvalWorkflow.approvalLevels.toString()}\r\n                      onValueChange={(value) => handleInputChange('approvalWorkflow', 'approvalLevels', parseInt(value))}\r\n                      disabled={!settings.approvalWorkflow.requirePayrollApproval}\r\n                    >\r\n                      <SelectTrigger id=\"approval-levels\">\r\n                        <SelectValue placeholder=\"Select approval levels\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"1\">1 Level</SelectItem>\r\n                        <SelectItem value=\"2\">2 Levels</SelectItem>\r\n                        <SelectItem value=\"3\">3 Levels</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Number of approval levels required\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"auto-approve-threshold\">Auto-Approve Threshold (KES)</Label>\r\n                    <Input \r\n                      id=\"auto-approve-threshold\" \r\n                      type=\"number\"\r\n                      value={settings.approvalWorkflow.autoApproveThreshold}\r\n                      onChange={(e) => handleInputChange('approvalWorkflow', 'autoApproveThreshold', parseInt(e.target.value))}\r\n                      disabled={!settings.approvalWorkflow.requirePayrollApproval}\r\n                    />\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Automatically approve changes below this amount\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"space-y-0.5\">\r\n                      <Label htmlFor=\"notify-employees\">Notify Employees on Payment</Label>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Send email notification when payment is processed\r\n                      </p>\r\n                    </div>\r\n                    <Switch \r\n                      id=\"notify-employees\"\r\n                      checked={settings.approvalWorkflow.notifyEmployeesOnPayment}\r\n                      onCheckedChange={(checked) => handleInputChange('approvalWorkflow', 'notifyEmployeesOnPayment', checked)}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"space-y-0.5\">\r\n                      <Label htmlFor=\"send-payslips\">Send Payslips by Email</Label>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Automatically email payslips to employees\r\n                      </p>\r\n                    </div>\r\n                    <Switch \r\n                      id=\"send-payslips\"\r\n                      checked={settings.approvalWorkflow.sendPayslipsByEmail}\r\n                      onCheckedChange={(checked) => handleInputChange('approvalWorkflow', 'sendPayslipsByEmail', checked)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"banking\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <DollarSign className=\"h-5 w-5 mr-2\" />\r\n                  Banking Information\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  Company banking details for payroll processing\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid gap-6 md:grid-cols-2\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"bank-name\">Bank Name</Label>\r\n                    <Input \r\n                      id=\"bank-name\" \r\n                      value={settings.bankingInfo.bankName}\r\n                      onChange={(e) => handleInputChange('bankingInfo', 'bankName', e.target.value)}\r\n                      className={validationErrors.bankName ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., Kenya Commercial Bank\"\r\n                    />\r\n                    {validationErrors.bankName && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.bankName}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"account-number\">Account Number</Label>\r\n                    <Input \r\n                      id=\"account-number\" \r\n                      value={settings.bankingInfo.accountNumber}\r\n                      onChange={(e) => handleInputChange('bankingInfo', 'accountNumber', e.target.value)}\r\n                      className={validationErrors.accountNumber ? 'border-red-500' : ''}\r\n                      placeholder=\"e.g., 1234567890\"\r\n                    />\r\n                    {validationErrors.accountNumber && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.accountNumber}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"branch-code\">Branch Code</Label>\r\n                    <Input \r\n                      id=\"branch-code\" \r\n                      value={settings.bankingInfo.branchCode}\r\n                      onChange={(e) => handleInputChange('bankingInfo', 'branchCode', e.target.value)}\r\n                      className={validationErrors.branchCode ? 'border-red-500' : ''}\r\n                    />\r\n                    {validationErrors.branchCode && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.branchCode}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"swift-code\">SWIFT Code</Label>\r\n                    <Input \r\n                      id=\"swift-code\" \r\n                      value={settings.bankingInfo.swiftCode}\r\n                      onChange={(e) => handleInputChange('bankingInfo', 'swiftCode', e.target.value)}\r\n                      className={validationErrors.swiftCode ? 'border-red-500' : ''}\r\n                    />\r\n                    {validationErrors.swiftCode && (\r\n                      <p className=\"text-sm text-red-500\">{validationErrors.swiftCode}</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Alert>\r\n              <Info className=\"h-4 w-4\" />\r\n              <AlertDescription>\r\n                Banking information is used for payroll processing and will appear on bank transfer files.\r\n              </AlertDescription>\r\n            </Alert>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <div className=\"flex items-center text-sm text-muted-foreground\">\r\n                <Clock className=\"h-4 w-4 mr-2\" />\r\n                <span>Last updated: July 1, 2025 at 10:23 AM</span>\r\n              </div>\r\n              <Button onClick={handleSaveSettings} disabled={isSaving}>\r\n                {isSaving ? (\r\n                  <>\r\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                    Saving...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Save className=\"h-4 w-4 mr-2\" />\r\n                    Save Settings\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default PayrollSettings;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\TaxManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\pages\\payroll\\TimeAttendance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\apiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\activity.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\admin.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\analytics.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\auth.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\branch.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\dashboard.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\department.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\employee.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\integrationApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\leave.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\payroll.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\performance.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\performanceReview.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\permission.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\role.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\salaryAdvance.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\securityAlert.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\securitySettings.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\training.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\user.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\workflowApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\api\\workflowApiV2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\auditTrail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\enhancedApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\integrationHub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\kenyanAuditTrail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\multiCurrencySupport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\notificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\payrollAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\payrollDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\payrollEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\regulatoryUpdates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\unifiedApi.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,55],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { \r\n  TeamMemberAllocation, \r\n  PlannedRole, \r\n  User, \r\n  Role,\r\n  LeaveRequest, \r\n  SalaryAdvanceRequest, \r\n  WorkflowStep, \r\n  PayrollDeduction,\r\n  AdvancePayrollIntegration \r\n} from \"@/types/types\";\r\n\r\n// Import Kenyan payroll types\r\nimport type {\r\n  TimeEntry,\r\n  PayrollPeriod,\r\n  KenyanPayrollEmployee as PayrollEmployee,\r\n  KenyanPayrollRecord as PayrollRecord,\r\n  KenyanPayStub as PayStub,\r\n  KenyanTaxTable as TaxTable,\r\n  KenyanPayrollReport as PayrollReport,\r\n  KenyanComplianceReport as ComplianceReport,\r\n  KenyanPayrollAuditLog as PayrollAuditLog,\r\n  KenyanPayrollSettings as PayrollSettings\r\n} from \"@/types/payroll\";\r\n\r\n// Import real API services\r\nimport { authService } from './api/auth.service';\r\nimport { employeeService } from './api/employee.service';\r\nimport { leaveService } from './api/leave.service';\r\nimport { salaryAdvanceService } from './api/salaryAdvance.service';\r\nimport { payrollService } from './api/payroll.service';\r\n\r\n// Helper function to map backend employee to frontend User\r\nconst mapEmployeeToUser = (employee: any): User => ({\r\n  id: employee.id,\r\n  firstName: employee.firstName,\r\n  lastName: employee.lastName,\r\n  email: employee.email,\r\n  role: (employee.position || 'EMPLOYEE') as 'ADMIN' | 'HR_MANAGER' | 'OPERATIONS_MANAGER' | 'EMPLOYEE',\r\n  department: employee.department,\r\n  status: employee.status === 'active' ? 'active' : 'inactive',\r\n  position: employee.position,\r\n  employeeId: employee.employeeId,\r\n  branchId: employee.branchId,\r\n  departmentId: employee.departmentId\r\n});\r\n\r\n// Helper function to map backend leave request to frontend LeaveRequest\r\nconst mapBackendLeaveToFrontend = (backendLeave: any): LeaveRequest => ({\r\n  id: backendLeave.id,\r\n  employeeId: backendLeave.employeeId,\r\n  employeeName: `${backendLeave.employee.firstName} ${backendLeave.employee.lastName}`,\r\n  branch: backendLeave.employee.department,\r\n  leaveType: backendLeave.leaveType.name,\r\n  startDate: backendLeave.startDate,\r\n  endDate: backendLeave.endDate,\r\n  days: backendLeave.totalDays,\r\n  reason: backendLeave.reason,\r\n  status: mapLeaveStatus(backendLeave.status),\r\n  submissionDate: backendLeave.appliedDate,\r\n  currentStep: mapLeaveCurrentStep(backendLeave.status),\r\n  workflowHistory: [\r\n    {\r\n      id: `wf-${backendLeave.id}`,\r\n      step: 'submission',\r\n      actor: backendLeave.employeeId,\r\n      actorName: `${backendLeave.employee.firstName} ${backendLeave.employee.lastName}`,\r\n      action: 'submitted',\r\n      timestamp: backendLeave.createdAt,\r\n      comments: backendLeave.reason\r\n    }\r\n  ]\r\n});\r\n\r\n// Helper function to map backend salary advance to frontend SalaryAdvanceRequest\r\nconst mapBackendSalaryAdvanceToFrontend = (backendAdvance: any): SalaryAdvanceRequest => ({\r\n  id: parseInt(backendAdvance.id),\r\n  employeeId: parseInt(backendAdvance.employeeId),\r\n  employeeName: backendAdvance.employee ? `${backendAdvance.employee.firstName} ${backendAdvance.employee.lastName}` : 'Unknown Employee',\r\n  branch: backendAdvance.employee?.department || 'Unknown',\r\n  amount: backendAdvance.requestedAmount || 0,\r\n  reason: backendAdvance.reason,\r\n  requestDate: backendAdvance.requestDate || backendAdvance.createdAt?.split('T')[0],\r\n  status: mapSalaryAdvanceStatus(backendAdvance.status),\r\n  disbursementMethod: 'bank_transfer',\r\n  currentStep: mapSalaryAdvanceCurrentStep(backendAdvance.status),\r\n  payrollIntegration: {\r\n    payrollDeductionId: `PD-${backendAdvance.id}`,\r\n    monthlyDeduction: Math.round((backendAdvance.requestedAmount || 0) / 6),\r\n    repaymentMonths: 6,\r\n    startDeductionDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n    estimatedCompletionDate: new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n    deductionPriority: 1\r\n  },\r\n  repaymentDetails: {\r\n    originalAmount: backendAdvance.requestedAmount || 0,\r\n    totalDeducted: 0,\r\n    remainingBalance: backendAdvance.requestedAmount || 0,\r\n    repaymentMethod: 'payroll_deduction_only',\r\n    deductionHistory: []\r\n  },\r\n  workflowHistory: [\r\n    {\r\n      id: `wf-sa-${backendAdvance.id}`,\r\n      step: 'submission',\r\n      actor: backendAdvance.employeeId,\r\n      actorName: backendAdvance.employee ? `${backendAdvance.employee.firstName} ${backendAdvance.employee.lastName}` : 'Unknown Employee',\r\n      action: 'submitted',\r\n      timestamp: backendAdvance.createdAt,\r\n      comments: backendAdvance.reason\r\n    }\r\n  ]\r\n});\r\n\r\n// Status mapping functions\r\nconst mapLeaveStatus = (backendStatus: string): string => {\r\n  switch (backendStatus) {\r\n    case 'pending': return 'pending_ops_initial';\r\n    case 'approved': return 'ops_final_approved';\r\n    case 'rejected': return 'ops_final_rejected';\r\n    default: return backendStatus;\r\n  }\r\n};\r\n\r\nconst mapLeaveCurrentStep = (backendStatus: string): string => {\r\n  switch (backendStatus) {\r\n    case 'pending': return 'ops_initial';\r\n    case 'approved': \r\n    case 'rejected': return 'completed';\r\n    default: return 'ops_initial';\r\n  }\r\n};\r\n\r\nconst mapSalaryAdvanceStatus = (backendStatus: string): string => {\r\n  switch (backendStatus) {\r\n    case 'pending': return 'pending_ops_initial';\r\n    case 'approved': return 'ops_final_approved';\r\n    case 'rejected': return 'ops_final_rejected';\r\n    case 'disbursed': return 'disbursed';\r\n    default: return backendStatus;\r\n  }\r\n};\r\n\r\nconst mapSalaryAdvanceCurrentStep = (backendStatus: string): string => {\r\n  switch (backendStatus) {\r\n    case 'pending': return 'ops_initial';\r\n    case 'approved': return 'disbursement';\r\n    case 'disbursed': return 'repayment';\r\n    case 'rejected': return 'completed';\r\n    default: return 'ops_initial';\r\n  }\r\n};\r\n\r\n// Create a unified API that maps to real API services\r\nexport const api = {\r\n  // Auth methods\r\n  auth: {\r\n    getToken: async () => {\r\n      try {\r\n        // Cleaned up: removed legacy mock token comment\r\n        return \"mock-auth-token-\" + Math.random().toString(36).substring(2);\r\n      } catch (error) {\r\n        console.error(\"Auth.getToken error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n    isAuthenticated: async () => {\r\n      try {\r\n        return authService.isAuthenticated();\r\n      } catch (error) {\r\n        console.error(\"Auth.isAuthenticated error:\", error);\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  \r\n  // Data fetching methods\r\n  data: {\r\n    // Team allocation methods (not implemented in backend yet)\r\n    getAvailability: async (startDate: Date, endDate: Date): Promise<TeamMemberAllocation[]> => {\r\n      try {\r\n        console.log(`Fetching availability from ${startDate.toISOString()} to ${endDate.toISOString()}`);\r\n        return [];\r\n      } catch (error) {\r\n        console.error(\"getAvailability error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n    \r\n    getCapacityData: async (startDate: Date, weeks: number) => {\r\n      try {\r\n        console.log(`Fetching capacity data from ${startDate.toISOString()} for ${weeks} weeks`);\r\n        return [];\r\n      } catch (error) {\r\n        console.error(\"getCapacityData error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n    \r\n    getRoleCapacityData: async (startDate: Date, weeks: number) => {\r\n      try {\r\n        console.log(`Fetching role capacity data from ${startDate.toISOString()} for ${weeks} weeks`);\r\n        return [];\r\n      } catch (error) {\r\n        console.error(\"getRoleCapacityData error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n    \r\n    getPlannedRoles: async (): Promise<PlannedRole[]> => {\r\n      try {\r\n        console.log(\"Fetching planned roles\");\r\n        return [];\r\n      } catch (error) {\r\n        console.error(\"getPlannedRoles error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n    \r\n    savePlannedRole: async (role: PlannedRole): Promise<PlannedRole> => {\r\n      try {\r\n        console.log(\"Saving planned role:\", role);\r\n        return { ...role, id: Math.floor(Math.random() * 1000) };\r\n      } catch (error) {\r\n        console.error(\"savePlannedRole error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    deletePlannedRole: async (id: number): Promise<boolean> => {\r\n      try {\r\n        console.log(`Deleting planned role with ID: ${id}`);\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"deletePlannedRole error:\", error);\r\n        return false;\r\n      }\r\n    },\r\n\r\n    getUsers: async (): Promise<User[]> => {\r\n      try {\r\n        console.log(\"Fetching users from backend API\");\r\n        const response = await employeeService.getEmployees();\r\n        const employees = response.data || [];\r\n        return employees.map(mapEmployeeToUser);\r\n      } catch (error) {\r\n        console.error(\"getUsers error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    getRoles: async (): Promise<Role[]> => {\r\n      try {\r\n        console.log(\"Fetching roles from backend API\");\r\n        return [];\r\n      } catch (error) {\r\n        console.error(\"getRoles error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Leave Request Management\r\n    submitLeaveRequest: async (request: Omit<LeaveRequest, 'id' | 'status' | 'submissionDate' | 'workflowHistory' | 'currentStep'>): Promise<LeaveRequest> => {\r\n      try {\r\n        console.log(\"Submitting leave request:\", request);\r\n        \r\n        const response = await leaveService.createLeaveRequest({\r\n          leaveTypeId: '1', // Default leave type\r\n          startDate: request.startDate,\r\n          endDate: request.endDate,\r\n          reason: request.reason\r\n        });\r\n        \r\n        return mapBackendLeaveToFrontend(response);\r\n      } catch (error) {\r\n        console.error(\"submitLeaveRequest error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    getLeaveRequests: async (role: 'employee' | 'operations' | 'hr', filters?: { employeeId?: string; branchId?: string }): Promise<LeaveRequest[]> => {\r\n      try {\r\n        console.log(`Fetching leave requests for role: ${role}`, filters);\r\n        \r\n        const response = await leaveService.getLeaveRequests({\r\n          ...filters,\r\n          status: role === 'operations' ? 'pending' : undefined\r\n        });\r\n        \r\n        const leaveRequests = response.data || [];\r\n        return leaveRequests.map(mapBackendLeaveToFrontend);\r\n      } catch (error) {\r\n        console.error(\"getLeaveRequests error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Operations Manager forwards to HR\r\n    forwardLeaveRequestToHR: async (requestId: string, opsManagerId: string, comments?: string): Promise<LeaveRequest> => {\r\n      try {\r\n        console.log(`Forwarding leave request ${requestId} to HR by ${opsManagerId}`);\r\n        \r\n        const response = await leaveService.approveLeaveRequest({\r\n          requestId,\r\n          approverId: opsManagerId,\r\n          comments\r\n        });\r\n        \r\n        const mapped = mapBackendLeaveToFrontend(response);\r\n        mapped.status = 'forwarded_to_hr';\r\n        mapped.currentStep = 'hr_review';\r\n        mapped.opsManagerId = opsManagerId;\r\n        mapped.opsManagerName = 'Operations Manager';\r\n        mapped.opsInitialDate = new Date().toISOString().split('T')[0];\r\n        mapped.opsInitialComments = comments;\r\n        \r\n        return mapped;\r\n      } catch (error) {\r\n        console.error(\"forwardLeaveRequestToHR error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // HR reviews and makes eligibility decision\r\n    reviewLeaveRequestHR: async (requestId: string, hrReviewerId: string, decision: 'eligible' | 'not_eligible', comments?: string): Promise<LeaveRequest> => {\r\n      try {\r\n        console.log(`HR reviewing leave request ${requestId} by ${hrReviewerId}: ${decision}`);\r\n        \r\n        if (decision === 'eligible') {\r\n          const response = await leaveService.approveLeaveRequest({\r\n            requestId,\r\n            approverId: hrReviewerId,\r\n            comments\r\n          });\r\n          \r\n          const mapped = mapBackendLeaveToFrontend(response);\r\n          mapped.status = 'hr_approved';\r\n          mapped.currentStep = 'ops_final';\r\n          mapped.hrReviewerId = hrReviewerId;\r\n          mapped.hrReviewerName = 'HR Reviewer';\r\n          mapped.hrReviewDate = new Date().toISOString().split('T')[0];\r\n          mapped.hrDecision = decision;\r\n          mapped.hrComments = comments;\r\n          \r\n          return mapped;\r\n        } else {\r\n          const response = await leaveService.rejectLeaveRequest({\r\n            requestId,\r\n            approverId: hrReviewerId,\r\n            rejectionReason: comments || 'Not eligible'\r\n          });\r\n          \r\n          const mapped = mapBackendLeaveToFrontend(response);\r\n          mapped.status = 'hr_rejected';\r\n          mapped.currentStep = 'completed';\r\n          mapped.hrReviewerId = hrReviewerId;\r\n          mapped.hrReviewerName = 'HR Reviewer';\r\n          mapped.hrReviewDate = new Date().toISOString().split('T')[0];\r\n          mapped.hrDecision = decision;\r\n          mapped.hrComments = comments;\r\n          \r\n          return mapped;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"reviewLeaveRequestHR error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Operations Manager makes final decision\r\n    finalDecisionLeaveRequest: async (requestId: string, opsManagerId: string, decision: 'approved' | 'rejected', comments?: string): Promise<LeaveRequest> => {\r\n      try {\r\n        console.log(`Operations Manager final decision on leave request ${requestId}: ${decision}`);\r\n        \r\n        if (decision === 'approved') {\r\n          const response = await leaveService.approveLeaveRequest({\r\n            requestId,\r\n            approverId: opsManagerId,\r\n            comments\r\n          });\r\n          \r\n          const mapped = mapBackendLeaveToFrontend(response);\r\n          mapped.status = 'ops_final_approved';\r\n          mapped.currentStep = 'completed';\r\n          mapped.opsFinalDate = new Date().toISOString().split('T')[0];\r\n          mapped.opsFinalDecision = decision;\r\n          mapped.opsFinalComments = comments;\r\n          \r\n          return mapped;\r\n        } else {\r\n          const response = await leaveService.rejectLeaveRequest({\r\n            requestId,\r\n            approverId: opsManagerId,\r\n            rejectionReason: comments || 'Rejected by operations'\r\n          });\r\n          \r\n          const mapped = mapBackendLeaveToFrontend(response);\r\n          mapped.status = 'ops_final_rejected';\r\n          mapped.currentStep = 'completed';\r\n          mapped.opsFinalDate = new Date().toISOString().split('T')[0];\r\n          mapped.opsFinalDecision = decision;\r\n          mapped.opsFinalComments = comments;\r\n          \r\n          return mapped;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"finalDecisionLeaveRequest error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Legacy leave request methods for backward compatibility\r\n    approveLeaveRequest: async (requestId: string, role: 'operations' | 'hr', comments?: string): Promise<LeaveRequest> => {\r\n      console.log(`Legacy approve method: ${role} approving leave request ${requestId}`);\r\n      \r\n      if (role === 'operations') {\r\n        return api.data.forwardLeaveRequestToHR(requestId, 'current-user', comments);\r\n      } else {\r\n        return api.data.reviewLeaveRequestHR(requestId, 'current-user', 'eligible', comments);\r\n      }\r\n    },\r\n\r\n    rejectLeaveRequest: async (requestId: string, role: 'operations' | 'hr', comments?: string): Promise<LeaveRequest> => {\r\n      console.log(`Legacy reject method: ${role} rejecting leave request ${requestId}`);\r\n      \r\n      if (role === 'hr') {\r\n        return api.data.reviewLeaveRequestHR(requestId, 'current-user', 'not_eligible', comments);\r\n      } else {\r\n        return api.data.finalDecisionLeaveRequest(requestId, 'current-user', 'rejected', comments);\r\n      }\r\n    },\r\n\r\n    // Salary Advance Management\r\n    submitSalaryAdvanceRequest: async (request: Omit<SalaryAdvanceRequest, 'id' | 'status' | 'requestDate' | 'workflowHistory' | 'currentStep' | 'payrollIntegration' | 'repaymentDetails'>): Promise<SalaryAdvanceRequest> => {\r\n      try {\r\n        console.log(\"Submitting salary advance request:\", request);\r\n        \r\n        const response = await salaryAdvanceService.createSalaryAdvanceRequest({\r\n          requestedAmount: request.amount,\r\n          reason: request.reason\r\n        });\r\n        \r\n        return mapBackendSalaryAdvanceToFrontend(response);\r\n      } catch (error) {\r\n        console.error(\"submitSalaryAdvanceRequest error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    getSalaryAdvanceRequests: async (role: 'employee' | 'operations' | 'hr', filters?: { employeeId?: string; branchId?: string }): Promise<SalaryAdvanceRequest[]> => {\r\n      try {\r\n        console.log(`Fetching salary advance requests for role: ${role}`, filters);\r\n        \r\n        const response = await salaryAdvanceService.getSalaryAdvanceRequests({\r\n          ...filters,\r\n          status: role === 'operations' ? 'pending' : undefined\r\n        });\r\n        \r\n        const salaryAdvances = response.data || [];\r\n        return salaryAdvances.map(mapBackendSalaryAdvanceToFrontend);\r\n      } catch (error) {\r\n        console.error(\"getSalaryAdvanceRequests error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Operations Manager forwards salary advance to HR\r\n    forwardSalaryAdvanceToHR: async (requestId: number | string, opsManagerId: string, comments?: string): Promise<SalaryAdvanceRequest> => {\r\n      try {\r\n        console.log(`Forwarding salary advance request ${requestId} to HR by ${opsManagerId}`);\r\n        \r\n        const response = await salaryAdvanceService.approveSalaryAdvanceRequest({\r\n          requestId: requestId.toString(),\r\n          approverId: opsManagerId,\r\n          comments\r\n        });\r\n        \r\n        const mapped = mapBackendSalaryAdvanceToFrontend(response);\r\n        mapped.status = 'forwarded_to_hr';\r\n        mapped.currentStep = 'hr_review';\r\n        mapped.opsManagerId = opsManagerId;\r\n        mapped.opsManagerName = 'Operations Manager';\r\n        mapped.opsInitialDate = new Date().toISOString().split('T')[0];\r\n        mapped.opsInitialComments = comments;\r\n        \r\n        return mapped;\r\n      } catch (error) {\r\n        console.error(\"forwardSalaryAdvanceToHR error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // HR reviews salary advance eligibility\r\n    reviewSalaryAdvanceHR: async (requestId: number | string, hrReviewerId: string, decision: 'eligible' | 'not_eligible', comments?: string, eligibilityDetails?: any): Promise<SalaryAdvanceRequest> => {\r\n      try {\r\n        console.log(`HR reviewing salary advance request ${requestId} by ${hrReviewerId}: ${decision}`);\r\n        \r\n        if (decision === 'eligible') {\r\n          const response = await salaryAdvanceService.approveSalaryAdvanceRequest({\r\n            requestId: requestId.toString(),\r\n            approverId: hrReviewerId,\r\n            comments\r\n          });\r\n          \r\n          const mapped = mapBackendSalaryAdvanceToFrontend(response);\r\n          mapped.status = 'hr_approved';\r\n          mapped.currentStep = 'ops_final';\r\n          mapped.hrReviewerId = hrReviewerId;\r\n          mapped.hrReviewerName = 'HR Reviewer';\r\n          mapped.hrReviewDate = new Date().toISOString().split('T')[0];\r\n          mapped.hrDecision = decision;\r\n          mapped.hrComments = comments;\r\n          mapped.hrEligibilityDetails = eligibilityDetails;\r\n          \r\n          return mapped;\r\n        } else {\r\n          const response = await salaryAdvanceService.rejectSalaryAdvanceRequest({\r\n            requestId: requestId.toString(),\r\n            approverId: hrReviewerId,\r\n            rejectionReason: comments || 'Not eligible'\r\n          });\r\n          \r\n          const mapped = mapBackendSalaryAdvanceToFrontend(response);\r\n          mapped.status = 'hr_rejected';\r\n          mapped.currentStep = 'completed';\r\n          mapped.hrReviewerId = hrReviewerId;\r\n          mapped.hrReviewerName = 'HR Reviewer';\r\n          mapped.hrReviewDate = new Date().toISOString().split('T')[0];\r\n          mapped.hrDecision = decision;\r\n          mapped.hrComments = comments;\r\n          \r\n          return mapped;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"reviewSalaryAdvanceHR error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Operations Manager makes final decision on salary advance\r\n    finalDecisionSalaryAdvance: async (requestId: number | string, opsManagerId: string, decision: 'approved' | 'rejected', comments?: string): Promise<SalaryAdvanceRequest> => {\r\n      try {\r\n        console.log(`Operations Manager final decision on salary advance request ${requestId}: ${decision}`);\r\n        \r\n        if (decision === 'approved') {\r\n          const response = await salaryAdvanceService.approveSalaryAdvanceRequest({\r\n            requestId: requestId.toString(),\r\n            approverId: opsManagerId,\r\n            comments\r\n          });\r\n          \r\n          const mapped = mapBackendSalaryAdvanceToFrontend(response);\r\n          mapped.status = 'ops_final_approved';\r\n          mapped.currentStep = 'disbursement';\r\n          mapped.opsFinalDate = new Date().toISOString().split('T')[0];\r\n          mapped.opsFinalDecision = decision;\r\n          mapped.opsFinalComments = comments;\r\n          \r\n          return mapped;\r\n        } else {\r\n          const response = await salaryAdvanceService.rejectSalaryAdvanceRequest({\r\n            requestId: requestId.toString(),\r\n            approverId: opsManagerId,\r\n            rejectionReason: comments || 'Rejected by operations'\r\n          });\r\n          \r\n          const mapped = mapBackendSalaryAdvanceToFrontend(response);\r\n          mapped.status = 'ops_final_rejected';\r\n          mapped.currentStep = 'completed';\r\n          mapped.opsFinalDate = new Date().toISOString().split('T')[0];\r\n          mapped.opsFinalDecision = decision;\r\n          mapped.opsFinalComments = comments;\r\n          \r\n          return mapped;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"finalDecisionSalaryAdvance error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Legacy salary advance methods for backward compatibility\r\n    approveSalaryAdvanceRequest: async (requestId: number | string, role: 'operations' | 'hr', comments?: string): Promise<SalaryAdvanceRequest> => {\r\n      console.log(`Legacy approve method: ${role} approving salary advance request ${requestId}`);\r\n      \r\n      if (role === 'operations') {\r\n        return api.data.forwardSalaryAdvanceToHR(requestId, 'current-user', comments);\r\n      } else {\r\n        return api.data.reviewSalaryAdvanceHR(requestId, 'current-user', 'eligible', comments);\r\n      }\r\n    },\r\n\r\n    rejectSalaryAdvanceRequest: async (requestId: number | string, role: 'operations' | 'hr', comments?: string): Promise<SalaryAdvanceRequest> => {\r\n      console.log(`Legacy reject method: ${role} rejecting salary advance request ${requestId}`);\r\n      \r\n      if (role === 'hr') {\r\n        return api.data.reviewSalaryAdvanceHR(requestId, 'current-user', 'not_eligible', comments);\r\n      } else {\r\n        return api.data.finalDecisionSalaryAdvance(requestId, 'current-user', 'rejected', comments);\r\n      }\r\n    },\r\n\r\n    // Disburse salary advance (creates payroll deduction)\r\n    disburseSalaryAdvance: async (requestId: number | string, disbursedBy?: string): Promise<SalaryAdvanceRequest> => {\r\n      try {\r\n        console.log(`Disbursing salary advance request ${requestId} by ${disbursedBy || 'Finance Team'}`);\r\n        \r\n        const response = await salaryAdvanceService.approveSalaryAdvanceRequest({\r\n          requestId: requestId.toString(),\r\n          approverId: disbursedBy || 'finance-team',\r\n          comments: 'Advance disbursed'\r\n        });\r\n        \r\n        const mapped = mapBackendSalaryAdvanceToFrontend(response);\r\n        mapped.status = 'disbursed';\r\n        mapped.currentStep = 'repayment';\r\n        mapped.disbursedDate = new Date().toISOString().split('T')[0];\r\n        mapped.disbursedBy = disbursedBy || 'Finance Team';\r\n        \r\n        return mapped;\r\n      } catch (error) {\r\n        console.error(\"disburseSalaryAdvance error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Get active salary advance deductions for payroll processing\r\n    getActiveAdvanceDeductions: async (employeeId?: string): Promise<AdvancePayrollIntegration[]> => {\r\n      try {\r\n        console.log(`Fetching active advance deductions for employee: ${employeeId || 'all'}`);\r\n        \r\n        const response = await salaryAdvanceService.getSalaryAdvanceRequests({\r\n          employeeId,\r\n          status: 'disbursed'\r\n        });\r\n        \r\n        const activeAdvances = response.data || [];\r\n        \r\n        return activeAdvances.map(req => ({\r\n          salaryAdvanceId: parseInt(req.id),\r\n          employeeId: req.employeeId,\r\n          isActive: true,\r\n          monthlyDeductionAmount: Math.round((req.requestedAmount || 0) / 6),\r\n          remainingBalance: req.requestedAmount || 0,\r\n          startDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n          priority: 1,\r\n          createdDate: req.createdAt,\r\n          lastUpdated: new Date().toISOString()\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"getActiveAdvanceDeductions error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Process payroll deduction for salary advance\r\n    processAdvanceDeduction: async (salaryAdvanceId: number | string, payrollPeriodId: string, deductedAmount: number): Promise<SalaryAdvanceRequest> => {\r\n      try {\r\n        console.log(`Processing advance deduction for ${salaryAdvanceId}: ${deductedAmount}`);\r\n        \r\n        // For now, we'll simulate the deduction processing\r\n        const response = await salaryAdvanceService.getSalaryAdvanceRequests({\r\n          employeeId: salaryAdvanceId.toString()\r\n        });\r\n        \r\n        const salaryAdvance = response.data?.[0];\r\n        if (!salaryAdvance) {\r\n          throw new Error('Salary advance not found');\r\n        }\r\n        \r\n        const mapped = mapBackendSalaryAdvanceToFrontend(salaryAdvance);\r\n        mapped.status = 'repaying';\r\n        mapped.currentStep = 'repayment';\r\n        mapped.repaymentDetails.totalDeducted = deductedAmount;\r\n        mapped.repaymentDetails.remainingBalance = (salaryAdvance.requestedAmount || 0) - deductedAmount;\r\n        mapped.repaymentDetails.deductionHistory = [\r\n          {\r\n            id: `deduction-${Date.now()}`,\r\n            payrollPeriodId,\r\n            deductionDate: new Date().toISOString().split('T')[0],\r\n            deductedAmount,\r\n            remainingBalance: (salaryAdvance.requestedAmount || 0) - deductedAmount,\r\n            payStubId: `paystub-${payrollPeriodId}-${salaryAdvance.employeeId}`,\r\n            status: 'processed'\r\n          }\r\n        ];\r\n        \r\n        return mapped;\r\n      } catch (error) {\r\n        console.error(\"processAdvanceDeduction error:\", error);\r\n        throw error;\r\n      }\r\n    }\r\n  },\r\n\r\n  // Payroll Management API\r\n  payroll: {\r\n    // Payroll Periods\r\n    getPayrollPeriods: async (filters?: { status?: string; year?: number }): Promise<PayrollPeriod[]> => {\r\n      try {\r\n        console.log(\"Fetching payroll periods:\", filters);\r\n        const response = await payrollService.getPayrollPeriods(filters);\r\n        return response.data || [];\r\n      } catch (error) {\r\n        console.error(\"getPayrollPeriods error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    createPayrollPeriod: async (periodData: Omit<PayrollPeriod, 'id' | 'createdBy' | 'createdDate'>): Promise<PayrollPeriod> => {\r\n      try {\r\n        console.log(\"Creating payroll period:\", periodData);\r\n        const response = await payrollService.createPayrollPeriod(periodData);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"createPayrollPeriod error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Employee Payroll Data\r\n    getPayrollEmployees: async (filters?: { department?: string; status?: string }): Promise<PayrollEmployee[]> => {\r\n      try {\r\n        console.log(\"Fetching payroll employees:\", filters);\r\n        const response = await payrollService.getPayrollEmployees();\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"getPayrollEmployees error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    updateEmployeeCompensation: async (employeeId: string, compensationData: Partial<PayrollEmployee['payrollInfo']>): Promise<PayrollEmployee> => {\r\n      try {\r\n        console.log(`Updating compensation for employee ${employeeId}:`, compensationData);\r\n        // Cleaned up: removed legacy mock response comment\r\n        const employees = await payrollService.getPayrollEmployees();\r\n        const employee = employees.find(emp => emp.id === employeeId);\r\n        if (!employee) {\r\n          throw new Error('Employee not found');\r\n        }\r\n        return employee;\r\n      } catch (error) {\r\n        console.error(\"updateEmployeeCompensation error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Time and Attendance\r\n    getTimeEntries: async (employeeId?: string, periodId?: string): Promise<TimeEntry[]> => {\r\n      try {\r\n        console.log(`Fetching time entries - Employee: ${employeeId}, Period: ${periodId}`);\r\n        const response = await payrollService.getTimeEntries();\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"getTimeEntries error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    approveTimeEntries: async (timeEntryIds: string[], approverId: string): Promise<TimeEntry[]> => {\r\n      try {\r\n        console.log(`Approving time entries:`, timeEntryIds, approverId);\r\n        // For now, return empty array since this method doesn't exist\r\n        return [];\r\n      } catch (error) {\r\n        console.error(\"approveTimeEntries error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Payroll Calculations\r\n    calculatePayroll: async (periodId: string, employeeIds?: string[]): Promise<PayrollRecord[]> => {\r\n      try {\r\n        console.log(`Calculating payroll - Period: ${periodId}, Employees:`, employeeIds);\r\n        const response = await payrollService.calculatePayroll({\r\n          periodId,\r\n          employeeIds,\r\n          includeStatutory: true,\r\n          includeDeductions: true\r\n        });\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"calculatePayroll error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Pay Stubs\r\n    getPayStubs: async (employeeId?: string, periodId?: string): Promise<PayStub[]> => {\r\n      try {\r\n        console.log(`Fetching pay stubs - Employee: ${employeeId}, Period: ${periodId}`);\r\n        const response = await payrollService.getPayStubs();\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"getPayStubs error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    generatePayStubs: async (periodId: string): Promise<PayStub[]> => {\r\n      try {\r\n        console.log(`Generating pay stubs for period ${periodId}`);\r\n        // For now, return empty array since this method doesn't exist\r\n        return [];\r\n      } catch (error) {\r\n        console.error(\"generatePayStubs error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Tax Management\r\n    getTaxTables: async (year?: number, jurisdiction?: string): Promise<TaxTable[]> => {\r\n      try {\r\n        console.log(`Fetching tax tables - Year: ${year}, Jurisdiction: ${jurisdiction}`);\r\n        const response = await payrollService.getTaxTables();\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"getTaxTables error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    updateTaxTable: async (taxTableId: string, taxTableData: Partial<TaxTable>): Promise<TaxTable> => {\r\n      try {\r\n        console.log(`Updating tax table ${taxTableId}:`, taxTableData);\r\n        const response = await payrollService.updateTaxTable(taxTableId, taxTableData);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"updateTaxTable error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Reports\r\n    generatePayrollReport: async (reportType: string, parameters: Record<string, string | number | boolean | Date>): Promise<PayrollReport> => {\r\n      try {\r\n        console.log(`Generating payroll report - Type: ${reportType}`, parameters);\r\n        const response = await payrollService.generatePayrollReport(reportType, parameters);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"generatePayrollReport error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    getPayrollReports: async (filters?: { type?: string; dateRange?: { start: string; end: string } }): Promise<PayrollReport[]> => {\r\n      try {\r\n        console.log(\"Fetching payroll reports:\", filters);\r\n        const response = await payrollService.getPayrollReports();\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"getPayrollReports error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Compliance\r\n    generateComplianceReport: async (reportType: string, period: string, year: number, month?: number): Promise<ComplianceReport> => {\r\n      try {\r\n        console.log(`Generating compliance report - Type: ${reportType}, Period: ${period}`);\r\n        const response = await payrollService.generateComplianceReport(reportType, period, year, month);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"generateComplianceReport error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Audit Logs\r\n    getPayrollAuditLogs: async (filters?: { entityType?: string; dateRange?: { start: string; end: string } }): Promise<PayrollAuditLog[]> => {\r\n      try {\r\n        console.log(\"Fetching payroll audit logs:\", filters);\r\n        const response = await payrollService.getPayrollAuditLogs();\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"getPayrollAuditLogs error:\", error);\r\n        return [];\r\n      }\r\n    },\r\n\r\n    // Settings\r\n    getPayrollSettings: async (): Promise<PayrollSettings> => {\r\n      try {\r\n        console.log(\"Fetching payroll settings\");\r\n        const response = await payrollService.getPayrollSettings();\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"getPayrollSettings error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    updatePayrollSettings: async (settings: Partial<PayrollSettings>): Promise<PayrollSettings> => {\r\n      try {\r\n        console.log(\"Updating payroll settings:\", settings);\r\n        const response = await payrollService.updatePayrollSettings(settings);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(\"updatePayrollSettings error:\", error);\r\n        throw error;\r\n      }\r\n    }\r\n  },\r\n\r\n  // Export methods\r\n  export: {\r\n    exportToExcel: async (dataType: string, filters: any): Promise<string> => {\r\n      try {\r\n        console.log(`Exporting ${dataType} to Excel with filters:`, filters);\r\n        return `export-${dataType}-${Date.now()}.xlsx`;\r\n      } catch (error) {\r\n        console.error(\"exportToExcel error:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    exportToCsv: async (dataType: string, filters: any): Promise<string> => {\r\n      try {\r\n        console.log(`Exporting ${dataType} to CSV with filters:`, filters);\r\n        return `export-${dataType}-${Date.now()}.csv`;\r\n      } catch (error) {\r\n        console.error(\"exportToCsv error:\", error);\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Export enhanced API as default for backward compatibility\r\nexport default api;\r\nexport { api as enhancedApi };\r\n\r\n// Re-export SalaryAdvanceRequest type for components that import it directly\r\nexport type { SalaryAdvanceRequest } from \"@/types/types\";\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\workflowAutomation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\services\\workflowEngine.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,55],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { LeaveRequest, SalaryAdvanceRequest, User } from '@/types/types';\r\n\r\nexport interface WorkflowStep {\r\n  id: string;\r\n  name: string;\r\n  role: 'employee' | 'operations' | 'hr' | 'admin';\r\n  action: 'submit' | 'approve' | 'reject' | 'disburse';\r\n  nextStep?: string;\r\n  conditions?: (request: any) => boolean;\r\n}\r\n\r\nexport interface WorkflowInstance {\r\n  id: string;\r\n  type: 'leave' | 'salary_advance';\r\n  requestId: number;\r\n  currentStep: string;\r\n  status: string;\r\n  assignedTo?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  history: WorkflowHistoryEntry[];\r\n}\r\n\r\nexport interface WorkflowHistoryEntry {\r\n  stepId: string;\r\n  action: string;\r\n  performedBy: string;\r\n  performedAt: string;\r\n  comments?: string;\r\n  previousStatus: string;\r\n  newStatus: string;\r\n}\r\n\r\nexport interface NotificationEvent {\r\n  id: string;\r\n  type: 'assignment' | 'approval' | 'rejection' | 'completion';\r\n  workflowId: string;\r\n  recipientRole: string;\r\n  recipientId?: string;\r\n  title: string;\r\n  message: string;\r\n  createdAt: string;\r\n  read: boolean;\r\n}\r\n\r\n// Leave Request Workflow Definition\r\nexport const LEAVE_WORKFLOW: WorkflowStep[] = [\r\n  {\r\n    id: 'submit',\r\n    name: 'Submit Request',\r\n    role: 'employee',\r\n    action: 'submit',\r\n    nextStep: 'ops_review'\r\n  },\r\n  {\r\n    id: 'ops_review',\r\n    name: 'Operations Review & Decision',\r\n    role: 'operations',\r\n    action: 'approve', // Operations approves or rejects\r\n    // No nextStep: workflow ends here\r\n  }\r\n];\r\n\r\n// Salary Advance Workflow Definition\r\nexport const SALARY_ADVANCE_WORKFLOW: WorkflowStep[] = [\r\n  {\r\n    id: 'submit',\r\n    name: 'Submit Request',\r\n    role: 'employee',\r\n    action: 'submit',\r\n    nextStep: 'ops_forward'\r\n  },\r\n  {\r\n    id: 'ops_forward',\r\n    name: 'Operations Forward',\r\n    role: 'operations',\r\n    action: 'approve', // Operations forwards (doesn't approve/reject)\r\n    nextStep: 'hr_review'\r\n  },\r\n  {\r\n    id: 'hr_review',\r\n    name: 'HR Review & Decision',\r\n    role: 'hr',\r\n    action: 'approve', // HR makes the final decision\r\n    nextStep: 'disburse'\r\n  },\r\n  {\r\n    id: 'disburse',\r\n    name: 'Disbursement',\r\n    role: 'hr',\r\n    action: 'disburse'\r\n  }\r\n];\r\n\r\nexport class WorkflowEngine {\r\n  private workflows: Map<string, WorkflowInstance> = new Map();\r\n  private notifications: NotificationEvent[] = [];\r\n\r\n  // Create a new workflow instance\r\n  createWorkflow(\r\n    type: 'leave' | 'salary_advance',\r\n    requestId: number,\r\n    submittedBy: string\r\n  ): WorkflowInstance {\r\n    const workflowId = `${type}_${requestId}_${Date.now()}`;\r\n    const workflow: WorkflowInstance = {\r\n      id: workflowId,\r\n      type,\r\n      requestId,\r\n      currentStep: 'submit',\r\n      status: type === 'leave' ? 'pending_ops' : 'pending_ops',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      history: [{\r\n        stepId: 'submit',\r\n        action: 'submit',\r\n        performedBy: submittedBy,\r\n        performedAt: new Date().toISOString(),\r\n        previousStatus: 'draft',\r\n        newStatus: type === 'leave' ? 'pending_ops' : 'pending_ops'\r\n      }]\r\n    };\r\n\r\n    this.workflows.set(workflowId, workflow);\r\n    this.assignToNextRole(workflow);\r\n    return workflow;\r\n  }\r\n\r\n  // Progress workflow to next step\r\n  progressWorkflow(\r\n    workflowId: string,\r\n    action: 'approve' | 'reject',\r\n    performedBy: string,\r\n    comments?: string\r\n  ): WorkflowInstance | null {\r\n    const workflow = this.workflows.get(workflowId);\r\n    if (!workflow) return null;\r\n\r\n    const currentStep = this.getCurrentStep(workflow);\r\n    if (!currentStep) return null;\r\n\r\n    const previousStatus = workflow.status;\r\n    let newStatus = workflow.status;\r\n    let nextStepId: string | undefined;\r\n\r\n    if (action === 'approve') {\r\n      nextStepId = this.getNextStep(workflow, currentStep);\r\n      newStatus = this.getStatusForStep(workflow.type, nextStepId || 'completed');\r\n    } else {\r\n      newStatus = workflow.type === 'leave' ? 'rejected' : 'rejected';\r\n    }\r\n\r\n    // Update workflow\r\n    workflow.status = newStatus;\r\n    workflow.currentStep = nextStepId || 'completed';\r\n    workflow.updatedAt = new Date().toISOString();\r\n    \r\n    // Add history entry\r\n    workflow.history.push({\r\n      stepId: currentStep.id,\r\n      action,\r\n      performedBy,\r\n      performedAt: new Date().toISOString(),\r\n      comments,\r\n      previousStatus,\r\n      newStatus\r\n    });\r\n\r\n    // Assign to next role if workflow continues\r\n    if (nextStepId && action === 'approve') {\r\n      this.assignToNextRole(workflow);\r\n    }\r\n\r\n    // Generate notifications\r\n    this.generateNotifications(workflow, action, performedBy);\r\n\r\n    return workflow;\r\n  }\r\n\r\n  // Forward workflow to next step (for operations managers)\r\n  forwardWorkflow(\r\n    workflowId: string,\r\n    performedBy: string,\r\n    comments?: string\r\n  ): WorkflowInstance | null {\r\n    const workflow = this.workflows.get(workflowId);\r\n    if (!workflow) return null;\r\n\r\n    const currentStep = this.getCurrentStep(workflow);\r\n    if (!currentStep || currentStep.role !== 'operations') return null;\r\n\r\n    const previousStatus = workflow.status;\r\n    const nextStepId = this.getNextStep(workflow, currentStep);\r\n    const newStatus = this.getStatusForStep(workflow.type, nextStepId || 'completed');\r\n\r\n    // Update workflow\r\n    workflow.status = newStatus;\r\n    workflow.currentStep = nextStepId || 'completed';\r\n    workflow.updatedAt = new Date().toISOString();\r\n    \r\n    // Add history entry\r\n    workflow.history.push({\r\n      stepId: currentStep.id,\r\n      action: 'forward',\r\n      performedBy,\r\n      performedAt: new Date().toISOString(),\r\n      comments,\r\n      previousStatus,\r\n      newStatus\r\n    });\r\n\r\n    // Assign to next role if workflow continues\r\n    if (nextStepId) {\r\n      this.assignToNextRole(workflow);\r\n    }\r\n\r\n    // Generate notifications for forwarding\r\n    this.generateForwardNotifications(workflow, performedBy);\r\n\r\n    return workflow;\r\n  }\r\n\r\n  // Get current workflow step\r\n  private getCurrentStep(workflow: WorkflowInstance): WorkflowStep | null {\r\n    const workflowDef = workflow.type === 'leave' ? LEAVE_WORKFLOW : SALARY_ADVANCE_WORKFLOW;\r\n    return workflowDef.find(step => step.id === workflow.currentStep) || null;\r\n  }\r\n\r\n  // Get next step ID in the workflow\r\n  private getNextStep(workflow: WorkflowInstance, currentStep: WorkflowStep): string | undefined {\r\n    const workflowDef = workflow.type === 'leave' ? LEAVE_WORKFLOW : SALARY_ADVANCE_WORKFLOW;\r\n    const currentIndex = workflowDef.findIndex(step => step.id === currentStep.id);\r\n    if (currentIndex === -1 || currentIndex === workflowDef.length - 1) return undefined;\r\n    return workflowDef[currentIndex + 1].id;\r\n  }\r\n\r\n  // Get status string for a given step, based on workflow type\r\n  private getStatusForStep(type: 'leave' | 'salary_advance', stepId: string): string {\r\n    if (type === 'leave') {\r\n      // Only two steps: submit -> ops_review (pending_ops), then completed (approved/rejected)\r\n      switch (stepId) {\r\n        case 'ops_review':\r\n          return 'pending_ops';\r\n        case 'completed':\r\n          return 'approved';\r\n        default:\r\n          return 'pending_ops';\r\n      }\r\n    } else {\r\n      // Salary advance logic unchanged\r\n      switch (stepId) {\r\n        case 'ops_forward': return 'pending_ops';\r\n        case 'hr_review': return 'pending_hr';\r\n        case 'disburse': return 'approved';\r\n        case 'completed': return 'disbursed';\r\n        default: return 'pending_ops';\r\n      }\r\n    }\r\n  }\r\n\r\n  // Assign workflow to the next role based on current step\r\n  private assignToNextRole(workflow: WorkflowInstance) {\r\n    const currentStep = this.getCurrentStep(workflow);\r\n    if (!currentStep) return;\r\n\r\n    if (workflow.type === 'leave') {\r\n      // Only assign to operations for leave\r\n      workflow.assignedTo = currentStep.role === 'employee' ? 'operations' : undefined;\r\n    } else {\r\n      // Salary advance logic unchanged\r\n      if (currentStep.role === 'employee') {\r\n        workflow.assignedTo = 'operations';\r\n      } else if (currentStep.role === 'operations') {\r\n        workflow.assignedTo = 'hr';\r\n      } else if (currentStep.role === 'hr') {\r\n        workflow.assignedTo = 'admin';\r\n      }\r\n    }\r\n  }\r\n\r\n  // Generate notifications for workflow actions\r\n  private generateNotifications(workflow: WorkflowInstance, action: string, performedBy: string) {\r\n    const currentStep = this.getCurrentStep(workflow);\r\n    if (!currentStep) return;\r\n\r\n    let notification: NotificationEvent | null = null;\r\n    if (action === 'approve') {\r\n      notification = {\r\n        id: `${workflow.id}_approve_${Date.now()}`,\r\n        type: 'approval',\r\n        workflowId: workflow.id,\r\n        recipientRole: currentStep.role,\r\n        title: `Workflow Approved`,\r\n        message: `Your workflow has been approved by ${performedBy}.`,\r\n        createdAt: new Date().toISOString(),\r\n        read: false\r\n      };\r\n    } else if (action === 'reject') {\r\n      notification = {\r\n        id: `${workflow.id}_reject_${Date.now()}`,\r\n        type: 'rejection',\r\n        workflowId: workflow.id,\r\n        recipientRole: currentStep.role,\r\n        title: `Workflow Rejected`,\r\n        message: `Your workflow has been rejected by ${performedBy}.`,\r\n        createdAt: new Date().toISOString(),\r\n        read: false\r\n      };\r\n    }\r\n\r\n    if (notification) {\r\n      this.notifications.push(notification);\r\n    }\r\n  }\r\n\r\n  // Generate notifications for workflow forwarding\r\n  private generateForwardNotifications(workflow: WorkflowInstance, performedBy: string) {\r\n    const currentStep = this.getCurrentStep(workflow);\r\n    if (!currentStep) return;\r\n\r\n    const notification: NotificationEvent = {\r\n      id: `${workflow.id}_forward_${Date.now()}`,\r\n      type: 'assignment',\r\n      workflowId: workflow.id,\r\n      recipientRole: currentStep.role,\r\n      title: `Workflow Forwarded`,\r\n      message: `The workflow has been forwarded to you by ${performedBy}.`,\r\n      createdAt: new Date().toISOString(),\r\n      read: false\r\n    };\r\n\r\n    this.notifications.push(notification);\r\n  }\r\n\r\n  // Get notifications for a given role\r\n  getNotificationsByRole(role: string): NotificationEvent[] {\r\n    return this.notifications.filter(notif => notif.recipientRole === role);\r\n  }\r\n}\r\n\r\n// Export singleton instance for use throughout the app\r\nexport const workflowEngine = new WorkflowEngine();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\types\\branch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\types\\department.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\types\\payroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\types\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\__trash__\\kenyanMockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\__trash__\\mock-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\api-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\currency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\integrationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\mock-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\utils\\permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\AI\\HRMS APP\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
